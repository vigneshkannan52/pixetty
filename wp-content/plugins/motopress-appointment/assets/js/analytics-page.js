(function (e$1, require$$0, mpaData$1, WPAPI, components$1) {
	'use strict';

	function _interopNamespaceDefault(e) {
		var n = Object.create(null);
		if (e) {
			Object.keys(e).forEach(function (k) {
				if (k !== 'default') {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		}
		n.default = e;
		return Object.freeze(n);
	}

	var e__namespace = /*#__PURE__*/_interopNamespaceDefault(e$1);
	var require$$0__namespace = /*#__PURE__*/_interopNamespaceDefault(require$$0);

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	var propTypes$2 = {exports: {}};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret$1 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret = ReactPropTypesSecret_1;

	function emptyFunction() {}
	function emptyFunctionWithReset() {}
	emptyFunctionWithReset.resetWarningCache = emptyFunction;

	var factoryWithThrowingShims = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  }  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  }  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bigint: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,

	    checkPropTypes: emptyFunctionWithReset,
	    resetWarningCache: emptyFunction
	  };

	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  propTypes$2.exports = factoryWithThrowingShims();
	}

	var propTypesExports = propTypes$2.exports;
	var PropTypes = /*@__PURE__*/getDefaultExportFromCjs(propTypesExports);

	var classnames = {exports: {}};

	/*!
		Copyright (c) 2018 Jed Watson.
		Licensed under the MIT License (MIT), see
		http://jedwatson.github.io/classnames
	*/

	(function (module) {
		/* global define */

		(function () {

			var hasOwn = {}.hasOwnProperty;

			function classNames() {
				var classes = [];

				for (var i = 0; i < arguments.length; i++) {
					var arg = arguments[i];
					if (!arg) continue;

					var argType = typeof arg;

					if (argType === 'string' || argType === 'number') {
						classes.push(arg);
					} else if (Array.isArray(arg)) {
						if (arg.length) {
							var inner = classNames.apply(null, arg);
							if (inner) {
								classes.push(inner);
							}
						}
					} else if (argType === 'object') {
						if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
							classes.push(arg.toString());
							continue;
						}

						for (var key in arg) {
							if (hasOwn.call(arg, key) && arg[key]) {
								classes.push(key);
							}
						}
					}
				}

				return classes.join(' ');
			}

			if (module.exports) {
				classNames.default = classNames;
				module.exports = classNames;
			} else {
				window.classNames = classNames;
			}
		}()); 
	} (classnames));

	var classnamesExports = classnames.exports;
	var classNames$1 = /*@__PURE__*/getDefaultExportFromCjs(classnamesExports);

	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  }, _typeof(obj);
	}

	function requiredArgs(required, args) {
	  if (args.length < required) {
	    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
	  }
	}

	/**
	 * @name isDate
	 * @category Common Helpers
	 * @summary Is the given value a date?
	 *
	 * @description
	 * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
	 *
	 * @param {*} value - the value to check
	 * @returns {boolean} true if the given value is a date
	 * @throws {TypeError} 1 arguments required
	 *
	 * @example
	 * // For a valid date:
	 * const result = isDate(new Date())
	 * //=> true
	 *
	 * @example
	 * // For an invalid date:
	 * const result = isDate(new Date(NaN))
	 * //=> true
	 *
	 * @example
	 * // For some value:
	 * const result = isDate('2014-02-31')
	 * //=> false
	 *
	 * @example
	 * // For an object:
	 * const result = isDate({})
	 * //=> false
	 */
	function isDate(value) {
	  requiredArgs(1, arguments);
	  return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';
	}

	/**
	 * @name toDate
	 * @category Common Helpers
	 * @summary Convert the given argument to an instance of Date.
	 *
	 * @description
	 * Convert the given argument to an instance of Date.
	 *
	 * If the argument is an instance of Date, the function returns its clone.
	 *
	 * If the argument is a number, it is treated as a timestamp.
	 *
	 * If the argument is none of the above, the function returns Invalid Date.
	 *
	 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
	 *
	 * @param {Date|Number} argument - the value to convert
	 * @returns {Date} the parsed date in the local time zone
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // Clone the date:
	 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
	 * //=> Tue Feb 11 2014 11:30:30
	 *
	 * @example
	 * // Convert the timestamp to date:
	 * const result = toDate(1392098430000)
	 * //=> Tue Feb 11 2014 11:30:30
	 */
	function toDate(argument) {
	  requiredArgs(1, arguments);
	  var argStr = Object.prototype.toString.call(argument);

	  // Clone the date
	  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {
	    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
	    return new Date(argument.getTime());
	  } else if (typeof argument === 'number' || argStr === '[object Number]') {
	    return new Date(argument);
	  } else {
	    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
	      // eslint-disable-next-line no-console
	      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
	      // eslint-disable-next-line no-console
	      console.warn(new Error().stack);
	    }
	    return new Date(NaN);
	  }
	}

	/**
	 * @name isValid
	 * @category Common Helpers
	 * @summary Is the given date valid?
	 *
	 * @description
	 * Returns false if argument is Invalid Date and true otherwise.
	 * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
	 * Invalid Date is a Date, whose time value is NaN.
	 *
	 * Time value of Date: http://es5.github.io/#x15.9.1.1
	 *
	 * @param {*} date - the date to check
	 * @returns {Boolean} the date is valid
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // For the valid date:
	 * const result = isValid(new Date(2014, 1, 31))
	 * //=> true
	 *
	 * @example
	 * // For the value, convertable into a date:
	 * const result = isValid(1393804800000)
	 * //=> true
	 *
	 * @example
	 * // For the invalid date:
	 * const result = isValid(new Date(''))
	 * //=> false
	 */
	function isValid(dirtyDate) {
	  requiredArgs(1, arguments);
	  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
	    return false;
	  }
	  var date = toDate(dirtyDate);
	  return !isNaN(Number(date));
	}

	function toInteger(dirtyNumber) {
	  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
	    return NaN;
	  }
	  var number = Number(dirtyNumber);
	  if (isNaN(number)) {
	    return number;
	  }
	  return number < 0 ? Math.ceil(number) : Math.floor(number);
	}

	/**
	 * @name addMilliseconds
	 * @category Millisecond Helpers
	 * @summary Add the specified number of milliseconds to the given date.
	 *
	 * @description
	 * Add the specified number of milliseconds to the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
	 * @returns {Date} the new date with the milliseconds added
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
	 * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
	 * //=> Thu Jul 10 2014 12:45:30.750
	 */
	function addMilliseconds(dirtyDate, dirtyAmount) {
	  requiredArgs(2, arguments);
	  var timestamp = toDate(dirtyDate).getTime();
	  var amount = toInteger(dirtyAmount);
	  return new Date(timestamp + amount);
	}

	/**
	 * @name subMilliseconds
	 * @category Millisecond Helpers
	 * @summary Subtract the specified number of milliseconds from the given date.
	 *
	 * @description
	 * Subtract the specified number of milliseconds from the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
	 * @returns {Date} the new date with the milliseconds subtracted
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
	 * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
	 * //=> Thu Jul 10 2014 12:45:29.250
	 */
	function subMilliseconds(dirtyDate, dirtyAmount) {
	  requiredArgs(2, arguments);
	  var amount = toInteger(dirtyAmount);
	  return addMilliseconds(dirtyDate, -amount);
	}

	var MILLISECONDS_IN_DAY$1 = 86400000;
	function getUTCDayOfYear(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var timestamp = date.getTime();
	  date.setUTCMonth(0, 1);
	  date.setUTCHours(0, 0, 0, 0);
	  var startOfYearTimestamp = date.getTime();
	  var difference = timestamp - startOfYearTimestamp;
	  return Math.floor(difference / MILLISECONDS_IN_DAY$1) + 1;
	}

	function startOfUTCISOWeek(dirtyDate) {
	  requiredArgs(1, arguments);
	  var weekStartsOn = 1;
	  var date = toDate(dirtyDate);
	  var day = date.getUTCDay();
	  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
	  date.setUTCDate(date.getUTCDate() - diff);
	  date.setUTCHours(0, 0, 0, 0);
	  return date;
	}

	function getUTCISOWeekYear(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var year = date.getUTCFullYear();
	  var fourthOfJanuaryOfNextYear = new Date(0);
	  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
	  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
	  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
	  var fourthOfJanuaryOfThisYear = new Date(0);
	  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
	  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
	  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
	  if (date.getTime() >= startOfNextYear.getTime()) {
	    return year + 1;
	  } else if (date.getTime() >= startOfThisYear.getTime()) {
	    return year;
	  } else {
	    return year - 1;
	  }
	}

	function startOfUTCISOWeekYear(dirtyDate) {
	  requiredArgs(1, arguments);
	  var year = getUTCISOWeekYear(dirtyDate);
	  var fourthOfJanuary = new Date(0);
	  fourthOfJanuary.setUTCFullYear(year, 0, 4);
	  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
	  var date = startOfUTCISOWeek(fourthOfJanuary);
	  return date;
	}

	var MILLISECONDS_IN_WEEK$2 = 604800000;
	function getUTCISOWeek(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();

	  // Round the number of days to the nearest integer
	  // because the number of milliseconds in a week is not constant
	  // (e.g. it's different in the week of the daylight saving time clock shift)
	  return Math.round(diff / MILLISECONDS_IN_WEEK$2) + 1;
	}

	var defaultOptions = {};
	function getDefaultOptions() {
	  return defaultOptions;
	}

	function startOfUTCWeek(dirtyDate, options) {
	  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
	  requiredArgs(1, arguments);
	  var defaultOptions = getDefaultOptions();
	  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);

	  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
	  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
	    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
	  }
	  var date = toDate(dirtyDate);
	  var day = date.getUTCDay();
	  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
	  date.setUTCDate(date.getUTCDate() - diff);
	  date.setUTCHours(0, 0, 0, 0);
	  return date;
	}

	function getUTCWeekYear(dirtyDate, options) {
	  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var year = date.getUTCFullYear();
	  var defaultOptions = getDefaultOptions();
	  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);

	  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
	  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
	    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
	  }
	  var firstWeekOfNextYear = new Date(0);
	  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
	  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
	  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
	  var firstWeekOfThisYear = new Date(0);
	  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
	  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
	  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
	  if (date.getTime() >= startOfNextYear.getTime()) {
	    return year + 1;
	  } else if (date.getTime() >= startOfThisYear.getTime()) {
	    return year;
	  } else {
	    return year - 1;
	  }
	}

	function startOfUTCWeekYear(dirtyDate, options) {
	  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
	  requiredArgs(1, arguments);
	  var defaultOptions = getDefaultOptions();
	  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
	  var year = getUTCWeekYear(dirtyDate, options);
	  var firstWeek = new Date(0);
	  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
	  firstWeek.setUTCHours(0, 0, 0, 0);
	  var date = startOfUTCWeek(firstWeek, options);
	  return date;
	}

	var MILLISECONDS_IN_WEEK$1 = 604800000;
	function getUTCWeek(dirtyDate, options) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();

	  // Round the number of days to the nearest integer
	  // because the number of milliseconds in a week is not constant
	  // (e.g. it's different in the week of the daylight saving time clock shift)
	  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
	}

	function addLeadingZeros(number, targetLength) {
	  var sign = number < 0 ? '-' : '';
	  var output = Math.abs(number).toString();
	  while (output.length < targetLength) {
	    output = '0' + output;
	  }
	  return sign + output;
	}

	/*
	 * |     | Unit                           |     | Unit                           |
	 * |-----|--------------------------------|-----|--------------------------------|
	 * |  a  | AM, PM                         |  A* |                                |
	 * |  d  | Day of month                   |  D  |                                |
	 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
	 * |  m  | Minute                         |  M  | Month                          |
	 * |  s  | Second                         |  S  | Fraction of second             |
	 * |  y  | Year (abs)                     |  Y  |                                |
	 *
	 * Letters marked by * are not implemented but reserved by Unicode standard.
	 */
	var formatters$3 = {
	  // Year
	  y: function y(date, token) {
	    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
	    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
	    // |----------|-------|----|-------|-------|-------|
	    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
	    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
	    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
	    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
	    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |

	    var signedYear = date.getUTCFullYear();
	    // Returns 1 for 1 BC (which is year 0 in JavaScript)
	    var year = signedYear > 0 ? signedYear : 1 - signedYear;
	    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
	  },
	  // Month
	  M: function M(date, token) {
	    var month = date.getUTCMonth();
	    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
	  },
	  // Day of the month
	  d: function d(date, token) {
	    return addLeadingZeros(date.getUTCDate(), token.length);
	  },
	  // AM or PM
	  a: function a(date, token) {
	    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';
	    switch (token) {
	      case 'a':
	      case 'aa':
	        return dayPeriodEnumValue.toUpperCase();
	      case 'aaa':
	        return dayPeriodEnumValue;
	      case 'aaaaa':
	        return dayPeriodEnumValue[0];
	      case 'aaaa':
	      default:
	        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
	    }
	  },
	  // Hour [1-12]
	  h: function h(date, token) {
	    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
	  },
	  // Hour [0-23]
	  H: function H(date, token) {
	    return addLeadingZeros(date.getUTCHours(), token.length);
	  },
	  // Minute
	  m: function m(date, token) {
	    return addLeadingZeros(date.getUTCMinutes(), token.length);
	  },
	  // Second
	  s: function s(date, token) {
	    return addLeadingZeros(date.getUTCSeconds(), token.length);
	  },
	  // Fraction of second
	  S: function S(date, token) {
	    var numberOfDigits = token.length;
	    var milliseconds = date.getUTCMilliseconds();
	    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
	    return addLeadingZeros(fractionalSeconds, token.length);
	  }
	};
	var lightFormatters = formatters$3;

	var dayPeriodEnum = {
	  am: 'am',
	  pm: 'pm',
	  midnight: 'midnight',
	  noon: 'noon',
	  morning: 'morning',
	  afternoon: 'afternoon',
	  evening: 'evening',
	  night: 'night'
	};
	/*
	 * |     | Unit                           |     | Unit                           |
	 * |-----|--------------------------------|-----|--------------------------------|
	 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
	 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
	 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
	 * |  d  | Day of month                   |  D  | Day of year                    |
	 * |  e  | Local day of week              |  E  | Day of week                    |
	 * |  f  |                                |  F* | Day of week in month           |
	 * |  g* | Modified Julian day            |  G  | Era                            |
	 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
	 * |  i! | ISO day of week                |  I! | ISO week of year               |
	 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
	 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
	 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
	 * |  m  | Minute                         |  M  | Month                          |
	 * |  n  |                                |  N  |                                |
	 * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
	 * |  p! | Long localized time            |  P! | Long localized date            |
	 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
	 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
	 * |  s  | Second                         |  S  | Fraction of second             |
	 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
	 * |  u  | Extended year                  |  U* | Cyclic year                    |
	 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
	 * |  w  | Local week of year             |  W* | Week of month                  |
	 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
	 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
	 * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
	 *
	 * Letters marked by * are not implemented but reserved by Unicode standard.
	 *
	 * Letters marked by ! are non-standard, but implemented by date-fns:
	 * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
	 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
	 *   i.e. 7 for Sunday, 1 for Monday, etc.
	 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
	 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
	 *   `R` is supposed to be used in conjunction with `I` and `i`
	 *   for universal ISO week-numbering date, whereas
	 *   `Y` is supposed to be used in conjunction with `w` and `e`
	 *   for week-numbering date specific to the locale.
	 * - `P` is long localized date format
	 * - `p` is long localized time format
	 */

	var formatters$1 = {
	  // Era
	  G: function G(date, token, localize) {
	    var era = date.getUTCFullYear() > 0 ? 1 : 0;
	    switch (token) {
	      // AD, BC
	      case 'G':
	      case 'GG':
	      case 'GGG':
	        return localize.era(era, {
	          width: 'abbreviated'
	        });
	      // A, B
	      case 'GGGGG':
	        return localize.era(era, {
	          width: 'narrow'
	        });
	      // Anno Domini, Before Christ
	      case 'GGGG':
	      default:
	        return localize.era(era, {
	          width: 'wide'
	        });
	    }
	  },
	  // Year
	  y: function y(date, token, localize) {
	    // Ordinal number
	    if (token === 'yo') {
	      var signedYear = date.getUTCFullYear();
	      // Returns 1 for 1 BC (which is year 0 in JavaScript)
	      var year = signedYear > 0 ? signedYear : 1 - signedYear;
	      return localize.ordinalNumber(year, {
	        unit: 'year'
	      });
	    }
	    return lightFormatters.y(date, token);
	  },
	  // Local week-numbering year
	  Y: function Y(date, token, localize, options) {
	    var signedWeekYear = getUTCWeekYear(date, options);
	    // Returns 1 for 1 BC (which is year 0 in JavaScript)
	    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;

	    // Two digit year
	    if (token === 'YY') {
	      var twoDigitYear = weekYear % 100;
	      return addLeadingZeros(twoDigitYear, 2);
	    }

	    // Ordinal number
	    if (token === 'Yo') {
	      return localize.ordinalNumber(weekYear, {
	        unit: 'year'
	      });
	    }

	    // Padding
	    return addLeadingZeros(weekYear, token.length);
	  },
	  // ISO week-numbering year
	  R: function R(date, token) {
	    var isoWeekYear = getUTCISOWeekYear(date);

	    // Padding
	    return addLeadingZeros(isoWeekYear, token.length);
	  },
	  // Extended year. This is a single number designating the year of this calendar system.
	  // The main difference between `y` and `u` localizers are B.C. years:
	  // | Year | `y` | `u` |
	  // |------|-----|-----|
	  // | AC 1 |   1 |   1 |
	  // | BC 1 |   1 |   0 |
	  // | BC 2 |   2 |  -1 |
	  // Also `yy` always returns the last two digits of a year,
	  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
	  u: function u(date, token) {
	    var year = date.getUTCFullYear();
	    return addLeadingZeros(year, token.length);
	  },
	  // Quarter
	  Q: function Q(date, token, localize) {
	    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
	    switch (token) {
	      // 1, 2, 3, 4
	      case 'Q':
	        return String(quarter);
	      // 01, 02, 03, 04
	      case 'QQ':
	        return addLeadingZeros(quarter, 2);
	      // 1st, 2nd, 3rd, 4th
	      case 'Qo':
	        return localize.ordinalNumber(quarter, {
	          unit: 'quarter'
	        });
	      // Q1, Q2, Q3, Q4
	      case 'QQQ':
	        return localize.quarter(quarter, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
	      case 'QQQQQ':
	        return localize.quarter(quarter, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      // 1st quarter, 2nd quarter, ...
	      case 'QQQQ':
	      default:
	        return localize.quarter(quarter, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // Stand-alone quarter
	  q: function q(date, token, localize) {
	    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
	    switch (token) {
	      // 1, 2, 3, 4
	      case 'q':
	        return String(quarter);
	      // 01, 02, 03, 04
	      case 'qq':
	        return addLeadingZeros(quarter, 2);
	      // 1st, 2nd, 3rd, 4th
	      case 'qo':
	        return localize.ordinalNumber(quarter, {
	          unit: 'quarter'
	        });
	      // Q1, Q2, Q3, Q4
	      case 'qqq':
	        return localize.quarter(quarter, {
	          width: 'abbreviated',
	          context: 'standalone'
	        });
	      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
	      case 'qqqqq':
	        return localize.quarter(quarter, {
	          width: 'narrow',
	          context: 'standalone'
	        });
	      // 1st quarter, 2nd quarter, ...
	      case 'qqqq':
	      default:
	        return localize.quarter(quarter, {
	          width: 'wide',
	          context: 'standalone'
	        });
	    }
	  },
	  // Month
	  M: function M(date, token, localize) {
	    var month = date.getUTCMonth();
	    switch (token) {
	      case 'M':
	      case 'MM':
	        return lightFormatters.M(date, token);
	      // 1st, 2nd, ..., 12th
	      case 'Mo':
	        return localize.ordinalNumber(month + 1, {
	          unit: 'month'
	        });
	      // Jan, Feb, ..., Dec
	      case 'MMM':
	        return localize.month(month, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      // J, F, ..., D
	      case 'MMMMM':
	        return localize.month(month, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      // January, February, ..., December
	      case 'MMMM':
	      default:
	        return localize.month(month, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // Stand-alone month
	  L: function L(date, token, localize) {
	    var month = date.getUTCMonth();
	    switch (token) {
	      // 1, 2, ..., 12
	      case 'L':
	        return String(month + 1);
	      // 01, 02, ..., 12
	      case 'LL':
	        return addLeadingZeros(month + 1, 2);
	      // 1st, 2nd, ..., 12th
	      case 'Lo':
	        return localize.ordinalNumber(month + 1, {
	          unit: 'month'
	        });
	      // Jan, Feb, ..., Dec
	      case 'LLL':
	        return localize.month(month, {
	          width: 'abbreviated',
	          context: 'standalone'
	        });
	      // J, F, ..., D
	      case 'LLLLL':
	        return localize.month(month, {
	          width: 'narrow',
	          context: 'standalone'
	        });
	      // January, February, ..., December
	      case 'LLLL':
	      default:
	        return localize.month(month, {
	          width: 'wide',
	          context: 'standalone'
	        });
	    }
	  },
	  // Local week of year
	  w: function w(date, token, localize, options) {
	    var week = getUTCWeek(date, options);
	    if (token === 'wo') {
	      return localize.ordinalNumber(week, {
	        unit: 'week'
	      });
	    }
	    return addLeadingZeros(week, token.length);
	  },
	  // ISO week of year
	  I: function I(date, token, localize) {
	    var isoWeek = getUTCISOWeek(date);
	    if (token === 'Io') {
	      return localize.ordinalNumber(isoWeek, {
	        unit: 'week'
	      });
	    }
	    return addLeadingZeros(isoWeek, token.length);
	  },
	  // Day of the month
	  d: function d(date, token, localize) {
	    if (token === 'do') {
	      return localize.ordinalNumber(date.getUTCDate(), {
	        unit: 'date'
	      });
	    }
	    return lightFormatters.d(date, token);
	  },
	  // Day of year
	  D: function D(date, token, localize) {
	    var dayOfYear = getUTCDayOfYear(date);
	    if (token === 'Do') {
	      return localize.ordinalNumber(dayOfYear, {
	        unit: 'dayOfYear'
	      });
	    }
	    return addLeadingZeros(dayOfYear, token.length);
	  },
	  // Day of week
	  E: function E(date, token, localize) {
	    var dayOfWeek = date.getUTCDay();
	    switch (token) {
	      // Tue
	      case 'E':
	      case 'EE':
	      case 'EEE':
	        return localize.day(dayOfWeek, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      // T
	      case 'EEEEE':
	        return localize.day(dayOfWeek, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      // Tu
	      case 'EEEEEE':
	        return localize.day(dayOfWeek, {
	          width: 'short',
	          context: 'formatting'
	        });
	      // Tuesday
	      case 'EEEE':
	      default:
	        return localize.day(dayOfWeek, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // Local day of week
	  e: function e(date, token, localize, options) {
	    var dayOfWeek = date.getUTCDay();
	    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
	    switch (token) {
	      // Numerical value (Nth day of week with current locale or weekStartsOn)
	      case 'e':
	        return String(localDayOfWeek);
	      // Padded numerical value
	      case 'ee':
	        return addLeadingZeros(localDayOfWeek, 2);
	      // 1st, 2nd, ..., 7th
	      case 'eo':
	        return localize.ordinalNumber(localDayOfWeek, {
	          unit: 'day'
	        });
	      case 'eee':
	        return localize.day(dayOfWeek, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      // T
	      case 'eeeee':
	        return localize.day(dayOfWeek, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      // Tu
	      case 'eeeeee':
	        return localize.day(dayOfWeek, {
	          width: 'short',
	          context: 'formatting'
	        });
	      // Tuesday
	      case 'eeee':
	      default:
	        return localize.day(dayOfWeek, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // Stand-alone local day of week
	  c: function c(date, token, localize, options) {
	    var dayOfWeek = date.getUTCDay();
	    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
	    switch (token) {
	      // Numerical value (same as in `e`)
	      case 'c':
	        return String(localDayOfWeek);
	      // Padded numerical value
	      case 'cc':
	        return addLeadingZeros(localDayOfWeek, token.length);
	      // 1st, 2nd, ..., 7th
	      case 'co':
	        return localize.ordinalNumber(localDayOfWeek, {
	          unit: 'day'
	        });
	      case 'ccc':
	        return localize.day(dayOfWeek, {
	          width: 'abbreviated',
	          context: 'standalone'
	        });
	      // T
	      case 'ccccc':
	        return localize.day(dayOfWeek, {
	          width: 'narrow',
	          context: 'standalone'
	        });
	      // Tu
	      case 'cccccc':
	        return localize.day(dayOfWeek, {
	          width: 'short',
	          context: 'standalone'
	        });
	      // Tuesday
	      case 'cccc':
	      default:
	        return localize.day(dayOfWeek, {
	          width: 'wide',
	          context: 'standalone'
	        });
	    }
	  },
	  // ISO day of week
	  i: function i(date, token, localize) {
	    var dayOfWeek = date.getUTCDay();
	    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
	    switch (token) {
	      // 2
	      case 'i':
	        return String(isoDayOfWeek);
	      // 02
	      case 'ii':
	        return addLeadingZeros(isoDayOfWeek, token.length);
	      // 2nd
	      case 'io':
	        return localize.ordinalNumber(isoDayOfWeek, {
	          unit: 'day'
	        });
	      // Tue
	      case 'iii':
	        return localize.day(dayOfWeek, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      // T
	      case 'iiiii':
	        return localize.day(dayOfWeek, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      // Tu
	      case 'iiiiii':
	        return localize.day(dayOfWeek, {
	          width: 'short',
	          context: 'formatting'
	        });
	      // Tuesday
	      case 'iiii':
	      default:
	        return localize.day(dayOfWeek, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // AM or PM
	  a: function a(date, token, localize) {
	    var hours = date.getUTCHours();
	    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
	    switch (token) {
	      case 'a':
	      case 'aa':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      case 'aaa':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'abbreviated',
	          context: 'formatting'
	        }).toLowerCase();
	      case 'aaaaa':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      case 'aaaa':
	      default:
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // AM, PM, midnight, noon
	  b: function b(date, token, localize) {
	    var hours = date.getUTCHours();
	    var dayPeriodEnumValue;
	    if (hours === 12) {
	      dayPeriodEnumValue = dayPeriodEnum.noon;
	    } else if (hours === 0) {
	      dayPeriodEnumValue = dayPeriodEnum.midnight;
	    } else {
	      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
	    }
	    switch (token) {
	      case 'b':
	      case 'bb':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      case 'bbb':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'abbreviated',
	          context: 'formatting'
	        }).toLowerCase();
	      case 'bbbbb':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      case 'bbbb':
	      default:
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // in the morning, in the afternoon, in the evening, at night
	  B: function B(date, token, localize) {
	    var hours = date.getUTCHours();
	    var dayPeriodEnumValue;
	    if (hours >= 17) {
	      dayPeriodEnumValue = dayPeriodEnum.evening;
	    } else if (hours >= 12) {
	      dayPeriodEnumValue = dayPeriodEnum.afternoon;
	    } else if (hours >= 4) {
	      dayPeriodEnumValue = dayPeriodEnum.morning;
	    } else {
	      dayPeriodEnumValue = dayPeriodEnum.night;
	    }
	    switch (token) {
	      case 'B':
	      case 'BB':
	      case 'BBB':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      case 'BBBBB':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      case 'BBBB':
	      default:
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // Hour [1-12]
	  h: function h(date, token, localize) {
	    if (token === 'ho') {
	      var hours = date.getUTCHours() % 12;
	      if (hours === 0) hours = 12;
	      return localize.ordinalNumber(hours, {
	        unit: 'hour'
	      });
	    }
	    return lightFormatters.h(date, token);
	  },
	  // Hour [0-23]
	  H: function H(date, token, localize) {
	    if (token === 'Ho') {
	      return localize.ordinalNumber(date.getUTCHours(), {
	        unit: 'hour'
	      });
	    }
	    return lightFormatters.H(date, token);
	  },
	  // Hour [0-11]
	  K: function K(date, token, localize) {
	    var hours = date.getUTCHours() % 12;
	    if (token === 'Ko') {
	      return localize.ordinalNumber(hours, {
	        unit: 'hour'
	      });
	    }
	    return addLeadingZeros(hours, token.length);
	  },
	  // Hour [1-24]
	  k: function k(date, token, localize) {
	    var hours = date.getUTCHours();
	    if (hours === 0) hours = 24;
	    if (token === 'ko') {
	      return localize.ordinalNumber(hours, {
	        unit: 'hour'
	      });
	    }
	    return addLeadingZeros(hours, token.length);
	  },
	  // Minute
	  m: function m(date, token, localize) {
	    if (token === 'mo') {
	      return localize.ordinalNumber(date.getUTCMinutes(), {
	        unit: 'minute'
	      });
	    }
	    return lightFormatters.m(date, token);
	  },
	  // Second
	  s: function s(date, token, localize) {
	    if (token === 'so') {
	      return localize.ordinalNumber(date.getUTCSeconds(), {
	        unit: 'second'
	      });
	    }
	    return lightFormatters.s(date, token);
	  },
	  // Fraction of second
	  S: function S(date, token) {
	    return lightFormatters.S(date, token);
	  },
	  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
	  X: function X(date, token, _localize, options) {
	    var originalDate = options._originalDate || date;
	    var timezoneOffset = originalDate.getTimezoneOffset();
	    if (timezoneOffset === 0) {
	      return 'Z';
	    }
	    switch (token) {
	      // Hours and optional minutes
	      case 'X':
	        return formatTimezoneWithOptionalMinutes(timezoneOffset);

	      // Hours, minutes and optional seconds without `:` delimiter
	      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
	      // so this token always has the same output as `XX`
	      case 'XXXX':
	      case 'XX':
	        // Hours and minutes without `:` delimiter
	        return formatTimezone(timezoneOffset);

	      // Hours, minutes and optional seconds with `:` delimiter
	      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
	      // so this token always has the same output as `XXX`
	      case 'XXXXX':
	      case 'XXX': // Hours and minutes with `:` delimiter
	      default:
	        return formatTimezone(timezoneOffset, ':');
	    }
	  },
	  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
	  x: function x(date, token, _localize, options) {
	    var originalDate = options._originalDate || date;
	    var timezoneOffset = originalDate.getTimezoneOffset();
	    switch (token) {
	      // Hours and optional minutes
	      case 'x':
	        return formatTimezoneWithOptionalMinutes(timezoneOffset);

	      // Hours, minutes and optional seconds without `:` delimiter
	      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
	      // so this token always has the same output as `xx`
	      case 'xxxx':
	      case 'xx':
	        // Hours and minutes without `:` delimiter
	        return formatTimezone(timezoneOffset);

	      // Hours, minutes and optional seconds with `:` delimiter
	      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
	      // so this token always has the same output as `xxx`
	      case 'xxxxx':
	      case 'xxx': // Hours and minutes with `:` delimiter
	      default:
	        return formatTimezone(timezoneOffset, ':');
	    }
	  },
	  // Timezone (GMT)
	  O: function O(date, token, _localize, options) {
	    var originalDate = options._originalDate || date;
	    var timezoneOffset = originalDate.getTimezoneOffset();
	    switch (token) {
	      // Short
	      case 'O':
	      case 'OO':
	      case 'OOO':
	        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
	      // Long
	      case 'OOOO':
	      default:
	        return 'GMT' + formatTimezone(timezoneOffset, ':');
	    }
	  },
	  // Timezone (specific non-location)
	  z: function z(date, token, _localize, options) {
	    var originalDate = options._originalDate || date;
	    var timezoneOffset = originalDate.getTimezoneOffset();
	    switch (token) {
	      // Short
	      case 'z':
	      case 'zz':
	      case 'zzz':
	        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
	      // Long
	      case 'zzzz':
	      default:
	        return 'GMT' + formatTimezone(timezoneOffset, ':');
	    }
	  },
	  // Seconds timestamp
	  t: function t(date, token, _localize, options) {
	    var originalDate = options._originalDate || date;
	    var timestamp = Math.floor(originalDate.getTime() / 1000);
	    return addLeadingZeros(timestamp, token.length);
	  },
	  // Milliseconds timestamp
	  T: function T(date, token, _localize, options) {
	    var originalDate = options._originalDate || date;
	    var timestamp = originalDate.getTime();
	    return addLeadingZeros(timestamp, token.length);
	  }
	};
	function formatTimezoneShort(offset, dirtyDelimiter) {
	  var sign = offset > 0 ? '-' : '+';
	  var absOffset = Math.abs(offset);
	  var hours = Math.floor(absOffset / 60);
	  var minutes = absOffset % 60;
	  if (minutes === 0) {
	    return sign + String(hours);
	  }
	  var delimiter = dirtyDelimiter || '';
	  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
	}
	function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
	  if (offset % 60 === 0) {
	    var sign = offset > 0 ? '-' : '+';
	    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
	  }
	  return formatTimezone(offset, dirtyDelimiter);
	}
	function formatTimezone(offset, dirtyDelimiter) {
	  var delimiter = dirtyDelimiter || '';
	  var sign = offset > 0 ? '-' : '+';
	  var absOffset = Math.abs(offset);
	  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
	  var minutes = addLeadingZeros(absOffset % 60, 2);
	  return sign + hours + delimiter + minutes;
	}
	var formatters$2 = formatters$1;

	var dateLongFormatter = function dateLongFormatter(pattern, formatLong) {
	  switch (pattern) {
	    case 'P':
	      return formatLong.date({
	        width: 'short'
	      });
	    case 'PP':
	      return formatLong.date({
	        width: 'medium'
	      });
	    case 'PPP':
	      return formatLong.date({
	        width: 'long'
	      });
	    case 'PPPP':
	    default:
	      return formatLong.date({
	        width: 'full'
	      });
	  }
	};
	var timeLongFormatter = function timeLongFormatter(pattern, formatLong) {
	  switch (pattern) {
	    case 'p':
	      return formatLong.time({
	        width: 'short'
	      });
	    case 'pp':
	      return formatLong.time({
	        width: 'medium'
	      });
	    case 'ppp':
	      return formatLong.time({
	        width: 'long'
	      });
	    case 'pppp':
	    default:
	      return formatLong.time({
	        width: 'full'
	      });
	  }
	};
	var dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {
	  var matchResult = pattern.match(/(P+)(p+)?/) || [];
	  var datePattern = matchResult[1];
	  var timePattern = matchResult[2];
	  if (!timePattern) {
	    return dateLongFormatter(pattern, formatLong);
	  }
	  var dateTimeFormat;
	  switch (datePattern) {
	    case 'P':
	      dateTimeFormat = formatLong.dateTime({
	        width: 'short'
	      });
	      break;
	    case 'PP':
	      dateTimeFormat = formatLong.dateTime({
	        width: 'medium'
	      });
	      break;
	    case 'PPP':
	      dateTimeFormat = formatLong.dateTime({
	        width: 'long'
	      });
	      break;
	    case 'PPPP':
	    default:
	      dateTimeFormat = formatLong.dateTime({
	        width: 'full'
	      });
	      break;
	  }
	  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
	};
	var longFormatters = {
	  p: timeLongFormatter,
	  P: dateTimeLongFormatter
	};
	var longFormatters$1 = longFormatters;

	/**
	 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
	 * They usually appear for dates that denote time before the timezones were introduced
	 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
	 * and GMT+01:00:00 after that date)
	 *
	 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
	 * which would lead to incorrect calculations.
	 *
	 * This function returns the timezone offset in milliseconds that takes seconds in account.
	 */
	function getTimezoneOffsetInMilliseconds(date) {
	  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
	  utcDate.setUTCFullYear(date.getFullYear());
	  return date.getTime() - utcDate.getTime();
	}

	var protectedDayOfYearTokens = ['D', 'DD'];
	var protectedWeekYearTokens = ['YY', 'YYYY'];
	function isProtectedDayOfYearToken(token) {
	  return protectedDayOfYearTokens.indexOf(token) !== -1;
	}
	function isProtectedWeekYearToken(token) {
	  return protectedWeekYearTokens.indexOf(token) !== -1;
	}
	function throwProtectedError(token, format, input) {
	  if (token === 'YYYY') {
	    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
	  } else if (token === 'YY') {
	    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
	  } else if (token === 'D') {
	    throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
	  } else if (token === 'DD') {
	    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
	  }
	}

	var formatDistanceLocale = {
	  lessThanXSeconds: {
	    one: 'less than a second',
	    other: 'less than {{count}} seconds'
	  },
	  xSeconds: {
	    one: '1 second',
	    other: '{{count}} seconds'
	  },
	  halfAMinute: 'half a minute',
	  lessThanXMinutes: {
	    one: 'less than a minute',
	    other: 'less than {{count}} minutes'
	  },
	  xMinutes: {
	    one: '1 minute',
	    other: '{{count}} minutes'
	  },
	  aboutXHours: {
	    one: 'about 1 hour',
	    other: 'about {{count}} hours'
	  },
	  xHours: {
	    one: '1 hour',
	    other: '{{count}} hours'
	  },
	  xDays: {
	    one: '1 day',
	    other: '{{count}} days'
	  },
	  aboutXWeeks: {
	    one: 'about 1 week',
	    other: 'about {{count}} weeks'
	  },
	  xWeeks: {
	    one: '1 week',
	    other: '{{count}} weeks'
	  },
	  aboutXMonths: {
	    one: 'about 1 month',
	    other: 'about {{count}} months'
	  },
	  xMonths: {
	    one: '1 month',
	    other: '{{count}} months'
	  },
	  aboutXYears: {
	    one: 'about 1 year',
	    other: 'about {{count}} years'
	  },
	  xYears: {
	    one: '1 year',
	    other: '{{count}} years'
	  },
	  overXYears: {
	    one: 'over 1 year',
	    other: 'over {{count}} years'
	  },
	  almostXYears: {
	    one: 'almost 1 year',
	    other: 'almost {{count}} years'
	  }
	};
	var formatDistance = function formatDistance(token, count, options) {
	  var result;
	  var tokenValue = formatDistanceLocale[token];
	  if (typeof tokenValue === 'string') {
	    result = tokenValue;
	  } else if (count === 1) {
	    result = tokenValue.one;
	  } else {
	    result = tokenValue.other.replace('{{count}}', count.toString());
	  }
	  if (options !== null && options !== void 0 && options.addSuffix) {
	    if (options.comparison && options.comparison > 0) {
	      return 'in ' + result;
	    } else {
	      return result + ' ago';
	    }
	  }
	  return result;
	};
	var formatDistance$1 = formatDistance;

	function buildFormatLongFn(args) {
	  return function () {
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    // TODO: Remove String()
	    var width = options.width ? String(options.width) : args.defaultWidth;
	    var format = args.formats[width] || args.formats[args.defaultWidth];
	    return format;
	  };
	}

	var dateFormats = {
	  full: 'EEEE, MMMM do, y',
	  long: 'MMMM do, y',
	  medium: 'MMM d, y',
	  short: 'MM/dd/yyyy'
	};
	var timeFormats = {
	  full: 'h:mm:ss a zzzz',
	  long: 'h:mm:ss a z',
	  medium: 'h:mm:ss a',
	  short: 'h:mm a'
	};
	var dateTimeFormats = {
	  full: "{{date}} 'at' {{time}}",
	  long: "{{date}} 'at' {{time}}",
	  medium: '{{date}}, {{time}}',
	  short: '{{date}}, {{time}}'
	};
	var formatLong = {
	  date: buildFormatLongFn({
	    formats: dateFormats,
	    defaultWidth: 'full'
	  }),
	  time: buildFormatLongFn({
	    formats: timeFormats,
	    defaultWidth: 'full'
	  }),
	  dateTime: buildFormatLongFn({
	    formats: dateTimeFormats,
	    defaultWidth: 'full'
	  })
	};
	var formatLong$1 = formatLong;

	var formatRelativeLocale = {
	  lastWeek: "'last' eeee 'at' p",
	  yesterday: "'yesterday at' p",
	  today: "'today at' p",
	  tomorrow: "'tomorrow at' p",
	  nextWeek: "eeee 'at' p",
	  other: 'P'
	};
	var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
	  return formatRelativeLocale[token];
	};
	var formatRelative$1 = formatRelative;

	function buildLocalizeFn(args) {
	  return function (dirtyIndex, options) {
	    var context = options !== null && options !== void 0 && options.context ? String(options.context) : 'standalone';
	    var valuesArray;
	    if (context === 'formatting' && args.formattingValues) {
	      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
	      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
	      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
	    } else {
	      var _defaultWidth = args.defaultWidth;
	      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
	      valuesArray = args.values[_width] || args.values[_defaultWidth];
	    }
	    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
	    // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
	    return valuesArray[index];
	  };
	}

	var eraValues = {
	  narrow: ['B', 'A'],
	  abbreviated: ['BC', 'AD'],
	  wide: ['Before Christ', 'Anno Domini']
	};
	var quarterValues = {
	  narrow: ['1', '2', '3', '4'],
	  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
	  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
	};

	// Note: in English, the names of days of the week and months are capitalized.
	// If you are making a new locale based on this one, check if the same is true for the language you're working on.
	// Generally, formatted dates should look like they are in the middle of a sentence,
	// e.g. in Spanish language the weekdays and months should be in the lowercase.
	var monthValues = {
	  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
	  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
	  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
	};
	var dayValues = {
	  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
	  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
	  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
	  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
	};
	var dayPeriodValues = {
	  narrow: {
	    am: 'a',
	    pm: 'p',
	    midnight: 'mi',
	    noon: 'n',
	    morning: 'morning',
	    afternoon: 'afternoon',
	    evening: 'evening',
	    night: 'night'
	  },
	  abbreviated: {
	    am: 'AM',
	    pm: 'PM',
	    midnight: 'midnight',
	    noon: 'noon',
	    morning: 'morning',
	    afternoon: 'afternoon',
	    evening: 'evening',
	    night: 'night'
	  },
	  wide: {
	    am: 'a.m.',
	    pm: 'p.m.',
	    midnight: 'midnight',
	    noon: 'noon',
	    morning: 'morning',
	    afternoon: 'afternoon',
	    evening: 'evening',
	    night: 'night'
	  }
	};
	var formattingDayPeriodValues = {
	  narrow: {
	    am: 'a',
	    pm: 'p',
	    midnight: 'mi',
	    noon: 'n',
	    morning: 'in the morning',
	    afternoon: 'in the afternoon',
	    evening: 'in the evening',
	    night: 'at night'
	  },
	  abbreviated: {
	    am: 'AM',
	    pm: 'PM',
	    midnight: 'midnight',
	    noon: 'noon',
	    morning: 'in the morning',
	    afternoon: 'in the afternoon',
	    evening: 'in the evening',
	    night: 'at night'
	  },
	  wide: {
	    am: 'a.m.',
	    pm: 'p.m.',
	    midnight: 'midnight',
	    noon: 'noon',
	    morning: 'in the morning',
	    afternoon: 'in the afternoon',
	    evening: 'in the evening',
	    night: 'at night'
	  }
	};
	var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
	  var number = Number(dirtyNumber);

	  // If ordinal numbers depend on context, for example,
	  // if they are different for different grammatical genders,
	  // use `options.unit`.
	  //
	  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
	  // 'day', 'hour', 'minute', 'second'.

	  var rem100 = number % 100;
	  if (rem100 > 20 || rem100 < 10) {
	    switch (rem100 % 10) {
	      case 1:
	        return number + 'st';
	      case 2:
	        return number + 'nd';
	      case 3:
	        return number + 'rd';
	    }
	  }
	  return number + 'th';
	};
	var localize = {
	  ordinalNumber: ordinalNumber,
	  era: buildLocalizeFn({
	    values: eraValues,
	    defaultWidth: 'wide'
	  }),
	  quarter: buildLocalizeFn({
	    values: quarterValues,
	    defaultWidth: 'wide',
	    argumentCallback: function argumentCallback(quarter) {
	      return quarter - 1;
	    }
	  }),
	  month: buildLocalizeFn({
	    values: monthValues,
	    defaultWidth: 'wide'
	  }),
	  day: buildLocalizeFn({
	    values: dayValues,
	    defaultWidth: 'wide'
	  }),
	  dayPeriod: buildLocalizeFn({
	    values: dayPeriodValues,
	    defaultWidth: 'wide',
	    formattingValues: formattingDayPeriodValues,
	    defaultFormattingWidth: 'wide'
	  })
	};
	var localize$1 = localize;

	function buildMatchFn(args) {
	  return function (string) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var width = options.width;
	    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
	    var matchResult = string.match(matchPattern);
	    if (!matchResult) {
	      return null;
	    }
	    var matchedString = matchResult[0];
	    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
	    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
	      return pattern.test(matchedString);
	    }) : findKey(parsePatterns, function (pattern) {
	      return pattern.test(matchedString);
	    });
	    var value;
	    value = args.valueCallback ? args.valueCallback(key) : key;
	    value = options.valueCallback ? options.valueCallback(value) : value;
	    var rest = string.slice(matchedString.length);
	    return {
	      value: value,
	      rest: rest
	    };
	  };
	}
	function findKey(object, predicate) {
	  for (var key in object) {
	    if (object.hasOwnProperty(key) && predicate(object[key])) {
	      return key;
	    }
	  }
	  return undefined;
	}
	function findIndex(array, predicate) {
	  for (var key = 0; key < array.length; key++) {
	    if (predicate(array[key])) {
	      return key;
	    }
	  }
	  return undefined;
	}

	function buildMatchPatternFn(args) {
	  return function (string) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var matchResult = string.match(args.matchPattern);
	    if (!matchResult) return null;
	    var matchedString = matchResult[0];
	    var parseResult = string.match(args.parsePattern);
	    if (!parseResult) return null;
	    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
	    value = options.valueCallback ? options.valueCallback(value) : value;
	    var rest = string.slice(matchedString.length);
	    return {
	      value: value,
	      rest: rest
	    };
	  };
	}

	var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
	var parseOrdinalNumberPattern = /\d+/i;
	var matchEraPatterns = {
	  narrow: /^(b|a)/i,
	  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
	  wide: /^(before christ|before common era|anno domini|common era)/i
	};
	var parseEraPatterns = {
	  any: [/^b/i, /^(a|c)/i]
	};
	var matchQuarterPatterns = {
	  narrow: /^[1234]/i,
	  abbreviated: /^q[1234]/i,
	  wide: /^[1234](th|st|nd|rd)? quarter/i
	};
	var parseQuarterPatterns = {
	  any: [/1/i, /2/i, /3/i, /4/i]
	};
	var matchMonthPatterns = {
	  narrow: /^[jfmasond]/i,
	  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
	  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
	};
	var parseMonthPatterns = {
	  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
	  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
	};
	var matchDayPatterns = {
	  narrow: /^[smtwf]/i,
	  short: /^(su|mo|tu|we|th|fr|sa)/i,
	  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
	  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
	};
	var parseDayPatterns = {
	  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
	  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
	};
	var matchDayPeriodPatterns = {
	  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
	  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
	};
	var parseDayPeriodPatterns = {
	  any: {
	    am: /^a/i,
	    pm: /^p/i,
	    midnight: /^mi/i,
	    noon: /^no/i,
	    morning: /morning/i,
	    afternoon: /afternoon/i,
	    evening: /evening/i,
	    night: /night/i
	  }
	};
	var match$2 = {
	  ordinalNumber: buildMatchPatternFn({
	    matchPattern: matchOrdinalNumberPattern,
	    parsePattern: parseOrdinalNumberPattern,
	    valueCallback: function valueCallback(value) {
	      return parseInt(value, 10);
	    }
	  }),
	  era: buildMatchFn({
	    matchPatterns: matchEraPatterns,
	    defaultMatchWidth: 'wide',
	    parsePatterns: parseEraPatterns,
	    defaultParseWidth: 'any'
	  }),
	  quarter: buildMatchFn({
	    matchPatterns: matchQuarterPatterns,
	    defaultMatchWidth: 'wide',
	    parsePatterns: parseQuarterPatterns,
	    defaultParseWidth: 'any',
	    valueCallback: function valueCallback(index) {
	      return index + 1;
	    }
	  }),
	  month: buildMatchFn({
	    matchPatterns: matchMonthPatterns,
	    defaultMatchWidth: 'wide',
	    parsePatterns: parseMonthPatterns,
	    defaultParseWidth: 'any'
	  }),
	  day: buildMatchFn({
	    matchPatterns: matchDayPatterns,
	    defaultMatchWidth: 'wide',
	    parsePatterns: parseDayPatterns,
	    defaultParseWidth: 'any'
	  }),
	  dayPeriod: buildMatchFn({
	    matchPatterns: matchDayPeriodPatterns,
	    defaultMatchWidth: 'any',
	    parsePatterns: parseDayPeriodPatterns,
	    defaultParseWidth: 'any'
	  })
	};
	var match$3 = match$2;

	/**
	 * @type {Locale}
	 * @category Locales
	 * @summary English locale (United States).
	 * @language English
	 * @iso-639-2 eng
	 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
	 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
	 */
	var locale = {
	  code: 'en-US',
	  formatDistance: formatDistance$1,
	  formatLong: formatLong$1,
	  formatRelative: formatRelative$1,
	  localize: localize$1,
	  match: match$3,
	  options: {
	    weekStartsOn: 0 /* Sunday */,
	    firstWeekContainsDate: 1
	  }
	};
	var defaultLocale = locale;

	// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
	//   (one of the certain letters followed by `o`)
	// - (\w)\1* matches any sequences of the same letter
	// - '' matches two quote characters in a row
	// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
	//   except a single quote symbol, which ends the sequence.
	//   Two quote characters do not end the sequence.
	//   If there is no matching single quote
	//   then the sequence will continue until the end of the string.
	// - . matches any single character unmatched by previous parts of the RegExps
	var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

	// This RegExp catches symbols escaped by quotes, and also
	// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
	var longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
	var escapedStringRegExp$1 = /^'([^]*?)'?$/;
	var doubleQuoteRegExp$1 = /''/g;
	var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;

	/**
	 * @name format
	 * @category Common Helpers
	 * @summary Format the date.
	 *
	 * @description
	 * Return the formatted date string in the given format. The result may vary by locale.
	 *
	 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
	 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 *
	 * The characters wrapped between two single quotes characters (') are escaped.
	 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
	 * (see the last example)
	 *
	 * Format of the string is based on Unicode Technical Standard #35:
	 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
	 * with a few additions (see note 7 below the table).
	 *
	 * Accepted patterns:
	 * | Unit                            | Pattern | Result examples                   | Notes |
	 * |---------------------------------|---------|-----------------------------------|-------|
	 * | Era                             | G..GGG  | AD, BC                            |       |
	 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
	 * |                                 | GGGGG   | A, B                              |       |
	 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
	 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
	 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
	 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
	 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
	 * |                                 | yyyyy   | ...                               | 3,5   |
	 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
	 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
	 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
	 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
	 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
	 * |                                 | YYYYY   | ...                               | 3,5   |
	 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
	 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
	 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
	 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
	 * |                                 | RRRRR   | ...                               | 3,5,7 |
	 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
	 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
	 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
	 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
	 * |                                 | uuuuu   | ...                               | 3,5   |
	 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
	 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
	 * |                                 | QQ      | 01, 02, 03, 04                    |       |
	 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
	 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
	 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
	 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
	 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
	 * |                                 | qq      | 01, 02, 03, 04                    |       |
	 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
	 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
	 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
	 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
	 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
	 * |                                 | MM      | 01, 02, ..., 12                   |       |
	 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
	 * |                                 | MMMM    | January, February, ..., December  | 2     |
	 * |                                 | MMMMM   | J, F, ..., D                      |       |
	 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
	 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
	 * |                                 | LL      | 01, 02, ..., 12                   |       |
	 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
	 * |                                 | LLLL    | January, February, ..., December  | 2     |
	 * |                                 | LLLLL   | J, F, ..., D                      |       |
	 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
	 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
	 * |                                 | ww      | 01, 02, ..., 53                   |       |
	 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
	 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
	 * |                                 | II      | 01, 02, ..., 53                   | 7     |
	 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
	 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
	 * |                                 | dd      | 01, 02, ..., 31                   |       |
	 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
	 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
	 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
	 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
	 * |                                 | DDDD    | ...                               | 3     |
	 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
	 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
	 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
	 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
	 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
	 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
	 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
	 * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
	 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
	 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
	 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
	 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
	 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
	 * |                                 | ee      | 02, 03, ..., 01                   |       |
	 * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
	 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
	 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
	 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
	 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
	 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
	 * |                                 | cc      | 02, 03, ..., 01                   |       |
	 * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
	 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
	 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
	 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
	 * | AM, PM                          | a..aa   | AM, PM                            |       |
	 * |                                 | aaa     | am, pm                            |       |
	 * |                                 | aaaa    | a.m., p.m.                        | 2     |
	 * |                                 | aaaaa   | a, p                              |       |
	 * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
	 * |                                 | bbb     | am, pm, noon, midnight            |       |
	 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
	 * |                                 | bbbbb   | a, p, n, mi                       |       |
	 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
	 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
	 * |                                 | BBBBB   | at night, in the morning, ...     |       |
	 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
	 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
	 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
	 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
	 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
	 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
	 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
	 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
	 * |                                 | KK      | 01, 02, ..., 11, 00               |       |
	 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
	 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
	 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
	 * | Minute                          | m       | 0, 1, ..., 59                     |       |
	 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
	 * |                                 | mm      | 00, 01, ..., 59                   |       |
	 * | Second                          | s       | 0, 1, ..., 59                     |       |
	 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
	 * |                                 | ss      | 00, 01, ..., 59                   |       |
	 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
	 * |                                 | SS      | 00, 01, ..., 99                   |       |
	 * |                                 | SSS     | 000, 001, ..., 999                |       |
	 * |                                 | SSSS    | ...                               | 3     |
	 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
	 * |                                 | XX      | -0800, +0530, Z                   |       |
	 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
	 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
	 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
	 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
	 * |                                 | xx      | -0800, +0530, +0000               |       |
	 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
	 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
	 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
	 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
	 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
	 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
	 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
	 * | Seconds timestamp               | t       | 512969520                         | 7     |
	 * |                                 | tt      | ...                               | 3,7   |
	 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
	 * |                                 | TT      | ...                               | 3,7   |
	 * | Long localized date             | P       | 04/29/1453                        | 7     |
	 * |                                 | PP      | Apr 29, 1453                      | 7     |
	 * |                                 | PPP     | April 29th, 1453                  | 7     |
	 * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
	 * | Long localized time             | p       | 12:00 AM                          | 7     |
	 * |                                 | pp      | 12:00:00 AM                       | 7     |
	 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
	 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
	 * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
	 * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
	 * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
	 * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
	 * Notes:
	 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
	 *    are the same as "stand-alone" units, but are different in some languages.
	 *    "Formatting" units are declined according to the rules of the language
	 *    in the context of a date. "Stand-alone" units are always nominative singular:
	 *
	 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
	 *
	 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
	 *
	 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
	 *    the single quote characters (see below).
	 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
	 *    the output will be the same as default pattern for this unit, usually
	 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
	 *    are marked with "2" in the last column of the table.
	 *
	 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
	 *
	 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
	 *
	 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
	 *
	 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
	 *
	 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
	 *
	 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
	 *    The output will be padded with zeros to match the length of the pattern.
	 *
	 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
	 *
	 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
	 *    These tokens represent the shortest form of the quarter.
	 *
	 * 5. The main difference between `y` and `u` patterns are B.C. years:
	 *
	 *    | Year | `y` | `u` |
	 *    |------|-----|-----|
	 *    | AC 1 |   1 |   1 |
	 *    | BC 1 |   1 |   0 |
	 *    | BC 2 |   2 |  -1 |
	 *
	 *    Also `yy` always returns the last two digits of a year,
	 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
	 *
	 *    | Year | `yy` | `uu` |
	 *    |------|------|------|
	 *    | 1    |   01 |   01 |
	 *    | 14   |   14 |   14 |
	 *    | 376  |   76 |  376 |
	 *    | 1453 |   53 | 1453 |
	 *
	 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
	 *    except local week-numbering years are dependent on `options.weekStartsOn`
	 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
	 *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
	 *
	 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
	 *    so right now these tokens fall back to GMT timezones.
	 *
	 * 7. These patterns are not in the Unicode Technical Standard #35:
	 *    - `i`: ISO day of week
	 *    - `I`: ISO week of year
	 *    - `R`: ISO week-numbering year
	 *    - `t`: seconds timestamp
	 *    - `T`: milliseconds timestamp
	 *    - `o`: ordinal number modifier
	 *    - `P`: long localized date
	 *    - `p`: long localized time
	 *
	 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
	 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 *
	 * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
	 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 *
	 * @param {Date|Number} date - the original date
	 * @param {String} format - the string of tokens
	 * @param {Object} [options] - an object with options.
	 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
	 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
	 * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
	 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
	 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
	 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @returns {String} the formatted date string
	 * @throws {TypeError} 2 arguments required
	 * @throws {RangeError} `date` must not be Invalid Date
	 * @throws {RangeError} `options.locale` must contain `localize` property
	 * @throws {RangeError} `options.locale` must contain `formatLong` property
	 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
	 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
	 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @throws {RangeError} format string contains an unescaped latin alphabet character
	 *
	 * @example
	 * // Represent 11 February 2014 in middle-endian format:
	 * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
	 * //=> '02/11/2014'
	 *
	 * @example
	 * // Represent 2 July 2014 in Esperanto:
	 * import { eoLocale } from 'date-fns/locale/eo'
	 * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
	 *   locale: eoLocale
	 * })
	 * //=> '2-a de julio 2014'
	 *
	 * @example
	 * // Escape string by single quote characters:
	 * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
	 * //=> "3 o'clock"
	 */

	function format(dirtyDate, dirtyFormatStr, options) {
	  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
	  requiredArgs(2, arguments);
	  var formatStr = String(dirtyFormatStr);
	  var defaultOptions = getDefaultOptions();
	  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
	  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);

	  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
	  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
	    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
	  }
	  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);

	  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
	  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
	    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
	  }
	  if (!locale.localize) {
	    throw new RangeError('locale must contain localize property');
	  }
	  if (!locale.formatLong) {
	    throw new RangeError('locale must contain formatLong property');
	  }
	  var originalDate = toDate(dirtyDate);
	  if (!isValid(originalDate)) {
	    throw new RangeError('Invalid time value');
	  }

	  // Convert the date in system timezone to the same date in UTC+00:00 timezone.
	  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
	  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376
	  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
	  var utcDate = subMilliseconds(originalDate, timezoneOffset);
	  var formatterOptions = {
	    firstWeekContainsDate: firstWeekContainsDate,
	    weekStartsOn: weekStartsOn,
	    locale: locale,
	    _originalDate: originalDate
	  };
	  var result = formatStr.match(longFormattingTokensRegExp$1).map(function (substring) {
	    var firstCharacter = substring[0];
	    if (firstCharacter === 'p' || firstCharacter === 'P') {
	      var longFormatter = longFormatters$1[firstCharacter];
	      return longFormatter(substring, locale.formatLong);
	    }
	    return substring;
	  }).join('').match(formattingTokensRegExp$1).map(function (substring) {
	    // Replace two single quote characters with one single quote character
	    if (substring === "''") {
	      return "'";
	    }
	    var firstCharacter = substring[0];
	    if (firstCharacter === "'") {
	      return cleanEscapedString$1(substring);
	    }
	    var formatter = formatters$2[firstCharacter];
	    if (formatter) {
	      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
	        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
	      }
	      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
	        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
	      }
	      return formatter(utcDate, substring, locale.localize, formatterOptions);
	    }
	    if (firstCharacter.match(unescapedLatinCharacterRegExp$1)) {
	      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
	    }
	    return substring;
	  }).join('');
	  return result;
	}
	function cleanEscapedString$1(input) {
	  var matched = input.match(escapedStringRegExp$1);
	  if (!matched) {
	    return input;
	  }
	  return matched[1].replace(doubleQuoteRegExp$1, "'");
	}

	var MILLISECONDS_IN_MINUTE = 60000;

	/**
	 * @name addMinutes
	 * @category Minute Helpers
	 * @summary Add the specified number of minutes to the given date.
	 *
	 * @description
	 * Add the specified number of minutes to the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} amount - the amount of minutes to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
	 * @returns {Date} the new date with the minutes added
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Add 30 minutes to 10 July 2014 12:00:00:
	 * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)
	 * //=> Thu Jul 10 2014 12:30:00
	 */
	function addMinutes(dirtyDate, dirtyAmount) {
	  requiredArgs(2, arguments);
	  var amount = toInteger(dirtyAmount);
	  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);
	}

	var MILLISECONDS_IN_HOUR = 3600000;

	/**
	 * @name addHours
	 * @category Hour Helpers
	 * @summary Add the specified number of hours to the given date.
	 *
	 * @description
	 * Add the specified number of hours to the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} amount - the amount of hours to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
	 * @returns {Date} the new date with the hours added
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Add 2 hours to 10 July 2014 23:00:00:
	 * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)
	 * //=> Fri Jul 11 2014 01:00:00
	 */
	function addHours(dirtyDate, dirtyAmount) {
	  requiredArgs(2, arguments);
	  var amount = toInteger(dirtyAmount);
	  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);
	}

	/**
	 * @name addDays
	 * @category Day Helpers
	 * @summary Add the specified number of days to the given date.
	 *
	 * @description
	 * Add the specified number of days to the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
	 * @returns {Date} - the new date with the days added
	 * @throws {TypeError} - 2 arguments required
	 *
	 * @example
	 * // Add 10 days to 1 September 2014:
	 * const result = addDays(new Date(2014, 8, 1), 10)
	 * //=> Thu Sep 11 2014 00:00:00
	 */
	function addDays(dirtyDate, dirtyAmount) {
	  requiredArgs(2, arguments);
	  var date = toDate(dirtyDate);
	  var amount = toInteger(dirtyAmount);
	  if (isNaN(amount)) {
	    return new Date(NaN);
	  }
	  if (!amount) {
	    // If 0 days, no-op to avoid changing times in the hour before end of DST
	    return date;
	  }
	  date.setDate(date.getDate() + amount);
	  return date;
	}

	/**
	 * @name addWeeks
	 * @category Week Helpers
	 * @summary Add the specified number of weeks to the given date.
	 *
	 * @description
	 * Add the specified number of week to the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
	 * @returns {Date} the new date with the weeks added
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Add 4 weeks to 1 September 2014:
	 * const result = addWeeks(new Date(2014, 8, 1), 4)
	 * //=> Mon Sep 29 2014 00:00:00
	 */
	function addWeeks(dirtyDate, dirtyAmount) {
	  requiredArgs(2, arguments);
	  var amount = toInteger(dirtyAmount);
	  var days = amount * 7;
	  return addDays(dirtyDate, days);
	}

	/**
	 * @name addMonths
	 * @category Month Helpers
	 * @summary Add the specified number of months to the given date.
	 *
	 * @description
	 * Add the specified number of months to the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
	 * @returns {Date} the new date with the months added
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Add 5 months to 1 September 2014:
	 * const result = addMonths(new Date(2014, 8, 1), 5)
	 * //=> Sun Feb 01 2015 00:00:00
	 */
	function addMonths(dirtyDate, dirtyAmount) {
	  requiredArgs(2, arguments);
	  var date = toDate(dirtyDate);
	  var amount = toInteger(dirtyAmount);
	  if (isNaN(amount)) {
	    return new Date(NaN);
	  }
	  if (!amount) {
	    // If 0 months, no-op to avoid changing times in the hour before end of DST
	    return date;
	  }
	  var dayOfMonth = date.getDate();

	  // The JS Date object supports date math by accepting out-of-bounds values for
	  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and
	  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we
	  // want except that dates will wrap around the end of a month, meaning that
	  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So
	  // we'll default to the end of the desired month by adding 1 to the desired
	  // month and using a date of 0 to back up one day to the end of the desired
	  // month.
	  var endOfDesiredMonth = new Date(date.getTime());
	  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
	  var daysInMonth = endOfDesiredMonth.getDate();
	  if (dayOfMonth >= daysInMonth) {
	    // If we're already at the end of the month, then this is the correct date
	    // and we're done.
	    return endOfDesiredMonth;
	  } else {
	    // Otherwise, we now know that setting the original day-of-month value won't
	    // cause an overflow, so set the desired day-of-month. Note that we can't
	    // just set the date of `endOfDesiredMonth` because that object may have had
	    // its time changed in the unusual case where where a DST transition was on
	    // the last day of the month and its local time was in the hour skipped or
	    // repeated next to a DST transition.  So we use `date` instead which is
	    // guaranteed to still have the original time.
	    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
	    return date;
	  }
	}

	/**
	 * @name addQuarters
	 * @category Quarter Helpers
	 * @summary Add the specified number of year quarters to the given date.
	 *
	 * @description
	 * Add the specified number of year quarters to the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} amount - the amount of quarters to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
	 * @returns {Date} the new date with the quarters added
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Add 1 quarter to 1 September 2014:
	 * const result = addQuarters(new Date(2014, 8, 1), 1)
	 * //=> Mon Dec 01 2014 00:00:00
	 */
	function addQuarters(dirtyDate, dirtyAmount) {
	  requiredArgs(2, arguments);
	  var amount = toInteger(dirtyAmount);
	  var months = amount * 3;
	  return addMonths(dirtyDate, months);
	}

	/**
	 * @name addYears
	 * @category Year Helpers
	 * @summary Add the specified number of years to the given date.
	 *
	 * @description
	 * Add the specified number of years to the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
	 * @returns {Date} the new date with the years added
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Add 5 years to 1 September 2014:
	 * const result = addYears(new Date(2014, 8, 1), 5)
	 * //=> Sun Sep 01 2019 00:00:00
	 */
	function addYears(dirtyDate, dirtyAmount) {
	  requiredArgs(2, arguments);
	  var amount = toInteger(dirtyAmount);
	  return addMonths(dirtyDate, amount * 12);
	}

	/**
	 * @name subDays
	 * @category Day Helpers
	 * @summary Subtract the specified number of days from the given date.
	 *
	 * @description
	 * Subtract the specified number of days from the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
	 * @returns {Date} the new date with the days subtracted
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Subtract 10 days from 1 September 2014:
	 * const result = subDays(new Date(2014, 8, 1), 10)
	 * //=> Fri Aug 22 2014 00:00:00
	 */
	function subDays(dirtyDate, dirtyAmount) {
	  requiredArgs(2, arguments);
	  var amount = toInteger(dirtyAmount);
	  return addDays(dirtyDate, -amount);
	}

	/**
	 * @name subWeeks
	 * @category Week Helpers
	 * @summary Subtract the specified number of weeks from the given date.
	 *
	 * @description
	 * Subtract the specified number of weeks from the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} amount - the amount of weeks to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
	 * @returns {Date} the new date with the weeks subtracted
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Subtract 4 weeks from 1 September 2014:
	 * const result = subWeeks(new Date(2014, 8, 1), 4)
	 * //=> Mon Aug 04 2014 00:00:00
	 */
	function subWeeks(dirtyDate, dirtyAmount) {
	  requiredArgs(2, arguments);
	  var amount = toInteger(dirtyAmount);
	  return addWeeks(dirtyDate, -amount);
	}

	/**
	 * @name subMonths
	 * @category Month Helpers
	 * @summary Subtract the specified number of months from the given date.
	 *
	 * @description
	 * Subtract the specified number of months from the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
	 * @returns {Date} the new date with the months subtracted
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Subtract 5 months from 1 February 2015:
	 * const result = subMonths(new Date(2015, 1, 1), 5)
	 * //=> Mon Sep 01 2014 00:00:00
	 */
	function subMonths(dirtyDate, dirtyAmount) {
	  requiredArgs(2, arguments);
	  var amount = toInteger(dirtyAmount);
	  return addMonths(dirtyDate, -amount);
	}

	/**
	 * @name subQuarters
	 * @category Quarter Helpers
	 * @summary Subtract the specified number of year quarters from the given date.
	 *
	 * @description
	 * Subtract the specified number of year quarters from the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} amount - the amount of quarters to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
	 * @returns {Date} the new date with the quarters subtracted
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Subtract 3 quarters from 1 September 2014:
	 * const result = subQuarters(new Date(2014, 8, 1), 3)
	 * //=> Sun Dec 01 2013 00:00:00
	 */
	function subQuarters(dirtyDate, dirtyAmount) {
	  requiredArgs(2, arguments);
	  var amount = toInteger(dirtyAmount);
	  return addQuarters(dirtyDate, -amount);
	}

	/**
	 * @name subYears
	 * @category Year Helpers
	 * @summary Subtract the specified number of years from the given date.
	 *
	 * @description
	 * Subtract the specified number of years from the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} amount - the amount of years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
	 * @returns {Date} the new date with the years subtracted
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Subtract 5 years from 1 September 2014:
	 * const result = subYears(new Date(2014, 8, 1), 5)
	 * //=> Tue Sep 01 2009 00:00:00
	 */
	function subYears(dirtyDate, dirtyAmount) {
	  requiredArgs(2, arguments);
	  var amount = toInteger(dirtyAmount);
	  return addYears(dirtyDate, -amount);
	}

	/**
	 * @name getSeconds
	 * @category Second Helpers
	 * @summary Get the seconds of the given date.
	 *
	 * @description
	 * Get the seconds of the given date.
	 *
	 * @param {Date|Number} date - the given date
	 * @returns {Number} the seconds
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // Get the seconds of 29 February 2012 11:45:05.123:
	 * const result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))
	 * //=> 5
	 */
	function getSeconds(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var seconds = date.getSeconds();
	  return seconds;
	}

	/**
	 * @name getMinutes
	 * @category Minute Helpers
	 * @summary Get the minutes of the given date.
	 *
	 * @description
	 * Get the minutes of the given date.
	 *
	 * @param {Date|Number} date - the given date
	 * @returns {Number} the minutes
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // Get the minutes of 29 February 2012 11:45:05:
	 * const result = getMinutes(new Date(2012, 1, 29, 11, 45, 5))
	 * //=> 45
	 */
	function getMinutes(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var minutes = date.getMinutes();
	  return minutes;
	}

	/**
	 * @name getHours
	 * @category Hour Helpers
	 * @summary Get the hours of the given date.
	 *
	 * @description
	 * Get the hours of the given date.
	 *
	 * @param {Date|Number} date - the given date
	 * @returns {Number} the hours
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // Get the hours of 29 February 2012 11:45:00:
	 * const result = getHours(new Date(2012, 1, 29, 11, 45))
	 * //=> 11
	 */
	function getHours(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var hours = date.getHours();
	  return hours;
	}

	/**
	 * @name getDay
	 * @category Weekday Helpers
	 * @summary Get the day of the week of the given date.
	 *
	 * @description
	 * Get the day of the week of the given date.
	 *
	 * @param {Date|Number} date - the given date
	 * @returns {0|1|2|3|4|5|6} the day of week, 0 represents Sunday
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // Which day of the week is 29 February 2012?
	 * const result = getDay(new Date(2012, 1, 29))
	 * //=> 3
	 */
	function getDay(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var day = date.getDay();
	  return day;
	}

	/**
	 * @name getDate
	 * @category Day Helpers
	 * @summary Get the day of the month of the given date.
	 *
	 * @description
	 * Get the day of the month of the given date.
	 *
	 * @param {Date|Number} date - the given date
	 * @returns {Number} the day of month
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // Which day of the month is 29 February 2012?
	 * const result = getDate(new Date(2012, 1, 29))
	 * //=> 29
	 */
	function getDate(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var dayOfMonth = date.getDate();
	  return dayOfMonth;
	}

	/**
	 * @name startOfWeek
	 * @category Week Helpers
	 * @summary Return the start of a week for the given date.
	 *
	 * @description
	 * Return the start of a week for the given date.
	 * The result will be in the local timezone.
	 *
	 * @param {Date|Number} date - the original date
	 * @param {Object} [options] - an object with options.
	 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
	 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
	 * @returns {Date} the start of a week
	 * @throws {TypeError} 1 argument required
	 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
	 *
	 * @example
	 * // The start of a week for 2 September 2014 11:55:00:
	 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
	 * //=> Sun Aug 31 2014 00:00:00
	 *
	 * @example
	 * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
	 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
	 * //=> Mon Sep 01 2014 00:00:00
	 */
	function startOfWeek(dirtyDate, options) {
	  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
	  requiredArgs(1, arguments);
	  var defaultOptions = getDefaultOptions();
	  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);

	  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
	  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
	    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
	  }
	  var date = toDate(dirtyDate);
	  var day = date.getDay();
	  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
	  date.setDate(date.getDate() - diff);
	  date.setHours(0, 0, 0, 0);
	  return date;
	}

	/**
	 * @name startOfISOWeek
	 * @category ISO Week Helpers
	 * @summary Return the start of an ISO week for the given date.
	 *
	 * @description
	 * Return the start of an ISO week for the given date.
	 * The result will be in the local timezone.
	 *
	 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
	 *
	 * @param {Date|Number} date - the original date
	 * @returns {Date} the start of an ISO week
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // The start of an ISO week for 2 September 2014 11:55:00:
	 * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
	 * //=> Mon Sep 01 2014 00:00:00
	 */
	function startOfISOWeek(dirtyDate) {
	  requiredArgs(1, arguments);
	  return startOfWeek(dirtyDate, {
	    weekStartsOn: 1
	  });
	}

	/**
	 * @name getISOWeekYear
	 * @category ISO Week-Numbering Year Helpers
	 * @summary Get the ISO week-numbering year of the given date.
	 *
	 * @description
	 * Get the ISO week-numbering year of the given date,
	 * which always starts 3 days before the year's first Thursday.
	 *
	 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
	 *
	 * @param {Date|Number} date - the given date
	 * @returns {Number} the ISO week-numbering year
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // Which ISO-week numbering year is 2 January 2005?
	 * const result = getISOWeekYear(new Date(2005, 0, 2))
	 * //=> 2004
	 */
	function getISOWeekYear(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var year = date.getFullYear();
	  var fourthOfJanuaryOfNextYear = new Date(0);
	  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
	  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
	  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);
	  var fourthOfJanuaryOfThisYear = new Date(0);
	  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
	  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
	  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);
	  if (date.getTime() >= startOfNextYear.getTime()) {
	    return year + 1;
	  } else if (date.getTime() >= startOfThisYear.getTime()) {
	    return year;
	  } else {
	    return year - 1;
	  }
	}

	/**
	 * @name startOfISOWeekYear
	 * @category ISO Week-Numbering Year Helpers
	 * @summary Return the start of an ISO week-numbering year for the given date.
	 *
	 * @description
	 * Return the start of an ISO week-numbering year,
	 * which always starts 3 days before the year's first Thursday.
	 * The result will be in the local timezone.
	 *
	 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
	 *
	 * @param {Date|Number} date - the original date
	 * @returns {Date} the start of an ISO week-numbering year
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // The start of an ISO week-numbering year for 2 July 2005:
	 * const result = startOfISOWeekYear(new Date(2005, 6, 2))
	 * //=> Mon Jan 03 2005 00:00:00
	 */
	function startOfISOWeekYear(dirtyDate) {
	  requiredArgs(1, arguments);
	  var year = getISOWeekYear(dirtyDate);
	  var fourthOfJanuary = new Date(0);
	  fourthOfJanuary.setFullYear(year, 0, 4);
	  fourthOfJanuary.setHours(0, 0, 0, 0);
	  var date = startOfISOWeek(fourthOfJanuary);
	  return date;
	}

	var MILLISECONDS_IN_WEEK = 604800000;

	/**
	 * @name getISOWeek
	 * @category ISO Week Helpers
	 * @summary Get the ISO week of the given date.
	 *
	 * @description
	 * Get the ISO week of the given date.
	 *
	 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
	 *
	 * @param {Date|Number} date - the given date
	 * @returns {Number} the ISO week
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // Which week of the ISO-week numbering year is 2 January 2005?
	 * const result = getISOWeek(new Date(2005, 0, 2))
	 * //=> 53
	 */
	function getISOWeek(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var diff = startOfISOWeek(date).getTime() - startOfISOWeekYear(date).getTime();

	  // Round the number of days to the nearest integer
	  // because the number of milliseconds in a week is not constant
	  // (e.g. it's different in the week of the daylight saving time clock shift)
	  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
	}

	/**
	 * @name getMonth
	 * @category Month Helpers
	 * @summary Get the month of the given date.
	 *
	 * @description
	 * Get the month of the given date.
	 *
	 * @param {Date|Number} date - the given date
	 * @returns {Number} the month
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // Which month is 29 February 2012?
	 * const result = getMonth(new Date(2012, 1, 29))
	 * //=> 1
	 */
	function getMonth(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var month = date.getMonth();
	  return month;
	}

	/**
	 * @name getQuarter
	 * @category Quarter Helpers
	 * @summary Get the year quarter of the given date.
	 *
	 * @description
	 * Get the year quarter of the given date.
	 *
	 * @param {Date|Number} date - the given date
	 * @returns {Number} the quarter
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // Which quarter is 2 July 2014?
	 * const result = getQuarter(new Date(2014, 6, 2))
	 * //=> 3
	 */
	function getQuarter(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var quarter = Math.floor(date.getMonth() / 3) + 1;
	  return quarter;
	}

	/**
	 * @name getYear
	 * @category Year Helpers
	 * @summary Get the year of the given date.
	 *
	 * @description
	 * Get the year of the given date.
	 *
	 * @param {Date|Number} date - the given date
	 * @returns {Number} the year
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // Which year is 2 July 2014?
	 * const result = getYear(new Date(2014, 6, 2))
	 * //=> 2014
	 */
	function getYear(dirtyDate) {
	  requiredArgs(1, arguments);
	  return toDate(dirtyDate).getFullYear();
	}

	/**
	 * @name getTime
	 * @category Timestamp Helpers
	 * @summary Get the milliseconds timestamp of the given date.
	 *
	 * @description
	 * Get the milliseconds timestamp of the given date.
	 *
	 * @param {Date|Number} date - the given date
	 * @returns {Number} the timestamp
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // Get the timestamp of 29 February 2012 11:45:05.123:
	 * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))
	 * //=> 1330515905123
	 */
	function getTime(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var timestamp = date.getTime();
	  return timestamp;
	}

	/**
	 * @name setSeconds
	 * @category Second Helpers
	 * @summary Set the seconds to the given date.
	 *
	 * @description
	 * Set the seconds to the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} seconds - the seconds of the new date
	 * @returns {Date} the new date with the seconds set
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Set 45 seconds to 1 September 2014 11:30:40:
	 * const result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)
	 * //=> Mon Sep 01 2014 11:30:45
	 */
	function setSeconds(dirtyDate, dirtySeconds) {
	  requiredArgs(2, arguments);
	  var date = toDate(dirtyDate);
	  var seconds = toInteger(dirtySeconds);
	  date.setSeconds(seconds);
	  return date;
	}

	/**
	 * @name setMinutes
	 * @category Minute Helpers
	 * @summary Set the minutes to the given date.
	 *
	 * @description
	 * Set the minutes to the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} minutes - the minutes of the new date
	 * @returns {Date} the new date with the minutes set
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Set 45 minutes to 1 September 2014 11:30:40:
	 * const result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)
	 * //=> Mon Sep 01 2014 11:45:40
	 */
	function setMinutes(dirtyDate, dirtyMinutes) {
	  requiredArgs(2, arguments);
	  var date = toDate(dirtyDate);
	  var minutes = toInteger(dirtyMinutes);
	  date.setMinutes(minutes);
	  return date;
	}

	/**
	 * @name setHours
	 * @category Hour Helpers
	 * @summary Set the hours to the given date.
	 *
	 * @description
	 * Set the hours to the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} hours - the hours of the new date
	 * @returns {Date} the new date with the hours set
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Set 4 hours to 1 September 2014 11:30:00:
	 * const result = setHours(new Date(2014, 8, 1, 11, 30), 4)
	 * //=> Mon Sep 01 2014 04:30:00
	 */
	function setHours(dirtyDate, dirtyHours) {
	  requiredArgs(2, arguments);
	  var date = toDate(dirtyDate);
	  var hours = toInteger(dirtyHours);
	  date.setHours(hours);
	  return date;
	}

	/**
	 * @name getDaysInMonth
	 * @category Month Helpers
	 * @summary Get the number of days in a month of the given date.
	 *
	 * @description
	 * Get the number of days in a month of the given date.
	 *
	 * @param {Date|Number} date - the given date
	 * @returns {Number} the number of days in a month
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // How many days are in February 2000?
	 * const result = getDaysInMonth(new Date(2000, 1))
	 * //=> 29
	 */
	function getDaysInMonth(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var year = date.getFullYear();
	  var monthIndex = date.getMonth();
	  var lastDayOfMonth = new Date(0);
	  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
	  lastDayOfMonth.setHours(0, 0, 0, 0);
	  return lastDayOfMonth.getDate();
	}

	/**
	 * @name setMonth
	 * @category Month Helpers
	 * @summary Set the month to the given date.
	 *
	 * @description
	 * Set the month to the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} month - the month of the new date
	 * @returns {Date} the new date with the month set
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Set February to 1 September 2014:
	 * const result = setMonth(new Date(2014, 8, 1), 1)
	 * //=> Sat Feb 01 2014 00:00:00
	 */
	function setMonth(dirtyDate, dirtyMonth) {
	  requiredArgs(2, arguments);
	  var date = toDate(dirtyDate);
	  var month = toInteger(dirtyMonth);
	  var year = date.getFullYear();
	  var day = date.getDate();
	  var dateWithDesiredMonth = new Date(0);
	  dateWithDesiredMonth.setFullYear(year, month, 15);
	  dateWithDesiredMonth.setHours(0, 0, 0, 0);
	  var daysInMonth = getDaysInMonth(dateWithDesiredMonth);
	  // Set the last day of the new month
	  // if the original date was the last day of the longer month
	  date.setMonth(month, Math.min(day, daysInMonth));
	  return date;
	}

	/**
	 * @name setQuarter
	 * @category Quarter Helpers
	 * @summary Set the year quarter to the given date.
	 *
	 * @description
	 * Set the year quarter to the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} quarter - the quarter of the new date
	 * @returns {Date} the new date with the quarter set
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Set the 2nd quarter to 2 July 2014:
	 * const result = setQuarter(new Date(2014, 6, 2), 2)
	 * //=> Wed Apr 02 2014 00:00:00
	 */
	function setQuarter(dirtyDate, dirtyQuarter) {
	  requiredArgs(2, arguments);
	  var date = toDate(dirtyDate);
	  var quarter = toInteger(dirtyQuarter);
	  var oldQuarter = Math.floor(date.getMonth() / 3) + 1;
	  var diff = quarter - oldQuarter;
	  return setMonth(date, date.getMonth() + diff * 3);
	}

	/**
	 * @name setYear
	 * @category Year Helpers
	 * @summary Set the year to the given date.
	 *
	 * @description
	 * Set the year to the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} year - the year of the new date
	 * @returns {Date} the new date with the year set
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Set year 2013 to 1 September 2014:
	 * const result = setYear(new Date(2014, 8, 1), 2013)
	 * //=> Sun Sep 01 2013 00:00:00
	 */
	function setYear(dirtyDate, dirtyYear) {
	  requiredArgs(2, arguments);
	  var date = toDate(dirtyDate);
	  var year = toInteger(dirtyYear);

	  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date
	  if (isNaN(date.getTime())) {
	    return new Date(NaN);
	  }
	  date.setFullYear(year);
	  return date;
	}

	/**
	 * @name min
	 * @category Common Helpers
	 * @summary Returns the earliest of the given dates.
	 *
	 * @description
	 * Returns the earliest of the given dates.
	 *
	 * @param {Date[]|Number[]} datesArray - the dates to compare
	 * @returns {Date} - the earliest of the dates
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // Which of these dates is the earliest?
	 * const result = min([
	 *   new Date(1989, 6, 10),
	 *   new Date(1987, 1, 11),
	 *   new Date(1995, 6, 2),
	 *   new Date(1990, 0, 1)
	 * ])
	 * //=> Wed Feb 11 1987 00:00:00
	 */
	function min$2(dirtyDatesArray) {
	  requiredArgs(1, arguments);
	  var datesArray;
	  // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method
	  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {
	    datesArray = dirtyDatesArray;
	    // If `dirtyDatesArray` is Array-like Object, convert to Array.
	  } else if (_typeof(dirtyDatesArray) === 'object' && dirtyDatesArray !== null) {
	    datesArray = Array.prototype.slice.call(dirtyDatesArray);
	  } else {
	    // `dirtyDatesArray` is non-iterable, return Invalid Date
	    return new Date(NaN);
	  }
	  var result;
	  datesArray.forEach(function (dirtyDate) {
	    var currentDate = toDate(dirtyDate);
	    if (result === undefined || result > currentDate || isNaN(currentDate.getDate())) {
	      result = currentDate;
	    }
	  });
	  return result || new Date(NaN);
	}

	/**
	 * @name max
	 * @category Common Helpers
	 * @summary Return the latest of the given dates.
	 *
	 * @description
	 * Return the latest of the given dates.
	 *
	 * @param {Date[]|Number[]} datesArray - the dates to compare
	 * @returns {Date} the latest of the dates
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // Which of these dates is the latest?
	 * const result = max([
	 *   new Date(1989, 6, 10),
	 *   new Date(1987, 1, 11),
	 *   new Date(1995, 6, 2),
	 *   new Date(1990, 0, 1)
	 * ])
	 * //=> Sun Jul 02 1995 00:00:00
	 */
	function max$2(dirtyDatesArray) {
	  requiredArgs(1, arguments);
	  var datesArray;
	  // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method
	  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {
	    datesArray = dirtyDatesArray;

	    // If `dirtyDatesArray` is Array-like Object, convert to Array.
	  } else if (_typeof(dirtyDatesArray) === 'object' && dirtyDatesArray !== null) {
	    datesArray = Array.prototype.slice.call(dirtyDatesArray);
	  } else {
	    // `dirtyDatesArray` is non-iterable, return Invalid Date
	    return new Date(NaN);
	  }
	  var result;
	  datesArray.forEach(function (dirtyDate) {
	    var currentDate = toDate(dirtyDate);
	    if (result === undefined || result < currentDate || isNaN(Number(currentDate))) {
	      result = currentDate;
	    }
	  });
	  return result || new Date(NaN);
	}

	/**
	 * @name startOfDay
	 * @category Day Helpers
	 * @summary Return the start of a day for the given date.
	 *
	 * @description
	 * Return the start of a day for the given date.
	 * The result will be in the local timezone.
	 *
	 * @param {Date|Number} date - the original date
	 * @returns {Date} the start of a day
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // The start of a day for 2 September 2014 11:55:00:
	 * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))
	 * //=> Tue Sep 02 2014 00:00:00
	 */
	function startOfDay(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  date.setHours(0, 0, 0, 0);
	  return date;
	}

	var MILLISECONDS_IN_DAY = 86400000;

	/**
	 * @name differenceInCalendarDays
	 * @category Day Helpers
	 * @summary Get the number of calendar days between the given dates.
	 *
	 * @description
	 * Get the number of calendar days between the given dates. This means that the times are removed
	 * from the dates and then the difference in days is calculated.
	 *
	 * @param {Date|Number} dateLeft - the later date
	 * @param {Date|Number} dateRight - the earlier date
	 * @returns {Number} the number of calendar days
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // How many calendar days are between
	 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
	 * const result = differenceInCalendarDays(
	 *   new Date(2012, 6, 2, 0, 0),
	 *   new Date(2011, 6, 2, 23, 0)
	 * )
	 * //=> 366
	 * // How many calendar days are between
	 * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
	 * const result = differenceInCalendarDays(
	 *   new Date(2011, 6, 3, 0, 1),
	 *   new Date(2011, 6, 2, 23, 59)
	 * )
	 * //=> 1
	 */
	function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
	  requiredArgs(2, arguments);
	  var startOfDayLeft = startOfDay(dirtyDateLeft);
	  var startOfDayRight = startOfDay(dirtyDateRight);
	  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
	  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);

	  // Round the number of days to the nearest integer
	  // because the number of milliseconds in a day is not constant
	  // (e.g. it's different in the day of the daylight saving time clock shift)
	  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);
	}

	/**
	 * @name differenceInCalendarMonths
	 * @category Month Helpers
	 * @summary Get the number of calendar months between the given dates.
	 *
	 * @description
	 * Get the number of calendar months between the given dates.
	 *
	 * @param {Date|Number} dateLeft - the later date
	 * @param {Date|Number} dateRight - the earlier date
	 * @returns {Number} the number of calendar months
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // How many calendar months are between 31 January 2014 and 1 September 2014?
	 * const result = differenceInCalendarMonths(
	 *   new Date(2014, 8, 1),
	 *   new Date(2014, 0, 31)
	 * )
	 * //=> 8
	 */
	function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
	  requiredArgs(2, arguments);
	  var dateLeft = toDate(dirtyDateLeft);
	  var dateRight = toDate(dirtyDateRight);
	  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
	  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
	  return yearDiff * 12 + monthDiff;
	}

	/**
	 * @name differenceInCalendarYears
	 * @category Year Helpers
	 * @summary Get the number of calendar years between the given dates.
	 *
	 * @description
	 * Get the number of calendar years between the given dates.
	 *
	 * @param {Date|Number} dateLeft - the later date
	 * @param {Date|Number} dateRight - the earlier date
	 * @returns {Number} the number of calendar years
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // How many calendar years are between 31 December 2013 and 11 February 2015?
	 * const result = differenceInCalendarYears(
	 *   new Date(2015, 1, 11),
	 *   new Date(2013, 11, 31)
	 * )
	 * //=> 2
	 */
	function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {
	  requiredArgs(2, arguments);
	  var dateLeft = toDate(dirtyDateLeft);
	  var dateRight = toDate(dirtyDateRight);
	  return dateLeft.getFullYear() - dateRight.getFullYear();
	}

	/**
	 * @name startOfMonth
	 * @category Month Helpers
	 * @summary Return the start of a month for the given date.
	 *
	 * @description
	 * Return the start of a month for the given date.
	 * The result will be in the local timezone.
	 *
	 * @param {Date|Number} date - the original date
	 * @returns {Date} the start of a month
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // The start of a month for 2 September 2014 11:55:00:
	 * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))
	 * //=> Mon Sep 01 2014 00:00:00
	 */
	function startOfMonth(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  date.setDate(1);
	  date.setHours(0, 0, 0, 0);
	  return date;
	}

	/**
	 * @name startOfQuarter
	 * @category Quarter Helpers
	 * @summary Return the start of a year quarter for the given date.
	 *
	 * @description
	 * Return the start of a year quarter for the given date.
	 * The result will be in the local timezone.
	 *
	 * @param {Date|Number} date - the original date
	 * @returns {Date} the start of a quarter
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // The start of a quarter for 2 September 2014 11:55:00:
	 * const result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
	 * //=> Tue Jul 01 2014 00:00:00
	 */
	function startOfQuarter(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var currentMonth = date.getMonth();
	  var month = currentMonth - currentMonth % 3;
	  date.setMonth(month, 1);
	  date.setHours(0, 0, 0, 0);
	  return date;
	}

	/**
	 * @name startOfYear
	 * @category Year Helpers
	 * @summary Return the start of a year for the given date.
	 *
	 * @description
	 * Return the start of a year for the given date.
	 * The result will be in the local timezone.
	 *
	 * @param {Date|Number} date - the original date
	 * @returns {Date} the start of a year
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // The start of a year for 2 September 2014 11:55:00:
	 * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))
	 * //=> Wed Jan 01 2014 00:00:00
	 */
	function startOfYear(dirtyDate) {
	  requiredArgs(1, arguments);
	  var cleanDate = toDate(dirtyDate);
	  var date = new Date(0);
	  date.setFullYear(cleanDate.getFullYear(), 0, 1);
	  date.setHours(0, 0, 0, 0);
	  return date;
	}

	/**
	 * @name endOfDay
	 * @category Day Helpers
	 * @summary Return the end of a day for the given date.
	 *
	 * @description
	 * Return the end of a day for the given date.
	 * The result will be in the local timezone.
	 *
	 * @param {Date|Number} date - the original date
	 * @returns {Date} the end of a day
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // The end of a day for 2 September 2014 11:55:00:
	 * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
	 * //=> Tue Sep 02 2014 23:59:59.999
	 */
	function endOfDay(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  date.setHours(23, 59, 59, 999);
	  return date;
	}

	/**
	 * @name endOfMonth
	 * @category Month Helpers
	 * @summary Return the end of a month for the given date.
	 *
	 * @description
	 * Return the end of a month for the given date.
	 * The result will be in the local timezone.
	 *
	 * @param {Date|Number} date - the original date
	 * @returns {Date} the end of a month
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // The end of a month for 2 September 2014 11:55:00:
	 * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
	 * //=> Tue Sep 30 2014 23:59:59.999
	 */
	function endOfMonth(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var month = date.getMonth();
	  date.setFullYear(date.getFullYear(), month + 1, 0);
	  date.setHours(23, 59, 59, 999);
	  return date;
	}

	/**
	 * @name endOfYear
	 * @category Year Helpers
	 * @summary Return the end of a year for the given date.
	 *
	 * @description
	 * Return the end of a year for the given date.
	 * The result will be in the local timezone.
	 *
	 * @param {Date|Number} date - the original date
	 * @returns {Date} the end of a year
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // The end of a year for 2 September 2014 11:55:00:
	 * const result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))
	 * //=> Wed Dec 31 2014 23:59:59.999
	 */
	function endOfYear(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var year = date.getFullYear();
	  date.setFullYear(year + 1, 0, 0);
	  date.setHours(23, 59, 59, 999);
	  return date;
	}

	/**
	 * @name isEqual
	 * @category Common Helpers
	 * @summary Are the given dates equal?
	 *
	 * @description
	 * Are the given dates equal?
	 *
	 * @param {Date|Number} dateLeft - the first date to compare
	 * @param {Date|Number} dateRight - the second date to compare
	 * @returns {Boolean} the dates are equal
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?
	 * const result = isEqual(
	 *   new Date(2014, 6, 2, 6, 30, 45, 0),
	 *   new Date(2014, 6, 2, 6, 30, 45, 500)
	 * )
	 * //=> false
	 */
	function isEqual$2(dirtyLeftDate, dirtyRightDate) {
	  requiredArgs(2, arguments);
	  var dateLeft = toDate(dirtyLeftDate);
	  var dateRight = toDate(dirtyRightDate);
	  return dateLeft.getTime() === dateRight.getTime();
	}

	/**
	 * @name isSameDay
	 * @category Day Helpers
	 * @summary Are the given dates in the same day (and year and month)?
	 *
	 * @description
	 * Are the given dates in the same day (and year and month)?
	 *
	 * @param {Date|Number} dateLeft - the first date to check
	 * @param {Date|Number} dateRight - the second date to check
	 * @returns {Boolean} the dates are in the same day (and year and month)
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?
	 * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))
	 * //=> true
	 *
	 * @example
	 * // Are 4 September and 4 October in the same day?
	 * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))
	 * //=> false
	 *
	 * @example
	 * // Are 4 September, 2014 and 4 September, 2015 in the same day?
	 * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))
	 * //=> false
	 */
	function isSameDay(dirtyDateLeft, dirtyDateRight) {
	  requiredArgs(2, arguments);
	  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);
	  var dateRightStartOfDay = startOfDay(dirtyDateRight);
	  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
	}

	/**
	 * @name isSameMonth
	 * @category Month Helpers
	 * @summary Are the given dates in the same month (and year)?
	 *
	 * @description
	 * Are the given dates in the same month (and year)?
	 *
	 * @param {Date|Number} dateLeft - the first date to check
	 * @param {Date|Number} dateRight - the second date to check
	 * @returns {Boolean} the dates are in the same month (and year)
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Are 2 September 2014 and 25 September 2014 in the same month?
	 * const result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))
	 * //=> true
	 *
	 * @example
	 * // Are 2 September 2014 and 25 September 2015 in the same month?
	 * const result = isSameMonth(new Date(2014, 8, 2), new Date(2015, 8, 25))
	 * //=> false
	 */
	function isSameMonth(dirtyDateLeft, dirtyDateRight) {
	  requiredArgs(2, arguments);
	  var dateLeft = toDate(dirtyDateLeft);
	  var dateRight = toDate(dirtyDateRight);
	  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();
	}

	/**
	 * @name isSameYear
	 * @category Year Helpers
	 * @summary Are the given dates in the same year?
	 *
	 * @description
	 * Are the given dates in the same year?
	 *
	 * @param {Date|Number} dateLeft - the first date to check
	 * @param {Date|Number} dateRight - the second date to check
	 * @returns {Boolean} the dates are in the same year
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Are 2 September 2014 and 25 September 2014 in the same year?
	 * const result = isSameYear(new Date(2014, 8, 2), new Date(2014, 8, 25))
	 * //=> true
	 */
	function isSameYear(dirtyDateLeft, dirtyDateRight) {
	  requiredArgs(2, arguments);
	  var dateLeft = toDate(dirtyDateLeft);
	  var dateRight = toDate(dirtyDateRight);
	  return dateLeft.getFullYear() === dateRight.getFullYear();
	}

	/**
	 * @name isSameQuarter
	 * @category Quarter Helpers
	 * @summary Are the given dates in the same quarter (and year)?
	 *
	 * @description
	 * Are the given dates in the same quarter (and year)?
	 *
	 * @param {Date|Number} dateLeft - the first date to check
	 * @param {Date|Number} dateRight - the second date to check
	 * @returns {Boolean} the dates are in the same quarter (and year)
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Are 1 January 2014 and 8 March 2014 in the same quarter?
	 * const result = isSameQuarter(new Date(2014, 0, 1), new Date(2014, 2, 8))
	 * //=> true
	 *
	 * @example
	 * // Are 1 January 2014 and 1 January 2015 in the same quarter?
	 * const result = isSameQuarter(new Date(2014, 0, 1), new Date(2015, 0, 1))
	 * //=> false
	 */
	function isSameQuarter(dirtyDateLeft, dirtyDateRight) {
	  requiredArgs(2, arguments);
	  var dateLeftStartOfQuarter = startOfQuarter(dirtyDateLeft);
	  var dateRightStartOfQuarter = startOfQuarter(dirtyDateRight);
	  return dateLeftStartOfQuarter.getTime() === dateRightStartOfQuarter.getTime();
	}

	/**
	 * @name isAfter
	 * @category Common Helpers
	 * @summary Is the first date after the second one?
	 *
	 * @description
	 * Is the first date after the second one?
	 *
	 * @param {Date|Number} date - the date that should be after the other one to return true
	 * @param {Date|Number} dateToCompare - the date to compare with
	 * @returns {Boolean} the first date is after the second date
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Is 10 July 1989 after 11 February 1987?
	 * const result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
	 * //=> true
	 */
	function isAfter(dirtyDate, dirtyDateToCompare) {
	  requiredArgs(2, arguments);
	  var date = toDate(dirtyDate);
	  var dateToCompare = toDate(dirtyDateToCompare);
	  return date.getTime() > dateToCompare.getTime();
	}

	/**
	 * @name isBefore
	 * @category Common Helpers
	 * @summary Is the first date before the second one?
	 *
	 * @description
	 * Is the first date before the second one?
	 *
	 * @param {Date|Number} date - the date that should be before the other one to return true
	 * @param {Date|Number} dateToCompare - the date to compare with
	 * @returns {Boolean} the first date is before the second date
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Is 10 July 1989 before 11 February 1987?
	 * const result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
	 * //=> false
	 */
	function isBefore(dirtyDate, dirtyDateToCompare) {
	  requiredArgs(2, arguments);
	  var date = toDate(dirtyDate);
	  var dateToCompare = toDate(dirtyDateToCompare);
	  return date.getTime() < dateToCompare.getTime();
	}

	/**
	 * @name isWithinInterval
	 * @category Interval Helpers
	 * @summary Is the given date within the interval?
	 *
	 * @description
	 * Is the given date within the interval? (Including start and end.)
	 *
	 * @param {Date|Number} date - the date to check
	 * @param {Interval} interval - the interval to check
	 * @returns {Boolean} the date is within the interval
	 * @throws {TypeError} 2 arguments required
	 * @throws {RangeError} The start of an interval cannot be after its end
	 * @throws {RangeError} Date in interval cannot be `Invalid Date`
	 *
	 * @example
	 * // For the date within the interval:
	 * isWithinInterval(new Date(2014, 0, 3), {
	 *   start: new Date(2014, 0, 1),
	 *   end: new Date(2014, 0, 7)
	 * })
	 * //=> true
	 *
	 * @example
	 * // For the date outside of the interval:
	 * isWithinInterval(new Date(2014, 0, 10), {
	 *   start: new Date(2014, 0, 1),
	 *   end: new Date(2014, 0, 7)
	 * })
	 * //=> false
	 *
	 * @example
	 * // For date equal to interval start:
	 * isWithinInterval(date, { start, end: date }) // => true
	 *
	 * @example
	 * // For date equal to interval end:
	 * isWithinInterval(date, { start: date, end }) // => true
	 */
	function isWithinInterval(dirtyDate, interval) {
	  requiredArgs(2, arguments);
	  var time = toDate(dirtyDate).getTime();
	  var startTime = toDate(interval.start).getTime();
	  var endTime = toDate(interval.end).getTime();

	  // Throw an exception if start date is after end date or if any date is `Invalid Date`
	  if (!(startTime <= endTime)) {
	    throw new RangeError('Invalid interval');
	  }
	  return time >= startTime && time <= endTime;
	}

	function _arrayLikeToArray$1(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;
	  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
	  return arr2;
	}

	function _unsupportedIterableToArray$1(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
	}

	function _createForOfIteratorHelper(o, allowArrayLike) {
	  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
	  if (!it) {
	    if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
	      if (it) o = it;
	      var i = 0;
	      var F = function F() {};
	      return {
	        s: F,
	        n: function n() {
	          if (i >= o.length) return {
	            done: true
	          };
	          return {
	            done: false,
	            value: o[i++]
	          };
	        },
	        e: function e(_e) {
	          throw _e;
	        },
	        f: F
	      };
	    }
	    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	  }
	  var normalCompletion = true,
	    didErr = false,
	    err;
	  return {
	    s: function s() {
	      it = it.call(o);
	    },
	    n: function n() {
	      var step = it.next();
	      normalCompletion = step.done;
	      return step;
	    },
	    e: function e(_e2) {
	      didErr = true;
	      err = _e2;
	    },
	    f: function f() {
	      try {
	        if (!normalCompletion && it["return"] != null) it["return"]();
	      } finally {
	        if (didErr) throw err;
	      }
	    }
	  };
	}

	function assign$2(target, object) {
	  if (target == null) {
	    throw new TypeError('assign requires that input parameter not be null or undefined');
	  }
	  for (var property in object) {
	    if (Object.prototype.hasOwnProperty.call(object, property)) {
	      target[property] = object[property];
	    }
	  }
	  return target;
	}

	function _assertThisInitialized$2(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	  return self;
	}

	function _setPrototypeOf$2(o, p) {
	  _setPrototypeOf$2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };
	  return _setPrototypeOf$2(o, p);
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }
	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  Object.defineProperty(subClass, "prototype", {
	    writable: false
	  });
	  if (superClass) _setPrototypeOf$2(subClass, superClass);
	}

	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	function _isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;
	  try {
	    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (call && (_typeof(call) === "object" || typeof call === "function")) {
	    return call;
	  } else if (call !== void 0) {
	    throw new TypeError("Derived constructors may only return object or undefined");
	  }
	  return _assertThisInitialized$2(self);
	}

	function _createSuper(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct();
	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf(Derived),
	      result;
	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf(this).constructor;
	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }
	    return _possibleConstructorReturn(this, result);
	  };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _toPrimitive$1(input, hint) {
	  if (_typeof(input) !== "object" || input === null) return input;
	  var prim = input[Symbol.toPrimitive];
	  if (prim !== undefined) {
	    var res = prim.call(input, hint || "default");
	    if (_typeof(res) !== "object") return res;
	    throw new TypeError("@@toPrimitive must return a primitive value.");
	  }
	  return (hint === "string" ? String : Number)(input);
	}

	function _toPropertyKey$1(arg) {
	  var key = _toPrimitive$1(arg, "string");
	  return _typeof(key) === "symbol" ? key : String(key);
	}

	function _defineProperties$2(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, _toPropertyKey$1(descriptor.key), descriptor);
	  }
	}
	function _createClass$1(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties$2(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties$2(Constructor, staticProps);
	  Object.defineProperty(Constructor, "prototype", {
	    writable: false
	  });
	  return Constructor;
	}

	function _defineProperty$1(obj, key, value) {
	  key = _toPropertyKey$1(key);
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	  return obj;
	}

	var TIMEZONE_UNIT_PRIORITY = 10;
	var Setter = /*#__PURE__*/function () {
	  function Setter() {
	    _classCallCheck(this, Setter);
	    _defineProperty$1(this, "priority", void 0);
	    _defineProperty$1(this, "subPriority", 0);
	  }
	  _createClass$1(Setter, [{
	    key: "validate",
	    value: function validate(_utcDate, _options) {
	      return true;
	    }
	  }]);
	  return Setter;
	}();
	var ValueSetter = /*#__PURE__*/function (_Setter) {
	  _inherits(ValueSetter, _Setter);
	  var _super = _createSuper(ValueSetter);
	  function ValueSetter(value, validateValue, setValue, priority, subPriority) {
	    var _this;
	    _classCallCheck(this, ValueSetter);
	    _this = _super.call(this);
	    _this.value = value;
	    _this.validateValue = validateValue;
	    _this.setValue = setValue;
	    _this.priority = priority;
	    if (subPriority) {
	      _this.subPriority = subPriority;
	    }
	    return _this;
	  }
	  _createClass$1(ValueSetter, [{
	    key: "validate",
	    value: function validate(utcDate, options) {
	      return this.validateValue(utcDate, this.value, options);
	    }
	  }, {
	    key: "set",
	    value: function set(utcDate, flags, options) {
	      return this.setValue(utcDate, flags, this.value, options);
	    }
	  }]);
	  return ValueSetter;
	}(Setter);
	var DateToSystemTimezoneSetter = /*#__PURE__*/function (_Setter2) {
	  _inherits(DateToSystemTimezoneSetter, _Setter2);
	  var _super2 = _createSuper(DateToSystemTimezoneSetter);
	  function DateToSystemTimezoneSetter() {
	    var _this2;
	    _classCallCheck(this, DateToSystemTimezoneSetter);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this2 = _super2.call.apply(_super2, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
	    _defineProperty$1(_assertThisInitialized$2(_this2), "subPriority", -1);
	    return _this2;
	  }
	  _createClass$1(DateToSystemTimezoneSetter, [{
	    key: "set",
	    value: function set(date, flags) {
	      if (flags.timestampIsSet) {
	        return date;
	      }
	      var convertedDate = new Date(0);
	      convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
	      convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
	      return convertedDate;
	    }
	  }]);
	  return DateToSystemTimezoneSetter;
	}(Setter);

	var Parser = /*#__PURE__*/function () {
	  function Parser() {
	    _classCallCheck(this, Parser);
	    _defineProperty$1(this, "incompatibleTokens", void 0);
	    _defineProperty$1(this, "priority", void 0);
	    _defineProperty$1(this, "subPriority", void 0);
	  }
	  _createClass$1(Parser, [{
	    key: "run",
	    value: function run(dateString, token, match, options) {
	      var result = this.parse(dateString, token, match, options);
	      if (!result) {
	        return null;
	      }
	      return {
	        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
	        rest: result.rest
	      };
	    }
	  }, {
	    key: "validate",
	    value: function validate(_utcDate, _value, _options) {
	      return true;
	    }
	  }]);
	  return Parser;
	}();

	var EraParser = /*#__PURE__*/function (_Parser) {
	  _inherits(EraParser, _Parser);
	  var _super = _createSuper(EraParser);
	  function EraParser() {
	    var _this;
	    _classCallCheck(this, EraParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 140);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['R', 'u', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(EraParser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      switch (token) {
	        // AD, BC
	        case 'G':
	        case 'GG':
	        case 'GGG':
	          return match.era(dateString, {
	            width: 'abbreviated'
	          }) || match.era(dateString, {
	            width: 'narrow'
	          });
	        // A, B
	        case 'GGGGG':
	          return match.era(dateString, {
	            width: 'narrow'
	          });
	        // Anno Domini, Before Christ
	        case 'GGGG':
	        default:
	          return match.era(dateString, {
	            width: 'wide'
	          }) || match.era(dateString, {
	            width: 'abbreviated'
	          }) || match.era(dateString, {
	            width: 'narrow'
	          });
	      }
	    }
	  }, {
	    key: "set",
	    value: function set(date, flags, value) {
	      flags.era = value;
	      date.setUTCFullYear(value, 0, 1);
	      date.setUTCHours(0, 0, 0, 0);
	      return date;
	    }
	  }]);
	  return EraParser;
	}(Parser);

	/**
	 * Days in 1 week.
	 *
	 * @name daysInWeek
	 * @constant
	 * @type {number}
	 * @default
	 */

	/**
	 * Milliseconds in 1 minute
	 *
	 * @name millisecondsInMinute
	 * @constant
	 * @type {number}
	 * @default
	 */
	var millisecondsInMinute = 60000;

	/**
	 * Milliseconds in 1 hour
	 *
	 * @name millisecondsInHour
	 * @constant
	 * @type {number}
	 * @default
	 */
	var millisecondsInHour = 3600000;

	/**
	 * Milliseconds in 1 second
	 *
	 * @name millisecondsInSecond
	 * @constant
	 * @type {number}
	 * @default
	 */
	var millisecondsInSecond = 1000;

	var numericPatterns = {
	  month: /^(1[0-2]|0?\d)/,
	  // 0 to 12
	  date: /^(3[0-1]|[0-2]?\d)/,
	  // 0 to 31
	  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
	  // 0 to 366
	  week: /^(5[0-3]|[0-4]?\d)/,
	  // 0 to 53
	  hour23h: /^(2[0-3]|[0-1]?\d)/,
	  // 0 to 23
	  hour24h: /^(2[0-4]|[0-1]?\d)/,
	  // 0 to 24
	  hour11h: /^(1[0-1]|0?\d)/,
	  // 0 to 11
	  hour12h: /^(1[0-2]|0?\d)/,
	  // 0 to 12
	  minute: /^[0-5]?\d/,
	  // 0 to 59
	  second: /^[0-5]?\d/,
	  // 0 to 59

	  singleDigit: /^\d/,
	  // 0 to 9
	  twoDigits: /^\d{1,2}/,
	  // 0 to 99
	  threeDigits: /^\d{1,3}/,
	  // 0 to 999
	  fourDigits: /^\d{1,4}/,
	  // 0 to 9999

	  anyDigitsSigned: /^-?\d+/,
	  singleDigitSigned: /^-?\d/,
	  // 0 to 9, -0 to -9
	  twoDigitsSigned: /^-?\d{1,2}/,
	  // 0 to 99, -0 to -99
	  threeDigitsSigned: /^-?\d{1,3}/,
	  // 0 to 999, -0 to -999
	  fourDigitsSigned: /^-?\d{1,4}/ // 0 to 9999, -0 to -9999
	};

	var timezonePatterns = {
	  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
	  basic: /^([+-])(\d{2})(\d{2})|Z/,
	  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
	  extended: /^([+-])(\d{2}):(\d{2})|Z/,
	  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
	};

	function mapValue(parseFnResult, mapFn) {
	  if (!parseFnResult) {
	    return parseFnResult;
	  }
	  return {
	    value: mapFn(parseFnResult.value),
	    rest: parseFnResult.rest
	  };
	}
	function parseNumericPattern(pattern, dateString) {
	  var matchResult = dateString.match(pattern);
	  if (!matchResult) {
	    return null;
	  }
	  return {
	    value: parseInt(matchResult[0], 10),
	    rest: dateString.slice(matchResult[0].length)
	  };
	}
	function parseTimezonePattern(pattern, dateString) {
	  var matchResult = dateString.match(pattern);
	  if (!matchResult) {
	    return null;
	  }

	  // Input is 'Z'
	  if (matchResult[0] === 'Z') {
	    return {
	      value: 0,
	      rest: dateString.slice(1)
	    };
	  }
	  var sign = matchResult[1] === '+' ? 1 : -1;
	  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
	  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
	  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
	  return {
	    value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
	    rest: dateString.slice(matchResult[0].length)
	  };
	}
	function parseAnyDigitsSigned(dateString) {
	  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
	}
	function parseNDigits(n, dateString) {
	  switch (n) {
	    case 1:
	      return parseNumericPattern(numericPatterns.singleDigit, dateString);
	    case 2:
	      return parseNumericPattern(numericPatterns.twoDigits, dateString);
	    case 3:
	      return parseNumericPattern(numericPatterns.threeDigits, dateString);
	    case 4:
	      return parseNumericPattern(numericPatterns.fourDigits, dateString);
	    default:
	      return parseNumericPattern(new RegExp('^\\d{1,' + n + '}'), dateString);
	  }
	}
	function parseNDigitsSigned(n, dateString) {
	  switch (n) {
	    case 1:
	      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
	    case 2:
	      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
	    case 3:
	      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
	    case 4:
	      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
	    default:
	      return parseNumericPattern(new RegExp('^-?\\d{1,' + n + '}'), dateString);
	  }
	}
	function dayPeriodEnumToHours(dayPeriod) {
	  switch (dayPeriod) {
	    case 'morning':
	      return 4;
	    case 'evening':
	      return 17;
	    case 'pm':
	    case 'noon':
	    case 'afternoon':
	      return 12;
	    case 'am':
	    case 'midnight':
	    case 'night':
	    default:
	      return 0;
	  }
	}
	function normalizeTwoDigitYear(twoDigitYear, currentYear) {
	  var isCommonEra = currentYear > 0;
	  // Absolute number of the current year:
	  // 1 -> 1 AC
	  // 0 -> 1 BC
	  // -1 -> 2 BC
	  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
	  var result;
	  if (absCurrentYear <= 50) {
	    result = twoDigitYear || 100;
	  } else {
	    var rangeEnd = absCurrentYear + 50;
	    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
	    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
	    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
	  }
	  return isCommonEra ? result : 1 - result;
	}
	function isLeapYearIndex$1(year) {
	  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
	}

	// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
	// | Year     |     y | yy |   yyy |  yyyy | yyyyy |
	// |----------|-------|----|-------|-------|-------|
	// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
	// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
	// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
	// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
	// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
	var YearParser = /*#__PURE__*/function (_Parser) {
	  _inherits(YearParser, _Parser);
	  var _super = _createSuper(YearParser);
	  function YearParser() {
	    var _this;
	    _classCallCheck(this, YearParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 130);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(YearParser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      var valueCallback = function valueCallback(year) {
	        return {
	          year: year,
	          isTwoDigitYear: token === 'yy'
	        };
	      };
	      switch (token) {
	        case 'y':
	          return mapValue(parseNDigits(4, dateString), valueCallback);
	        case 'yo':
	          return mapValue(match.ordinalNumber(dateString, {
	            unit: 'year'
	          }), valueCallback);
	        default:
	          return mapValue(parseNDigits(token.length, dateString), valueCallback);
	      }
	    }
	  }, {
	    key: "validate",
	    value: function validate(_date, value) {
	      return value.isTwoDigitYear || value.year > 0;
	    }
	  }, {
	    key: "set",
	    value: function set(date, flags, value) {
	      var currentYear = date.getUTCFullYear();
	      if (value.isTwoDigitYear) {
	        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
	        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
	        date.setUTCHours(0, 0, 0, 0);
	        return date;
	      }
	      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
	      date.setUTCFullYear(year, 0, 1);
	      date.setUTCHours(0, 0, 0, 0);
	      return date;
	    }
	  }]);
	  return YearParser;
	}(Parser);

	// Local week-numbering year
	var LocalWeekYearParser = /*#__PURE__*/function (_Parser) {
	  _inherits(LocalWeekYearParser, _Parser);
	  var _super = _createSuper(LocalWeekYearParser);
	  function LocalWeekYearParser() {
	    var _this;
	    _classCallCheck(this, LocalWeekYearParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 130);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(LocalWeekYearParser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      var valueCallback = function valueCallback(year) {
	        return {
	          year: year,
	          isTwoDigitYear: token === 'YY'
	        };
	      };
	      switch (token) {
	        case 'Y':
	          return mapValue(parseNDigits(4, dateString), valueCallback);
	        case 'Yo':
	          return mapValue(match.ordinalNumber(dateString, {
	            unit: 'year'
	          }), valueCallback);
	        default:
	          return mapValue(parseNDigits(token.length, dateString), valueCallback);
	      }
	    }
	  }, {
	    key: "validate",
	    value: function validate(_date, value) {
	      return value.isTwoDigitYear || value.year > 0;
	    }
	  }, {
	    key: "set",
	    value: function set(date, flags, value, options) {
	      var currentYear = getUTCWeekYear(date, options);
	      if (value.isTwoDigitYear) {
	        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
	        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
	        date.setUTCHours(0, 0, 0, 0);
	        return startOfUTCWeek(date, options);
	      }
	      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
	      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
	      date.setUTCHours(0, 0, 0, 0);
	      return startOfUTCWeek(date, options);
	    }
	  }]);
	  return LocalWeekYearParser;
	}(Parser);

	var ISOWeekYearParser = /*#__PURE__*/function (_Parser) {
	  _inherits(ISOWeekYearParser, _Parser);
	  var _super = _createSuper(ISOWeekYearParser);
	  function ISOWeekYearParser() {
	    var _this;
	    _classCallCheck(this, ISOWeekYearParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 130);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(ISOWeekYearParser, [{
	    key: "parse",
	    value: function parse(dateString, token) {
	      if (token === 'R') {
	        return parseNDigitsSigned(4, dateString);
	      }
	      return parseNDigitsSigned(token.length, dateString);
	    }
	  }, {
	    key: "set",
	    value: function set(_date, _flags, value) {
	      var firstWeekOfYear = new Date(0);
	      firstWeekOfYear.setUTCFullYear(value, 0, 4);
	      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
	      return startOfUTCISOWeek(firstWeekOfYear);
	    }
	  }]);
	  return ISOWeekYearParser;
	}(Parser);

	var ExtendedYearParser = /*#__PURE__*/function (_Parser) {
	  _inherits(ExtendedYearParser, _Parser);
	  var _super = _createSuper(ExtendedYearParser);
	  function ExtendedYearParser() {
	    var _this;
	    _classCallCheck(this, ExtendedYearParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 130);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(ExtendedYearParser, [{
	    key: "parse",
	    value: function parse(dateString, token) {
	      if (token === 'u') {
	        return parseNDigitsSigned(4, dateString);
	      }
	      return parseNDigitsSigned(token.length, dateString);
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value) {
	      date.setUTCFullYear(value, 0, 1);
	      date.setUTCHours(0, 0, 0, 0);
	      return date;
	    }
	  }]);
	  return ExtendedYearParser;
	}(Parser);

	var QuarterParser = /*#__PURE__*/function (_Parser) {
	  _inherits(QuarterParser, _Parser);
	  var _super = _createSuper(QuarterParser);
	  function QuarterParser() {
	    var _this;
	    _classCallCheck(this, QuarterParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 120);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(QuarterParser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      switch (token) {
	        // 1, 2, 3, 4
	        case 'Q':
	        case 'QQ':
	          // 01, 02, 03, 04
	          return parseNDigits(token.length, dateString);
	        // 1st, 2nd, 3rd, 4th
	        case 'Qo':
	          return match.ordinalNumber(dateString, {
	            unit: 'quarter'
	          });
	        // Q1, Q2, Q3, Q4
	        case 'QQQ':
	          return match.quarter(dateString, {
	            width: 'abbreviated',
	            context: 'formatting'
	          }) || match.quarter(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	        // 1, 2, 3, 4 (narrow quarter; could be not numerical)
	        case 'QQQQQ':
	          return match.quarter(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	        // 1st quarter, 2nd quarter, ...
	        case 'QQQQ':
	        default:
	          return match.quarter(dateString, {
	            width: 'wide',
	            context: 'formatting'
	          }) || match.quarter(dateString, {
	            width: 'abbreviated',
	            context: 'formatting'
	          }) || match.quarter(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	      }
	    }
	  }, {
	    key: "validate",
	    value: function validate(_date, value) {
	      return value >= 1 && value <= 4;
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value) {
	      date.setUTCMonth((value - 1) * 3, 1);
	      date.setUTCHours(0, 0, 0, 0);
	      return date;
	    }
	  }]);
	  return QuarterParser;
	}(Parser);

	var StandAloneQuarterParser = /*#__PURE__*/function (_Parser) {
	  _inherits(StandAloneQuarterParser, _Parser);
	  var _super = _createSuper(StandAloneQuarterParser);
	  function StandAloneQuarterParser() {
	    var _this;
	    _classCallCheck(this, StandAloneQuarterParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 120);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(StandAloneQuarterParser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      switch (token) {
	        // 1, 2, 3, 4
	        case 'q':
	        case 'qq':
	          // 01, 02, 03, 04
	          return parseNDigits(token.length, dateString);
	        // 1st, 2nd, 3rd, 4th
	        case 'qo':
	          return match.ordinalNumber(dateString, {
	            unit: 'quarter'
	          });
	        // Q1, Q2, Q3, Q4
	        case 'qqq':
	          return match.quarter(dateString, {
	            width: 'abbreviated',
	            context: 'standalone'
	          }) || match.quarter(dateString, {
	            width: 'narrow',
	            context: 'standalone'
	          });
	        // 1, 2, 3, 4 (narrow quarter; could be not numerical)
	        case 'qqqqq':
	          return match.quarter(dateString, {
	            width: 'narrow',
	            context: 'standalone'
	          });
	        // 1st quarter, 2nd quarter, ...
	        case 'qqqq':
	        default:
	          return match.quarter(dateString, {
	            width: 'wide',
	            context: 'standalone'
	          }) || match.quarter(dateString, {
	            width: 'abbreviated',
	            context: 'standalone'
	          }) || match.quarter(dateString, {
	            width: 'narrow',
	            context: 'standalone'
	          });
	      }
	    }
	  }, {
	    key: "validate",
	    value: function validate(_date, value) {
	      return value >= 1 && value <= 4;
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value) {
	      date.setUTCMonth((value - 1) * 3, 1);
	      date.setUTCHours(0, 0, 0, 0);
	      return date;
	    }
	  }]);
	  return StandAloneQuarterParser;
	}(Parser);

	var MonthParser = /*#__PURE__*/function (_Parser) {
	  _inherits(MonthParser, _Parser);
	  var _super = _createSuper(MonthParser);
	  function MonthParser() {
	    var _this;
	    _classCallCheck(this, MonthParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 110);
	    return _this;
	  }
	  _createClass$1(MonthParser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      var valueCallback = function valueCallback(value) {
	        return value - 1;
	      };
	      switch (token) {
	        // 1, 2, ..., 12
	        case 'M':
	          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);
	        // 01, 02, ..., 12
	        case 'MM':
	          return mapValue(parseNDigits(2, dateString), valueCallback);
	        // 1st, 2nd, ..., 12th
	        case 'Mo':
	          return mapValue(match.ordinalNumber(dateString, {
	            unit: 'month'
	          }), valueCallback);
	        // Jan, Feb, ..., Dec
	        case 'MMM':
	          return match.month(dateString, {
	            width: 'abbreviated',
	            context: 'formatting'
	          }) || match.month(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	        // J, F, ..., D
	        case 'MMMMM':
	          return match.month(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	        // January, February, ..., December
	        case 'MMMM':
	        default:
	          return match.month(dateString, {
	            width: 'wide',
	            context: 'formatting'
	          }) || match.month(dateString, {
	            width: 'abbreviated',
	            context: 'formatting'
	          }) || match.month(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	      }
	    }
	  }, {
	    key: "validate",
	    value: function validate(_date, value) {
	      return value >= 0 && value <= 11;
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value) {
	      date.setUTCMonth(value, 1);
	      date.setUTCHours(0, 0, 0, 0);
	      return date;
	    }
	  }]);
	  return MonthParser;
	}(Parser);

	var StandAloneMonthParser = /*#__PURE__*/function (_Parser) {
	  _inherits(StandAloneMonthParser, _Parser);
	  var _super = _createSuper(StandAloneMonthParser);
	  function StandAloneMonthParser() {
	    var _this;
	    _classCallCheck(this, StandAloneMonthParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 110);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(StandAloneMonthParser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      var valueCallback = function valueCallback(value) {
	        return value - 1;
	      };
	      switch (token) {
	        // 1, 2, ..., 12
	        case 'L':
	          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);
	        // 01, 02, ..., 12
	        case 'LL':
	          return mapValue(parseNDigits(2, dateString), valueCallback);
	        // 1st, 2nd, ..., 12th
	        case 'Lo':
	          return mapValue(match.ordinalNumber(dateString, {
	            unit: 'month'
	          }), valueCallback);
	        // Jan, Feb, ..., Dec
	        case 'LLL':
	          return match.month(dateString, {
	            width: 'abbreviated',
	            context: 'standalone'
	          }) || match.month(dateString, {
	            width: 'narrow',
	            context: 'standalone'
	          });
	        // J, F, ..., D
	        case 'LLLLL':
	          return match.month(dateString, {
	            width: 'narrow',
	            context: 'standalone'
	          });
	        // January, February, ..., December
	        case 'LLLL':
	        default:
	          return match.month(dateString, {
	            width: 'wide',
	            context: 'standalone'
	          }) || match.month(dateString, {
	            width: 'abbreviated',
	            context: 'standalone'
	          }) || match.month(dateString, {
	            width: 'narrow',
	            context: 'standalone'
	          });
	      }
	    }
	  }, {
	    key: "validate",
	    value: function validate(_date, value) {
	      return value >= 0 && value <= 11;
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value) {
	      date.setUTCMonth(value, 1);
	      date.setUTCHours(0, 0, 0, 0);
	      return date;
	    }
	  }]);
	  return StandAloneMonthParser;
	}(Parser);

	function setUTCWeek(dirtyDate, dirtyWeek, options) {
	  requiredArgs(2, arguments);
	  var date = toDate(dirtyDate);
	  var week = toInteger(dirtyWeek);
	  var diff = getUTCWeek(date, options) - week;
	  date.setUTCDate(date.getUTCDate() - diff * 7);
	  return date;
	}

	var LocalWeekParser = /*#__PURE__*/function (_Parser) {
	  _inherits(LocalWeekParser, _Parser);
	  var _super = _createSuper(LocalWeekParser);
	  function LocalWeekParser() {
	    var _this;
	    _classCallCheck(this, LocalWeekParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 100);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(LocalWeekParser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      switch (token) {
	        case 'w':
	          return parseNumericPattern(numericPatterns.week, dateString);
	        case 'wo':
	          return match.ordinalNumber(dateString, {
	            unit: 'week'
	          });
	        default:
	          return parseNDigits(token.length, dateString);
	      }
	    }
	  }, {
	    key: "validate",
	    value: function validate(_date, value) {
	      return value >= 1 && value <= 53;
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value, options) {
	      return startOfUTCWeek(setUTCWeek(date, value, options), options);
	    }
	  }]);
	  return LocalWeekParser;
	}(Parser);

	function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
	  requiredArgs(2, arguments);
	  var date = toDate(dirtyDate);
	  var isoWeek = toInteger(dirtyISOWeek);
	  var diff = getUTCISOWeek(date) - isoWeek;
	  date.setUTCDate(date.getUTCDate() - diff * 7);
	  return date;
	}

	var ISOWeekParser = /*#__PURE__*/function (_Parser) {
	  _inherits(ISOWeekParser, _Parser);
	  var _super = _createSuper(ISOWeekParser);
	  function ISOWeekParser() {
	    var _this;
	    _classCallCheck(this, ISOWeekParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 100);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(ISOWeekParser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      switch (token) {
	        case 'I':
	          return parseNumericPattern(numericPatterns.week, dateString);
	        case 'Io':
	          return match.ordinalNumber(dateString, {
	            unit: 'week'
	          });
	        default:
	          return parseNDigits(token.length, dateString);
	      }
	    }
	  }, {
	    key: "validate",
	    value: function validate(_date, value) {
	      return value >= 1 && value <= 53;
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value) {
	      return startOfUTCISOWeek(setUTCISOWeek(date, value));
	    }
	  }]);
	  return ISOWeekParser;
	}(Parser);

	var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
	var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

	// Day of the month
	var DateParser = /*#__PURE__*/function (_Parser) {
	  _inherits(DateParser, _Parser);
	  var _super = _createSuper(DateParser);
	  function DateParser() {
	    var _this;
	    _classCallCheck(this, DateParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 90);
	    _defineProperty$1(_assertThisInitialized$2(_this), "subPriority", 1);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(DateParser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      switch (token) {
	        case 'd':
	          return parseNumericPattern(numericPatterns.date, dateString);
	        case 'do':
	          return match.ordinalNumber(dateString, {
	            unit: 'date'
	          });
	        default:
	          return parseNDigits(token.length, dateString);
	      }
	    }
	  }, {
	    key: "validate",
	    value: function validate(date, value) {
	      var year = date.getUTCFullYear();
	      var isLeapYear = isLeapYearIndex$1(year);
	      var month = date.getUTCMonth();
	      if (isLeapYear) {
	        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
	      } else {
	        return value >= 1 && value <= DAYS_IN_MONTH[month];
	      }
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value) {
	      date.setUTCDate(value);
	      date.setUTCHours(0, 0, 0, 0);
	      return date;
	    }
	  }]);
	  return DateParser;
	}(Parser);

	var DayOfYearParser = /*#__PURE__*/function (_Parser) {
	  _inherits(DayOfYearParser, _Parser);
	  var _super = _createSuper(DayOfYearParser);
	  function DayOfYearParser() {
	    var _this;
	    _classCallCheck(this, DayOfYearParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 90);
	    _defineProperty$1(_assertThisInitialized$2(_this), "subpriority", 1);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(DayOfYearParser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      switch (token) {
	        case 'D':
	        case 'DD':
	          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
	        case 'Do':
	          return match.ordinalNumber(dateString, {
	            unit: 'date'
	          });
	        default:
	          return parseNDigits(token.length, dateString);
	      }
	    }
	  }, {
	    key: "validate",
	    value: function validate(date, value) {
	      var year = date.getUTCFullYear();
	      var isLeapYear = isLeapYearIndex$1(year);
	      if (isLeapYear) {
	        return value >= 1 && value <= 366;
	      } else {
	        return value >= 1 && value <= 365;
	      }
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value) {
	      date.setUTCMonth(0, value);
	      date.setUTCHours(0, 0, 0, 0);
	      return date;
	    }
	  }]);
	  return DayOfYearParser;
	}(Parser);

	function setUTCDay(dirtyDate, dirtyDay, options) {
	  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
	  requiredArgs(2, arguments);
	  var defaultOptions = getDefaultOptions();
	  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);

	  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
	  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
	    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
	  }
	  var date = toDate(dirtyDate);
	  var day = toInteger(dirtyDay);
	  var currentDay = date.getUTCDay();
	  var remainder = day % 7;
	  var dayIndex = (remainder + 7) % 7;
	  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
	  date.setUTCDate(date.getUTCDate() + diff);
	  return date;
	}

	var DayParser = /*#__PURE__*/function (_Parser) {
	  _inherits(DayParser, _Parser);
	  var _super = _createSuper(DayParser);
	  function DayParser() {
	    var _this;
	    _classCallCheck(this, DayParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 90);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['D', 'i', 'e', 'c', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(DayParser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      switch (token) {
	        // Tue
	        case 'E':
	        case 'EE':
	        case 'EEE':
	          return match.day(dateString, {
	            width: 'abbreviated',
	            context: 'formatting'
	          }) || match.day(dateString, {
	            width: 'short',
	            context: 'formatting'
	          }) || match.day(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	        // T
	        case 'EEEEE':
	          return match.day(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	        // Tu
	        case 'EEEEEE':
	          return match.day(dateString, {
	            width: 'short',
	            context: 'formatting'
	          }) || match.day(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	        // Tuesday
	        case 'EEEE':
	        default:
	          return match.day(dateString, {
	            width: 'wide',
	            context: 'formatting'
	          }) || match.day(dateString, {
	            width: 'abbreviated',
	            context: 'formatting'
	          }) || match.day(dateString, {
	            width: 'short',
	            context: 'formatting'
	          }) || match.day(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	      }
	    }
	  }, {
	    key: "validate",
	    value: function validate(_date, value) {
	      return value >= 0 && value <= 6;
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value, options) {
	      date = setUTCDay(date, value, options);
	      date.setUTCHours(0, 0, 0, 0);
	      return date;
	    }
	  }]);
	  return DayParser;
	}(Parser);

	var LocalDayParser = /*#__PURE__*/function (_Parser) {
	  _inherits(LocalDayParser, _Parser);
	  var _super = _createSuper(LocalDayParser);
	  function LocalDayParser() {
	    var _this;
	    _classCallCheck(this, LocalDayParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 90);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(LocalDayParser, [{
	    key: "parse",
	    value: function parse(dateString, token, match, options) {
	      var valueCallback = function valueCallback(value) {
	        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
	        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
	      };
	      switch (token) {
	        // 3
	        case 'e':
	        case 'ee':
	          // 03
	          return mapValue(parseNDigits(token.length, dateString), valueCallback);
	        // 3rd
	        case 'eo':
	          return mapValue(match.ordinalNumber(dateString, {
	            unit: 'day'
	          }), valueCallback);
	        // Tue
	        case 'eee':
	          return match.day(dateString, {
	            width: 'abbreviated',
	            context: 'formatting'
	          }) || match.day(dateString, {
	            width: 'short',
	            context: 'formatting'
	          }) || match.day(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	        // T
	        case 'eeeee':
	          return match.day(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	        // Tu
	        case 'eeeeee':
	          return match.day(dateString, {
	            width: 'short',
	            context: 'formatting'
	          }) || match.day(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	        // Tuesday
	        case 'eeee':
	        default:
	          return match.day(dateString, {
	            width: 'wide',
	            context: 'formatting'
	          }) || match.day(dateString, {
	            width: 'abbreviated',
	            context: 'formatting'
	          }) || match.day(dateString, {
	            width: 'short',
	            context: 'formatting'
	          }) || match.day(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	      }
	    }
	  }, {
	    key: "validate",
	    value: function validate(_date, value) {
	      return value >= 0 && value <= 6;
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value, options) {
	      date = setUTCDay(date, value, options);
	      date.setUTCHours(0, 0, 0, 0);
	      return date;
	    }
	  }]);
	  return LocalDayParser;
	}(Parser);

	var StandAloneLocalDayParser = /*#__PURE__*/function (_Parser) {
	  _inherits(StandAloneLocalDayParser, _Parser);
	  var _super = _createSuper(StandAloneLocalDayParser);
	  function StandAloneLocalDayParser() {
	    var _this;
	    _classCallCheck(this, StandAloneLocalDayParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 90);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(StandAloneLocalDayParser, [{
	    key: "parse",
	    value: function parse(dateString, token, match, options) {
	      var valueCallback = function valueCallback(value) {
	        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
	        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
	      };
	      switch (token) {
	        // 3
	        case 'c':
	        case 'cc':
	          // 03
	          return mapValue(parseNDigits(token.length, dateString), valueCallback);
	        // 3rd
	        case 'co':
	          return mapValue(match.ordinalNumber(dateString, {
	            unit: 'day'
	          }), valueCallback);
	        // Tue
	        case 'ccc':
	          return match.day(dateString, {
	            width: 'abbreviated',
	            context: 'standalone'
	          }) || match.day(dateString, {
	            width: 'short',
	            context: 'standalone'
	          }) || match.day(dateString, {
	            width: 'narrow',
	            context: 'standalone'
	          });
	        // T
	        case 'ccccc':
	          return match.day(dateString, {
	            width: 'narrow',
	            context: 'standalone'
	          });
	        // Tu
	        case 'cccccc':
	          return match.day(dateString, {
	            width: 'short',
	            context: 'standalone'
	          }) || match.day(dateString, {
	            width: 'narrow',
	            context: 'standalone'
	          });
	        // Tuesday
	        case 'cccc':
	        default:
	          return match.day(dateString, {
	            width: 'wide',
	            context: 'standalone'
	          }) || match.day(dateString, {
	            width: 'abbreviated',
	            context: 'standalone'
	          }) || match.day(dateString, {
	            width: 'short',
	            context: 'standalone'
	          }) || match.day(dateString, {
	            width: 'narrow',
	            context: 'standalone'
	          });
	      }
	    }
	  }, {
	    key: "validate",
	    value: function validate(_date, value) {
	      return value >= 0 && value <= 6;
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value, options) {
	      date = setUTCDay(date, value, options);
	      date.setUTCHours(0, 0, 0, 0);
	      return date;
	    }
	  }]);
	  return StandAloneLocalDayParser;
	}(Parser);

	function setUTCISODay(dirtyDate, dirtyDay) {
	  requiredArgs(2, arguments);
	  var day = toInteger(dirtyDay);
	  if (day % 7 === 0) {
	    day = day - 7;
	  }
	  var weekStartsOn = 1;
	  var date = toDate(dirtyDate);
	  var currentDay = date.getUTCDay();
	  var remainder = day % 7;
	  var dayIndex = (remainder + 7) % 7;
	  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
	  date.setUTCDate(date.getUTCDate() + diff);
	  return date;
	}

	var ISODayParser = /*#__PURE__*/function (_Parser) {
	  _inherits(ISODayParser, _Parser);
	  var _super = _createSuper(ISODayParser);
	  function ISODayParser() {
	    var _this;
	    _classCallCheck(this, ISODayParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 90);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(ISODayParser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      var valueCallback = function valueCallback(value) {
	        if (value === 0) {
	          return 7;
	        }
	        return value;
	      };
	      switch (token) {
	        // 2
	        case 'i':
	        case 'ii':
	          // 02
	          return parseNDigits(token.length, dateString);
	        // 2nd
	        case 'io':
	          return match.ordinalNumber(dateString, {
	            unit: 'day'
	          });
	        // Tue
	        case 'iii':
	          return mapValue(match.day(dateString, {
	            width: 'abbreviated',
	            context: 'formatting'
	          }) || match.day(dateString, {
	            width: 'short',
	            context: 'formatting'
	          }) || match.day(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          }), valueCallback);
	        // T
	        case 'iiiii':
	          return mapValue(match.day(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          }), valueCallback);
	        // Tu
	        case 'iiiiii':
	          return mapValue(match.day(dateString, {
	            width: 'short',
	            context: 'formatting'
	          }) || match.day(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          }), valueCallback);
	        // Tuesday
	        case 'iiii':
	        default:
	          return mapValue(match.day(dateString, {
	            width: 'wide',
	            context: 'formatting'
	          }) || match.day(dateString, {
	            width: 'abbreviated',
	            context: 'formatting'
	          }) || match.day(dateString, {
	            width: 'short',
	            context: 'formatting'
	          }) || match.day(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          }), valueCallback);
	      }
	    }
	  }, {
	    key: "validate",
	    value: function validate(_date, value) {
	      return value >= 1 && value <= 7;
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value) {
	      date = setUTCISODay(date, value);
	      date.setUTCHours(0, 0, 0, 0);
	      return date;
	    }
	  }]);
	  return ISODayParser;
	}(Parser);

	var AMPMParser = /*#__PURE__*/function (_Parser) {
	  _inherits(AMPMParser, _Parser);
	  var _super = _createSuper(AMPMParser);
	  function AMPMParser() {
	    var _this;
	    _classCallCheck(this, AMPMParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 80);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['b', 'B', 'H', 'k', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(AMPMParser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      switch (token) {
	        case 'a':
	        case 'aa':
	        case 'aaa':
	          return match.dayPeriod(dateString, {
	            width: 'abbreviated',
	            context: 'formatting'
	          }) || match.dayPeriod(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	        case 'aaaaa':
	          return match.dayPeriod(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	        case 'aaaa':
	        default:
	          return match.dayPeriod(dateString, {
	            width: 'wide',
	            context: 'formatting'
	          }) || match.dayPeriod(dateString, {
	            width: 'abbreviated',
	            context: 'formatting'
	          }) || match.dayPeriod(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	      }
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value) {
	      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
	      return date;
	    }
	  }]);
	  return AMPMParser;
	}(Parser);

	var AMPMMidnightParser = /*#__PURE__*/function (_Parser) {
	  _inherits(AMPMMidnightParser, _Parser);
	  var _super = _createSuper(AMPMMidnightParser);
	  function AMPMMidnightParser() {
	    var _this;
	    _classCallCheck(this, AMPMMidnightParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 80);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['a', 'B', 'H', 'k', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(AMPMMidnightParser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      switch (token) {
	        case 'b':
	        case 'bb':
	        case 'bbb':
	          return match.dayPeriod(dateString, {
	            width: 'abbreviated',
	            context: 'formatting'
	          }) || match.dayPeriod(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	        case 'bbbbb':
	          return match.dayPeriod(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	        case 'bbbb':
	        default:
	          return match.dayPeriod(dateString, {
	            width: 'wide',
	            context: 'formatting'
	          }) || match.dayPeriod(dateString, {
	            width: 'abbreviated',
	            context: 'formatting'
	          }) || match.dayPeriod(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	      }
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value) {
	      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
	      return date;
	    }
	  }]);
	  return AMPMMidnightParser;
	}(Parser);

	var DayPeriodParser = /*#__PURE__*/function (_Parser) {
	  _inherits(DayPeriodParser, _Parser);
	  var _super = _createSuper(DayPeriodParser);
	  function DayPeriodParser() {
	    var _this;
	    _classCallCheck(this, DayPeriodParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 80);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['a', 'b', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(DayPeriodParser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      switch (token) {
	        case 'B':
	        case 'BB':
	        case 'BBB':
	          return match.dayPeriod(dateString, {
	            width: 'abbreviated',
	            context: 'formatting'
	          }) || match.dayPeriod(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	        case 'BBBBB':
	          return match.dayPeriod(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	        case 'BBBB':
	        default:
	          return match.dayPeriod(dateString, {
	            width: 'wide',
	            context: 'formatting'
	          }) || match.dayPeriod(dateString, {
	            width: 'abbreviated',
	            context: 'formatting'
	          }) || match.dayPeriod(dateString, {
	            width: 'narrow',
	            context: 'formatting'
	          });
	      }
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value) {
	      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
	      return date;
	    }
	  }]);
	  return DayPeriodParser;
	}(Parser);

	var Hour1to12Parser = /*#__PURE__*/function (_Parser) {
	  _inherits(Hour1to12Parser, _Parser);
	  var _super = _createSuper(Hour1to12Parser);
	  function Hour1to12Parser() {
	    var _this;
	    _classCallCheck(this, Hour1to12Parser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 70);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['H', 'K', 'k', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(Hour1to12Parser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      switch (token) {
	        case 'h':
	          return parseNumericPattern(numericPatterns.hour12h, dateString);
	        case 'ho':
	          return match.ordinalNumber(dateString, {
	            unit: 'hour'
	          });
	        default:
	          return parseNDigits(token.length, dateString);
	      }
	    }
	  }, {
	    key: "validate",
	    value: function validate(_date, value) {
	      return value >= 1 && value <= 12;
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value) {
	      var isPM = date.getUTCHours() >= 12;
	      if (isPM && value < 12) {
	        date.setUTCHours(value + 12, 0, 0, 0);
	      } else if (!isPM && value === 12) {
	        date.setUTCHours(0, 0, 0, 0);
	      } else {
	        date.setUTCHours(value, 0, 0, 0);
	      }
	      return date;
	    }
	  }]);
	  return Hour1to12Parser;
	}(Parser);

	var Hour0to23Parser = /*#__PURE__*/function (_Parser) {
	  _inherits(Hour0to23Parser, _Parser);
	  var _super = _createSuper(Hour0to23Parser);
	  function Hour0to23Parser() {
	    var _this;
	    _classCallCheck(this, Hour0to23Parser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 70);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['a', 'b', 'h', 'K', 'k', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(Hour0to23Parser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      switch (token) {
	        case 'H':
	          return parseNumericPattern(numericPatterns.hour23h, dateString);
	        case 'Ho':
	          return match.ordinalNumber(dateString, {
	            unit: 'hour'
	          });
	        default:
	          return parseNDigits(token.length, dateString);
	      }
	    }
	  }, {
	    key: "validate",
	    value: function validate(_date, value) {
	      return value >= 0 && value <= 23;
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value) {
	      date.setUTCHours(value, 0, 0, 0);
	      return date;
	    }
	  }]);
	  return Hour0to23Parser;
	}(Parser);

	var Hour0To11Parser = /*#__PURE__*/function (_Parser) {
	  _inherits(Hour0To11Parser, _Parser);
	  var _super = _createSuper(Hour0To11Parser);
	  function Hour0To11Parser() {
	    var _this;
	    _classCallCheck(this, Hour0To11Parser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 70);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['h', 'H', 'k', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(Hour0To11Parser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      switch (token) {
	        case 'K':
	          return parseNumericPattern(numericPatterns.hour11h, dateString);
	        case 'Ko':
	          return match.ordinalNumber(dateString, {
	            unit: 'hour'
	          });
	        default:
	          return parseNDigits(token.length, dateString);
	      }
	    }
	  }, {
	    key: "validate",
	    value: function validate(_date, value) {
	      return value >= 0 && value <= 11;
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value) {
	      var isPM = date.getUTCHours() >= 12;
	      if (isPM && value < 12) {
	        date.setUTCHours(value + 12, 0, 0, 0);
	      } else {
	        date.setUTCHours(value, 0, 0, 0);
	      }
	      return date;
	    }
	  }]);
	  return Hour0To11Parser;
	}(Parser);

	var Hour1To24Parser = /*#__PURE__*/function (_Parser) {
	  _inherits(Hour1To24Parser, _Parser);
	  var _super = _createSuper(Hour1To24Parser);
	  function Hour1To24Parser() {
	    var _this;
	    _classCallCheck(this, Hour1To24Parser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 70);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['a', 'b', 'h', 'H', 'K', 't', 'T']);
	    return _this;
	  }
	  _createClass$1(Hour1To24Parser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      switch (token) {
	        case 'k':
	          return parseNumericPattern(numericPatterns.hour24h, dateString);
	        case 'ko':
	          return match.ordinalNumber(dateString, {
	            unit: 'hour'
	          });
	        default:
	          return parseNDigits(token.length, dateString);
	      }
	    }
	  }, {
	    key: "validate",
	    value: function validate(_date, value) {
	      return value >= 1 && value <= 24;
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value) {
	      var hours = value <= 24 ? value % 24 : value;
	      date.setUTCHours(hours, 0, 0, 0);
	      return date;
	    }
	  }]);
	  return Hour1To24Parser;
	}(Parser);

	var MinuteParser = /*#__PURE__*/function (_Parser) {
	  _inherits(MinuteParser, _Parser);
	  var _super = _createSuper(MinuteParser);
	  function MinuteParser() {
	    var _this;
	    _classCallCheck(this, MinuteParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 60);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['t', 'T']);
	    return _this;
	  }
	  _createClass$1(MinuteParser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      switch (token) {
	        case 'm':
	          return parseNumericPattern(numericPatterns.minute, dateString);
	        case 'mo':
	          return match.ordinalNumber(dateString, {
	            unit: 'minute'
	          });
	        default:
	          return parseNDigits(token.length, dateString);
	      }
	    }
	  }, {
	    key: "validate",
	    value: function validate(_date, value) {
	      return value >= 0 && value <= 59;
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value) {
	      date.setUTCMinutes(value, 0, 0);
	      return date;
	    }
	  }]);
	  return MinuteParser;
	}(Parser);

	var SecondParser = /*#__PURE__*/function (_Parser) {
	  _inherits(SecondParser, _Parser);
	  var _super = _createSuper(SecondParser);
	  function SecondParser() {
	    var _this;
	    _classCallCheck(this, SecondParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 50);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['t', 'T']);
	    return _this;
	  }
	  _createClass$1(SecondParser, [{
	    key: "parse",
	    value: function parse(dateString, token, match) {
	      switch (token) {
	        case 's':
	          return parseNumericPattern(numericPatterns.second, dateString);
	        case 'so':
	          return match.ordinalNumber(dateString, {
	            unit: 'second'
	          });
	        default:
	          return parseNDigits(token.length, dateString);
	      }
	    }
	  }, {
	    key: "validate",
	    value: function validate(_date, value) {
	      return value >= 0 && value <= 59;
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value) {
	      date.setUTCSeconds(value, 0);
	      return date;
	    }
	  }]);
	  return SecondParser;
	}(Parser);

	var FractionOfSecondParser = /*#__PURE__*/function (_Parser) {
	  _inherits(FractionOfSecondParser, _Parser);
	  var _super = _createSuper(FractionOfSecondParser);
	  function FractionOfSecondParser() {
	    var _this;
	    _classCallCheck(this, FractionOfSecondParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 30);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['t', 'T']);
	    return _this;
	  }
	  _createClass$1(FractionOfSecondParser, [{
	    key: "parse",
	    value: function parse(dateString, token) {
	      var valueCallback = function valueCallback(value) {
	        return Math.floor(value * Math.pow(10, -token.length + 3));
	      };
	      return mapValue(parseNDigits(token.length, dateString), valueCallback);
	    }
	  }, {
	    key: "set",
	    value: function set(date, _flags, value) {
	      date.setUTCMilliseconds(value);
	      return date;
	    }
	  }]);
	  return FractionOfSecondParser;
	}(Parser);

	var ISOTimezoneWithZParser = /*#__PURE__*/function (_Parser) {
	  _inherits(ISOTimezoneWithZParser, _Parser);
	  var _super = _createSuper(ISOTimezoneWithZParser);
	  function ISOTimezoneWithZParser() {
	    var _this;
	    _classCallCheck(this, ISOTimezoneWithZParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 10);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['t', 'T', 'x']);
	    return _this;
	  }
	  _createClass$1(ISOTimezoneWithZParser, [{
	    key: "parse",
	    value: function parse(dateString, token) {
	      switch (token) {
	        case 'X':
	          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
	        case 'XX':
	          return parseTimezonePattern(timezonePatterns.basic, dateString);
	        case 'XXXX':
	          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
	        case 'XXXXX':
	          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
	        case 'XXX':
	        default:
	          return parseTimezonePattern(timezonePatterns.extended, dateString);
	      }
	    }
	  }, {
	    key: "set",
	    value: function set(date, flags, value) {
	      if (flags.timestampIsSet) {
	        return date;
	      }
	      return new Date(date.getTime() - value);
	    }
	  }]);
	  return ISOTimezoneWithZParser;
	}(Parser);

	var ISOTimezoneParser = /*#__PURE__*/function (_Parser) {
	  _inherits(ISOTimezoneParser, _Parser);
	  var _super = _createSuper(ISOTimezoneParser);
	  function ISOTimezoneParser() {
	    var _this;
	    _classCallCheck(this, ISOTimezoneParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 10);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", ['t', 'T', 'X']);
	    return _this;
	  }
	  _createClass$1(ISOTimezoneParser, [{
	    key: "parse",
	    value: function parse(dateString, token) {
	      switch (token) {
	        case 'x':
	          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
	        case 'xx':
	          return parseTimezonePattern(timezonePatterns.basic, dateString);
	        case 'xxxx':
	          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
	        case 'xxxxx':
	          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
	        case 'xxx':
	        default:
	          return parseTimezonePattern(timezonePatterns.extended, dateString);
	      }
	    }
	  }, {
	    key: "set",
	    value: function set(date, flags, value) {
	      if (flags.timestampIsSet) {
	        return date;
	      }
	      return new Date(date.getTime() - value);
	    }
	  }]);
	  return ISOTimezoneParser;
	}(Parser);

	var TimestampSecondsParser = /*#__PURE__*/function (_Parser) {
	  _inherits(TimestampSecondsParser, _Parser);
	  var _super = _createSuper(TimestampSecondsParser);
	  function TimestampSecondsParser() {
	    var _this;
	    _classCallCheck(this, TimestampSecondsParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 40);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", '*');
	    return _this;
	  }
	  _createClass$1(TimestampSecondsParser, [{
	    key: "parse",
	    value: function parse(dateString) {
	      return parseAnyDigitsSigned(dateString);
	    }
	  }, {
	    key: "set",
	    value: function set(_date, _flags, value) {
	      return [new Date(value * 1000), {
	        timestampIsSet: true
	      }];
	    }
	  }]);
	  return TimestampSecondsParser;
	}(Parser);

	var TimestampMillisecondsParser = /*#__PURE__*/function (_Parser) {
	  _inherits(TimestampMillisecondsParser, _Parser);
	  var _super = _createSuper(TimestampMillisecondsParser);
	  function TimestampMillisecondsParser() {
	    var _this;
	    _classCallCheck(this, TimestampMillisecondsParser);
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _super.call.apply(_super, [this].concat(args));
	    _defineProperty$1(_assertThisInitialized$2(_this), "priority", 20);
	    _defineProperty$1(_assertThisInitialized$2(_this), "incompatibleTokens", '*');
	    return _this;
	  }
	  _createClass$1(TimestampMillisecondsParser, [{
	    key: "parse",
	    value: function parse(dateString) {
	      return parseAnyDigitsSigned(dateString);
	    }
	  }, {
	    key: "set",
	    value: function set(_date, _flags, value) {
	      return [new Date(value), {
	        timestampIsSet: true
	      }];
	    }
	  }]);
	  return TimestampMillisecondsParser;
	}(Parser);

	/*
	 * |     | Unit                           |     | Unit                           |
	 * |-----|--------------------------------|-----|--------------------------------|
	 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
	 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
	 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
	 * |  d  | Day of month                   |  D  | Day of year                    |
	 * |  e  | Local day of week              |  E  | Day of week                    |
	 * |  f  |                                |  F* | Day of week in month           |
	 * |  g* | Modified Julian day            |  G  | Era                            |
	 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
	 * |  i! | ISO day of week                |  I! | ISO week of year               |
	 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
	 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
	 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
	 * |  m  | Minute                         |  M  | Month                          |
	 * |  n  |                                |  N  |                                |
	 * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
	 * |  p  |                                |  P  |                                |
	 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
	 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
	 * |  s  | Second                         |  S  | Fraction of second             |
	 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
	 * |  u  | Extended year                  |  U* | Cyclic year                    |
	 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
	 * |  w  | Local week of year             |  W* | Week of month                  |
	 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
	 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
	 * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
	 *
	 * Letters marked by * are not implemented but reserved by Unicode standard.
	 *
	 * Letters marked by ! are non-standard, but implemented by date-fns:
	 * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
	 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
	 *   i.e. 7 for Sunday, 1 for Monday, etc.
	 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
	 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
	 *   `R` is supposed to be used in conjunction with `I` and `i`
	 *   for universal ISO week-numbering date, whereas
	 *   `Y` is supposed to be used in conjunction with `w` and `e`
	 *   for week-numbering date specific to the locale.
	 */
	var parsers = {
	  G: new EraParser(),
	  y: new YearParser(),
	  Y: new LocalWeekYearParser(),
	  R: new ISOWeekYearParser(),
	  u: new ExtendedYearParser(),
	  Q: new QuarterParser(),
	  q: new StandAloneQuarterParser(),
	  M: new MonthParser(),
	  L: new StandAloneMonthParser(),
	  w: new LocalWeekParser(),
	  I: new ISOWeekParser(),
	  d: new DateParser(),
	  D: new DayOfYearParser(),
	  E: new DayParser(),
	  e: new LocalDayParser(),
	  c: new StandAloneLocalDayParser(),
	  i: new ISODayParser(),
	  a: new AMPMParser(),
	  b: new AMPMMidnightParser(),
	  B: new DayPeriodParser(),
	  h: new Hour1to12Parser(),
	  H: new Hour0to23Parser(),
	  K: new Hour0To11Parser(),
	  k: new Hour1To24Parser(),
	  m: new MinuteParser(),
	  s: new SecondParser(),
	  S: new FractionOfSecondParser(),
	  X: new ISOTimezoneWithZParser(),
	  x: new ISOTimezoneParser(),
	  t: new TimestampSecondsParser(),
	  T: new TimestampMillisecondsParser()
	};

	// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
	//   (one of the certain letters followed by `o`)
	// - (\w)\1* matches any sequences of the same letter
	// - '' matches two quote characters in a row
	// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
	//   except a single quote symbol, which ends the sequence.
	//   Two quote characters do not end the sequence.
	//   If there is no matching single quote
	//   then the sequence will continue until the end of the string.
	// - . matches any single character unmatched by previous parts of the RegExps
	var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

	// This RegExp catches symbols escaped by quotes, and also
	// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
	var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
	var escapedStringRegExp = /^'([^]*?)'?$/;
	var doubleQuoteRegExp = /''/g;
	var notWhitespaceRegExp = /\S/;
	var unescapedLatinCharacterRegExp = /[a-zA-Z]/;

	/**
	 * @name parse
	 * @category Common Helpers
	 * @summary Parse the date.
	 *
	 * @description
	 * Return the date parsed from string using the given format string.
	 *
	 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
	 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 *
	 * The characters in the format string wrapped between two single quotes characters (') are escaped.
	 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
	 *
	 * Format of the format string is based on Unicode Technical Standard #35:
	 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
	 * with a few additions (see note 5 below the table).
	 *
	 * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited
	 * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:
	 *
	 * ```javascript
	 * parse('23 AM', 'HH a', new Date())
	 * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time
	 * ```
	 *
	 * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true
	 *
	 * Accepted format string patterns:
	 * | Unit                            |Prior| Pattern | Result examples                   | Notes |
	 * |---------------------------------|-----|---------|-----------------------------------|-------|
	 * | Era                             | 140 | G..GGG  | AD, BC                            |       |
	 * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |
	 * |                                 |     | GGGGG   | A, B                              |       |
	 * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |
	 * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
	 * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |
	 * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |
	 * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |
	 * |                                 |     | yyyyy   | ...                               | 2,4   |
	 * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |
	 * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
	 * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |
	 * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |
	 * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |
	 * |                                 |     | YYYYY   | ...                               | 2,4   |
	 * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |
	 * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |
	 * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |
	 * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |
	 * |                                 |     | RRRRR   | ...                               | 2,4,5 |
	 * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |
	 * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |
	 * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |
	 * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |
	 * |                                 |     | uuuuu   | ...                               | 2,4   |
	 * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |
	 * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |
	 * |                                 |     | QQ      | 01, 02, 03, 04                    |       |
	 * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |
	 * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
	 * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |
	 * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |
	 * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |
	 * |                                 |     | qq      | 01, 02, 03, 04                    |       |
	 * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |
	 * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
	 * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |
	 * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |
	 * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |
	 * |                                 |     | MM      | 01, 02, ..., 12                   |       |
	 * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |
	 * |                                 |     | MMMM    | January, February, ..., December  | 2     |
	 * |                                 |     | MMMMM   | J, F, ..., D                      |       |
	 * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |
	 * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |
	 * |                                 |     | LL      | 01, 02, ..., 12                   |       |
	 * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |
	 * |                                 |     | LLLL    | January, February, ..., December  | 2     |
	 * |                                 |     | LLLLL   | J, F, ..., D                      |       |
	 * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |
	 * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |
	 * |                                 |     | ww      | 01, 02, ..., 53                   |       |
	 * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |
	 * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |
	 * |                                 |     | II      | 01, 02, ..., 53                   | 5     |
	 * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |
	 * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |
	 * |                                 |     | dd      | 01, 02, ..., 31                   |       |
	 * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |
	 * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |
	 * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |
	 * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |
	 * |                                 |     | DDDD    | ...                               | 2     |
	 * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
	 * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
	 * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |
	 * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
	 * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |
	 * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |
	 * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |
	 * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |
	 * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |
	 * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |
	 * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |
	 * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |
	 * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |
	 * |                                 |     | ee      | 02, 03, ..., 01                   |       |
	 * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |
	 * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
	 * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |
	 * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
	 * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |
	 * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |
	 * |                                 |     | cc      | 02, 03, ..., 01                   |       |
	 * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |
	 * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
	 * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |
	 * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
	 * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |
	 * |                                 |     | aaaa    | a.m., p.m.                        | 2     |
	 * |                                 |     | aaaaa   | a, p                              |       |
	 * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |
	 * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |
	 * |                                 |     | bbbbb   | a, p, n, mi                       |       |
	 * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |
	 * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |
	 * |                                 |     | BBBBB   | at night, in the morning, ...     |       |
	 * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |
	 * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |
	 * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |
	 * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |
	 * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |
	 * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |
	 * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |
	 * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |
	 * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |
	 * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |
	 * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |
	 * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |
	 * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |
	 * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |
	 * |                                 |     | mm      | 00, 01, ..., 59                   |       |
	 * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |
	 * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |
	 * |                                 |     | ss      | 00, 01, ..., 59                   |       |
	 * | Seconds timestamp               |  40 | t       | 512969520                         |       |
	 * |                                 |     | tt      | ...                               | 2     |
	 * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |
	 * |                                 |     | SS      | 00, 01, ..., 99                   |       |
	 * |                                 |     | SSS     | 000, 001, ..., 999                |       |
	 * |                                 |     | SSSS    | ...                               | 2     |
	 * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |
	 * |                                 |     | TT      | ...                               | 2     |
	 * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |
	 * |                                 |     | XX      | -0800, +0530, Z                   |       |
	 * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |
	 * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |
	 * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
	 * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |
	 * |                                 |     | xx      | -0800, +0530, +0000               |       |
	 * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |
	 * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |
	 * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
	 * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |
	 * |                                 |     | PP      | May 29, 1453                      |       |
	 * |                                 |     | PPP     | May 29th, 1453                    |       |
	 * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |
	 * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |
	 * |                                 |     | pp      | 12:00:00 AM                       |       |
	 * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |
	 * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |
	 * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |
	 * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |
	 * Notes:
	 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
	 *    are the same as "stand-alone" units, but are different in some languages.
	 *    "Formatting" units are declined according to the rules of the language
	 *    in the context of a date. "Stand-alone" units are always nominative singular.
	 *    In `format` function, they will produce different result:
	 *
	 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
	 *
	 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
	 *
	 *    `parse` will try to match both formatting and stand-alone units interchangably.
	 *
	 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
	 *    the single quote characters (see below).
	 *    If the sequence is longer than listed in table:
	 *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number
	 *      as wide as the sequence
	 *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.
	 *      These variations are marked with "2" in the last column of the table.
	 *
	 * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
	 *    These tokens represent the shortest form of the quarter.
	 *
	 * 4. The main difference between `y` and `u` patterns are B.C. years:
	 *
	 *    | Year | `y` | `u` |
	 *    |------|-----|-----|
	 *    | AC 1 |   1 |   1 |
	 *    | BC 1 |   1 |   0 |
	 *    | BC 2 |   2 |  -1 |
	 *
	 *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:
	 *
	 *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`
	 *
	 *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`
	 *
	 *    while `uu` will just assign the year as is:
	 *
	 *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`
	 *
	 *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`
	 *
	 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
	 *    except local week-numbering years are dependent on `options.weekStartsOn`
	 *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}
	 *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).
	 *
	 * 5. These patterns are not in the Unicode Technical Standard #35:
	 *    - `i`: ISO day of week
	 *    - `I`: ISO week of year
	 *    - `R`: ISO week-numbering year
	 *    - `o`: ordinal number modifier
	 *    - `P`: long localized date
	 *    - `p`: long localized time
	 *
	 * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
	 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 *
	 * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
	 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 *
	 * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based
	 *    on the given locale.
	 *
	 *    using `en-US` locale: `P` => `MM/dd/yyyy`
	 *    using `en-US` locale: `p` => `hh:mm a`
	 *    using `pt-BR` locale: `P` => `dd/MM/yyyy`
	 *    using `pt-BR` locale: `p` => `HH:mm`
	 *
	 * Values will be assigned to the date in the descending order of its unit's priority.
	 * Units of an equal priority overwrite each other in the order of appearance.
	 *
	 * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),
	 * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.
	 *
	 * `referenceDate` must be passed for correct work of the function.
	 * If you're not sure which `referenceDate` to supply, create a new instance of Date:
	 * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`
	 * In this case parsing will be done in the context of the current date.
	 * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,
	 * then `Invalid Date` will be returned.
	 *
	 * The result may vary by locale.
	 *
	 * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.
	 *
	 * If parsing failed, `Invalid Date` will be returned.
	 * Invalid Date is a Date, whose time value is NaN.
	 * Time value of Date: http://es5.github.io/#x15.9.1.1
	 *
	 * @param {String} dateString - the string to parse
	 * @param {String} formatString - the string of tokens
	 * @param {Date|Number} referenceDate - defines values missing from the parsed dateString
	 * @param {Object} [options] - an object with options.
	 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
	 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
	 * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
	 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
	 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
	 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @returns {Date} the parsed date
	 * @throws {TypeError} 3 arguments required
	 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
	 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
	 * @throws {RangeError} `options.locale` must contain `match` property
	 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @throws {RangeError} format string contains an unescaped latin alphabet character
	 *
	 * @example
	 * // Parse 11 February 2014 from middle-endian format:
	 * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())
	 * //=> Tue Feb 11 2014 00:00:00
	 *
	 * @example
	 * // Parse 28th of February in Esperanto locale in the context of 2010 year:
	 * import eo from 'date-fns/locale/eo'
	 * var result = parse('28-a de februaro', "do 'de' MMMM", new Date(2010, 0, 1), {
	 *   locale: eo
	 * })
	 * //=> Sun Feb 28 2010 00:00:00
	 */
	function parse$3(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options) {
	  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
	  requiredArgs(3, arguments);
	  var dateString = String(dirtyDateString);
	  var formatString = String(dirtyFormatString);
	  var defaultOptions = getDefaultOptions();
	  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
	  if (!locale.match) {
	    throw new RangeError('locale must contain match property');
	  }
	  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);

	  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
	  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
	    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
	  }
	  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);

	  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
	  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
	    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
	  }
	  if (formatString === '') {
	    if (dateString === '') {
	      return toDate(dirtyReferenceDate);
	    } else {
	      return new Date(NaN);
	    }
	  }
	  var subFnOptions = {
	    firstWeekContainsDate: firstWeekContainsDate,
	    weekStartsOn: weekStartsOn,
	    locale: locale
	  };

	  // If timezone isn't specified, it will be set to the system timezone
	  var setters = [new DateToSystemTimezoneSetter()];
	  var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {
	    var firstCharacter = substring[0];
	    if (firstCharacter in longFormatters$1) {
	      var longFormatter = longFormatters$1[firstCharacter];
	      return longFormatter(substring, locale.formatLong);
	    }
	    return substring;
	  }).join('').match(formattingTokensRegExp);
	  var usedTokens = [];
	  var _iterator = _createForOfIteratorHelper(tokens),
	    _step;
	  try {
	    var _loop = function _loop() {
	      var token = _step.value;
	      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token)) {
	        throwProtectedError(token, formatString, dirtyDateString);
	      }
	      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
	        throwProtectedError(token, formatString, dirtyDateString);
	      }
	      var firstCharacter = token[0];
	      var parser = parsers[firstCharacter];
	      if (parser) {
	        var incompatibleTokens = parser.incompatibleTokens;
	        if (Array.isArray(incompatibleTokens)) {
	          var incompatibleToken = usedTokens.find(function (usedToken) {
	            return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
	          });
	          if (incompatibleToken) {
	            throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
	          }
	        } else if (parser.incompatibleTokens === '*' && usedTokens.length > 0) {
	          throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
	        }
	        usedTokens.push({
	          token: firstCharacter,
	          fullToken: token
	        });
	        var parseResult = parser.run(dateString, token, locale.match, subFnOptions);
	        if (!parseResult) {
	          return {
	            v: new Date(NaN)
	          };
	        }
	        setters.push(parseResult.setter);
	        dateString = parseResult.rest;
	      } else {
	        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
	          throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
	        }

	        // Replace two single quote characters with one single quote character
	        if (token === "''") {
	          token = "'";
	        } else if (firstCharacter === "'") {
	          token = cleanEscapedString(token);
	        }

	        // Cut token from string, or, if string doesn't match the token, return Invalid Date
	        if (dateString.indexOf(token) === 0) {
	          dateString = dateString.slice(token.length);
	        } else {
	          return {
	            v: new Date(NaN)
	          };
	        }
	      }
	    };
	    for (_iterator.s(); !(_step = _iterator.n()).done;) {
	      var _ret = _loop();
	      if (_typeof(_ret) === "object") return _ret.v;
	    }

	    // Check if the remaining input contains something other than whitespace
	  } catch (err) {
	    _iterator.e(err);
	  } finally {
	    _iterator.f();
	  }
	  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
	    return new Date(NaN);
	  }
	  var uniquePrioritySetters = setters.map(function (setter) {
	    return setter.priority;
	  }).sort(function (a, b) {
	    return b - a;
	  }).filter(function (priority, index, array) {
	    return array.indexOf(priority) === index;
	  }).map(function (priority) {
	    return setters.filter(function (setter) {
	      return setter.priority === priority;
	    }).sort(function (a, b) {
	      return b.subPriority - a.subPriority;
	    });
	  }).map(function (setterArray) {
	    return setterArray[0];
	  });
	  var date = toDate(dirtyReferenceDate);
	  if (isNaN(date.getTime())) {
	    return new Date(NaN);
	  }

	  // Convert the date in system timezone to the same date in UTC+00:00 timezone.
	  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
	  var flags = {};
	  var _iterator2 = _createForOfIteratorHelper(uniquePrioritySetters),
	    _step2;
	  try {
	    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
	      var setter = _step2.value;
	      if (!setter.validate(utcDate, subFnOptions)) {
	        return new Date(NaN);
	      }
	      var result = setter.set(utcDate, flags, subFnOptions);
	      // Result is tuple (date, flags)
	      if (Array.isArray(result)) {
	        utcDate = result[0];
	        assign$2(flags, result[1]);
	        // Result is date
	      } else {
	        utcDate = result;
	      }
	    }
	  } catch (err) {
	    _iterator2.e(err);
	  } finally {
	    _iterator2.f();
	  }
	  return utcDate;
	}
	function cleanEscapedString(input) {
	  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
	}

	/**
	 * @name parseISO
	 * @category Common Helpers
	 * @summary Parse ISO string
	 *
	 * @description
	 * Parse the given string in ISO 8601 format and return an instance of Date.
	 *
	 * Function accepts complete ISO 8601 formats as well as partial implementations.
	 * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601
	 *
	 * If the argument isn't a string, the function cannot parse the string or
	 * the values are invalid, it returns Invalid Date.
	 *
	 * @param {String} argument - the value to convert
	 * @param {Object} [options] - an object with options.
	 * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format
	 * @returns {Date} the parsed date in the local time zone
	 * @throws {TypeError} 1 argument required
	 * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
	 *
	 * @example
	 * // Convert string '2014-02-11T11:30:30' to date:
	 * const result = parseISO('2014-02-11T11:30:30')
	 * //=> Tue Feb 11 2014 11:30:30
	 *
	 * @example
	 * // Convert string '+02014101' to date,
	 * // if the additional number of digits in the extended year format is 1:
	 * const result = parseISO('+02014101', { additionalDigits: 1 })
	 * //=> Fri Apr 11 2014 00:00:00
	 */
	function parseISO(argument, options) {
	  var _options$additionalDi;
	  requiredArgs(1, arguments);
	  var additionalDigits = toInteger((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);
	  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
	    throw new RangeError('additionalDigits must be 0, 1 or 2');
	  }
	  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {
	    return new Date(NaN);
	  }
	  var dateStrings = splitDateString(argument);
	  var date;
	  if (dateStrings.date) {
	    var parseYearResult = parseYear(dateStrings.date, additionalDigits);
	    date = parseDate(parseYearResult.restDateString, parseYearResult.year);
	  }
	  if (!date || isNaN(date.getTime())) {
	    return new Date(NaN);
	  }
	  var timestamp = date.getTime();
	  var time = 0;
	  var offset;
	  if (dateStrings.time) {
	    time = parseTime(dateStrings.time);
	    if (isNaN(time)) {
	      return new Date(NaN);
	    }
	  }
	  if (dateStrings.timezone) {
	    offset = parseTimezone(dateStrings.timezone);
	    if (isNaN(offset)) {
	      return new Date(NaN);
	    }
	  } else {
	    var dirtyDate = new Date(timestamp + time);
	    // js parsed string assuming it's in UTC timezone
	    // but we need it to be parsed in our timezone
	    // so we use utc values to build date in our timezone.
	    // Year values from 0 to 99 map to the years 1900 to 1999
	    // so set year explicitly with setFullYear.
	    var result = new Date(0);
	    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
	    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
	    return result;
	  }
	  return new Date(timestamp + time + offset);
	}
	var patterns = {
	  dateTimeDelimiter: /[T ]/,
	  timeZoneDelimiter: /[Z ]/i,
	  timezone: /([Z+-].*)$/
	};
	var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
	var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
	var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
	function splitDateString(dateString) {
	  var dateStrings = {};
	  var array = dateString.split(patterns.dateTimeDelimiter);
	  var timeString;

	  // The regex match should only return at maximum two array elements.
	  // [date], [time], or [date, time].
	  if (array.length > 2) {
	    return dateStrings;
	  }
	  if (/:/.test(array[0])) {
	    timeString = array[0];
	  } else {
	    dateStrings.date = array[0];
	    timeString = array[1];
	    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
	      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
	      timeString = dateString.substr(dateStrings.date.length, dateString.length);
	    }
	  }
	  if (timeString) {
	    var token = patterns.timezone.exec(timeString);
	    if (token) {
	      dateStrings.time = timeString.replace(token[1], '');
	      dateStrings.timezone = token[1];
	    } else {
	      dateStrings.time = timeString;
	    }
	  }
	  return dateStrings;
	}
	function parseYear(dateString, additionalDigits) {
	  var regex = new RegExp('^(?:(\\d{4}|[+-]\\d{' + (4 + additionalDigits) + '})|(\\d{2}|[+-]\\d{' + (2 + additionalDigits) + '})$)');
	  var captures = dateString.match(regex);
	  // Invalid ISO-formatted year
	  if (!captures) return {
	    year: NaN,
	    restDateString: ''
	  };
	  var year = captures[1] ? parseInt(captures[1]) : null;
	  var century = captures[2] ? parseInt(captures[2]) : null;

	  // either year or century is null, not both
	  return {
	    year: century === null ? year : century * 100,
	    restDateString: dateString.slice((captures[1] || captures[2]).length)
	  };
	}
	function parseDate(dateString, year) {
	  // Invalid ISO-formatted year
	  if (year === null) return new Date(NaN);
	  var captures = dateString.match(dateRegex);
	  // Invalid ISO-formatted string
	  if (!captures) return new Date(NaN);
	  var isWeekDate = !!captures[4];
	  var dayOfYear = parseDateUnit(captures[1]);
	  var month = parseDateUnit(captures[2]) - 1;
	  var day = parseDateUnit(captures[3]);
	  var week = parseDateUnit(captures[4]);
	  var dayOfWeek = parseDateUnit(captures[5]) - 1;
	  if (isWeekDate) {
	    if (!validateWeekDate(year, week, dayOfWeek)) {
	      return new Date(NaN);
	    }
	    return dayOfISOWeekYear(year, week, dayOfWeek);
	  } else {
	    var date = new Date(0);
	    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
	      return new Date(NaN);
	    }
	    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
	    return date;
	  }
	}
	function parseDateUnit(value) {
	  return value ? parseInt(value) : 1;
	}
	function parseTime(timeString) {
	  var captures = timeString.match(timeRegex);
	  if (!captures) return NaN; // Invalid ISO-formatted time

	  var hours = parseTimeUnit(captures[1]);
	  var minutes = parseTimeUnit(captures[2]);
	  var seconds = parseTimeUnit(captures[3]);
	  if (!validateTime(hours, minutes, seconds)) {
	    return NaN;
	  }
	  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000;
	}
	function parseTimeUnit(value) {
	  return value && parseFloat(value.replace(',', '.')) || 0;
	}
	function parseTimezone(timezoneString) {
	  if (timezoneString === 'Z') return 0;
	  var captures = timezoneString.match(timezoneRegex);
	  if (!captures) return 0;
	  var sign = captures[1] === '+' ? -1 : 1;
	  var hours = parseInt(captures[2]);
	  var minutes = captures[3] && parseInt(captures[3]) || 0;
	  if (!validateTimezone(hours, minutes)) {
	    return NaN;
	  }
	  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);
	}
	function dayOfISOWeekYear(isoWeekYear, week, day) {
	  var date = new Date(0);
	  date.setUTCFullYear(isoWeekYear, 0, 4);
	  var fourthOfJanuaryDay = date.getUTCDay() || 7;
	  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
	  date.setUTCDate(date.getUTCDate() + diff);
	  return date;
	}

	// Validation functions

	// February is null to handle the leap year (using ||)
	var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
	function isLeapYearIndex(year) {
	  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
	}
	function validateDate(year, month, date) {
	  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));
	}
	function validateDayOfYearDate(year, dayOfYear) {
	  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
	}
	function validateWeekDate(_year, week, day) {
	  return week >= 1 && week <= 53 && day >= 0 && day <= 6;
	}
	function validateTime(hours, minutes, seconds) {
	  if (hours === 24) {
	    return minutes === 0 && seconds === 0;
	  }
	  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
	}
	function validateTimezone(_hours, minutes) {
	  return minutes >= 0 && minutes <= 59;
	}

	function _inheritsLoose$1(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;

	  _setPrototypeOf$1(subClass, superClass);
	}

	function _setPrototypeOf$1(o, p) {
	  _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf$1(o, p);
	}

	function _objectWithoutPropertiesLoose$1(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _assertThisInitialized$1(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}/**
	 * Check whether some DOM node is our Component's node.
	 */
	function isNodeFound(current, componentNode, ignoreClass) {
	  if (current === componentNode) {
	    return true;
	  } // SVG <use/> elements do not technically reside in the rendered DOM, so
	  // they do not have classList directly, but they offer a link to their
	  // corresponding element, which can have classList. This extra check is for
	  // that case.
	  // See: http://www.w3.org/TR/SVG11/struct.html#InterfaceSVGUseElement
	  // Discussion: https://github.com/Pomax/react-onclickoutside/pull/17


	  if (current.correspondingElement) {
	    return current.correspondingElement.classList.contains(ignoreClass);
	  }

	  return current.classList.contains(ignoreClass);
	}
	/**
	 * Try to find our node in a hierarchy of nodes, returning the document
	 * node as highest node if our node is not found in the path up.
	 */

	function findHighest(current, componentNode, ignoreClass) {
	  if (current === componentNode) {
	    return true;
	  } // If source=local then this event came from 'somewhere'
	  // inside and should be ignored. We could handle this with
	  // a layered approach, too, but that requires going back to
	  // thinking in terms of Dom node nesting, running counter
	  // to React's 'you shouldn't care about the DOM' philosophy.
	  // Also cover shadowRoot node by checking current.host


	  while (current.parentNode || current.host) {
	    // Only check normal node without shadowRoot
	    if (current.parentNode && isNodeFound(current, componentNode, ignoreClass)) {
	      return true;
	    }

	    current = current.parentNode || current.host;
	  }

	  return current;
	}
	/**
	 * Check if the browser scrollbar was clicked
	 */

	function clickedScrollbar(evt) {
	  return document.documentElement.clientWidth <= evt.clientX || document.documentElement.clientHeight <= evt.clientY;
	}// ideally will get replaced with external dep
	// when rafrex/detect-passive-events#4 and rafrex/detect-passive-events#5 get merged in
	var testPassiveEventSupport = function testPassiveEventSupport() {
	  if (typeof window === 'undefined' || typeof window.addEventListener !== 'function') {
	    return;
	  }

	  var passive = false;
	  var options = Object.defineProperty({}, 'passive', {
	    get: function get() {
	      passive = true;
	    }
	  });

	  var noop = function noop() {};

	  window.addEventListener('testPassiveEventSupport', noop, options);
	  window.removeEventListener('testPassiveEventSupport', noop, options);
	  return passive;
	};function autoInc(seed) {
	  if (seed === void 0) {
	    seed = 0;
	  }

	  return function () {
	    return ++seed;
	  };
	}

	var uid$1 = autoInc();var passiveEventSupport;
	var handlersMap = {};
	var enabledInstances = {};
	var touchEvents = ['touchstart', 'touchmove'];
	var IGNORE_CLASS_NAME = 'ignore-react-onclickoutside';
	/**
	 * Options for addEventHandler and removeEventHandler
	 */

	function getEventHandlerOptions(instance, eventName) {
	  var handlerOptions = {};
	  var isTouchEvent = touchEvents.indexOf(eventName) !== -1;

	  if (isTouchEvent && passiveEventSupport) {
	    handlerOptions.passive = !instance.props.preventDefault;
	  }

	  return handlerOptions;
	}
	/**
	 * This function generates the HOC function that you'll use
	 * in order to impart onOutsideClick listening to an
	 * arbitrary component. It gets called at the end of the
	 * bootstrapping code to yield an instance of the
	 * onClickOutsideHOC function defined inside setupHOC().
	 */


	function onClickOutsideHOC(WrappedComponent, config) {
	  var _class, _temp;

	  var componentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
	  return _temp = _class = /*#__PURE__*/function (_Component) {
	    _inheritsLoose$1(onClickOutside, _Component);

	    function onClickOutside(props) {
	      var _this;

	      _this = _Component.call(this, props) || this;

	      _this.__outsideClickHandler = function (event) {
	        if (typeof _this.__clickOutsideHandlerProp === 'function') {
	          _this.__clickOutsideHandlerProp(event);

	          return;
	        }

	        var instance = _this.getInstance();

	        if (typeof instance.props.handleClickOutside === 'function') {
	          instance.props.handleClickOutside(event);
	          return;
	        }

	        if (typeof instance.handleClickOutside === 'function') {
	          instance.handleClickOutside(event);
	          return;
	        }

	        throw new Error("WrappedComponent: " + componentName + " lacks a handleClickOutside(event) function for processing outside click events.");
	      };

	      _this.__getComponentNode = function () {
	        var instance = _this.getInstance();

	        if (config && typeof config.setClickOutsideRef === 'function') {
	          return config.setClickOutsideRef()(instance);
	        }

	        if (typeof instance.setClickOutsideRef === 'function') {
	          return instance.setClickOutsideRef();
	        }

	        return require$$0.findDOMNode(instance);
	      };

	      _this.enableOnClickOutside = function () {
	        if (typeof document === 'undefined' || enabledInstances[_this._uid]) {
	          return;
	        }

	        if (typeof passiveEventSupport === 'undefined') {
	          passiveEventSupport = testPassiveEventSupport();
	        }

	        enabledInstances[_this._uid] = true;
	        var events = _this.props.eventTypes;

	        if (!events.forEach) {
	          events = [events];
	        }

	        handlersMap[_this._uid] = function (event) {
	          if (_this.componentNode === null) return;

	          if (_this.props.preventDefault) {
	            event.preventDefault();
	          }

	          if (_this.props.stopPropagation) {
	            event.stopPropagation();
	          }

	          if (_this.props.excludeScrollbar && clickedScrollbar(event)) return;
	          var current = event.composed && event.composedPath && event.composedPath().shift() || event.target;

	          if (findHighest(current, _this.componentNode, _this.props.outsideClickIgnoreClass) !== document) {
	            return;
	          }

	          _this.__outsideClickHandler(event);
	        };

	        events.forEach(function (eventName) {
	          document.addEventListener(eventName, handlersMap[_this._uid], getEventHandlerOptions(_assertThisInitialized$1(_this), eventName));
	        });
	      };

	      _this.disableOnClickOutside = function () {
	        delete enabledInstances[_this._uid];
	        var fn = handlersMap[_this._uid];

	        if (fn && typeof document !== 'undefined') {
	          var events = _this.props.eventTypes;

	          if (!events.forEach) {
	            events = [events];
	          }

	          events.forEach(function (eventName) {
	            return document.removeEventListener(eventName, fn, getEventHandlerOptions(_assertThisInitialized$1(_this), eventName));
	          });
	          delete handlersMap[_this._uid];
	        }
	      };

	      _this.getRef = function (ref) {
	        return _this.instanceRef = ref;
	      };

	      _this._uid = uid$1();
	      return _this;
	    }
	    /**
	     * Access the WrappedComponent's instance.
	     */


	    var _proto = onClickOutside.prototype;

	    _proto.getInstance = function getInstance() {
	      if (WrappedComponent.prototype && !WrappedComponent.prototype.isReactComponent) {
	        return this;
	      }

	      var ref = this.instanceRef;
	      return ref.getInstance ? ref.getInstance() : ref;
	    };

	    /**
	     * Add click listeners to the current document,
	     * linked to this component's state.
	     */
	    _proto.componentDidMount = function componentDidMount() {
	      // If we are in an environment without a DOM such
	      // as shallow rendering or snapshots then we exit
	      // early to prevent any unhandled errors being thrown.
	      if (typeof document === 'undefined' || !document.createElement) {
	        return;
	      }

	      var instance = this.getInstance();

	      if (config && typeof config.handleClickOutside === 'function') {
	        this.__clickOutsideHandlerProp = config.handleClickOutside(instance);

	        if (typeof this.__clickOutsideHandlerProp !== 'function') {
	          throw new Error("WrappedComponent: " + componentName + " lacks a function for processing outside click events specified by the handleClickOutside config option.");
	        }
	      }

	      this.componentNode = this.__getComponentNode(); // return early so we dont initiate onClickOutside

	      if (this.props.disableOnClickOutside) return;
	      this.enableOnClickOutside();
	    };

	    _proto.componentDidUpdate = function componentDidUpdate() {
	      this.componentNode = this.__getComponentNode();
	    }
	    /**
	     * Remove all document's event listeners for this component
	     */
	    ;

	    _proto.componentWillUnmount = function componentWillUnmount() {
	      this.disableOnClickOutside();
	    }
	    /**
	     * Can be called to explicitly enable event listening
	     * for clicks and touches outside of this element.
	     */
	    ;

	    /**
	     * Pass-through render
	     */
	    _proto.render = function render() {
	      // eslint-disable-next-line no-unused-vars
	      var _this$props = this.props;
	          _this$props.excludeScrollbar;
	          var props = _objectWithoutPropertiesLoose$1(_this$props, ["excludeScrollbar"]);

	      if (WrappedComponent.prototype && WrappedComponent.prototype.isReactComponent) {
	        props.ref = this.getRef;
	      } else {
	        props.wrappedRef = this.getRef;
	      }

	      props.disableOnClickOutside = this.disableOnClickOutside;
	      props.enableOnClickOutside = this.enableOnClickOutside;
	      return e$1.createElement(WrappedComponent, props);
	    };

	    return onClickOutside;
	  }(e$1.Component), _class.displayName = "OnClickOutside(" + componentName + ")", _class.defaultProps = {
	    eventTypes: ['mousedown', 'touchstart'],
	    excludeScrollbar: config && config.excludeScrollbar || false,
	    outsideClickIgnoreClass: IGNORE_CLASS_NAME,
	    preventDefault: false,
	    stopPropagation: false
	  }, _class.getClass = function () {
	    return WrappedComponent.getClass ? WrappedComponent.getClass() : WrappedComponent;
	  }, _temp;
	}

	var ManagerReferenceNodeContext = e__namespace.createContext();
	var ManagerReferenceNodeSetterContext = e__namespace.createContext();
	function Manager(_ref) {
	  var children = _ref.children;

	  var _React$useState = e__namespace.useState(null),
	      referenceNode = _React$useState[0],
	      setReferenceNode = _React$useState[1];

	  var hasUnmounted = e__namespace.useRef(false);
	  e__namespace.useEffect(function () {
	    return function () {
	      hasUnmounted.current = true;
	    };
	  }, []);
	  var handleSetReferenceNode = e__namespace.useCallback(function (node) {
	    if (!hasUnmounted.current) {
	      setReferenceNode(node);
	    }
	  }, []);
	  return /*#__PURE__*/e__namespace.createElement(ManagerReferenceNodeContext.Provider, {
	    value: referenceNode
	  }, /*#__PURE__*/e__namespace.createElement(ManagerReferenceNodeSetterContext.Provider, {
	    value: handleSetReferenceNode
	  }, children));
	}

	/**
	 * Takes an argument and if it's an array, returns the first item in the array,
	 * otherwise returns the argument. Used for Preact compatibility.
	 */
	var unwrapArray = function unwrapArray(arg) {
	  return Array.isArray(arg) ? arg[0] : arg;
	};
	/**
	 * Takes a maybe-undefined function and arbitrary args and invokes the function
	 * only if it is defined.
	 */

	var safeInvoke = function safeInvoke(fn) {
	  if (typeof fn === 'function') {
	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    return fn.apply(void 0, args);
	  }
	};
	/**
	 * Sets a ref using either a ref callback or a ref object
	 */

	var setRef = function setRef(ref, node) {
	  // if its a function call it
	  if (typeof ref === 'function') {
	    return safeInvoke(ref, node);
	  } // otherwise we should treat it as a ref object
	  else if (ref != null) {
	      ref.current = node;
	    }
	};
	/**
	 * Simple ponyfill for Object.fromEntries
	 */

	var fromEntries = function fromEntries(entries) {
	  return entries.reduce(function (acc, _ref) {
	    var key = _ref[0],
	        value = _ref[1];
	    acc[key] = value;
	    return acc;
	  }, {});
	};
	/**
	 * Small wrapper around `useLayoutEffect` to get rid of the warning on SSR envs
	 */

	var useIsomorphicLayoutEffect = typeof window !== 'undefined' && window.document && window.document.createElement ? e__namespace.useLayoutEffect : e__namespace.useEffect;

	var top = 'top';
	var bottom = 'bottom';
	var right = 'right';
	var left = 'left';
	var auto = 'auto';
	var basePlacements = [top, bottom, right, left];
	var start = 'start';
	var end = 'end';
	var clippingParents = 'clippingParents';
	var viewport = 'viewport';
	var popper = 'popper';
	var reference = 'reference';
	var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
	  return acc.concat([placement + "-" + start, placement + "-" + end]);
	}, []);
	var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
	  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
	}, []); // modifiers that need to read the DOM

	var beforeRead = 'beforeRead';
	var read = 'read';
	var afterRead = 'afterRead'; // pure-logic modifiers

	var beforeMain = 'beforeMain';
	var main = 'main';
	var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

	var beforeWrite = 'beforeWrite';
	var write = 'write';
	var afterWrite = 'afterWrite';
	var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

	function getNodeName$1(element) {
	  return element ? (element.nodeName || '').toLowerCase() : null;
	}

	function getWindow$1(node) {
	  if (node == null) {
	    return window;
	  }

	  if (node.toString() !== '[object Window]') {
	    var ownerDocument = node.ownerDocument;
	    return ownerDocument ? ownerDocument.defaultView || window : window;
	  }

	  return node;
	}

	function isElement$1(node) {
	  var OwnElement = getWindow$1(node).Element;
	  return node instanceof OwnElement || node instanceof Element;
	}

	function isHTMLElement$1(node) {
	  var OwnElement = getWindow$1(node).HTMLElement;
	  return node instanceof OwnElement || node instanceof HTMLElement;
	}

	function isShadowRoot$1(node) {
	  // IE 11 has no ShadowRoot
	  if (typeof ShadowRoot === 'undefined') {
	    return false;
	  }

	  var OwnElement = getWindow$1(node).ShadowRoot;
	  return node instanceof OwnElement || node instanceof ShadowRoot;
	}

	// and applies them to the HTMLElements such as popper and arrow

	function applyStyles(_ref) {
	  var state = _ref.state;
	  Object.keys(state.elements).forEach(function (name) {
	    var style = state.styles[name] || {};
	    var attributes = state.attributes[name] || {};
	    var element = state.elements[name]; // arrow is optional + virtual elements

	    if (!isHTMLElement$1(element) || !getNodeName$1(element)) {
	      return;
	    } // Flow doesn't support to extend this property, but it's the most
	    // effective way to apply styles to an HTMLElement
	    // $FlowFixMe[cannot-write]


	    Object.assign(element.style, style);
	    Object.keys(attributes).forEach(function (name) {
	      var value = attributes[name];

	      if (value === false) {
	        element.removeAttribute(name);
	      } else {
	        element.setAttribute(name, value === true ? '' : value);
	      }
	    });
	  });
	}

	function effect$2(_ref2) {
	  var state = _ref2.state;
	  var initialStyles = {
	    popper: {
	      position: state.options.strategy,
	      left: '0',
	      top: '0',
	      margin: '0'
	    },
	    arrow: {
	      position: 'absolute'
	    },
	    reference: {}
	  };
	  Object.assign(state.elements.popper.style, initialStyles.popper);
	  state.styles = initialStyles;

	  if (state.elements.arrow) {
	    Object.assign(state.elements.arrow.style, initialStyles.arrow);
	  }

	  return function () {
	    Object.keys(state.elements).forEach(function (name) {
	      var element = state.elements[name];
	      var attributes = state.attributes[name] || {};
	      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

	      var style = styleProperties.reduce(function (style, property) {
	        style[property] = '';
	        return style;
	      }, {}); // arrow is optional + virtual elements

	      if (!isHTMLElement$1(element) || !getNodeName$1(element)) {
	        return;
	      }

	      Object.assign(element.style, style);
	      Object.keys(attributes).forEach(function (attribute) {
	        element.removeAttribute(attribute);
	      });
	    });
	  };
	} // eslint-disable-next-line import/no-unused-modules


	var applyStyles$1 = {
	  name: 'applyStyles',
	  enabled: true,
	  phase: 'write',
	  fn: applyStyles,
	  effect: effect$2,
	  requires: ['computeStyles']
	};

	function getBasePlacement(placement) {
	  return placement.split('-')[0];
	}

	var max$1 = Math.max;
	var min$1 = Math.min;
	var round$2 = Math.round;

	function getUAString() {
	  var uaData = navigator.userAgentData;

	  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
	    return uaData.brands.map(function (item) {
	      return item.brand + "/" + item.version;
	    }).join(' ');
	  }

	  return navigator.userAgent;
	}

	function isLayoutViewport() {
	  return !/^((?!chrome|android).)*safari/i.test(getUAString());
	}

	function getBoundingClientRect$1(element, includeScale, isFixedStrategy) {
	  if (includeScale === void 0) {
	    includeScale = false;
	  }

	  if (isFixedStrategy === void 0) {
	    isFixedStrategy = false;
	  }

	  var clientRect = element.getBoundingClientRect();
	  var scaleX = 1;
	  var scaleY = 1;

	  if (includeScale && isHTMLElement$1(element)) {
	    scaleX = element.offsetWidth > 0 ? round$2(clientRect.width) / element.offsetWidth || 1 : 1;
	    scaleY = element.offsetHeight > 0 ? round$2(clientRect.height) / element.offsetHeight || 1 : 1;
	  }

	  var _ref = isElement$1(element) ? getWindow$1(element) : window,
	      visualViewport = _ref.visualViewport;

	  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
	  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
	  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
	  var width = clientRect.width / scaleX;
	  var height = clientRect.height / scaleY;
	  return {
	    width: width,
	    height: height,
	    top: y,
	    right: x + width,
	    bottom: y + height,
	    left: x,
	    x: x,
	    y: y
	  };
	}

	// means it doesn't take into account transforms.

	function getLayoutRect(element) {
	  var clientRect = getBoundingClientRect$1(element); // Use the clientRect sizes if it's not been transformed.
	  // Fixes https://github.com/popperjs/popper-core/issues/1223

	  var width = element.offsetWidth;
	  var height = element.offsetHeight;

	  if (Math.abs(clientRect.width - width) <= 1) {
	    width = clientRect.width;
	  }

	  if (Math.abs(clientRect.height - height) <= 1) {
	    height = clientRect.height;
	  }

	  return {
	    x: element.offsetLeft,
	    y: element.offsetTop,
	    width: width,
	    height: height
	  };
	}

	function contains(parent, child) {
	  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

	  if (parent.contains(child)) {
	    return true;
	  } // then fallback to custom implementation with Shadow DOM support
	  else if (rootNode && isShadowRoot$1(rootNode)) {
	      var next = child;

	      do {
	        if (next && parent.isSameNode(next)) {
	          return true;
	        } // $FlowFixMe[prop-missing]: need a better way to handle this...


	        next = next.parentNode || next.host;
	      } while (next);
	    } // Give up, the result is false


	  return false;
	}

	function getComputedStyle$2(element) {
	  return getWindow$1(element).getComputedStyle(element);
	}

	function isTableElement(element) {
	  return ['table', 'td', 'th'].indexOf(getNodeName$1(element)) >= 0;
	}

	function getDocumentElement$1(element) {
	  // $FlowFixMe[incompatible-return]: assume body is always available
	  return ((isElement$1(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
	  element.document) || window.document).documentElement;
	}

	function getParentNode$1(element) {
	  if (getNodeName$1(element) === 'html') {
	    return element;
	  }

	  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
	    // $FlowFixMe[incompatible-return]
	    // $FlowFixMe[prop-missing]
	    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
	    element.parentNode || ( // DOM Element detected
	    isShadowRoot$1(element) ? element.host : null) || // ShadowRoot detected
	    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
	    getDocumentElement$1(element) // fallback

	  );
	}

	function getTrueOffsetParent(element) {
	  if (!isHTMLElement$1(element) || // https://github.com/popperjs/popper-core/issues/837
	  getComputedStyle$2(element).position === 'fixed') {
	    return null;
	  }

	  return element.offsetParent;
	} // `.offsetParent` reports `null` for fixed elements, while absolute elements
	// return the containing block


	function getContainingBlock(element) {
	  var isFirefox = /firefox/i.test(getUAString());
	  var isIE = /Trident/i.test(getUAString());

	  if (isIE && isHTMLElement$1(element)) {
	    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
	    var elementCss = getComputedStyle$2(element);

	    if (elementCss.position === 'fixed') {
	      return null;
	    }
	  }

	  var currentNode = getParentNode$1(element);

	  if (isShadowRoot$1(currentNode)) {
	    currentNode = currentNode.host;
	  }

	  while (isHTMLElement$1(currentNode) && ['html', 'body'].indexOf(getNodeName$1(currentNode)) < 0) {
	    var css = getComputedStyle$2(currentNode); // This is non-exhaustive but covers the most common CSS properties that
	    // create a containing block.
	    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

	    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
	      return currentNode;
	    } else {
	      currentNode = currentNode.parentNode;
	    }
	  }

	  return null;
	} // Gets the closest ancestor positioned element. Handles some edge cases,
	// such as table ancestors and cross browser bugs.


	function getOffsetParent(element) {
	  var window = getWindow$1(element);
	  var offsetParent = getTrueOffsetParent(element);

	  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$2(offsetParent).position === 'static') {
	    offsetParent = getTrueOffsetParent(offsetParent);
	  }

	  if (offsetParent && (getNodeName$1(offsetParent) === 'html' || getNodeName$1(offsetParent) === 'body' && getComputedStyle$2(offsetParent).position === 'static')) {
	    return window;
	  }

	  return offsetParent || getContainingBlock(element) || window;
	}

	function getMainAxisFromPlacement(placement) {
	  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
	}

	function within(min, value, max) {
	  return max$1(min, min$1(value, max));
	}
	function withinMaxClamp(min, value, max) {
	  var v = within(min, value, max);
	  return v > max ? max : v;
	}

	function getFreshSideObject() {
	  return {
	    top: 0,
	    right: 0,
	    bottom: 0,
	    left: 0
	  };
	}

	function mergePaddingObject(paddingObject) {
	  return Object.assign({}, getFreshSideObject(), paddingObject);
	}

	function expandToHashMap(value, keys) {
	  return keys.reduce(function (hashMap, key) {
	    hashMap[key] = value;
	    return hashMap;
	  }, {});
	}

	var toPaddingObject = function toPaddingObject(padding, state) {
	  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
	    placement: state.placement
	  })) : padding;
	  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
	};

	function arrow(_ref) {
	  var _state$modifiersData$;

	  var state = _ref.state,
	      name = _ref.name,
	      options = _ref.options;
	  var arrowElement = state.elements.arrow;
	  var popperOffsets = state.modifiersData.popperOffsets;
	  var basePlacement = getBasePlacement(state.placement);
	  var axis = getMainAxisFromPlacement(basePlacement);
	  var isVertical = [left, right].indexOf(basePlacement) >= 0;
	  var len = isVertical ? 'height' : 'width';

	  if (!arrowElement || !popperOffsets) {
	    return;
	  }

	  var paddingObject = toPaddingObject(options.padding, state);
	  var arrowRect = getLayoutRect(arrowElement);
	  var minProp = axis === 'y' ? top : left;
	  var maxProp = axis === 'y' ? bottom : right;
	  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
	  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
	  var arrowOffsetParent = getOffsetParent(arrowElement);
	  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
	  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
	  // outside of the popper bounds

	  var min = paddingObject[minProp];
	  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
	  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
	  var offset = within(min, center, max); // Prevents breaking syntax highlighting...

	  var axisProp = axis;
	  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
	}

	function effect$1(_ref2) {
	  var state = _ref2.state,
	      options = _ref2.options;
	  var _options$element = options.element,
	      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

	  if (arrowElement == null) {
	    return;
	  } // CSS selector


	  if (typeof arrowElement === 'string') {
	    arrowElement = state.elements.popper.querySelector(arrowElement);

	    if (!arrowElement) {
	      return;
	    }
	  }

	  if (!contains(state.elements.popper, arrowElement)) {
	    return;
	  }

	  state.elements.arrow = arrowElement;
	} // eslint-disable-next-line import/no-unused-modules


	var arrow$1 = {
	  name: 'arrow',
	  enabled: true,
	  phase: 'main',
	  fn: arrow,
	  effect: effect$1,
	  requires: ['popperOffsets'],
	  requiresIfExists: ['preventOverflow']
	};

	function getVariation(placement) {
	  return placement.split('-')[1];
	}

	var unsetSides = {
	  top: 'auto',
	  right: 'auto',
	  bottom: 'auto',
	  left: 'auto'
	}; // Round the offsets to the nearest suitable subpixel based on the DPR.
	// Zooming can change the DPR, but it seems to report a value that will
	// cleanly divide the values into the appropriate subpixels.

	function roundOffsetsByDPR(_ref, win) {
	  var x = _ref.x,
	      y = _ref.y;
	  var dpr = win.devicePixelRatio || 1;
	  return {
	    x: round$2(x * dpr) / dpr || 0,
	    y: round$2(y * dpr) / dpr || 0
	  };
	}

	function mapToStyles(_ref2) {
	  var _Object$assign2;

	  var popper = _ref2.popper,
	      popperRect = _ref2.popperRect,
	      placement = _ref2.placement,
	      variation = _ref2.variation,
	      offsets = _ref2.offsets,
	      position = _ref2.position,
	      gpuAcceleration = _ref2.gpuAcceleration,
	      adaptive = _ref2.adaptive,
	      roundOffsets = _ref2.roundOffsets,
	      isFixed = _ref2.isFixed;
	  var _offsets$x = offsets.x,
	      x = _offsets$x === void 0 ? 0 : _offsets$x,
	      _offsets$y = offsets.y,
	      y = _offsets$y === void 0 ? 0 : _offsets$y;

	  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
	    x: x,
	    y: y
	  }) : {
	    x: x,
	    y: y
	  };

	  x = _ref3.x;
	  y = _ref3.y;
	  var hasX = offsets.hasOwnProperty('x');
	  var hasY = offsets.hasOwnProperty('y');
	  var sideX = left;
	  var sideY = top;
	  var win = window;

	  if (adaptive) {
	    var offsetParent = getOffsetParent(popper);
	    var heightProp = 'clientHeight';
	    var widthProp = 'clientWidth';

	    if (offsetParent === getWindow$1(popper)) {
	      offsetParent = getDocumentElement$1(popper);

	      if (getComputedStyle$2(offsetParent).position !== 'static' && position === 'absolute') {
	        heightProp = 'scrollHeight';
	        widthProp = 'scrollWidth';
	      }
	    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


	    offsetParent = offsetParent;

	    if (placement === top || (placement === left || placement === right) && variation === end) {
	      sideY = bottom;
	      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
	      offsetParent[heightProp];
	      y -= offsetY - popperRect.height;
	      y *= gpuAcceleration ? 1 : -1;
	    }

	    if (placement === left || (placement === top || placement === bottom) && variation === end) {
	      sideX = right;
	      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
	      offsetParent[widthProp];
	      x -= offsetX - popperRect.width;
	      x *= gpuAcceleration ? 1 : -1;
	    }
	  }

	  var commonStyles = Object.assign({
	    position: position
	  }, adaptive && unsetSides);

	  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
	    x: x,
	    y: y
	  }, getWindow$1(popper)) : {
	    x: x,
	    y: y
	  };

	  x = _ref4.x;
	  y = _ref4.y;

	  if (gpuAcceleration) {
	    var _Object$assign;

	    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
	  }

	  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
	}

	function computeStyles(_ref5) {
	  var state = _ref5.state,
	      options = _ref5.options;
	  var _options$gpuAccelerat = options.gpuAcceleration,
	      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
	      _options$adaptive = options.adaptive,
	      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
	      _options$roundOffsets = options.roundOffsets,
	      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
	  var commonStyles = {
	    placement: getBasePlacement(state.placement),
	    variation: getVariation(state.placement),
	    popper: state.elements.popper,
	    popperRect: state.rects.popper,
	    gpuAcceleration: gpuAcceleration,
	    isFixed: state.options.strategy === 'fixed'
	  };

	  if (state.modifiersData.popperOffsets != null) {
	    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
	      offsets: state.modifiersData.popperOffsets,
	      position: state.options.strategy,
	      adaptive: adaptive,
	      roundOffsets: roundOffsets
	    })));
	  }

	  if (state.modifiersData.arrow != null) {
	    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
	      offsets: state.modifiersData.arrow,
	      position: 'absolute',
	      adaptive: false,
	      roundOffsets: roundOffsets
	    })));
	  }

	  state.attributes.popper = Object.assign({}, state.attributes.popper, {
	    'data-popper-placement': state.placement
	  });
	} // eslint-disable-next-line import/no-unused-modules


	var computeStyles$1 = {
	  name: 'computeStyles',
	  enabled: true,
	  phase: 'beforeWrite',
	  fn: computeStyles,
	  data: {}
	};

	var passive = {
	  passive: true
	};

	function effect(_ref) {
	  var state = _ref.state,
	      instance = _ref.instance,
	      options = _ref.options;
	  var _options$scroll = options.scroll,
	      scroll = _options$scroll === void 0 ? true : _options$scroll,
	      _options$resize = options.resize,
	      resize = _options$resize === void 0 ? true : _options$resize;
	  var window = getWindow$1(state.elements.popper);
	  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

	  if (scroll) {
	    scrollParents.forEach(function (scrollParent) {
	      scrollParent.addEventListener('scroll', instance.update, passive);
	    });
	  }

	  if (resize) {
	    window.addEventListener('resize', instance.update, passive);
	  }

	  return function () {
	    if (scroll) {
	      scrollParents.forEach(function (scrollParent) {
	        scrollParent.removeEventListener('scroll', instance.update, passive);
	      });
	    }

	    if (resize) {
	      window.removeEventListener('resize', instance.update, passive);
	    }
	  };
	} // eslint-disable-next-line import/no-unused-modules


	var eventListeners = {
	  name: 'eventListeners',
	  enabled: true,
	  phase: 'write',
	  fn: function fn() {},
	  effect: effect,
	  data: {}
	};

	var hash$2 = {
	  left: 'right',
	  right: 'left',
	  bottom: 'top',
	  top: 'bottom'
	};
	function getOppositePlacement(placement) {
	  return placement.replace(/left|right|bottom|top/g, function (matched) {
	    return hash$2[matched];
	  });
	}

	var hash$1 = {
	  start: 'end',
	  end: 'start'
	};
	function getOppositeVariationPlacement(placement) {
	  return placement.replace(/start|end/g, function (matched) {
	    return hash$1[matched];
	  });
	}

	function getWindowScroll(node) {
	  var win = getWindow$1(node);
	  var scrollLeft = win.pageXOffset;
	  var scrollTop = win.pageYOffset;
	  return {
	    scrollLeft: scrollLeft,
	    scrollTop: scrollTop
	  };
	}

	function getWindowScrollBarX(element) {
	  // If <html> has a CSS width greater than the viewport, then this will be
	  // incorrect for RTL.
	  // Popper 1 is broken in this case and never had a bug report so let's assume
	  // it's not an issue. I don't think anyone ever specifies width on <html>
	  // anyway.
	  // Browsers where the left scrollbar doesn't cause an issue report `0` for
	  // this (e.g. Edge 2019, IE11, Safari)
	  return getBoundingClientRect$1(getDocumentElement$1(element)).left + getWindowScroll(element).scrollLeft;
	}

	function getViewportRect(element, strategy) {
	  var win = getWindow$1(element);
	  var html = getDocumentElement$1(element);
	  var visualViewport = win.visualViewport;
	  var width = html.clientWidth;
	  var height = html.clientHeight;
	  var x = 0;
	  var y = 0;

	  if (visualViewport) {
	    width = visualViewport.width;
	    height = visualViewport.height;
	    var layoutViewport = isLayoutViewport();

	    if (layoutViewport || !layoutViewport && strategy === 'fixed') {
	      x = visualViewport.offsetLeft;
	      y = visualViewport.offsetTop;
	    }
	  }

	  return {
	    width: width,
	    height: height,
	    x: x + getWindowScrollBarX(element),
	    y: y
	  };
	}

	// of the `<html>` and `<body>` rect bounds if horizontally scrollable

	function getDocumentRect(element) {
	  var _element$ownerDocumen;

	  var html = getDocumentElement$1(element);
	  var winScroll = getWindowScroll(element);
	  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
	  var width = max$1(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
	  var height = max$1(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
	  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
	  var y = -winScroll.scrollTop;

	  if (getComputedStyle$2(body || html).direction === 'rtl') {
	    x += max$1(html.clientWidth, body ? body.clientWidth : 0) - width;
	  }

	  return {
	    width: width,
	    height: height,
	    x: x,
	    y: y
	  };
	}

	function isScrollParent(element) {
	  // Firefox wants us to check `-x` and `-y` variations as well
	  var _getComputedStyle = getComputedStyle$2(element),
	      overflow = _getComputedStyle.overflow,
	      overflowX = _getComputedStyle.overflowX,
	      overflowY = _getComputedStyle.overflowY;

	  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
	}

	function getScrollParent$1(node) {
	  if (['html', 'body', '#document'].indexOf(getNodeName$1(node)) >= 0) {
	    // $FlowFixMe[incompatible-return]: assume body is always available
	    return node.ownerDocument.body;
	  }

	  if (isHTMLElement$1(node) && isScrollParent(node)) {
	    return node;
	  }

	  return getScrollParent$1(getParentNode$1(node));
	}

	/*
	given a DOM element, return the list of all scroll parents, up the list of ancesors
	until we get to the top window object. This list is what we attach scroll listeners
	to, because if any of these parent elements scroll, we'll need to re-calculate the
	reference element's position.
	*/

	function listScrollParents(element, list) {
	  var _element$ownerDocumen;

	  if (list === void 0) {
	    list = [];
	  }

	  var scrollParent = getScrollParent$1(element);
	  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
	  var win = getWindow$1(scrollParent);
	  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
	  var updatedList = list.concat(target);
	  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
	  updatedList.concat(listScrollParents(getParentNode$1(target)));
	}

	function rectToClientRect$1(rect) {
	  return Object.assign({}, rect, {
	    left: rect.x,
	    top: rect.y,
	    right: rect.x + rect.width,
	    bottom: rect.y + rect.height
	  });
	}

	function getInnerBoundingClientRect(element, strategy) {
	  var rect = getBoundingClientRect$1(element, false, strategy === 'fixed');
	  rect.top = rect.top + element.clientTop;
	  rect.left = rect.left + element.clientLeft;
	  rect.bottom = rect.top + element.clientHeight;
	  rect.right = rect.left + element.clientWidth;
	  rect.width = element.clientWidth;
	  rect.height = element.clientHeight;
	  rect.x = rect.left;
	  rect.y = rect.top;
	  return rect;
	}

	function getClientRectFromMixedType(element, clippingParent, strategy) {
	  return clippingParent === viewport ? rectToClientRect$1(getViewportRect(element, strategy)) : isElement$1(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect$1(getDocumentRect(getDocumentElement$1(element)));
	} // A "clipping parent" is an overflowable container with the characteristic of
	// clipping (or hiding) overflowing elements with a position different from
	// `initial`


	function getClippingParents(element) {
	  var clippingParents = listScrollParents(getParentNode$1(element));
	  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$2(element).position) >= 0;
	  var clipperElement = canEscapeClipping && isHTMLElement$1(element) ? getOffsetParent(element) : element;

	  if (!isElement$1(clipperElement)) {
	    return [];
	  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


	  return clippingParents.filter(function (clippingParent) {
	    return isElement$1(clippingParent) && contains(clippingParent, clipperElement) && getNodeName$1(clippingParent) !== 'body';
	  });
	} // Gets the maximum area that the element is visible in due to any number of
	// clipping parents


	function getClippingRect(element, boundary, rootBoundary, strategy) {
	  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
	  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
	  var firstClippingParent = clippingParents[0];
	  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
	    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
	    accRect.top = max$1(rect.top, accRect.top);
	    accRect.right = min$1(rect.right, accRect.right);
	    accRect.bottom = min$1(rect.bottom, accRect.bottom);
	    accRect.left = max$1(rect.left, accRect.left);
	    return accRect;
	  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
	  clippingRect.width = clippingRect.right - clippingRect.left;
	  clippingRect.height = clippingRect.bottom - clippingRect.top;
	  clippingRect.x = clippingRect.left;
	  clippingRect.y = clippingRect.top;
	  return clippingRect;
	}

	function computeOffsets(_ref) {
	  var reference = _ref.reference,
	      element = _ref.element,
	      placement = _ref.placement;
	  var basePlacement = placement ? getBasePlacement(placement) : null;
	  var variation = placement ? getVariation(placement) : null;
	  var commonX = reference.x + reference.width / 2 - element.width / 2;
	  var commonY = reference.y + reference.height / 2 - element.height / 2;
	  var offsets;

	  switch (basePlacement) {
	    case top:
	      offsets = {
	        x: commonX,
	        y: reference.y - element.height
	      };
	      break;

	    case bottom:
	      offsets = {
	        x: commonX,
	        y: reference.y + reference.height
	      };
	      break;

	    case right:
	      offsets = {
	        x: reference.x + reference.width,
	        y: commonY
	      };
	      break;

	    case left:
	      offsets = {
	        x: reference.x - element.width,
	        y: commonY
	      };
	      break;

	    default:
	      offsets = {
	        x: reference.x,
	        y: reference.y
	      };
	  }

	  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

	  if (mainAxis != null) {
	    var len = mainAxis === 'y' ? 'height' : 'width';

	    switch (variation) {
	      case start:
	        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
	        break;

	      case end:
	        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
	        break;
	    }
	  }

	  return offsets;
	}

	function detectOverflow(state, options) {
	  if (options === void 0) {
	    options = {};
	  }

	  var _options = options,
	      _options$placement = _options.placement,
	      placement = _options$placement === void 0 ? state.placement : _options$placement,
	      _options$strategy = _options.strategy,
	      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
	      _options$boundary = _options.boundary,
	      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
	      _options$rootBoundary = _options.rootBoundary,
	      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
	      _options$elementConte = _options.elementContext,
	      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
	      _options$altBoundary = _options.altBoundary,
	      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
	      _options$padding = _options.padding,
	      padding = _options$padding === void 0 ? 0 : _options$padding;
	  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
	  var altContext = elementContext === popper ? reference : popper;
	  var popperRect = state.rects.popper;
	  var element = state.elements[altBoundary ? altContext : elementContext];
	  var clippingClientRect = getClippingRect(isElement$1(element) ? element : element.contextElement || getDocumentElement$1(state.elements.popper), boundary, rootBoundary, strategy);
	  var referenceClientRect = getBoundingClientRect$1(state.elements.reference);
	  var popperOffsets = computeOffsets({
	    reference: referenceClientRect,
	    element: popperRect,
	    strategy: 'absolute',
	    placement: placement
	  });
	  var popperClientRect = rectToClientRect$1(Object.assign({}, popperRect, popperOffsets));
	  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
	  // 0 or negative = within the clipping rect

	  var overflowOffsets = {
	    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
	    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
	    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
	    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
	  };
	  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

	  if (elementContext === popper && offsetData) {
	    var offset = offsetData[placement];
	    Object.keys(overflowOffsets).forEach(function (key) {
	      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
	      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
	      overflowOffsets[key] += offset[axis] * multiply;
	    });
	  }

	  return overflowOffsets;
	}

	function computeAutoPlacement(state, options) {
	  if (options === void 0) {
	    options = {};
	  }

	  var _options = options,
	      placement = _options.placement,
	      boundary = _options.boundary,
	      rootBoundary = _options.rootBoundary,
	      padding = _options.padding,
	      flipVariations = _options.flipVariations,
	      _options$allowedAutoP = _options.allowedAutoPlacements,
	      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
	  var variation = getVariation(placement);
	  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
	    return getVariation(placement) === variation;
	  }) : basePlacements;
	  var allowedPlacements = placements$1.filter(function (placement) {
	    return allowedAutoPlacements.indexOf(placement) >= 0;
	  });

	  if (allowedPlacements.length === 0) {
	    allowedPlacements = placements$1;
	  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


	  var overflows = allowedPlacements.reduce(function (acc, placement) {
	    acc[placement] = detectOverflow(state, {
	      placement: placement,
	      boundary: boundary,
	      rootBoundary: rootBoundary,
	      padding: padding
	    })[getBasePlacement(placement)];
	    return acc;
	  }, {});
	  return Object.keys(overflows).sort(function (a, b) {
	    return overflows[a] - overflows[b];
	  });
	}

	function getExpandedFallbackPlacements(placement) {
	  if (getBasePlacement(placement) === auto) {
	    return [];
	  }

	  var oppositePlacement = getOppositePlacement(placement);
	  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
	}

	function flip(_ref) {
	  var state = _ref.state,
	      options = _ref.options,
	      name = _ref.name;

	  if (state.modifiersData[name]._skip) {
	    return;
	  }

	  var _options$mainAxis = options.mainAxis,
	      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
	      _options$altAxis = options.altAxis,
	      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
	      specifiedFallbackPlacements = options.fallbackPlacements,
	      padding = options.padding,
	      boundary = options.boundary,
	      rootBoundary = options.rootBoundary,
	      altBoundary = options.altBoundary,
	      _options$flipVariatio = options.flipVariations,
	      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
	      allowedAutoPlacements = options.allowedAutoPlacements;
	  var preferredPlacement = state.options.placement;
	  var basePlacement = getBasePlacement(preferredPlacement);
	  var isBasePlacement = basePlacement === preferredPlacement;
	  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
	  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
	    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
	      placement: placement,
	      boundary: boundary,
	      rootBoundary: rootBoundary,
	      padding: padding,
	      flipVariations: flipVariations,
	      allowedAutoPlacements: allowedAutoPlacements
	    }) : placement);
	  }, []);
	  var referenceRect = state.rects.reference;
	  var popperRect = state.rects.popper;
	  var checksMap = new Map();
	  var makeFallbackChecks = true;
	  var firstFittingPlacement = placements[0];

	  for (var i = 0; i < placements.length; i++) {
	    var placement = placements[i];

	    var _basePlacement = getBasePlacement(placement);

	    var isStartVariation = getVariation(placement) === start;
	    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
	    var len = isVertical ? 'width' : 'height';
	    var overflow = detectOverflow(state, {
	      placement: placement,
	      boundary: boundary,
	      rootBoundary: rootBoundary,
	      altBoundary: altBoundary,
	      padding: padding
	    });
	    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

	    if (referenceRect[len] > popperRect[len]) {
	      mainVariationSide = getOppositePlacement(mainVariationSide);
	    }

	    var altVariationSide = getOppositePlacement(mainVariationSide);
	    var checks = [];

	    if (checkMainAxis) {
	      checks.push(overflow[_basePlacement] <= 0);
	    }

	    if (checkAltAxis) {
	      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
	    }

	    if (checks.every(function (check) {
	      return check;
	    })) {
	      firstFittingPlacement = placement;
	      makeFallbackChecks = false;
	      break;
	    }

	    checksMap.set(placement, checks);
	  }

	  if (makeFallbackChecks) {
	    // `2` may be desired in some cases – research later
	    var numberOfChecks = flipVariations ? 3 : 1;

	    var _loop = function _loop(_i) {
	      var fittingPlacement = placements.find(function (placement) {
	        var checks = checksMap.get(placement);

	        if (checks) {
	          return checks.slice(0, _i).every(function (check) {
	            return check;
	          });
	        }
	      });

	      if (fittingPlacement) {
	        firstFittingPlacement = fittingPlacement;
	        return "break";
	      }
	    };

	    for (var _i = numberOfChecks; _i > 0; _i--) {
	      var _ret = _loop(_i);

	      if (_ret === "break") break;
	    }
	  }

	  if (state.placement !== firstFittingPlacement) {
	    state.modifiersData[name]._skip = true;
	    state.placement = firstFittingPlacement;
	    state.reset = true;
	  }
	} // eslint-disable-next-line import/no-unused-modules


	var flip$1 = {
	  name: 'flip',
	  enabled: true,
	  phase: 'main',
	  fn: flip,
	  requiresIfExists: ['offset'],
	  data: {
	    _skip: false
	  }
	};

	function getSideOffsets(overflow, rect, preventedOffsets) {
	  if (preventedOffsets === void 0) {
	    preventedOffsets = {
	      x: 0,
	      y: 0
	    };
	  }

	  return {
	    top: overflow.top - rect.height - preventedOffsets.y,
	    right: overflow.right - rect.width + preventedOffsets.x,
	    bottom: overflow.bottom - rect.height + preventedOffsets.y,
	    left: overflow.left - rect.width - preventedOffsets.x
	  };
	}

	function isAnySideFullyClipped(overflow) {
	  return [top, right, bottom, left].some(function (side) {
	    return overflow[side] >= 0;
	  });
	}

	function hide(_ref) {
	  var state = _ref.state,
	      name = _ref.name;
	  var referenceRect = state.rects.reference;
	  var popperRect = state.rects.popper;
	  var preventedOffsets = state.modifiersData.preventOverflow;
	  var referenceOverflow = detectOverflow(state, {
	    elementContext: 'reference'
	  });
	  var popperAltOverflow = detectOverflow(state, {
	    altBoundary: true
	  });
	  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
	  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
	  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
	  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
	  state.modifiersData[name] = {
	    referenceClippingOffsets: referenceClippingOffsets,
	    popperEscapeOffsets: popperEscapeOffsets,
	    isReferenceHidden: isReferenceHidden,
	    hasPopperEscaped: hasPopperEscaped
	  };
	  state.attributes.popper = Object.assign({}, state.attributes.popper, {
	    'data-popper-reference-hidden': isReferenceHidden,
	    'data-popper-escaped': hasPopperEscaped
	  });
	} // eslint-disable-next-line import/no-unused-modules


	var hide$1 = {
	  name: 'hide',
	  enabled: true,
	  phase: 'main',
	  requiresIfExists: ['preventOverflow'],
	  fn: hide
	};

	function distanceAndSkiddingToXY(placement, rects, offset) {
	  var basePlacement = getBasePlacement(placement);
	  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

	  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
	    placement: placement
	  })) : offset,
	      skidding = _ref[0],
	      distance = _ref[1];

	  skidding = skidding || 0;
	  distance = (distance || 0) * invertDistance;
	  return [left, right].indexOf(basePlacement) >= 0 ? {
	    x: distance,
	    y: skidding
	  } : {
	    x: skidding,
	    y: distance
	  };
	}

	function offset(_ref2) {
	  var state = _ref2.state,
	      options = _ref2.options,
	      name = _ref2.name;
	  var _options$offset = options.offset,
	      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
	  var data = placements.reduce(function (acc, placement) {
	    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
	    return acc;
	  }, {});
	  var _data$state$placement = data[state.placement],
	      x = _data$state$placement.x,
	      y = _data$state$placement.y;

	  if (state.modifiersData.popperOffsets != null) {
	    state.modifiersData.popperOffsets.x += x;
	    state.modifiersData.popperOffsets.y += y;
	  }

	  state.modifiersData[name] = data;
	} // eslint-disable-next-line import/no-unused-modules


	var offset$1 = {
	  name: 'offset',
	  enabled: true,
	  phase: 'main',
	  requires: ['popperOffsets'],
	  fn: offset
	};

	function popperOffsets(_ref) {
	  var state = _ref.state,
	      name = _ref.name;
	  // Offsets are the actual position the popper needs to have to be
	  // properly positioned near its reference element
	  // This is the most basic placement, and will be adjusted by
	  // the modifiers in the next step
	  state.modifiersData[name] = computeOffsets({
	    reference: state.rects.reference,
	    element: state.rects.popper,
	    strategy: 'absolute',
	    placement: state.placement
	  });
	} // eslint-disable-next-line import/no-unused-modules


	var popperOffsets$1 = {
	  name: 'popperOffsets',
	  enabled: true,
	  phase: 'read',
	  fn: popperOffsets,
	  data: {}
	};

	function getAltAxis(axis) {
	  return axis === 'x' ? 'y' : 'x';
	}

	function preventOverflow(_ref) {
	  var state = _ref.state,
	      options = _ref.options,
	      name = _ref.name;
	  var _options$mainAxis = options.mainAxis,
	      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
	      _options$altAxis = options.altAxis,
	      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
	      boundary = options.boundary,
	      rootBoundary = options.rootBoundary,
	      altBoundary = options.altBoundary,
	      padding = options.padding,
	      _options$tether = options.tether,
	      tether = _options$tether === void 0 ? true : _options$tether,
	      _options$tetherOffset = options.tetherOffset,
	      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
	  var overflow = detectOverflow(state, {
	    boundary: boundary,
	    rootBoundary: rootBoundary,
	    padding: padding,
	    altBoundary: altBoundary
	  });
	  var basePlacement = getBasePlacement(state.placement);
	  var variation = getVariation(state.placement);
	  var isBasePlacement = !variation;
	  var mainAxis = getMainAxisFromPlacement(basePlacement);
	  var altAxis = getAltAxis(mainAxis);
	  var popperOffsets = state.modifiersData.popperOffsets;
	  var referenceRect = state.rects.reference;
	  var popperRect = state.rects.popper;
	  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
	    placement: state.placement
	  })) : tetherOffset;
	  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
	    mainAxis: tetherOffsetValue,
	    altAxis: tetherOffsetValue
	  } : Object.assign({
	    mainAxis: 0,
	    altAxis: 0
	  }, tetherOffsetValue);
	  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
	  var data = {
	    x: 0,
	    y: 0
	  };

	  if (!popperOffsets) {
	    return;
	  }

	  if (checkMainAxis) {
	    var _offsetModifierState$;

	    var mainSide = mainAxis === 'y' ? top : left;
	    var altSide = mainAxis === 'y' ? bottom : right;
	    var len = mainAxis === 'y' ? 'height' : 'width';
	    var offset = popperOffsets[mainAxis];
	    var min = offset + overflow[mainSide];
	    var max = offset - overflow[altSide];
	    var additive = tether ? -popperRect[len] / 2 : 0;
	    var minLen = variation === start ? referenceRect[len] : popperRect[len];
	    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
	    // outside the reference bounds

	    var arrowElement = state.elements.arrow;
	    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
	      width: 0,
	      height: 0
	    };
	    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
	    var arrowPaddingMin = arrowPaddingObject[mainSide];
	    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
	    // to include its full size in the calculation. If the reference is small
	    // and near the edge of a boundary, the popper can overflow even if the
	    // reference is not overflowing as well (e.g. virtual elements with no
	    // width or height)

	    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
	    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
	    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
	    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
	    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
	    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
	    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
	    var tetherMax = offset + maxOffset - offsetModifierValue;
	    var preventedOffset = within(tether ? min$1(min, tetherMin) : min, offset, tether ? max$1(max, tetherMax) : max);
	    popperOffsets[mainAxis] = preventedOffset;
	    data[mainAxis] = preventedOffset - offset;
	  }

	  if (checkAltAxis) {
	    var _offsetModifierState$2;

	    var _mainSide = mainAxis === 'x' ? top : left;

	    var _altSide = mainAxis === 'x' ? bottom : right;

	    var _offset = popperOffsets[altAxis];

	    var _len = altAxis === 'y' ? 'height' : 'width';

	    var _min = _offset + overflow[_mainSide];

	    var _max = _offset - overflow[_altSide];

	    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

	    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

	    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

	    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

	    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

	    popperOffsets[altAxis] = _preventedOffset;
	    data[altAxis] = _preventedOffset - _offset;
	  }

	  state.modifiersData[name] = data;
	} // eslint-disable-next-line import/no-unused-modules


	var preventOverflow$1 = {
	  name: 'preventOverflow',
	  enabled: true,
	  phase: 'main',
	  fn: preventOverflow,
	  requiresIfExists: ['offset']
	};

	function getHTMLElementScroll(element) {
	  return {
	    scrollLeft: element.scrollLeft,
	    scrollTop: element.scrollTop
	  };
	}

	function getNodeScroll(node) {
	  if (node === getWindow$1(node) || !isHTMLElement$1(node)) {
	    return getWindowScroll(node);
	  } else {
	    return getHTMLElementScroll(node);
	  }
	}

	function isElementScaled(element) {
	  var rect = element.getBoundingClientRect();
	  var scaleX = round$2(rect.width) / element.offsetWidth || 1;
	  var scaleY = round$2(rect.height) / element.offsetHeight || 1;
	  return scaleX !== 1 || scaleY !== 1;
	} // Returns the composite rect of an element relative to its offsetParent.
	// Composite means it takes into account transforms as well as layout.


	function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
	  if (isFixed === void 0) {
	    isFixed = false;
	  }

	  var isOffsetParentAnElement = isHTMLElement$1(offsetParent);
	  var offsetParentIsScaled = isHTMLElement$1(offsetParent) && isElementScaled(offsetParent);
	  var documentElement = getDocumentElement$1(offsetParent);
	  var rect = getBoundingClientRect$1(elementOrVirtualElement, offsetParentIsScaled, isFixed);
	  var scroll = {
	    scrollLeft: 0,
	    scrollTop: 0
	  };
	  var offsets = {
	    x: 0,
	    y: 0
	  };

	  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
	    if (getNodeName$1(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
	    isScrollParent(documentElement)) {
	      scroll = getNodeScroll(offsetParent);
	    }

	    if (isHTMLElement$1(offsetParent)) {
	      offsets = getBoundingClientRect$1(offsetParent, true);
	      offsets.x += offsetParent.clientLeft;
	      offsets.y += offsetParent.clientTop;
	    } else if (documentElement) {
	      offsets.x = getWindowScrollBarX(documentElement);
	    }
	  }

	  return {
	    x: rect.left + scroll.scrollLeft - offsets.x,
	    y: rect.top + scroll.scrollTop - offsets.y,
	    width: rect.width,
	    height: rect.height
	  };
	}

	function order(modifiers) {
	  var map = new Map();
	  var visited = new Set();
	  var result = [];
	  modifiers.forEach(function (modifier) {
	    map.set(modifier.name, modifier);
	  }); // On visiting object, check for its dependencies and visit them recursively

	  function sort(modifier) {
	    visited.add(modifier.name);
	    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
	    requires.forEach(function (dep) {
	      if (!visited.has(dep)) {
	        var depModifier = map.get(dep);

	        if (depModifier) {
	          sort(depModifier);
	        }
	      }
	    });
	    result.push(modifier);
	  }

	  modifiers.forEach(function (modifier) {
	    if (!visited.has(modifier.name)) {
	      // check for visited object
	      sort(modifier);
	    }
	  });
	  return result;
	}

	function orderModifiers(modifiers) {
	  // order based on dependencies
	  var orderedModifiers = order(modifiers); // order based on phase

	  return modifierPhases.reduce(function (acc, phase) {
	    return acc.concat(orderedModifiers.filter(function (modifier) {
	      return modifier.phase === phase;
	    }));
	  }, []);
	}

	function debounce$1(fn) {
	  var pending;
	  return function () {
	    if (!pending) {
	      pending = new Promise(function (resolve) {
	        Promise.resolve().then(function () {
	          pending = undefined;
	          resolve(fn());
	        });
	      });
	    }

	    return pending;
	  };
	}

	function mergeByName(modifiers) {
	  var merged = modifiers.reduce(function (merged, current) {
	    var existing = merged[current.name];
	    merged[current.name] = existing ? Object.assign({}, existing, current, {
	      options: Object.assign({}, existing.options, current.options),
	      data: Object.assign({}, existing.data, current.data)
	    }) : current;
	    return merged;
	  }, {}); // IE11 does not support Object.values

	  return Object.keys(merged).map(function (key) {
	    return merged[key];
	  });
	}

	var DEFAULT_OPTIONS = {
	  placement: 'bottom',
	  modifiers: [],
	  strategy: 'absolute'
	};

	function areValidElements() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  return !args.some(function (element) {
	    return !(element && typeof element.getBoundingClientRect === 'function');
	  });
	}

	function popperGenerator(generatorOptions) {
	  if (generatorOptions === void 0) {
	    generatorOptions = {};
	  }

	  var _generatorOptions = generatorOptions,
	      _generatorOptions$def = _generatorOptions.defaultModifiers,
	      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
	      _generatorOptions$def2 = _generatorOptions.defaultOptions,
	      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
	  return function createPopper(reference, popper, options) {
	    if (options === void 0) {
	      options = defaultOptions;
	    }

	    var state = {
	      placement: 'bottom',
	      orderedModifiers: [],
	      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
	      modifiersData: {},
	      elements: {
	        reference: reference,
	        popper: popper
	      },
	      attributes: {},
	      styles: {}
	    };
	    var effectCleanupFns = [];
	    var isDestroyed = false;
	    var instance = {
	      state: state,
	      setOptions: function setOptions(setOptionsAction) {
	        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
	        cleanupModifierEffects();
	        state.options = Object.assign({}, defaultOptions, state.options, options);
	        state.scrollParents = {
	          reference: isElement$1(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
	          popper: listScrollParents(popper)
	        }; // Orders the modifiers based on their dependencies and `phase`
	        // properties

	        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

	        state.orderedModifiers = orderedModifiers.filter(function (m) {
	          return m.enabled;
	        });
	        runModifierEffects();
	        return instance.update();
	      },
	      // Sync update – it will always be executed, even if not necessary. This
	      // is useful for low frequency updates where sync behavior simplifies the
	      // logic.
	      // For high frequency updates (e.g. `resize` and `scroll` events), always
	      // prefer the async Popper#update method
	      forceUpdate: function forceUpdate() {
	        if (isDestroyed) {
	          return;
	        }

	        var _state$elements = state.elements,
	            reference = _state$elements.reference,
	            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
	        // anymore

	        if (!areValidElements(reference, popper)) {
	          return;
	        } // Store the reference and popper rects to be read by modifiers


	        state.rects = {
	          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
	          popper: getLayoutRect(popper)
	        }; // Modifiers have the ability to reset the current update cycle. The
	        // most common use case for this is the `flip` modifier changing the
	        // placement, which then needs to re-run all the modifiers, because the
	        // logic was previously ran for the previous placement and is therefore
	        // stale/incorrect

	        state.reset = false;
	        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
	        // is filled with the initial data specified by the modifier. This means
	        // it doesn't persist and is fresh on each update.
	        // To ensure persistent data, use `${name}#persistent`

	        state.orderedModifiers.forEach(function (modifier) {
	          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
	        });

	        for (var index = 0; index < state.orderedModifiers.length; index++) {
	          if (state.reset === true) {
	            state.reset = false;
	            index = -1;
	            continue;
	          }

	          var _state$orderedModifie = state.orderedModifiers[index],
	              fn = _state$orderedModifie.fn,
	              _state$orderedModifie2 = _state$orderedModifie.options,
	              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
	              name = _state$orderedModifie.name;

	          if (typeof fn === 'function') {
	            state = fn({
	              state: state,
	              options: _options,
	              name: name,
	              instance: instance
	            }) || state;
	          }
	        }
	      },
	      // Async and optimistically optimized update – it will not be executed if
	      // not necessary (debounced to run at most once-per-tick)
	      update: debounce$1(function () {
	        return new Promise(function (resolve) {
	          instance.forceUpdate();
	          resolve(state);
	        });
	      }),
	      destroy: function destroy() {
	        cleanupModifierEffects();
	        isDestroyed = true;
	      }
	    };

	    if (!areValidElements(reference, popper)) {
	      return instance;
	    }

	    instance.setOptions(options).then(function (state) {
	      if (!isDestroyed && options.onFirstUpdate) {
	        options.onFirstUpdate(state);
	      }
	    }); // Modifiers have the ability to execute arbitrary code before the first
	    // update cycle runs. They will be executed in the same order as the update
	    // cycle. This is useful when a modifier adds some persistent data that
	    // other modifiers need to use, but the modifier is run after the dependent
	    // one.

	    function runModifierEffects() {
	      state.orderedModifiers.forEach(function (_ref) {
	        var name = _ref.name,
	            _ref$options = _ref.options,
	            options = _ref$options === void 0 ? {} : _ref$options,
	            effect = _ref.effect;

	        if (typeof effect === 'function') {
	          var cleanupFn = effect({
	            state: state,
	            name: name,
	            instance: instance,
	            options: options
	          });

	          var noopFn = function noopFn() {};

	          effectCleanupFns.push(cleanupFn || noopFn);
	        }
	      });
	    }

	    function cleanupModifierEffects() {
	      effectCleanupFns.forEach(function (fn) {
	        return fn();
	      });
	      effectCleanupFns = [];
	    }

	    return instance;
	  };
	}

	var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
	var createPopper = /*#__PURE__*/popperGenerator({
	  defaultModifiers: defaultModifiers
	}); // eslint-disable-next-line import/no-unused-modules

	/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */

	var hasElementType = typeof Element !== 'undefined';
	var hasMap = typeof Map === 'function';
	var hasSet = typeof Set === 'function';
	var hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView;

	// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js

	function equal(a, b) {
	  // START: fast-deep-equal es6/index.js 3.1.3
	  if (a === b) return true;

	  if (a && b && typeof a == 'object' && typeof b == 'object') {
	    if (a.constructor !== b.constructor) return false;

	    var length, i, keys;
	    if (Array.isArray(a)) {
	      length = a.length;
	      if (length != b.length) return false;
	      for (i = length; i-- !== 0;)
	        if (!equal(a[i], b[i])) return false;
	      return true;
	    }

	    // START: Modifications:
	    // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code
	    //    to co-exist with es5.
	    // 2. Replace `for of` with es5 compliant iteration using `for`.
	    //    Basically, take:
	    //
	    //    ```js
	    //    for (i of a.entries())
	    //      if (!b.has(i[0])) return false;
	    //    ```
	    //
	    //    ... and convert to:
	    //
	    //    ```js
	    //    it = a.entries();
	    //    while (!(i = it.next()).done)
	    //      if (!b.has(i.value[0])) return false;
	    //    ```
	    //
	    //    **Note**: `i` access switches to `i.value`.
	    var it;
	    if (hasMap && (a instanceof Map) && (b instanceof Map)) {
	      if (a.size !== b.size) return false;
	      it = a.entries();
	      while (!(i = it.next()).done)
	        if (!b.has(i.value[0])) return false;
	      it = a.entries();
	      while (!(i = it.next()).done)
	        if (!equal(i.value[1], b.get(i.value[0]))) return false;
	      return true;
	    }

	    if (hasSet && (a instanceof Set) && (b instanceof Set)) {
	      if (a.size !== b.size) return false;
	      it = a.entries();
	      while (!(i = it.next()).done)
	        if (!b.has(i.value[0])) return false;
	      return true;
	    }
	    // END: Modifications

	    if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
	      length = a.length;
	      if (length != b.length) return false;
	      for (i = length; i-- !== 0;)
	        if (a[i] !== b[i]) return false;
	      return true;
	    }

	    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
	    // START: Modifications:
	    // Apply guards for `Object.create(null)` handling. See:
	    // - https://github.com/FormidableLabs/react-fast-compare/issues/64
	    // - https://github.com/epoberezkin/fast-deep-equal/issues/49
	    if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === 'function' && typeof b.valueOf === 'function') return a.valueOf() === b.valueOf();
	    if (a.toString !== Object.prototype.toString && typeof a.toString === 'function' && typeof b.toString === 'function') return a.toString() === b.toString();
	    // END: Modifications

	    keys = Object.keys(a);
	    length = keys.length;
	    if (length !== Object.keys(b).length) return false;

	    for (i = length; i-- !== 0;)
	      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
	    // END: fast-deep-equal

	    // START: react-fast-compare
	    // custom handling for DOM elements
	    if (hasElementType && a instanceof Element) return false;

	    // custom handling for React/Preact
	    for (i = length; i-- !== 0;) {
	      if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) {
	        // React-specific: avoid traversing React elements' _owner
	        // Preact-specific: avoid traversing Preact elements' __v and __o
	        //    __v = $_original / $_vnode
	        //    __o = $_owner
	        // These properties contain circular references and are not needed when
	        // comparing the actual elements (and not their owners)
	        // .$$typeof and ._store on just reasonable markers of elements

	        continue;
	      }

	      // all other properties should be traversed as usual
	      if (!equal(a[keys[i]], b[keys[i]])) return false;
	    }
	    // END: react-fast-compare

	    // START: fast-deep-equal
	    return true;
	  }

	  return a !== a && b !== b;
	}
	// end fast-deep-equal

	var reactFastCompare = function isEqual(a, b) {
	  try {
	    return equal(a, b);
	  } catch (error) {
	    if (((error.message || '').match(/stack|recursion/i))) {
	      // warn on circular references, don't crash
	      // browsers give this different errors name and messages:
	      // chrome/safari: "RangeError", "Maximum call stack size exceeded"
	      // firefox: "InternalError", too much recursion"
	      // edge: "Error", "Out of stack space"
	      console.warn('react-fast-compare cannot handle circular refs');
	      return false;
	    }
	    // some other error. we should definitely know about these
	    throw error;
	  }
	};

	var isEqual$1 = /*@__PURE__*/getDefaultExportFromCjs(reactFastCompare);

	var EMPTY_MODIFIERS$1 = [];
	var usePopper = function usePopper(referenceElement, popperElement, options) {
	  if (options === void 0) {
	    options = {};
	  }

	  var prevOptions = e__namespace.useRef(null);
	  var optionsWithDefaults = {
	    onFirstUpdate: options.onFirstUpdate,
	    placement: options.placement || 'bottom',
	    strategy: options.strategy || 'absolute',
	    modifiers: options.modifiers || EMPTY_MODIFIERS$1
	  };

	  var _React$useState = e__namespace.useState({
	    styles: {
	      popper: {
	        position: optionsWithDefaults.strategy,
	        left: '0',
	        top: '0'
	      },
	      arrow: {
	        position: 'absolute'
	      }
	    },
	    attributes: {}
	  }),
	      state = _React$useState[0],
	      setState = _React$useState[1];

	  var updateStateModifier = e__namespace.useMemo(function () {
	    return {
	      name: 'updateState',
	      enabled: true,
	      phase: 'write',
	      fn: function fn(_ref) {
	        var state = _ref.state;
	        var elements = Object.keys(state.elements);
	        require$$0__namespace.flushSync(function () {
	          setState({
	            styles: fromEntries(elements.map(function (element) {
	              return [element, state.styles[element] || {}];
	            })),
	            attributes: fromEntries(elements.map(function (element) {
	              return [element, state.attributes[element]];
	            }))
	          });
	        });
	      },
	      requires: ['computeStyles']
	    };
	  }, []);
	  var popperOptions = e__namespace.useMemo(function () {
	    var newOptions = {
	      onFirstUpdate: optionsWithDefaults.onFirstUpdate,
	      placement: optionsWithDefaults.placement,
	      strategy: optionsWithDefaults.strategy,
	      modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {
	        name: 'applyStyles',
	        enabled: false
	      }])
	    };

	    if (isEqual$1(prevOptions.current, newOptions)) {
	      return prevOptions.current || newOptions;
	    } else {
	      prevOptions.current = newOptions;
	      return newOptions;
	    }
	  }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);
	  var popperInstanceRef = e__namespace.useRef();
	  useIsomorphicLayoutEffect(function () {
	    if (popperInstanceRef.current) {
	      popperInstanceRef.current.setOptions(popperOptions);
	    }
	  }, [popperOptions]);
	  useIsomorphicLayoutEffect(function () {
	    if (referenceElement == null || popperElement == null) {
	      return;
	    }

	    var createPopper$1 = options.createPopper || createPopper;
	    var popperInstance = createPopper$1(referenceElement, popperElement, popperOptions);
	    popperInstanceRef.current = popperInstance;
	    return function () {
	      popperInstance.destroy();
	      popperInstanceRef.current = null;
	    };
	  }, [referenceElement, popperElement, options.createPopper]);
	  return {
	    state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
	    styles: state.styles,
	    attributes: state.attributes,
	    update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
	    forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
	  };
	};

	var NOOP = function NOOP() {
	  return void 0;
	};

	var NOOP_PROMISE = function NOOP_PROMISE() {
	  return Promise.resolve(null);
	};

	var EMPTY_MODIFIERS = [];
	function Popper(_ref) {
	  var _ref$placement = _ref.placement,
	      placement = _ref$placement === void 0 ? 'bottom' : _ref$placement,
	      _ref$strategy = _ref.strategy,
	      strategy = _ref$strategy === void 0 ? 'absolute' : _ref$strategy,
	      _ref$modifiers = _ref.modifiers,
	      modifiers = _ref$modifiers === void 0 ? EMPTY_MODIFIERS : _ref$modifiers,
	      referenceElement = _ref.referenceElement,
	      onFirstUpdate = _ref.onFirstUpdate,
	      innerRef = _ref.innerRef,
	      children = _ref.children;
	  var referenceNode = e__namespace.useContext(ManagerReferenceNodeContext);

	  var _React$useState = e__namespace.useState(null),
	      popperElement = _React$useState[0],
	      setPopperElement = _React$useState[1];

	  var _React$useState2 = e__namespace.useState(null),
	      arrowElement = _React$useState2[0],
	      setArrowElement = _React$useState2[1];

	  e__namespace.useEffect(function () {
	    setRef(innerRef, popperElement);
	  }, [innerRef, popperElement]);
	  var options = e__namespace.useMemo(function () {
	    return {
	      placement: placement,
	      strategy: strategy,
	      onFirstUpdate: onFirstUpdate,
	      modifiers: [].concat(modifiers, [{
	        name: 'arrow',
	        enabled: arrowElement != null,
	        options: {
	          element: arrowElement
	        }
	      }])
	    };
	  }, [placement, strategy, onFirstUpdate, modifiers, arrowElement]);

	  var _usePopper = usePopper(referenceElement || referenceNode, popperElement, options),
	      state = _usePopper.state,
	      styles = _usePopper.styles,
	      forceUpdate = _usePopper.forceUpdate,
	      update = _usePopper.update;

	  var childrenProps = e__namespace.useMemo(function () {
	    return {
	      ref: setPopperElement,
	      style: styles.popper,
	      placement: state ? state.placement : placement,
	      hasPopperEscaped: state && state.modifiersData.hide ? state.modifiersData.hide.hasPopperEscaped : null,
	      isReferenceHidden: state && state.modifiersData.hide ? state.modifiersData.hide.isReferenceHidden : null,
	      arrowProps: {
	        style: styles.arrow,
	        ref: setArrowElement
	      },
	      forceUpdate: forceUpdate || NOOP,
	      update: update || NOOP_PROMISE
	    };
	  }, [setPopperElement, setArrowElement, placement, state, styles, update, forceUpdate]);
	  return unwrapArray(children)(childrenProps);
	}

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var warning = function() {};

	var warning_1 = warning;

	var warning$1 = /*@__PURE__*/getDefaultExportFromCjs(warning_1);

	function Reference(_ref) {
	  var children = _ref.children,
	      innerRef = _ref.innerRef;
	  var setReferenceNode = e__namespace.useContext(ManagerReferenceNodeSetterContext);
	  var refHandler = e__namespace.useCallback(function (node) {
	    setRef(innerRef, node);
	    safeInvoke(setReferenceNode, node);
	  }, [innerRef, setReferenceNode]); // ran on unmount
	  // eslint-disable-next-line react-hooks/exhaustive-deps

	  e__namespace.useEffect(function () {
	    return function () {
	      return setRef(innerRef, null);
	    };
	  }, []);
	  e__namespace.useEffect(function () {
	    warning$1(Boolean(setReferenceNode), '`Reference` should not be used outside of a `Manager` component.');
	  }, [setReferenceNode]);
	  return unwrapArray(children)({
	    ref: refHandler
	  });
	}

	/**
	 * @name set
	 * @category Common Helpers
	 * @summary Set date values to a given date.
	 *
	 * @description
	 * Set date values to a given date.
	 *
	 * Sets time values to date from object `values`.
	 * A value is not set if it is undefined or null or doesn't exist in `values`.
	 *
	 * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts
	 * to use native `Date#setX` methods. If you use this function, you may not want to include the
	 * other `setX` functions that date-fns provides if you are concerned about the bundle size.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Object} values - an object with options
	 * @param {Number} [values.year] - the number of years to be set
	 * @param {Number} [values.month] - the number of months to be set
	 * @param {Number} [values.date] - the number of days to be set
	 * @param {Number} [values.hours] - the number of hours to be set
	 * @param {Number} [values.minutes] - the number of minutes to be set
	 * @param {Number} [values.seconds] - the number of seconds to be set
	 * @param {Number} [values.milliseconds] - the number of milliseconds to be set
	 * @returns {Date} the new date with options set
	 * @throws {TypeError} 2 arguments required
	 * @throws {RangeError} `values` must be an object
	 *
	 * @example
	 * // Transform 1 September 2014 into 20 October 2015 in a single line:
	 * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })
	 * //=> Tue Oct 20 2015 00:00:00
	 *
	 * @example
	 * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:
	 * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })
	 * //=> Mon Sep 01 2014 12:23:45
	 */
	function set$1(dirtyDate, values) {
	  requiredArgs(2, arguments);
	  if (_typeof(values) !== 'object' || values === null) {
	    throw new RangeError('values parameter must be an object');
	  }
	  var date = toDate(dirtyDate);

	  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date
	  if (isNaN(date.getTime())) {
	    return new Date(NaN);
	  }
	  if (values.year != null) {
	    date.setFullYear(values.year);
	  }
	  if (values.month != null) {
	    date = setMonth(date, values.month);
	  }
	  if (values.date != null) {
	    date.setDate(toInteger(values.date));
	  }
	  if (values.hours != null) {
	    date.setHours(toInteger(values.hours));
	  }
	  if (values.minutes != null) {
	    date.setMinutes(toInteger(values.minutes));
	  }
	  if (values.seconds != null) {
	    date.setSeconds(toInteger(values.seconds));
	  }
	  if (values.milliseconds != null) {
	    date.setMilliseconds(toInteger(values.milliseconds));
	  }
	  return date;
	}

	function le(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n);}return r}function de(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?le(Object(r),!0).forEach((function(t){ye(e,t,r[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):le(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t));}));}return e}function ue(e){return ue="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ue(e)}function he(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function me(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,_e(n.key),n);}}function fe(e,t,r){return t&&me(e.prototype,t),r&&me(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function ye(e,t,r){return (t=_e(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ve(){return ve=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n]);}return e},ve.apply(this,arguments)}function De(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&we(e,t);}function ge(e){return ge=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},ge(e)}function we(e,t){return we=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},we(e,t)}function ke(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function be(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}();return function(){var r,n=ge(e);if(t){var o=ge(this).constructor;r=Reflect.construct(n,arguments,o);}else r=n.apply(this,arguments);return function(e,t){if(t&&("object"==typeof t||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return ke(e)}(this,r)}}function Se(e){return function(e){if(Array.isArray(e))return Ce(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return Ce(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return Ce(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ce(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function _e(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return ("string"===t?String:Number)(e)}(e,"string");return "symbol"==typeof t?t:String(t)}var Me=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},Ee=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},Pe={p:Ee,P:function(e,t){var r,n=e.match(/(P+)(p+)?/)||[],o=n[1],a=n[2];if(!a)return Me(e,t);switch(o){case"P":r=t.dateTime({width:"short"});break;case"PP":r=t.dateTime({width:"medium"});break;case"PPP":r=t.dateTime({width:"long"});break;default:r=t.dateTime({width:"full"});}return r.replace("{{date}}",Me(o,t)).replace("{{time}}",Ee(a,t))}},Ne=12,xe=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;function Ye(e){var t=e?"string"==typeof e||e instanceof String?parseISO(e):toDate(e):new Date;return Te(t)?t:null}function Te(e,t){return t=t||new Date("1/1/1000"),isValid(e)&&!isBefore(e,t)}function Ie(e,t,r){if("en"===r)return format(e,t,{awareOfUnicodeTokens:!0});var n=Ge(r);return r&&!n&&console.warn('A locale object was not found for the provided string ["'.concat(r,'"].')),!n&&$e()&&Ge($e())&&(n=Ge($e())),format(e,t,{locale:n||null,awareOfUnicodeTokens:!0})}function Oe(e,t){var r=t.dateFormat,n=t.locale;return e&&Ie(e,Array.isArray(r)?r[0]:r,n)||""}function Re(e,t){var r=t.hour,n=void 0===r?0:r,o=t.minute,a=void 0===o?0:o,s=t.second;return setHours(setMinutes(setSeconds(e,void 0===s?0:s),a),n)}function Le(e,t,r){var n=Ge(t||$e());return startOfWeek(e,{locale:n,weekStartsOn:r})}function Fe(e){return startOfMonth(e)}function Ae(e){return startOfYear(e)}function Ke(e){return startOfQuarter(e)}function Be(){return startOfDay(Ye())}function Qe(e,t){return e&&t?isSameYear(e,t):!e&&!t}function He(e,t){return e&&t?isSameMonth(e,t):!e&&!t}function je(e,t){return e&&t?isSameQuarter(e,t):!e&&!t}function We(e,t){return e&&t?isSameDay(e,t):!e&&!t}function Ve(e,t){return e&&t?isEqual$2(e,t):!e&&!t}function qe(e,t,r){var n,o=startOfDay(t),a=endOfDay(r);try{n=isWithinInterval(e,{start:o,end:a});}catch(e){n=!1;}return n}function $e(){return ("undefined"!=typeof window?window:globalThis).__localeId__}function Ge(e){if("string"==typeof e){var t="undefined"!=typeof window?window:globalThis;return t.__localeData__?t.__localeData__[e]:null}return e}function Je(e,t){return Ie(setMonth(Ye(),e),"LLLL",t)}function Xe(e,t){return Ie(setMonth(Ye(),e),"LLL",t)}function Ze(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.minDate,n=t.maxDate,o=t.excludeDates,a=t.excludeDateIntervals,s=t.includeDates,i=t.includeDateIntervals,p=t.filterDate;return it(e,{minDate:r,maxDate:n})||o&&o.some((function(t){return We(e,t)}))||a&&a.some((function(t){var r=t.start,n=t.end;return isWithinInterval(e,{start:r,end:n})}))||s&&!s.some((function(t){return We(e,t)}))||i&&!i.some((function(t){var r=t.start,n=t.end;return isWithinInterval(e,{start:r,end:n})}))||p&&!p(Ye(e))||!1}function et(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.excludeDates,n=t.excludeDateIntervals;return n&&n.length>0?n.some((function(t){var r=t.start,n=t.end;return isWithinInterval(e,{start:r,end:n})})):r&&r.some((function(t){return We(e,t)}))||!1}function tt(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.minDate,n=t.maxDate,o=t.excludeDates,a=t.includeDates,s=t.filterDate;return it(e,{minDate:startOfMonth(r),maxDate:endOfMonth(n)})||o&&o.some((function(t){return He(e,t)}))||a&&!a.some((function(t){return He(e,t)}))||s&&!s(Ye(e))||!1}function rt(e,t,r,n){var o=getYear(e),a=getMonth(e),s=getYear(t),i=getMonth(t),p=getYear(n);return o===s&&o===p?a<=r&&r<=i:o<s?p===o&&a<=r||p===s&&i>=r||p<s&&p>o:void 0}function nt(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.minDate,n=t.maxDate,o=t.excludeDates,a=t.includeDates,s=t.filterDate;return it(e,{minDate:r,maxDate:n})||o&&o.some((function(t){return je(e,t)}))||a&&!a.some((function(t){return je(e,t)}))||s&&!s(Ye(e))||!1}function ot(e,t,r){if(!isValid(t)||!isValid(r))return !1;var n=getYear(t),a=getYear(r);return n<=e&&a>=e}function at(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.minDate,n=t.maxDate,o=t.excludeDates,a=t.includeDates,s=t.filterDate,i=new Date(e,0,1);return it(i,{minDate:startOfYear(r),maxDate:endOfYear(n)})||o&&o.some((function(e){return Qe(i,e)}))||a&&!a.some((function(e){return Qe(i,e)}))||s&&!s(Ye(i))||!1}function st(e,t,r,n){var o=getYear(e),a=getQuarter(e),s=getYear(t),i=getQuarter(t),p=getYear(n);return o===s&&o===p?a<=r&&r<=i:o<s?p===o&&a<=r||p===s&&i>=r||p<s&&p>o:void 0}function it(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.minDate,n=t.maxDate;return r&&differenceInCalendarDays(e,r)<0||n&&differenceInCalendarDays(e,n)>0}function pt(e,t){return t.some((function(t){return getHours(t)===getHours(e)&&getMinutes(t)===getMinutes(e)}))}function ct(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.excludeTimes,n=t.includeTimes,o=t.filterTime;return r&&pt(e,r)||n&&!pt(e,n)||o&&!o(e)||!1}function lt(e,t){var r=t.minTime,n=t.maxTime;if(!r||!n)throw new Error("Both minTime and maxTime props required");var o,a=Ye(),s=setHours(setMinutes(a,getMinutes(e)),getHours(e)),i=setHours(setMinutes(a,getMinutes(r)),getHours(r)),p=setHours(setMinutes(a,getMinutes(n)),getHours(n));try{o=!isWithinInterval(s,{start:i,end:p});}catch(e){o=!1;}return o}function dt(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.minDate,n=t.includeDates,o=subMonths(e,1);return r&&differenceInCalendarMonths(r,o)>0||n&&n.every((function(e){return differenceInCalendarMonths(e,o)>0}))||!1}function ut(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.maxDate,n=t.includeDates,o=addMonths(e,1);return r&&differenceInCalendarMonths(o,r)>0||n&&n.every((function(e){return differenceInCalendarMonths(o,e)>0}))||!1}function ht(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.minDate,n=t.includeDates,o=subYears(e,1);return r&&differenceInCalendarYears(r,o)>0||n&&n.every((function(e){return differenceInCalendarYears(e,o)>0}))||!1}function mt(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.maxDate,n=t.includeDates,o=addYears(e,1);return r&&differenceInCalendarYears(o,r)>0||n&&n.every((function(e){return differenceInCalendarYears(o,e)>0}))||!1}function ft(e){var t=e.minDate,r=e.includeDates;if(r&&t){var n=r.filter((function(e){return differenceInCalendarDays(e,t)>=0}));return min$2(n)}return r?min$2(r):t}function yt(e){var t=e.maxDate,r=e.includeDates;if(r&&t){var n=r.filter((function(e){return differenceInCalendarDays(e,t)<=0}));return max$2(n)}return r?max$2(r):t}function vt(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"react-datepicker__day--highlighted",r=new Map,o=0,a=e.length;o<a;o++){var s=e[o];if(isDate(s)){var i=Ie(s,"MM.dd.yyyy"),p=r.get(i)||[];p.includes(t)||(p.push(t),r.set(i,p));}else if("object"===ue(s)){var c=Object.keys(s),l=c[0],d=s[c[0]];if("string"==typeof l&&d.constructor===Array)for(var u=0,h=d.length;u<h;u++){var m=Ie(d[u],"MM.dd.yyyy"),f=r.get(m)||[];f.includes(l)||(f.push(l),r.set(m,f));}}}return r}function Dt(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"react-datepicker__day--holidays",r=new Map;return e.forEach((function(e){var o=e.date,a=e.holidayName;if(isDate(o)){var s=Ie(o,"MM.dd.yyyy"),i=r.get(s)||{};if(!("className"in i)||i.className!==t||(p=i.holidayNames,c=[a],p.length!==c.length||!p.every((function(e,t){return e===c[t]})))){var p,c;i.className=t;var l=i.holidayNames;i.holidayNames=l?[].concat(Se(l),[a]):[a],r.set(s,i);}}})),r}function gt(e,t,r,n,o){for(var a=o.length,p=[],c=0;c<a;c++){var l=addMinutes(addHours(e,getHours(o[c])),getMinutes(o[c])),d=addMinutes(e,(r+1)*n);isAfter(l,t)&&isBefore(l,d)&&p.push(o[c]);}return p}function wt(e){return e<10?"0".concat(e):"".concat(e)}function kt(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Ne,r=Math.ceil(getYear(e)/t)*t;return {startPeriod:r-(t-1),endPeriod:r}}function bt(e){var t=e.getSeconds(),r=e.getMilliseconds();return toDate(e.getTime()-1e3*t-r)}function St(e,t,r,n){for(var o=[],a=0;a<2*t+1;a++){var s=e+t-a,i=!0;r&&(i=getYear(r)<=s),n&&i&&(i=getYear(n)>=s),i&&o.push(s);}return o}var Ct=onClickOutsideHOC(function(n){De(a,e$1.Component);var o=be(a);function a(r){var n;he(this,a),ye(ke(n=o.call(this,r)),"renderOptions",(function(){var t=n.props.year,r=n.state.yearsList.map((function(r){return e$1.createElement("div",{className:t===r?"react-datepicker__year-option react-datepicker__year-option--selected_year":"react-datepicker__year-option",key:r,onClick:n.onChange.bind(ke(n),r),"aria-selected":t===r?"true":void 0},t===r?e$1.createElement("span",{className:"react-datepicker__year-option--selected"},"✓"):"",r)})),o=n.props.minDate?getYear(n.props.minDate):null,a=n.props.maxDate?getYear(n.props.maxDate):null;return a&&n.state.yearsList.find((function(e){return e===a}))||r.unshift(e$1.createElement("div",{className:"react-datepicker__year-option",key:"upcoming",onClick:n.incrementYears},e$1.createElement("a",{className:"react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-upcoming"}))),o&&n.state.yearsList.find((function(e){return e===o}))||r.push(e$1.createElement("div",{className:"react-datepicker__year-option",key:"previous",onClick:n.decrementYears},e$1.createElement("a",{className:"react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-previous"}))),r})),ye(ke(n),"onChange",(function(e){n.props.onChange(e);})),ye(ke(n),"handleClickOutside",(function(){n.props.onCancel();})),ye(ke(n),"shiftYears",(function(e){var t=n.state.yearsList.map((function(t){return t+e}));n.setState({yearsList:t});})),ye(ke(n),"incrementYears",(function(){return n.shiftYears(1)})),ye(ke(n),"decrementYears",(function(){return n.shiftYears(-1)}));var s=r.yearDropdownItemNumber,i=r.scrollableYearDropdown,p=s||(i?10:5);return n.state={yearsList:St(n.props.year,p,n.props.minDate,n.props.maxDate)},n.dropdownRef=e$1.createRef(),n}return fe(a,[{key:"componentDidMount",value:function(){var e=this.dropdownRef.current;if(e){var t=e.children?Array.from(e.children):null,r=t?t.find((function(e){return e.ariaSelected})):null;e.scrollTop=r?r.offsetTop+(r.clientHeight-e.clientHeight)/2:(e.scrollHeight-e.clientHeight)/2;}}},{key:"render",value:function(){var t=classNames$1({"react-datepicker__year-dropdown":!0,"react-datepicker__year-dropdown--scrollable":this.props.scrollableYearDropdown});return e$1.createElement("div",{className:t,ref:this.dropdownRef},this.renderOptions())}}]),a}()),_t=function(t){De(n,e$1.Component);var r=be(n);function n(){var t;he(this,n);for(var o=arguments.length,a=new Array(o),s=0;s<o;s++)a[s]=arguments[s];return ye(ke(t=r.call.apply(r,[this].concat(a))),"state",{dropdownVisible:!1}),ye(ke(t),"renderSelectOptions",(function(){for(var r=t.props.minDate?getYear(t.props.minDate):1900,n=t.props.maxDate?getYear(t.props.maxDate):2100,o=[],a=r;a<=n;a++)o.push(e$1.createElement("option",{key:a,value:a},a));return o})),ye(ke(t),"onSelectChange",(function(e){t.onChange(e.target.value);})),ye(ke(t),"renderSelectMode",(function(){return e$1.createElement("select",{value:t.props.year,className:"react-datepicker__year-select",onChange:t.onSelectChange},t.renderSelectOptions())})),ye(ke(t),"renderReadView",(function(r){return e$1.createElement("div",{key:"read",style:{visibility:r?"visible":"hidden"},className:"react-datepicker__year-read-view",onClick:function(e){return t.toggleDropdown(e)}},e$1.createElement("span",{className:"react-datepicker__year-read-view--down-arrow"}),e$1.createElement("span",{className:"react-datepicker__year-read-view--selected-year"},t.props.year))})),ye(ke(t),"renderDropdown",(function(){return e$1.createElement(Ct,{key:"dropdown",year:t.props.year,onChange:t.onChange,onCancel:t.toggleDropdown,minDate:t.props.minDate,maxDate:t.props.maxDate,scrollableYearDropdown:t.props.scrollableYearDropdown,yearDropdownItemNumber:t.props.yearDropdownItemNumber})})),ye(ke(t),"renderScrollMode",(function(){var e=t.state.dropdownVisible,r=[t.renderReadView(!e)];return e&&r.unshift(t.renderDropdown()),r})),ye(ke(t),"onChange",(function(e){t.toggleDropdown(),e!==t.props.year&&t.props.onChange(e);})),ye(ke(t),"toggleDropdown",(function(e){t.setState({dropdownVisible:!t.state.dropdownVisible},(function(){t.props.adjustDateOnChange&&t.handleYearChange(t.props.date,e);}));})),ye(ke(t),"handleYearChange",(function(e,r){t.onSelect(e,r),t.setOpen();})),ye(ke(t),"onSelect",(function(e,r){t.props.onSelect&&t.props.onSelect(e,r);})),ye(ke(t),"setOpen",(function(){t.props.setOpen&&t.props.setOpen(!0);})),t}return fe(n,[{key:"render",value:function(){var t;switch(this.props.dropdownMode){case"scroll":t=this.renderScrollMode();break;case"select":t=this.renderSelectMode();}return e$1.createElement("div",{className:"react-datepicker__year-dropdown-container react-datepicker__year-dropdown-container--".concat(this.props.dropdownMode)},t)}}]),n}(),Mt=onClickOutsideHOC(function(t){De(n,e$1.Component);var r=be(n);function n(){var t;he(this,n);for(var o=arguments.length,a=new Array(o),s=0;s<o;s++)a[s]=arguments[s];return ye(ke(t=r.call.apply(r,[this].concat(a))),"isSelectedMonth",(function(e){return t.props.month===e})),ye(ke(t),"renderOptions",(function(){return t.props.monthNames.map((function(r,n){return e$1.createElement("div",{className:t.isSelectedMonth(n)?"react-datepicker__month-option react-datepicker__month-option--selected_month":"react-datepicker__month-option",key:r,onClick:t.onChange.bind(ke(t),n),"aria-selected":t.isSelectedMonth(n)?"true":void 0},t.isSelectedMonth(n)?e$1.createElement("span",{className:"react-datepicker__month-option--selected"},"✓"):"",r)}))})),ye(ke(t),"onChange",(function(e){return t.props.onChange(e)})),ye(ke(t),"handleClickOutside",(function(){return t.props.onCancel()})),t}return fe(n,[{key:"render",value:function(){return e$1.createElement("div",{className:"react-datepicker__month-dropdown"},this.renderOptions())}}]),n}()),Et=function(t){De(n,e$1.Component);var r=be(n);function n(){var t;he(this,n);for(var o=arguments.length,a=new Array(o),s=0;s<o;s++)a[s]=arguments[s];return ye(ke(t=r.call.apply(r,[this].concat(a))),"state",{dropdownVisible:!1}),ye(ke(t),"renderSelectOptions",(function(t){return t.map((function(t,r){return e$1.createElement("option",{key:r,value:r},t)}))})),ye(ke(t),"renderSelectMode",(function(r){return e$1.createElement("select",{value:t.props.month,className:"react-datepicker__month-select",onChange:function(e){return t.onChange(e.target.value)}},t.renderSelectOptions(r))})),ye(ke(t),"renderReadView",(function(r,n){return e$1.createElement("div",{key:"read",style:{visibility:r?"visible":"hidden"},className:"react-datepicker__month-read-view",onClick:t.toggleDropdown},e$1.createElement("span",{className:"react-datepicker__month-read-view--down-arrow"}),e$1.createElement("span",{className:"react-datepicker__month-read-view--selected-month"},n[t.props.month]))})),ye(ke(t),"renderDropdown",(function(r){return e$1.createElement(Mt,{key:"dropdown",month:t.props.month,monthNames:r,onChange:t.onChange,onCancel:t.toggleDropdown})})),ye(ke(t),"renderScrollMode",(function(e){var r=t.state.dropdownVisible,n=[t.renderReadView(!r,e)];return r&&n.unshift(t.renderDropdown(e)),n})),ye(ke(t),"onChange",(function(e){t.toggleDropdown(),e!==t.props.month&&t.props.onChange(e);})),ye(ke(t),"toggleDropdown",(function(){return t.setState({dropdownVisible:!t.state.dropdownVisible})})),t}return fe(n,[{key:"render",value:function(){var t,r=this,n=[0,1,2,3,4,5,6,7,8,9,10,11].map(this.props.useShortMonthInDropdown?function(e){return Xe(e,r.props.locale)}:function(e){return Je(e,r.props.locale)});switch(this.props.dropdownMode){case"scroll":t=this.renderScrollMode(n);break;case"select":t=this.renderSelectMode(n);}return e$1.createElement("div",{className:"react-datepicker__month-dropdown-container react-datepicker__month-dropdown-container--".concat(this.props.dropdownMode)},t)}}]),n}();function Pt(e,t){for(var r=[],n=Fe(e),o=Fe(t);!isAfter(n,o);)r.push(Ye(n)),n=addMonths(n,1);return r}var Nt,xt=onClickOutsideHOC(function(t){De(o,e$1.Component);var n=be(o);function o(t){var r;return he(this,o),ye(ke(r=n.call(this,t)),"renderOptions",(function(){return r.state.monthYearsList.map((function(t){var n=getTime(t),o=Qe(r.props.date,t)&&He(r.props.date,t);return e$1.createElement("div",{className:o?"react-datepicker__month-year-option--selected_month-year":"react-datepicker__month-year-option",key:n,onClick:r.onChange.bind(ke(r),n),"aria-selected":o?"true":void 0},o?e$1.createElement("span",{className:"react-datepicker__month-year-option--selected"},"✓"):"",Ie(t,r.props.dateFormat,r.props.locale))}))})),ye(ke(r),"onChange",(function(e){return r.props.onChange(e)})),ye(ke(r),"handleClickOutside",(function(){r.props.onCancel();})),r.state={monthYearsList:Pt(r.props.minDate,r.props.maxDate)},r}return fe(o,[{key:"render",value:function(){var t=classNames$1({"react-datepicker__month-year-dropdown":!0,"react-datepicker__month-year-dropdown--scrollable":this.props.scrollableMonthYearDropdown});return e$1.createElement("div",{className:t},this.renderOptions())}}]),o}()),Yt=function(t){De(n,e$1.Component);var r=be(n);function n(){var t;he(this,n);for(var o=arguments.length,a=new Array(o),s=0;s<o;s++)a[s]=arguments[s];return ye(ke(t=r.call.apply(r,[this].concat(a))),"state",{dropdownVisible:!1}),ye(ke(t),"renderSelectOptions",(function(){for(var r=Fe(t.props.minDate),n=Fe(t.props.maxDate),o=[];!isAfter(r,n);){var a=getTime(r);o.push(e$1.createElement("option",{key:a,value:a},Ie(r,t.props.dateFormat,t.props.locale))),r=addMonths(r,1);}return o})),ye(ke(t),"onSelectChange",(function(e){t.onChange(e.target.value);})),ye(ke(t),"renderSelectMode",(function(){return e$1.createElement("select",{value:getTime(Fe(t.props.date)),className:"react-datepicker__month-year-select",onChange:t.onSelectChange},t.renderSelectOptions())})),ye(ke(t),"renderReadView",(function(r){var n=Ie(t.props.date,t.props.dateFormat,t.props.locale);return e$1.createElement("div",{key:"read",style:{visibility:r?"visible":"hidden"},className:"react-datepicker__month-year-read-view",onClick:function(e){return t.toggleDropdown(e)}},e$1.createElement("span",{className:"react-datepicker__month-year-read-view--down-arrow"}),e$1.createElement("span",{className:"react-datepicker__month-year-read-view--selected-month-year"},n))})),ye(ke(t),"renderDropdown",(function(){return e$1.createElement(xt,{key:"dropdown",date:t.props.date,dateFormat:t.props.dateFormat,onChange:t.onChange,onCancel:t.toggleDropdown,minDate:t.props.minDate,maxDate:t.props.maxDate,scrollableMonthYearDropdown:t.props.scrollableMonthYearDropdown,locale:t.props.locale})})),ye(ke(t),"renderScrollMode",(function(){var e=t.state.dropdownVisible,r=[t.renderReadView(!e)];return e&&r.unshift(t.renderDropdown()),r})),ye(ke(t),"onChange",(function(e){t.toggleDropdown();var r=Ye(parseInt(e));Qe(t.props.date,r)&&He(t.props.date,r)||t.props.onChange(r);})),ye(ke(t),"toggleDropdown",(function(){return t.setState({dropdownVisible:!t.state.dropdownVisible})})),t}return fe(n,[{key:"render",value:function(){var t;switch(this.props.dropdownMode){case"scroll":t=this.renderScrollMode();break;case"select":t=this.renderSelectMode();}return e$1.createElement("div",{className:"react-datepicker__month-year-dropdown-container react-datepicker__month-year-dropdown-container--".concat(this.props.dropdownMode)},t)}}]),n}(),Tt=function(t){De(o,e$1.Component);var n=be(o);function o(){var t;he(this,o);for(var a=arguments.length,s=new Array(a),i=0;i<a;i++)s[i]=arguments[i];return ye(ke(t=n.call.apply(n,[this].concat(s))),"dayEl",e$1.createRef()),ye(ke(t),"handleClick",(function(e){!t.isDisabled()&&t.props.onClick&&t.props.onClick(e);})),ye(ke(t),"handleMouseEnter",(function(e){!t.isDisabled()&&t.props.onMouseEnter&&t.props.onMouseEnter(e);})),ye(ke(t),"handleOnKeyDown",(function(e){" "===e.key&&(e.preventDefault(),e.key="Enter"),t.props.handleOnKeyDown(e);})),ye(ke(t),"isSameDay",(function(e){return We(t.props.day,e)})),ye(ke(t),"isKeyboardSelected",(function(){return !t.props.disabledKeyboardNavigation&&!t.isSameDay(t.props.selected)&&t.isSameDay(t.props.preSelection)})),ye(ke(t),"isDisabled",(function(){return Ze(t.props.day,t.props)})),ye(ke(t),"isExcluded",(function(){return et(t.props.day,t.props)})),ye(ke(t),"getHighLightedClass",(function(){var e=t.props,r=e.day,n=e.highlightDates;if(!n)return !1;var o=Ie(r,"MM.dd.yyyy");return n.get(o)})),ye(ke(t),"getHolidaysClass",(function(){var e=t.props,r=e.day,n=e.holidays;if(!n)return !1;var o=Ie(r,"MM.dd.yyyy");return n.has(o)?[n.get(o).className]:void 0})),ye(ke(t),"isInRange",(function(){var e=t.props,r=e.day,n=e.startDate,o=e.endDate;return !(!n||!o)&&qe(r,n,o)})),ye(ke(t),"isInSelectingRange",(function(){var e,r=t.props,n=r.day,o=r.selectsStart,a=r.selectsEnd,s=r.selectsRange,i=r.selectsDisabledDaysInRange,p=r.startDate,c=r.endDate,l=null!==(e=t.props.selectingDate)&&void 0!==e?e:t.props.preSelection;return !(!(o||a||s)||!l||!i&&t.isDisabled())&&(o&&c&&(isBefore(l,c)||Ve(l,c))?qe(n,l,c):(a&&p&&(isAfter(l,p)||Ve(l,p))||!(!s||!p||c||!isAfter(l,p)&&!Ve(l,p)))&&qe(n,p,l))})),ye(ke(t),"isSelectingRangeStart",(function(){var e;if(!t.isInSelectingRange())return !1;var r=t.props,n=r.day,o=r.startDate,a=r.selectsStart,s=null!==(e=t.props.selectingDate)&&void 0!==e?e:t.props.preSelection;return We(n,a?s:o)})),ye(ke(t),"isSelectingRangeEnd",(function(){var e;if(!t.isInSelectingRange())return !1;var r=t.props,n=r.day,o=r.endDate,a=r.selectsEnd,s=r.selectsRange,i=null!==(e=t.props.selectingDate)&&void 0!==e?e:t.props.preSelection;return We(n,a||s?i:o)})),ye(ke(t),"isRangeStart",(function(){var e=t.props,r=e.day,n=e.startDate,o=e.endDate;return !(!n||!o)&&We(n,r)})),ye(ke(t),"isRangeEnd",(function(){var e=t.props,r=e.day,n=e.startDate,o=e.endDate;return !(!n||!o)&&We(o,r)})),ye(ke(t),"isWeekend",(function(){var e=getDay(t.props.day);return 0===e||6===e})),ye(ke(t),"isAfterMonth",(function(){return void 0!==t.props.month&&(t.props.month+1)%12===getMonth(t.props.day)})),ye(ke(t),"isBeforeMonth",(function(){return void 0!==t.props.month&&(getMonth(t.props.day)+1)%12===t.props.month})),ye(ke(t),"isCurrentDay",(function(){return t.isSameDay(Ye())})),ye(ke(t),"isSelected",(function(){return t.isSameDay(t.props.selected)})),ye(ke(t),"getClassNames",(function(e){var n,o=t.props.dayClassName?t.props.dayClassName(e):void 0;return classNames$1("react-datepicker__day",o,"react-datepicker__day--"+Ie(t.props.day,"ddd",n),{"react-datepicker__day--disabled":t.isDisabled(),"react-datepicker__day--excluded":t.isExcluded(),"react-datepicker__day--selected":t.isSelected(),"react-datepicker__day--keyboard-selected":t.isKeyboardSelected(),"react-datepicker__day--range-start":t.isRangeStart(),"react-datepicker__day--range-end":t.isRangeEnd(),"react-datepicker__day--in-range":t.isInRange(),"react-datepicker__day--in-selecting-range":t.isInSelectingRange(),"react-datepicker__day--selecting-range-start":t.isSelectingRangeStart(),"react-datepicker__day--selecting-range-end":t.isSelectingRangeEnd(),"react-datepicker__day--today":t.isCurrentDay(),"react-datepicker__day--weekend":t.isWeekend(),"react-datepicker__day--outside-month":t.isAfterMonth()||t.isBeforeMonth()},t.getHighLightedClass("react-datepicker__day--highlighted"),t.getHolidaysClass())})),ye(ke(t),"getAriaLabel",(function(){var e=t.props,r=e.day,n=e.ariaLabelPrefixWhenEnabled,o=void 0===n?"Choose":n,a=e.ariaLabelPrefixWhenDisabled,s=void 0===a?"Not available":a,i=t.isDisabled()||t.isExcluded()?s:o;return "".concat(i," ").concat(Ie(r,"PPPP",t.props.locale))})),ye(ke(t),"getTitle",(function(){var e=t.props,r=e.day,n=e.holidays,o=void 0===n?new Map:n,a=Ie(r,"MM.dd.yyyy");return o.has(a)&&o.get(a).holidayNames.length>0?o.get(a).holidayNames.join(", "):""})),ye(ke(t),"getTabIndex",(function(e,r){var n=e||t.props.selected,o=r||t.props.preSelection;return t.isKeyboardSelected()||t.isSameDay(n)&&We(o,n)?0:-1})),ye(ke(t),"handleFocusDay",(function(){var e,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=!1;0===t.getTabIndex()&&!r.isInputFocused&&t.isSameDay(t.props.preSelection)&&(document.activeElement&&document.activeElement!==document.body||(n=!0),t.props.inline&&!t.props.shouldFocusDayInline&&(n=!1),t.props.containerRef&&t.props.containerRef.current&&t.props.containerRef.current.contains(document.activeElement)&&document.activeElement.classList.contains("react-datepicker__day")&&(n=!0),t.props.monthShowsDuplicateDaysEnd&&t.isAfterMonth()&&(n=!1),t.props.monthShowsDuplicateDaysStart&&t.isBeforeMonth()&&(n=!1)),n&&(null===(e=t.dayEl.current)||void 0===e||e.focus({preventScroll:!0}));})),ye(ke(t),"renderDayContents",(function(){return t.props.monthShowsDuplicateDaysEnd&&t.isAfterMonth()||t.props.monthShowsDuplicateDaysStart&&t.isBeforeMonth()?null:t.props.renderDayContents?t.props.renderDayContents(getDate(t.props.day),t.props.day):getDate(t.props.day)})),ye(ke(t),"render",(function(){return e$1.createElement("div",{ref:t.dayEl,className:t.getClassNames(t.props.day),onKeyDown:t.handleOnKeyDown,onClick:t.handleClick,onMouseEnter:t.handleMouseEnter,tabIndex:t.getTabIndex(),"aria-label":t.getAriaLabel(),role:"option",title:t.getTitle(),"aria-disabled":t.isDisabled(),"aria-current":t.isCurrentDay()?"date":void 0,"aria-selected":t.isSelected()||t.isInRange()},t.renderDayContents(),""!==t.getTitle()&&e$1.createElement("span",{className:"holiday-overlay"},t.getTitle()))})),t}return fe(o,[{key:"componentDidMount",value:function(){this.handleFocusDay();}},{key:"componentDidUpdate",value:function(e){this.handleFocusDay(e);}}]),o}(),It=function(t){De(o,e$1.Component);var n=be(o);function o(){var e;he(this,o);for(var t=arguments.length,r=new Array(t),a=0;a<t;a++)r[a]=arguments[a];return ye(ke(e=n.call.apply(n,[this].concat(r))),"handleClick",(function(t){e.props.onClick&&e.props.onClick(t);})),e}return fe(o,[{key:"render",value:function(){var t=this.props,n=t.weekNumber,o=t.ariaLabelPrefix,a=void 0===o?"week ":o,s={"react-datepicker__week-number":!0,"react-datepicker__week-number--clickable":!!t.onClick};return e$1.createElement("div",{className:classNames$1(s),"aria-label":"".concat(a," ").concat(this.props.weekNumber),onClick:this.handleClick},n)}}],[{key:"defaultProps",get:function(){return {ariaLabelPrefix:"week "}}}]),o}(),Ot=function(t){De(n,e$1.Component);var r=be(n);function n(){var t;he(this,n);for(var o=arguments.length,a=new Array(o),s=0;s<o;s++)a[s]=arguments[s];return ye(ke(t=r.call.apply(r,[this].concat(a))),"handleDayClick",(function(e,r){t.props.onDayClick&&t.props.onDayClick(e,r);})),ye(ke(t),"handleDayMouseEnter",(function(e){t.props.onDayMouseEnter&&t.props.onDayMouseEnter(e);})),ye(ke(t),"handleWeekClick",(function(e,r,n){"function"==typeof t.props.onWeekSelect&&t.props.onWeekSelect(e,r,n),t.props.shouldCloseOnSelect&&t.props.setOpen(!1);})),ye(ke(t),"formatWeekNumber",(function(e){return t.props.formatWeekNumber?t.props.formatWeekNumber(e):function(e,t){var r=t&&Ge(t)||$e()&&Ge($e());return getISOWeek(e,r?{locale:r}:null)}(e)})),ye(ke(t),"renderDays",(function(){var r=Le(t.props.day,t.props.locale,t.props.calendarStartDay),n=[],o=t.formatWeekNumber(r);if(t.props.showWeekNumber){var a=t.props.onWeekSelect?t.handleWeekClick.bind(ke(t),r,o):void 0;n.push(e$1.createElement(It,{key:"W",weekNumber:o,onClick:a,ariaLabelPrefix:t.props.ariaLabelPrefix}));}return n.concat([0,1,2,3,4,5,6].map((function(n){var o=addDays(r,n);return e$1.createElement(Tt,{ariaLabelPrefixWhenEnabled:t.props.chooseDayAriaLabelPrefix,ariaLabelPrefixWhenDisabled:t.props.disabledDayAriaLabelPrefix,key:o.valueOf(),day:o,month:t.props.month,onClick:t.handleDayClick.bind(ke(t),o),onMouseEnter:t.handleDayMouseEnter.bind(ke(t),o),minDate:t.props.minDate,maxDate:t.props.maxDate,excludeDates:t.props.excludeDates,excludeDateIntervals:t.props.excludeDateIntervals,includeDates:t.props.includeDates,includeDateIntervals:t.props.includeDateIntervals,highlightDates:t.props.highlightDates,holidays:t.props.holidays,selectingDate:t.props.selectingDate,filterDate:t.props.filterDate,preSelection:t.props.preSelection,selected:t.props.selected,selectsStart:t.props.selectsStart,selectsEnd:t.props.selectsEnd,selectsRange:t.props.selectsRange,selectsDisabledDaysInRange:t.props.selectsDisabledDaysInRange,startDate:t.props.startDate,endDate:t.props.endDate,dayClassName:t.props.dayClassName,renderDayContents:t.props.renderDayContents,disabledKeyboardNavigation:t.props.disabledKeyboardNavigation,handleOnKeyDown:t.props.handleOnKeyDown,isInputFocused:t.props.isInputFocused,containerRef:t.props.containerRef,inline:t.props.inline,shouldFocusDayInline:t.props.shouldFocusDayInline,monthShowsDuplicateDaysEnd:t.props.monthShowsDuplicateDaysEnd,monthShowsDuplicateDaysStart:t.props.monthShowsDuplicateDaysStart,locale:t.props.locale})})))})),t}return fe(n,[{key:"render",value:function(){return e$1.createElement("div",{className:"react-datepicker__week"},this.renderDays())}}],[{key:"defaultProps",get:function(){return {shouldCloseOnSelect:!0}}}]),n}(),Rt="two_columns",Lt="three_columns",Ft="four_columns",At=(ye(Nt={},Rt,{grid:[[0,1],[2,3],[4,5],[6,7],[8,9],[10,11]],verticalNavigationOffset:2}),ye(Nt,Lt,{grid:[[0,1,2],[3,4,5],[6,7,8],[9,10,11]],verticalNavigationOffset:3}),ye(Nt,Ft,{grid:[[0,1,2,3],[4,5,6,7],[8,9,10,11]],verticalNavigationOffset:4}),Nt);function Kt(e,t){return e?Ft:t?Rt:Lt}var Bt=function(t){De(o,e$1.Component);var n=be(o);function o(){var t;he(this,o);for(var a=arguments.length,s=new Array(a),i=0;i<a;i++)s[i]=arguments[i];return ye(ke(t=n.call.apply(n,[this].concat(s))),"MONTH_REFS",Se(Array(12)).map((function(){return e$1.createRef()}))),ye(ke(t),"QUARTER_REFS",Se(Array(4)).map((function(){return e$1.createRef()}))),ye(ke(t),"isDisabled",(function(e){return Ze(e,t.props)})),ye(ke(t),"isExcluded",(function(e){return et(e,t.props)})),ye(ke(t),"handleDayClick",(function(e,r){t.props.onDayClick&&t.props.onDayClick(e,r,t.props.orderInDisplay);})),ye(ke(t),"handleDayMouseEnter",(function(e){t.props.onDayMouseEnter&&t.props.onDayMouseEnter(e);})),ye(ke(t),"handleMouseLeave",(function(){t.props.onMouseLeave&&t.props.onMouseLeave();})),ye(ke(t),"isRangeStartMonth",(function(e){var r=t.props,n=r.day,o=r.startDate,a=r.endDate;return !(!o||!a)&&He(setMonth(n,e),o)})),ye(ke(t),"isRangeStartQuarter",(function(e){var r=t.props,n=r.day,o=r.startDate,a=r.endDate;return !(!o||!a)&&je(setQuarter(n,e),o)})),ye(ke(t),"isRangeEndMonth",(function(e){var r=t.props,n=r.day,o=r.startDate,a=r.endDate;return !(!o||!a)&&He(setMonth(n,e),a)})),ye(ke(t),"isRangeEndQuarter",(function(e){var r=t.props,n=r.day,o=r.startDate,a=r.endDate;return !(!o||!a)&&je(setQuarter(n,e),a)})),ye(ke(t),"isInSelectingRangeMonth",(function(e){var r,n=t.props,o=n.day,a=n.selectsStart,s=n.selectsEnd,i=n.selectsRange,p=n.startDate,c=n.endDate,l=null!==(r=t.props.selectingDate)&&void 0!==r?r:t.props.preSelection;return !(!(a||s||i)||!l)&&(a&&c?rt(l,c,e,o):(s&&p||!(!i||!p||c))&&rt(p,l,e,o))})),ye(ke(t),"isSelectingMonthRangeStart",(function(e){var r;if(!t.isInSelectingRangeMonth(e))return !1;var n=t.props,o=n.day,a=n.startDate,s=n.selectsStart,i=setMonth(o,e),p=null!==(r=t.props.selectingDate)&&void 0!==r?r:t.props.preSelection;return He(i,s?p:a)})),ye(ke(t),"isSelectingMonthRangeEnd",(function(e){var r;if(!t.isInSelectingRangeMonth(e))return !1;var n=t.props,o=n.day,a=n.endDate,s=n.selectsEnd,i=n.selectsRange,p=setMonth(o,e),c=null!==(r=t.props.selectingDate)&&void 0!==r?r:t.props.preSelection;return He(p,s||i?c:a)})),ye(ke(t),"isInSelectingRangeQuarter",(function(e){var r,n=t.props,o=n.day,a=n.selectsStart,s=n.selectsEnd,i=n.selectsRange,p=n.startDate,c=n.endDate,l=null!==(r=t.props.selectingDate)&&void 0!==r?r:t.props.preSelection;return !(!(a||s||i)||!l)&&(a&&c?st(l,c,e,o):(s&&p||!(!i||!p||c))&&st(p,l,e,o))})),ye(ke(t),"isWeekInMonth",(function(e){var r=t.props.day,n=addDays(e,6);return He(e,r)||He(n,r)})),ye(ke(t),"isCurrentMonth",(function(e,t){return getYear(e)===getYear(Ye())&&t===getMonth(Ye())})),ye(ke(t),"isCurrentQuarter",(function(e,t){return getYear(e)===getYear(Ye())&&t===getQuarter(Ye())})),ye(ke(t),"isSelectedMonth",(function(e,t,r){return getMonth(r)===t&&getYear(e)===getYear(r)})),ye(ke(t),"isSelectedQuarter",(function(e,t,r){return getQuarter(e)===t&&getYear(e)===getYear(r)})),ye(ke(t),"renderWeeks",(function(){for(var r=[],n=t.props.fixedHeight,o=0,a=!1,s=Le(Fe(t.props.day),t.props.locale,t.props.calendarStartDay);r.push(e$1.createElement(Ot,{ariaLabelPrefix:t.props.weekAriaLabelPrefix,chooseDayAriaLabelPrefix:t.props.chooseDayAriaLabelPrefix,disabledDayAriaLabelPrefix:t.props.disabledDayAriaLabelPrefix,key:o,day:s,month:getMonth(t.props.day),onDayClick:t.handleDayClick,onDayMouseEnter:t.handleDayMouseEnter,onWeekSelect:t.props.onWeekSelect,formatWeekNumber:t.props.formatWeekNumber,locale:t.props.locale,minDate:t.props.minDate,maxDate:t.props.maxDate,excludeDates:t.props.excludeDates,excludeDateIntervals:t.props.excludeDateIntervals,includeDates:t.props.includeDates,includeDateIntervals:t.props.includeDateIntervals,inline:t.props.inline,shouldFocusDayInline:t.props.shouldFocusDayInline,highlightDates:t.props.highlightDates,holidays:t.props.holidays,selectingDate:t.props.selectingDate,filterDate:t.props.filterDate,preSelection:t.props.preSelection,selected:t.props.selected,selectsStart:t.props.selectsStart,selectsEnd:t.props.selectsEnd,selectsRange:t.props.selectsRange,selectsDisabledDaysInRange:t.props.selectsDisabledDaysInRange,showWeekNumber:t.props.showWeekNumbers,startDate:t.props.startDate,endDate:t.props.endDate,dayClassName:t.props.dayClassName,setOpen:t.props.setOpen,shouldCloseOnSelect:t.props.shouldCloseOnSelect,disabledKeyboardNavigation:t.props.disabledKeyboardNavigation,renderDayContents:t.props.renderDayContents,handleOnKeyDown:t.props.handleOnKeyDown,isInputFocused:t.props.isInputFocused,containerRef:t.props.containerRef,calendarStartDay:t.props.calendarStartDay,monthShowsDuplicateDaysEnd:t.props.monthShowsDuplicateDaysEnd,monthShowsDuplicateDaysStart:t.props.monthShowsDuplicateDaysStart})),!a;){o++,s=addWeeks(s,1);var i=n&&o>=6,p=!n&&!t.isWeekInMonth(s);if(i||p){if(!t.props.peekNextMonth)break;a=!0;}}return r})),ye(ke(t),"onMonthClick",(function(e,r){t.handleDayClick(Fe(setMonth(t.props.day,r)),e);})),ye(ke(t),"onMonthMouseEnter",(function(e){t.handleDayMouseEnter(Fe(setMonth(t.props.day,e)));})),ye(ke(t),"handleMonthNavigation",(function(e,r){t.isDisabled(r)||t.isExcluded(r)||(t.props.setPreSelection(r),t.MONTH_REFS[e].current&&t.MONTH_REFS[e].current.focus());})),ye(ke(t),"onMonthKeyDown",(function(e,r){var n=t.props,o=n.selected,a=n.preSelection,s=n.disabledKeyboardNavigation,i=n.showTwoColumnMonthYearPicker,p=n.showFourColumnMonthYearPicker,c=n.setPreSelection,d=e.key;if("Tab"!==d&&e.preventDefault(),!s){var u=Kt(p,i),h=At[u].verticalNavigationOffset,m=At[u].grid;switch(d){case"Enter":t.onMonthClick(e,r),c(o);break;case"ArrowRight":t.handleMonthNavigation(11===r?0:r+1,addMonths(a,1));break;case"ArrowLeft":t.handleMonthNavigation(0===r?11:r-1,subMonths(a,1));break;case"ArrowUp":t.handleMonthNavigation(m[0].includes(r)?r+12-h:r-h,subMonths(a,h));break;case"ArrowDown":t.handleMonthNavigation(m[m.length-1].includes(r)?r-12+h:r+h,addMonths(a,h));}}})),ye(ke(t),"onQuarterClick",(function(e,r){t.handleDayClick(Ke(setQuarter(t.props.day,r)),e);})),ye(ke(t),"onQuarterMouseEnter",(function(e){t.handleDayMouseEnter(Ke(setQuarter(t.props.day,e)));})),ye(ke(t),"handleQuarterNavigation",(function(e,r){t.isDisabled(r)||t.isExcluded(r)||(t.props.setPreSelection(r),t.QUARTER_REFS[e-1].current&&t.QUARTER_REFS[e-1].current.focus());})),ye(ke(t),"onQuarterKeyDown",(function(e,r){var n=e.key;if(!t.props.disabledKeyboardNavigation)switch(n){case"Enter":t.onQuarterClick(e,r),t.props.setPreSelection(t.props.selected);break;case"ArrowRight":t.handleQuarterNavigation(4===r?1:r+1,addQuarters(t.props.preSelection,1));break;case"ArrowLeft":t.handleQuarterNavigation(1===r?4:r-1,subQuarters(t.props.preSelection,1));}})),ye(ke(t),"getMonthClassNames",(function(e){var n=t.props,o=n.day,a=n.startDate,s=n.endDate,i=n.selected,p=n.minDate,c=n.maxDate,l=n.preSelection,d=n.monthClassName,u=n.excludeDates,h=n.includeDates,m=d?d(setMonth(o,e)):void 0,f=setMonth(o,e);return classNames$1("react-datepicker__month-text","react-datepicker__month-".concat(e),m,{"react-datepicker__month-text--disabled":(p||c||u||h)&&tt(f,t.props),"react-datepicker__month-text--selected":t.isSelectedMonth(o,e,i),"react-datepicker__month-text--keyboard-selected":!t.props.disabledKeyboardNavigation&&getMonth(l)===e,"react-datepicker__month-text--in-selecting-range":t.isInSelectingRangeMonth(e),"react-datepicker__month-text--in-range":rt(a,s,e,o),"react-datepicker__month-text--range-start":t.isRangeStartMonth(e),"react-datepicker__month-text--range-end":t.isRangeEndMonth(e),"react-datepicker__month-text--selecting-range-start":t.isSelectingMonthRangeStart(e),"react-datepicker__month-text--selecting-range-end":t.isSelectingMonthRangeEnd(e),"react-datepicker__month-text--today":t.isCurrentMonth(o,e)})})),ye(ke(t),"getTabIndex",(function(e){var r=getMonth(t.props.preSelection);return t.props.disabledKeyboardNavigation||e!==r?"-1":"0"})),ye(ke(t),"getQuarterTabIndex",(function(e){var r=getQuarter(t.props.preSelection);return t.props.disabledKeyboardNavigation||e!==r?"-1":"0"})),ye(ke(t),"getAriaLabel",(function(e){var r=t.props,n=r.chooseDayAriaLabelPrefix,o=void 0===n?"Choose":n,a=r.disabledDayAriaLabelPrefix,s=void 0===a?"Not available":a,i=r.day,p=setMonth(i,e),c=t.isDisabled(p)||t.isExcluded(p)?s:o;return "".concat(c," ").concat(Ie(p,"MMMM yyyy"))})),ye(ke(t),"getQuarterClassNames",(function(e){var n=t.props,o=n.day,a=n.startDate,s=n.endDate,i=n.selected,p=n.minDate,c=n.maxDate,l=n.preSelection;return classNames$1("react-datepicker__quarter-text","react-datepicker__quarter-".concat(e),{"react-datepicker__quarter-text--disabled":(p||c)&&nt(setQuarter(o,e),t.props),"react-datepicker__quarter-text--selected":t.isSelectedQuarter(o,e,i),"react-datepicker__quarter-text--keyboard-selected":getQuarter(l)===e,"react-datepicker__quarter-text--in-selecting-range":t.isInSelectingRangeQuarter(e),"react-datepicker__quarter-text--in-range":st(a,s,e,o),"react-datepicker__quarter-text--range-start":t.isRangeStartQuarter(e),"react-datepicker__quarter-text--range-end":t.isRangeEndQuarter(e)})})),ye(ke(t),"getMonthContent",(function(e){var r=t.props,n=r.showFullMonthYearPicker,o=r.renderMonthContent,a=r.locale,s=Xe(e,a),i=Je(e,a);return o?o(e,s,i):n?i:s})),ye(ke(t),"getQuarterContent",(function(e){var r=t.props,n=r.renderQuarterContent,o=function(e,t){return Ie(setQuarter(Ye(),e),"QQQ",t)}(e,r.locale);return n?n(e,o):o})),ye(ke(t),"renderMonths",(function(){var r=t.props,n=r.showTwoColumnMonthYearPicker,o=r.showFourColumnMonthYearPicker,a=r.day,s=r.selected;return At[Kt(o,n)].grid.map((function(r,n){return e$1.createElement("div",{className:"react-datepicker__month-wrapper",key:n},r.map((function(r,n){return e$1.createElement("div",{ref:t.MONTH_REFS[r],key:n,onClick:function(e){t.onMonthClick(e,r);},onKeyDown:function(e){t.onMonthKeyDown(e,r);},onMouseEnter:function(){return t.onMonthMouseEnter(r)},tabIndex:t.getTabIndex(r),className:t.getMonthClassNames(r),role:"option","aria-label":t.getAriaLabel(r),"aria-current":t.isCurrentMonth(a,r)?"date":void 0,"aria-selected":t.isSelectedMonth(a,r,s)},t.getMonthContent(r))})))}))})),ye(ke(t),"renderQuarters",(function(){var r=t.props,n=r.day,o=r.selected;return e$1.createElement("div",{className:"react-datepicker__quarter-wrapper"},[1,2,3,4].map((function(r,a){return e$1.createElement("div",{key:a,ref:t.QUARTER_REFS[a],role:"option",onClick:function(e){t.onQuarterClick(e,r);},onKeyDown:function(e){t.onQuarterKeyDown(e,r);},onMouseEnter:function(){return t.onQuarterMouseEnter(r)},className:t.getQuarterClassNames(r),"aria-selected":t.isSelectedQuarter(n,r,o),tabIndex:t.getQuarterTabIndex(r),"aria-current":t.isCurrentQuarter(n,r)?"date":void 0},t.getQuarterContent(r))})))})),ye(ke(t),"getClassNames",(function(){var e=t.props,n=e.selectingDate,o=e.selectsStart,a=e.selectsEnd,s=e.showMonthYearPicker,i=e.showQuarterYearPicker;return classNames$1("react-datepicker__month",{"react-datepicker__month--selecting-range":n&&(o||a)},{"react-datepicker__monthPicker":s},{"react-datepicker__quarterPicker":i})})),t}return fe(o,[{key:"render",value:function(){var t=this.props,r=t.showMonthYearPicker,n=t.showQuarterYearPicker,o=t.day,a=t.ariaLabelPrefix,s=void 0===a?"month ":a;return e$1.createElement("div",{className:this.getClassNames(),onMouseLeave:this.handleMouseLeave,"aria-label":"".concat(s," ").concat(Ie(o,"yyyy-MM")),role:"listbox"},r?this.renderMonths():n?this.renderQuarters():this.renderWeeks())}}]),o}(),Qt=function(t){De(n,e$1.Component);var r=be(n);function n(){var t;he(this,n);for(var o=arguments.length,a=new Array(o),i=0;i<o;i++)a[i]=arguments[i];return ye(ke(t=r.call.apply(r,[this].concat(a))),"state",{height:null}),ye(ke(t),"handleClick",(function(e){(t.props.minTime||t.props.maxTime)&&lt(e,t.props)||(t.props.excludeTimes||t.props.includeTimes||t.props.filterTime)&&ct(e,t.props)||t.props.onChange(e);})),ye(ke(t),"isSelectedTime",(function(e){return t.props.selected&&(r=t.props.selected,n=e,bt(r).getTime()===bt(n).getTime());var r,n;})),ye(ke(t),"liClasses",(function(e){var r=["react-datepicker__time-list-item",t.props.timeClassName?t.props.timeClassName(e):void 0];return t.isSelectedTime(e)&&r.push("react-datepicker__time-list-item--selected"),((t.props.minTime||t.props.maxTime)&&lt(e,t.props)||(t.props.excludeTimes||t.props.includeTimes||t.props.filterTime)&&ct(e,t.props))&&r.push("react-datepicker__time-list-item--disabled"),t.props.injectTimes&&(60*getHours(e)+getMinutes(e))%t.props.intervals!=0&&r.push("react-datepicker__time-list-item--injected"),r.join(" ")})),ye(ke(t),"handleOnKeyDown",(function(e,r){" "===e.key&&(e.preventDefault(),e.key="Enter"),"ArrowUp"!==e.key&&"ArrowLeft"!==e.key||!e.target.previousSibling||(e.preventDefault(),e.target.previousSibling.focus()),"ArrowDown"!==e.key&&"ArrowRight"!==e.key||!e.target.nextSibling||(e.preventDefault(),e.target.nextSibling.focus()),"Enter"===e.key&&t.handleClick(r),t.props.handleOnKeyDown(e);})),ye(ke(t),"renderTimes",(function(){for(var r=[],n=t.props.format?t.props.format:"p",o=t.props.intervals,a=t.props.selected||t.props.openToDate||Ye(),i=startOfDay(a),p=t.props.injectTimes&&t.props.injectTimes.sort((function(e,t){return e-t})),c=60*function(e){var t=new Date(e.getFullYear(),e.getMonth(),e.getDate()),r=new Date(e.getFullYear(),e.getMonth(),e.getDate(),24);return Math.round((+r-+t)/36e5)}(a),l=c/o,d=0;d<l;d++){var u=addMinutes(i,d*o);if(r.push(u),p){var h=gt(i,u,d,o,p);r=r.concat(h);}}var m=r.reduce((function(e,t){return t.getTime()<=a.getTime()?t:e}),r[0]);return r.map((function(r,o){return e$1.createElement("li",{key:o,onClick:t.handleClick.bind(ke(t),r),className:t.liClasses(r),ref:function(e){r===m&&(t.centerLi=e);},onKeyDown:function(e){t.handleOnKeyDown(e,r);},tabIndex:r===m?0:-1,role:"option","aria-selected":t.isSelectedTime(r)?"true":void 0},Ie(r,n,t.props.locale))}))})),t}return fe(n,[{key:"componentDidMount",value:function(){this.list.scrollTop=this.centerLi&&n.calcCenterPosition(this.props.monthRef?this.props.monthRef.clientHeight-this.header.clientHeight:this.list.clientHeight,this.centerLi),this.props.monthRef&&this.header&&this.setState({height:this.props.monthRef.clientHeight-this.header.clientHeight});}},{key:"render",value:function(){var t=this,r=this.state.height;return e$1.createElement("div",{className:"react-datepicker__time-container ".concat(this.props.todayButton?"react-datepicker__time-container--with-today-button":"")},e$1.createElement("div",{className:"react-datepicker__header react-datepicker__header--time ".concat(this.props.showTimeSelectOnly?"react-datepicker__header--time--only":""),ref:function(e){t.header=e;}},e$1.createElement("div",{className:"react-datepicker-time__header"},this.props.timeCaption)),e$1.createElement("div",{className:"react-datepicker__time"},e$1.createElement("div",{className:"react-datepicker__time-box"},e$1.createElement("ul",{className:"react-datepicker__time-list",ref:function(e){t.list=e;},style:r?{height:r}:{},role:"listbox","aria-label":this.props.timeCaption},this.renderTimes()))))}}],[{key:"defaultProps",get:function(){return {intervals:30,onTimeChange:function(){},todayButton:null,timeCaption:"Time"}}}]),n}();ye(Qt,"calcCenterPosition",(function(e,t){return t.offsetTop-(e/2-t.clientHeight/2)}));var Ht=function(t){De(o,e$1.Component);var n=be(o);function o(t){var a;return he(this,o),ye(ke(a=n.call(this,t)),"YEAR_REFS",Se(Array(a.props.yearItemNumber)).map((function(){return e$1.createRef()}))),ye(ke(a),"isDisabled",(function(e){return Ze(e,a.props)})),ye(ke(a),"isExcluded",(function(e){return et(e,a.props)})),ye(ke(a),"selectingDate",(function(){var e;return null!==(e=a.props.selectingDate)&&void 0!==e?e:a.props.preSelection})),ye(ke(a),"updateFocusOnPaginate",(function(e){var t=function(){this.YEAR_REFS[e].current.focus();}.bind(ke(a));window.requestAnimationFrame(t);})),ye(ke(a),"handleYearClick",(function(e,t){a.props.onDayClick&&a.props.onDayClick(e,t);})),ye(ke(a),"handleYearNavigation",(function(e,t){var r=a.props,n=r.date,o=r.yearItemNumber,s=kt(n,o).startPeriod;a.isDisabled(t)||a.isExcluded(t)||(a.props.setPreSelection(t),e-s==-1?a.updateFocusOnPaginate(o-1):e-s===o?a.updateFocusOnPaginate(0):a.YEAR_REFS[e-s].current.focus());})),ye(ke(a),"isSameDay",(function(e,t){return We(e,t)})),ye(ke(a),"isCurrentYear",(function(e){return e===getYear(Ye())})),ye(ke(a),"isRangeStart",(function(e){return a.props.startDate&&a.props.endDate&&Qe(setYear(Ye(),e),a.props.startDate)})),ye(ke(a),"isRangeEnd",(function(e){return a.props.startDate&&a.props.endDate&&Qe(setYear(Ye(),e),a.props.endDate)})),ye(ke(a),"isInRange",(function(e){return ot(e,a.props.startDate,a.props.endDate)})),ye(ke(a),"isInSelectingRange",(function(e){var t=a.props,r=t.selectsStart,n=t.selectsEnd,o=t.selectsRange,s=t.startDate,i=t.endDate;return !(!(r||n||o)||!a.selectingDate())&&(r&&i?ot(e,a.selectingDate(),i):(n&&s||!(!o||!s||i))&&ot(e,s,a.selectingDate()))})),ye(ke(a),"isSelectingRangeStart",(function(e){if(!a.isInSelectingRange(e))return !1;var t=a.props,r=t.startDate,n=t.selectsStart,o=setYear(Ye(),e);return Qe(o,n?a.selectingDate():r)})),ye(ke(a),"isSelectingRangeEnd",(function(e){if(!a.isInSelectingRange(e))return !1;var t=a.props,r=t.endDate,n=t.selectsEnd,o=t.selectsRange,s=setYear(Ye(),e);return Qe(s,n||o?a.selectingDate():r)})),ye(ke(a),"isKeyboardSelected",(function(e){var t=Ae(setYear(a.props.date,e));return !a.props.disabledKeyboardNavigation&&!a.props.inline&&!We(t,Ae(a.props.selected))&&We(t,Ae(a.props.preSelection))})),ye(ke(a),"onYearClick",(function(e,t){var r=a.props.date;a.handleYearClick(Ae(setYear(r,t)),e);})),ye(ke(a),"onYearKeyDown",(function(e,t){var r=e.key;if(!a.props.disabledKeyboardNavigation)switch(r){case"Enter":a.onYearClick(e,t),a.props.setPreSelection(a.props.selected);break;case"ArrowRight":a.handleYearNavigation(t+1,addYears(a.props.preSelection,1));break;case"ArrowLeft":a.handleYearNavigation(t-1,subYears(a.props.preSelection,1));}})),ye(ke(a),"getYearClassNames",(function(e){var t=a.props,n=t.minDate,o=t.maxDate,s=t.selected,i=t.excludeDates,p=t.includeDates,c=t.filterDate;return classNames$1("react-datepicker__year-text",{"react-datepicker__year-text--selected":e===getYear(s),"react-datepicker__year-text--disabled":(n||o||i||p||c)&&at(e,a.props),"react-datepicker__year-text--keyboard-selected":a.isKeyboardSelected(e),"react-datepicker__year-text--range-start":a.isRangeStart(e),"react-datepicker__year-text--range-end":a.isRangeEnd(e),"react-datepicker__year-text--in-range":a.isInRange(e),"react-datepicker__year-text--in-selecting-range":a.isInSelectingRange(e),"react-datepicker__year-text--selecting-range-start":a.isSelectingRangeStart(e),"react-datepicker__year-text--selecting-range-end":a.isSelectingRangeEnd(e),"react-datepicker__year-text--today":a.isCurrentYear(e)})})),ye(ke(a),"getYearTabIndex",(function(e){return a.props.disabledKeyboardNavigation?"-1":e===getYear(a.props.preSelection)?"0":"-1"})),ye(ke(a),"getYearContainerClassNames",(function(){var e=a.props,t=e.selectingDate,n=e.selectsStart,o=e.selectsEnd,s=e.selectsRange;return classNames$1("react-datepicker__year",{"react-datepicker__year--selecting-range":t&&(n||o||s)})})),ye(ke(a),"getYearContent",(function(e){return a.props.renderYearContent?a.props.renderYearContent(e):e})),a}return fe(o,[{key:"render",value:function(){for(var t=this,r=[],n=this.props,o=n.date,a=n.yearItemNumber,s=n.onYearMouseEnter,i=n.onYearMouseLeave,p=kt(o,a),c=p.startPeriod,l=p.endPeriod,d=function(n){r.push(e$1.createElement("div",{ref:t.YEAR_REFS[n-c],onClick:function(e){t.onYearClick(e,n);},onKeyDown:function(e){t.onYearKeyDown(e,n);},tabIndex:t.getYearTabIndex(n),className:t.getYearClassNames(n),onMouseEnter:function(e){return s(e,n)},onMouseLeave:function(e){return i(e,n)},key:n,"aria-current":t.isCurrentYear(n)?"date":void 0},t.getYearContent(n)));},u=c;u<=l;u++)d(u);return e$1.createElement("div",{className:this.getYearContainerClassNames()},e$1.createElement("div",{className:"react-datepicker__year-wrapper",onMouseLeave:this.props.clearSelectingDate},r))}}]),o}(),jt=function(t){De(n,e$1.Component);var r=be(n);function n(t){var o;return he(this,n),ye(ke(o=r.call(this,t)),"onTimeChange",(function(e){o.setState({time:e});var t=new Date;t.setHours(e.split(":")[0]),t.setMinutes(e.split(":")[1]),o.props.onChange(t);})),ye(ke(o),"renderTimeInput",(function(){var t=o.state.time,r=o.props,n=r.date,a=r.timeString,s=r.customTimeInput;return s?e$1.cloneElement(s,{date:n,value:t,onChange:o.onTimeChange}):e$1.createElement("input",{type:"time",className:"react-datepicker-time__input",placeholder:"Time",name:"time-input",required:!0,value:t,onChange:function(e){o.onTimeChange(e.target.value||a);}})})),o.state={time:o.props.timeString},o}return fe(n,[{key:"render",value:function(){return e$1.createElement("div",{className:"react-datepicker__input-time-container"},e$1.createElement("div",{className:"react-datepicker-time__caption"},this.props.timeInputLabel),e$1.createElement("div",{className:"react-datepicker-time__input-container"},e$1.createElement("div",{className:"react-datepicker-time__input"},this.renderTimeInput())))}}],[{key:"getDerivedStateFromProps",value:function(e,t){return e.timeString!==t.time?{time:e.timeString}:null}}]),n}();function Wt(t){var r=t.className,n=t.children,o=t.showPopperArrow,a=t.arrowProps,s=void 0===a?{}:a;return e$1.createElement("div",{className:r},o&&e$1.createElement("div",ve({className:"react-datepicker__triangle"},s)),n)}var Vt=["react-datepicker__year-select","react-datepicker__month-select","react-datepicker__month-year-select"],qt=function(t){De(o,e$1.Component);var n=be(o);function o(t){var a;return he(this,o),ye(ke(a=n.call(this,t)),"handleClickOutside",(function(e){a.props.onClickOutside(e);})),ye(ke(a),"setClickOutsideRef",(function(){return a.containerRef.current})),ye(ke(a),"handleDropdownFocus",(function(e){(function(){var e=((arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).className||"").split(/\s+/);return Vt.some((function(t){return e.indexOf(t)>=0}))})(e.target)&&a.props.onDropdownFocus();})),ye(ke(a),"getDateInView",(function(){var e=a.props,t=e.preSelection,r=e.selected,n=e.openToDate,o=ft(a.props),s=yt(a.props),i=Ye(),p=n||r||t;return p||(o&&isBefore(i,o)?o:s&&isAfter(i,s)?s:i)})),ye(ke(a),"increaseMonth",(function(){a.setState((function(e){var t=e.date;return {date:addMonths(t,1)}}),(function(){return a.handleMonthChange(a.state.date)}));})),ye(ke(a),"decreaseMonth",(function(){a.setState((function(e){var t=e.date;return {date:subMonths(t,1)}}),(function(){return a.handleMonthChange(a.state.date)}));})),ye(ke(a),"handleDayClick",(function(e,t,r){a.props.onSelect(e,t,r),a.props.setPreSelection&&a.props.setPreSelection(e);})),ye(ke(a),"handleDayMouseEnter",(function(e){a.setState({selectingDate:e}),a.props.onDayMouseEnter&&a.props.onDayMouseEnter(e);})),ye(ke(a),"handleMonthMouseLeave",(function(){a.setState({selectingDate:null}),a.props.onMonthMouseLeave&&a.props.onMonthMouseLeave();})),ye(ke(a),"handleYearMouseEnter",(function(e,t){a.setState({selectingDate:setYear(Ye(),t)}),a.props.onYearMouseEnter&&a.props.onYearMouseEnter(e,t);})),ye(ke(a),"handleYearMouseLeave",(function(e,t){a.props.onYearMouseLeave&&a.props.onYearMouseLeave(e,t);})),ye(ke(a),"handleYearChange",(function(e){a.props.onYearChange&&(a.props.onYearChange(e),a.setState({isRenderAriaLiveMessage:!0})),a.props.adjustDateOnChange&&(a.props.onSelect&&a.props.onSelect(e),a.props.setOpen&&a.props.setOpen(!0)),a.props.setPreSelection&&a.props.setPreSelection(e);})),ye(ke(a),"handleMonthChange",(function(e){a.handleCustomMonthChange(e),a.props.adjustDateOnChange&&(a.props.onSelect&&a.props.onSelect(e),a.props.setOpen&&a.props.setOpen(!0)),a.props.setPreSelection&&a.props.setPreSelection(e);})),ye(ke(a),"handleCustomMonthChange",(function(e){a.props.onMonthChange&&(a.props.onMonthChange(e),a.setState({isRenderAriaLiveMessage:!0}));})),ye(ke(a),"handleMonthYearChange",(function(e){a.handleYearChange(e),a.handleMonthChange(e);})),ye(ke(a),"changeYear",(function(e){a.setState((function(t){var r=t.date;return {date:setYear(r,e)}}),(function(){return a.handleYearChange(a.state.date)}));})),ye(ke(a),"changeMonth",(function(e){a.setState((function(t){var r=t.date;return {date:setMonth(r,e)}}),(function(){return a.handleMonthChange(a.state.date)}));})),ye(ke(a),"changeMonthYear",(function(e){a.setState((function(t){var r=t.date;return {date:setYear(setMonth(r,getMonth(e)),getYear(e))}}),(function(){return a.handleMonthYearChange(a.state.date)}));})),ye(ke(a),"header",(function(){var t=Le(arguments.length>0&&void 0!==arguments[0]?arguments[0]:a.state.date,a.props.locale,a.props.calendarStartDay),n=[];return a.props.showWeekNumbers&&n.push(e$1.createElement("div",{key:"W",className:"react-datepicker__day-name"},a.props.weekLabel||"#")),n.concat([0,1,2,3,4,5,6].map((function(n){var o=addDays(t,n),s=a.formatWeekday(o,a.props.locale),i=a.props.weekDayClassName?a.props.weekDayClassName(o):void 0;return e$1.createElement("div",{key:n,className:classNames$1("react-datepicker__day-name",i)},s)})))})),ye(ke(a),"formatWeekday",(function(e,t){return a.props.formatWeekDay?function(e,t,r){return t(Ie(e,"EEEE",r))}(e,a.props.formatWeekDay,t):a.props.useWeekdaysShort?function(e,t){return Ie(e,"EEE",t)}(e,t):function(e,t){return Ie(e,"EEEEEE",t)}(e,t)})),ye(ke(a),"decreaseYear",(function(){a.setState((function(e){var t=e.date;return {date:subYears(t,a.props.showYearPicker?a.props.yearItemNumber:1)}}),(function(){return a.handleYearChange(a.state.date)}));})),ye(ke(a),"clearSelectingDate",(function(){a.setState({selectingDate:null});})),ye(ke(a),"renderPreviousButton",(function(){if(!a.props.renderCustomHeader){var t;switch(!0){case a.props.showMonthYearPicker:t=ht(a.state.date,a.props);break;case a.props.showYearPicker:t=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.minDate,n=t.yearItemNumber,o=void 0===n?Ne:n,a=kt(Ae(subYears(e,o)),o).endPeriod,s=r&&getYear(r);return s&&s>a||!1}(a.state.date,a.props);break;default:t=dt(a.state.date,a.props);}if((a.props.forceShowMonthNavigation||a.props.showDisabledMonthNavigation||!t)&&!a.props.showTimeSelectOnly){var r=["react-datepicker__navigation","react-datepicker__navigation--previous"],n=a.decreaseMonth;(a.props.showMonthYearPicker||a.props.showQuarterYearPicker||a.props.showYearPicker)&&(n=a.decreaseYear),t&&a.props.showDisabledMonthNavigation&&(r.push("react-datepicker__navigation--previous--disabled"),n=null);var o=a.props.showMonthYearPicker||a.props.showQuarterYearPicker||a.props.showYearPicker,s=a.props,i=s.previousMonthButtonLabel,p=s.previousYearButtonLabel,c=a.props,l=c.previousMonthAriaLabel,d=void 0===l?"string"==typeof i?i:"Previous Month":l,u=c.previousYearAriaLabel,h=void 0===u?"string"==typeof p?p:"Previous Year":u;return e$1.createElement("button",{type:"button",className:r.join(" "),onClick:n,onKeyDown:a.props.handleOnKeyDown,"aria-label":o?h:d},e$1.createElement("span",{className:["react-datepicker__navigation-icon","react-datepicker__navigation-icon--previous"].join(" ")},o?a.props.previousYearButtonLabel:a.props.previousMonthButtonLabel))}}})),ye(ke(a),"increaseYear",(function(){a.setState((function(e){var t=e.date;return {date:addYears(t,a.props.showYearPicker?a.props.yearItemNumber:1)}}),(function(){return a.handleYearChange(a.state.date)}));})),ye(ke(a),"renderNextButton",(function(){if(!a.props.renderCustomHeader){var t;switch(!0){case a.props.showMonthYearPicker:t=mt(a.state.date,a.props);break;case a.props.showYearPicker:t=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.maxDate,n=t.yearItemNumber,o=void 0===n?Ne:n,a=kt(addYears(e,o),o).startPeriod,s=r&&getYear(r);return s&&s<a||!1}(a.state.date,a.props);break;default:t=ut(a.state.date,a.props);}if((a.props.forceShowMonthNavigation||a.props.showDisabledMonthNavigation||!t)&&!a.props.showTimeSelectOnly){var r=["react-datepicker__navigation","react-datepicker__navigation--next"];a.props.showTimeSelect&&r.push("react-datepicker__navigation--next--with-time"),a.props.todayButton&&r.push("react-datepicker__navigation--next--with-today-button");var n=a.increaseMonth;(a.props.showMonthYearPicker||a.props.showQuarterYearPicker||a.props.showYearPicker)&&(n=a.increaseYear),t&&a.props.showDisabledMonthNavigation&&(r.push("react-datepicker__navigation--next--disabled"),n=null);var o=a.props.showMonthYearPicker||a.props.showQuarterYearPicker||a.props.showYearPicker,s=a.props,i=s.nextMonthButtonLabel,p=s.nextYearButtonLabel,c=a.props,l=c.nextMonthAriaLabel,d=void 0===l?"string"==typeof i?i:"Next Month":l,h=c.nextYearAriaLabel,m=void 0===h?"string"==typeof p?p:"Next Year":h;return e$1.createElement("button",{type:"button",className:r.join(" "),onClick:n,onKeyDown:a.props.handleOnKeyDown,"aria-label":o?m:d},e$1.createElement("span",{className:["react-datepicker__navigation-icon","react-datepicker__navigation-icon--next"].join(" ")},o?a.props.nextYearButtonLabel:a.props.nextMonthButtonLabel))}}})),ye(ke(a),"renderCurrentMonth",(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:a.state.date,r=["react-datepicker__current-month"];return a.props.showYearDropdown&&r.push("react-datepicker__current-month--hasYearDropdown"),a.props.showMonthDropdown&&r.push("react-datepicker__current-month--hasMonthDropdown"),a.props.showMonthYearDropdown&&r.push("react-datepicker__current-month--hasMonthYearDropdown"),e$1.createElement("div",{className:r.join(" ")},Ie(t,a.props.dateFormat,a.props.locale))})),ye(ke(a),"renderYearDropdown",(function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(a.props.showYearDropdown&&!t)return e$1.createElement(_t,{adjustDateOnChange:a.props.adjustDateOnChange,date:a.state.date,onSelect:a.props.onSelect,setOpen:a.props.setOpen,dropdownMode:a.props.dropdownMode,onChange:a.changeYear,minDate:a.props.minDate,maxDate:a.props.maxDate,year:getYear(a.state.date),scrollableYearDropdown:a.props.scrollableYearDropdown,yearDropdownItemNumber:a.props.yearDropdownItemNumber})})),ye(ke(a),"renderMonthDropdown",(function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(a.props.showMonthDropdown&&!t)return e$1.createElement(Et,{dropdownMode:a.props.dropdownMode,locale:a.props.locale,onChange:a.changeMonth,month:getMonth(a.state.date),useShortMonthInDropdown:a.props.useShortMonthInDropdown})})),ye(ke(a),"renderMonthYearDropdown",(function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(a.props.showMonthYearDropdown&&!t)return e$1.createElement(Yt,{dropdownMode:a.props.dropdownMode,locale:a.props.locale,dateFormat:a.props.dateFormat,onChange:a.changeMonthYear,minDate:a.props.minDate,maxDate:a.props.maxDate,date:a.state.date,scrollableMonthYearDropdown:a.props.scrollableMonthYearDropdown})})),ye(ke(a),"handleTodayButtonClick",(function(e){a.props.onSelect(Be(),e),a.props.setPreSelection&&a.props.setPreSelection(Be());})),ye(ke(a),"renderTodayButton",(function(){if(a.props.todayButton&&!a.props.showTimeSelectOnly)return e$1.createElement("div",{className:"react-datepicker__today-button",onClick:function(e){return a.handleTodayButtonClick(e)}},a.props.todayButton)})),ye(ke(a),"renderDefaultHeader",(function(t){var r=t.monthDate,n=t.i;return e$1.createElement("div",{className:"react-datepicker__header ".concat(a.props.showTimeSelect?"react-datepicker__header--has-time-select":"")},a.renderCurrentMonth(r),e$1.createElement("div",{className:"react-datepicker__header__dropdown react-datepicker__header__dropdown--".concat(a.props.dropdownMode),onFocus:a.handleDropdownFocus},a.renderMonthDropdown(0!==n),a.renderMonthYearDropdown(0!==n),a.renderYearDropdown(0!==n)),e$1.createElement("div",{className:"react-datepicker__day-names"},a.header(r)))})),ye(ke(a),"renderCustomHeader",(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=t.monthDate,n=t.i;if(a.props.showTimeSelect&&!a.state.monthContainer||a.props.showTimeSelectOnly)return null;var o=dt(a.state.date,a.props),s=ut(a.state.date,a.props),i=ht(a.state.date,a.props),p=mt(a.state.date,a.props),c=!a.props.showMonthYearPicker&&!a.props.showQuarterYearPicker&&!a.props.showYearPicker;return e$1.createElement("div",{className:"react-datepicker__header react-datepicker__header--custom",onFocus:a.props.onDropdownFocus},a.props.renderCustomHeader(de(de({},a.state),{},{customHeaderCount:n,monthDate:r,changeMonth:a.changeMonth,changeYear:a.changeYear,decreaseMonth:a.decreaseMonth,increaseMonth:a.increaseMonth,decreaseYear:a.decreaseYear,increaseYear:a.increaseYear,prevMonthButtonDisabled:o,nextMonthButtonDisabled:s,prevYearButtonDisabled:i,nextYearButtonDisabled:p})),c&&e$1.createElement("div",{className:"react-datepicker__day-names"},a.header(r)))})),ye(ke(a),"renderYearHeader",(function(){var t=a.state.date,r=a.props,n=r.showYearPicker,o=kt(t,r.yearItemNumber),s=o.startPeriod,i=o.endPeriod;return e$1.createElement("div",{className:"react-datepicker__header react-datepicker-year-header"},n?"".concat(s," - ").concat(i):getYear(t))})),ye(ke(a),"renderHeader",(function(e){switch(!0){case void 0!==a.props.renderCustomHeader:return a.renderCustomHeader(e);case a.props.showMonthYearPicker||a.props.showQuarterYearPicker||a.props.showYearPicker:return a.renderYearHeader(e);default:return a.renderDefaultHeader(e)}})),ye(ke(a),"renderMonths",(function(){var t;if(!a.props.showTimeSelectOnly&&!a.props.showYearPicker){for(var r=[],n=a.props.showPreviousMonths?a.props.monthsShown-1:0,o=subMonths(a.state.date,n),s=null!==(t=a.props.monthSelectedIn)&&void 0!==t?t:n,i=0;i<a.props.monthsShown;++i){var p=addMonths(o,i-s+n),c="month-".concat(i),d=i<a.props.monthsShown-1,u=i>0;r.push(e$1.createElement("div",{key:c,ref:function(e){a.monthContainer=e;},className:"react-datepicker__month-container"},a.renderHeader({monthDate:p,i:i}),e$1.createElement(Bt,{chooseDayAriaLabelPrefix:a.props.chooseDayAriaLabelPrefix,disabledDayAriaLabelPrefix:a.props.disabledDayAriaLabelPrefix,weekAriaLabelPrefix:a.props.weekAriaLabelPrefix,ariaLabelPrefix:a.props.monthAriaLabelPrefix,onChange:a.changeMonthYear,day:p,dayClassName:a.props.dayClassName,calendarStartDay:a.props.calendarStartDay,monthClassName:a.props.monthClassName,onDayClick:a.handleDayClick,handleOnKeyDown:a.props.handleOnDayKeyDown,onDayMouseEnter:a.handleDayMouseEnter,onMouseLeave:a.handleMonthMouseLeave,onWeekSelect:a.props.onWeekSelect,orderInDisplay:i,formatWeekNumber:a.props.formatWeekNumber,locale:a.props.locale,minDate:a.props.minDate,maxDate:a.props.maxDate,excludeDates:a.props.excludeDates,excludeDateIntervals:a.props.excludeDateIntervals,highlightDates:a.props.highlightDates,holidays:a.props.holidays,selectingDate:a.state.selectingDate,includeDates:a.props.includeDates,includeDateIntervals:a.props.includeDateIntervals,inline:a.props.inline,shouldFocusDayInline:a.props.shouldFocusDayInline,fixedHeight:a.props.fixedHeight,filterDate:a.props.filterDate,preSelection:a.props.preSelection,setPreSelection:a.props.setPreSelection,selected:a.props.selected,selectsStart:a.props.selectsStart,selectsEnd:a.props.selectsEnd,selectsRange:a.props.selectsRange,selectsDisabledDaysInRange:a.props.selectsDisabledDaysInRange,showWeekNumbers:a.props.showWeekNumbers,startDate:a.props.startDate,endDate:a.props.endDate,peekNextMonth:a.props.peekNextMonth,setOpen:a.props.setOpen,shouldCloseOnSelect:a.props.shouldCloseOnSelect,renderDayContents:a.props.renderDayContents,renderMonthContent:a.props.renderMonthContent,renderQuarterContent:a.props.renderQuarterContent,renderYearContent:a.props.renderYearContent,disabledKeyboardNavigation:a.props.disabledKeyboardNavigation,showMonthYearPicker:a.props.showMonthYearPicker,showFullMonthYearPicker:a.props.showFullMonthYearPicker,showTwoColumnMonthYearPicker:a.props.showTwoColumnMonthYearPicker,showFourColumnMonthYearPicker:a.props.showFourColumnMonthYearPicker,showYearPicker:a.props.showYearPicker,showQuarterYearPicker:a.props.showQuarterYearPicker,isInputFocused:a.props.isInputFocused,containerRef:a.containerRef,monthShowsDuplicateDaysEnd:d,monthShowsDuplicateDaysStart:u})));}return r}})),ye(ke(a),"renderYears",(function(){if(!a.props.showTimeSelectOnly)return a.props.showYearPicker?e$1.createElement("div",{className:"react-datepicker__year--container"},a.renderHeader(),e$1.createElement(Ht,ve({onDayClick:a.handleDayClick,selectingDate:a.state.selectingDate,clearSelectingDate:a.clearSelectingDate,date:a.state.date},a.props,{onYearMouseEnter:a.handleYearMouseEnter,onYearMouseLeave:a.handleYearMouseLeave}))):void 0})),ye(ke(a),"renderTimeSection",(function(){if(a.props.showTimeSelect&&(a.state.monthContainer||a.props.showTimeSelectOnly))return e$1.createElement(Qt,{selected:a.props.selected,openToDate:a.props.openToDate,onChange:a.props.onTimeChange,timeClassName:a.props.timeClassName,format:a.props.timeFormat,includeTimes:a.props.includeTimes,intervals:a.props.timeIntervals,minTime:a.props.minTime,maxTime:a.props.maxTime,excludeTimes:a.props.excludeTimes,filterTime:a.props.filterTime,timeCaption:a.props.timeCaption,todayButton:a.props.todayButton,showMonthDropdown:a.props.showMonthDropdown,showMonthYearDropdown:a.props.showMonthYearDropdown,showYearDropdown:a.props.showYearDropdown,withPortal:a.props.withPortal,monthRef:a.state.monthContainer,injectTimes:a.props.injectTimes,locale:a.props.locale,handleOnKeyDown:a.props.handleOnKeyDown,showTimeSelectOnly:a.props.showTimeSelectOnly})})),ye(ke(a),"renderInputTimeSection",(function(){var t=new Date(a.props.selected),r=Te(t)&&Boolean(a.props.selected)?"".concat(wt(t.getHours()),":").concat(wt(t.getMinutes())):"";if(a.props.showTimeInput)return e$1.createElement(jt,{date:t,timeString:r,timeInputLabel:a.props.timeInputLabel,onChange:a.props.onTimeChange,customTimeInput:a.props.customTimeInput})})),ye(ke(a),"renderAriaLiveRegion",(function(){var t,r=kt(a.state.date,a.props.yearItemNumber),n=r.startPeriod,o=r.endPeriod;return t=a.props.showYearPicker?"".concat(n," - ").concat(o):a.props.showMonthYearPicker||a.props.showQuarterYearPicker?getYear(a.state.date):"".concat(Je(getMonth(a.state.date),a.props.locale)," ").concat(getYear(a.state.date)),e$1.createElement("span",{role:"alert","aria-live":"polite",className:"react-datepicker__aria-live"},a.state.isRenderAriaLiveMessage&&t)})),ye(ke(a),"renderChildren",(function(){if(a.props.children)return e$1.createElement("div",{className:"react-datepicker__children-container"},a.props.children)})),a.containerRef=e$1.createRef(),a.state={date:a.getDateInView(),selectingDate:null,monthContainer:null,isRenderAriaLiveMessage:!1},a}return fe(o,[{key:"componentDidMount",value:function(){var e=this;this.props.showTimeSelect&&(this.assignMonthContainer=void e.setState({monthContainer:e.monthContainer}));}},{key:"componentDidUpdate",value:function(e){var t=this;if(!this.props.preSelection||We(this.props.preSelection,e.preSelection)&&this.props.monthSelectedIn===e.monthSelectedIn)this.props.openToDate&&!We(this.props.openToDate,e.openToDate)&&this.setState({date:this.props.openToDate});else {var r=!He(this.state.date,this.props.preSelection);this.setState({date:this.props.preSelection},(function(){return r&&t.handleCustomMonthChange(t.state.date)}));}}},{key:"render",value:function(){var t=this.props.container||Wt;return e$1.createElement("div",{ref:this.containerRef},e$1.createElement(t,{className:classNames$1("react-datepicker",this.props.className,{"react-datepicker--time-only":this.props.showTimeSelectOnly}),showPopperArrow:this.props.showPopperArrow,arrowProps:this.props.arrowProps},this.renderAriaLiveRegion(),this.renderPreviousButton(),this.renderNextButton(),this.renderMonths(),this.renderYears(),this.renderTodayButton(),this.renderTimeSection(),this.renderInputTimeSection(),this.renderChildren()))}}],[{key:"defaultProps",get:function(){return {onDropdownFocus:function(){},monthsShown:1,forceShowMonthNavigation:!1,timeCaption:"Time",previousYearButtonLabel:"Previous Year",nextYearButtonLabel:"Next Year",previousMonthButtonLabel:"Previous Month",nextMonthButtonLabel:"Next Month",customTimeInput:null,yearItemNumber:Ne}}}]),o}(),Ut=function(t){De(n,e$1.Component);var r=be(n);function n(e){var t;return he(this,n),(t=r.call(this,e)).el=document.createElement("div"),t}return fe(n,[{key:"componentDidMount",value:function(){this.portalRoot=(this.props.portalHost||document).getElementById(this.props.portalId),this.portalRoot||(this.portalRoot=document.createElement("div"),this.portalRoot.setAttribute("id",this.props.portalId),(this.props.portalHost||document.body).appendChild(this.portalRoot)),this.portalRoot.appendChild(this.el);}},{key:"componentWillUnmount",value:function(){this.portalRoot.removeChild(this.el);}},{key:"render",value:function(){return require$$0.createPortal(this.props.children,this.el)}}]),n}(),zt=function(e){return !e.disabled&&-1!==e.tabIndex},$t=function(t){De(n,e$1.Component);var r=be(n);function n(t){var o;return he(this,n),ye(ke(o=r.call(this,t)),"getTabChildren",(function(){return Array.prototype.slice.call(o.tabLoopRef.current.querySelectorAll("[tabindex], a, button, input, select, textarea"),1,-1).filter(zt)})),ye(ke(o),"handleFocusStart",(function(){var e=o.getTabChildren();e&&e.length>1&&e[e.length-1].focus();})),ye(ke(o),"handleFocusEnd",(function(){var e=o.getTabChildren();e&&e.length>1&&e[0].focus();})),o.tabLoopRef=e$1.createRef(),o}return fe(n,[{key:"render",value:function(){return this.props.enableTabLoop?e$1.createElement("div",{className:"react-datepicker__tab-loop",ref:this.tabLoopRef},e$1.createElement("div",{className:"react-datepicker__tab-loop__start",tabIndex:"0",onFocus:this.handleFocusStart}),this.props.children,e$1.createElement("div",{className:"react-datepicker__tab-loop__end",tabIndex:"0",onFocus:this.handleFocusEnd})):this.props.children}}],[{key:"defaultProps",get:function(){return {enableTabLoop:!0}}}]),n}(),Gt=function(t){De(o,e$1.Component);var n=be(o);function o(){return he(this,o),n.apply(this,arguments)}return fe(o,[{key:"render",value:function(){var t,n=this.props,o=n.className,a=n.wrapperClassName,s=n.hidePopper,i=n.popperComponent,p=n.popperModifiers,c=n.popperPlacement,l=n.popperProps,d=n.targetComponent,u=n.enableTabLoop,h=n.popperOnKeyDown,m=n.portalId,f=n.portalHost;if(!s){var y=classNames$1("react-datepicker-popper",o);t=e$1.createElement(Popper,ve({modifiers:p,placement:c},l),(function(t){var r=t.ref,n=t.style,o=t.placement,a=t.arrowProps;return e$1.createElement($t,{enableTabLoop:u},e$1.createElement("div",{ref:r,style:n,className:y,"data-placement":o,onKeyDown:h},e$1.cloneElement(i,{arrowProps:a})))}));}this.props.popperContainer&&(t=e$1.createElement(this.props.popperContainer,{},t)),m&&!s&&(t=e$1.createElement(Ut,{portalId:m,portalHost:f},t));var v=classNames$1("react-datepicker-wrapper",a);return e$1.createElement(Manager,{className:"react-datepicker-manager"},e$1.createElement(Reference,null,(function(t){var r=t.ref;return e$1.createElement("div",{ref:r,className:v},d)})),t)}}],[{key:"defaultProps",get:function(){return {hidePopper:!0,popperModifiers:[],popperProps:{},popperPlacement:"bottom-start"}}}]),o}(),Jt="react-datepicker-ignore-onclickoutside",Xt=onClickOutsideHOC(qt);var Zt="Date input not valid.",er=function(t){De(s,e$1.Component);var a=be(s);function s(t){var i;return he(this,s),ye(ke(i=a.call(this,t)),"getPreSelection",(function(){return i.props.openToDate?i.props.openToDate:i.props.selectsEnd&&i.props.startDate?i.props.startDate:i.props.selectsStart&&i.props.endDate?i.props.endDate:Ye()})),ye(ke(i),"calcInitialState",(function(){var e,t,r=null===(e=i.props.holidays)||void 0===e?void 0:e.reduce((function(e,t){var r=new Date(t.date);return isValid(r)?[].concat(Se(e),[de(de({},t),{},{date:r})]):e}),[]),n=i.getPreSelection(),a=ft(i.props),s=yt(i.props),p=a&&isBefore(n,startOfDay(a))?a:s&&isAfter(n,endOfDay(s))?s:n;return {open:i.props.startOpen||!1,preventFocus:!1,preSelection:null!==(t=i.props.selectsRange?i.props.startDate:i.props.selected)&&void 0!==t?t:p,highlightDates:vt(i.props.highlightDates),holidays:Dt(r),focused:!1,shouldFocusDayInline:!1,isRenderAriaLiveMessage:!1}})),ye(ke(i),"clearPreventFocusTimeout",(function(){i.preventFocusTimeout&&clearTimeout(i.preventFocusTimeout);})),ye(ke(i),"setFocus",(function(){i.input&&i.input.focus&&i.input.focus({preventScroll:!0});})),ye(ke(i),"setBlur",(function(){i.input&&i.input.blur&&i.input.blur(),i.cancelFocusInput();})),ye(ke(i),"setOpen",(function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];i.setState({open:e,preSelection:e&&i.state.open?i.state.preSelection:i.calcInitialState().preSelection,lastPreSelectChange:rr},(function(){e||i.setState((function(e){return {focused:!!t&&e.focused}}),(function(){!t&&i.setBlur(),i.setState({inputValue:null});}));}));})),ye(ke(i),"inputOk",(function(){return isDate(i.state.preSelection)})),ye(ke(i),"isCalendarOpen",(function(){return void 0===i.props.open?i.state.open&&!i.props.disabled&&!i.props.readOnly:i.props.open})),ye(ke(i),"handleFocus",(function(e){i.state.preventFocus||(i.props.onFocus(e),i.props.preventOpenOnFocus||i.props.readOnly||i.setOpen(!0)),i.setState({focused:!0});})),ye(ke(i),"cancelFocusInput",(function(){clearTimeout(i.inputFocusTimeout),i.inputFocusTimeout=null;})),ye(ke(i),"deferFocusInput",(function(){i.cancelFocusInput(),i.inputFocusTimeout=setTimeout((function(){return i.setFocus()}),1);})),ye(ke(i),"handleDropdownFocus",(function(){i.cancelFocusInput();})),ye(ke(i),"handleBlur",(function(e){(!i.state.open||i.props.withPortal||i.props.showTimeInput)&&i.props.onBlur(e),i.setState({focused:!1});})),ye(ke(i),"handleCalendarClickOutside",(function(e){i.props.inline||i.setOpen(!1),i.props.onClickOutside(e),i.props.withPortal&&e.preventDefault();})),ye(ke(i),"handleChange",(function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n=t[0];if(!i.props.onChangeRaw||(i.props.onChangeRaw.apply(ke(i),t),"function"==typeof n.isDefaultPrevented&&!n.isDefaultPrevented())){i.setState({inputValue:n.target.value,lastPreSelectChange:tr});var o,a,s,p,c,l,d,u,h=(o=n.target.value,a=i.props.dateFormat,s=i.props.locale,p=i.props.strictParsing,c=i.props.minDate,l=null,d=Ge(s)||Ge($e()),u=!0,Array.isArray(a)?(a.forEach((function(e){var t=parse$3(o,e,new Date,{locale:d});p&&(u=Te(t,c)&&o===Ie(t,e,s)),Te(t,c)&&u&&(l=t);})),l):(l=parse$3(o,a,new Date,{locale:d}),p?u=Te(l)&&o===Ie(l,a,s):Te(l)||(a=a.match(xe).map((function(e){var t=e[0];return "p"===t||"P"===t?d?(0, Pe[t])(e,d.formatLong):t:e})).join(""),o.length>0&&(l=parse$3(o,a.slice(0,o.length),new Date)),Te(l)||(l=new Date(o))),Te(l)&&u?l:null));i.props.showTimeSelectOnly&&i.props.selected&&!We(h,i.props.selected)&&(h=set$1(i.props.selected,null==h?{hours:getHours(i.props.selected),minutes:getMinutes(i.props.selected),seconds:getSeconds(i.props.selected)}:{hours:getHours(h),minutes:getMinutes(h),seconds:getSeconds(h)})),!h&&n.target.value||i.setSelected(h,n,!0);}})),ye(ke(i),"handleSelect",(function(e,t,r){if(i.setState({preventFocus:!0},(function(){return i.preventFocusTimeout=setTimeout((function(){return i.setState({preventFocus:!1})}),50),i.preventFocusTimeout})),i.props.onChangeRaw&&i.props.onChangeRaw(t),i.setSelected(e,t,!1,r),i.props.showDateSelect&&i.setState({isRenderAriaLiveMessage:!0}),!i.props.shouldCloseOnSelect||i.props.showTimeSelect)i.setPreSelection(e);else if(!i.props.inline){i.props.selectsRange||i.setOpen(!1);var n=i.props,o=n.startDate,a=n.endDate;!o||a||isBefore(e,o)||i.setOpen(!1);}})),ye(ke(i),"setSelected",(function(e,t,r,n){var o=e;if(i.props.showYearPicker){if(null!==o&&at(getYear(o),i.props))return}else if(i.props.showMonthYearPicker){if(null!==o&&tt(o,i.props))return}else if(null!==o&&Ze(o,i.props))return;var a=i.props,s=a.onChange,p=a.selectsRange,c=a.startDate,l=a.endDate;if(!Ve(i.props.selected,o)||i.props.allowSameDay||p)if(null!==o&&(!i.props.selected||r&&(i.props.showTimeSelect||i.props.showTimeSelectOnly||i.props.showTimeInput)||(o=Re(o,{hour:getHours(i.props.selected),minute:getMinutes(i.props.selected),second:getSeconds(i.props.selected)})),i.props.inline||i.setState({preSelection:o}),i.props.focusSelectedMonth||i.setState({monthSelectedIn:n})),p){var d=c&&!l,u=c&&l;!c&&!l?s([o,null],t):d&&(isBefore(o,c)?s([o,null],t):s([c,o],t)),u&&s([o,null],t);}else s(o,t);r||(i.props.onSelect(o,t),i.setState({inputValue:null}));})),ye(ke(i),"setPreSelection",(function(e){var t=void 0!==i.props.minDate,r=void 0!==i.props.maxDate,n=!0;if(e){var o=startOfDay(e);if(t&&r)n=qe(e,i.props.minDate,i.props.maxDate);else if(t){var a=startOfDay(i.props.minDate);n=isAfter(e,a)||Ve(o,a);}else if(r){var s=endOfDay(i.props.maxDate);n=isBefore(e,s)||Ve(o,s);}}n&&i.setState({preSelection:e});})),ye(ke(i),"handleTimeChange",(function(e){var t=i.props.selected?i.props.selected:i.getPreSelection(),r=i.props.selected?e:Re(t,{hour:getHours(e),minute:getMinutes(e)});i.setState({preSelection:r}),i.props.onChange(r),i.props.shouldCloseOnSelect&&i.setOpen(!1),i.props.showTimeInput&&i.setOpen(!0),(i.props.showTimeSelectOnly||i.props.showTimeSelect)&&i.setState({isRenderAriaLiveMessage:!0}),i.setState({inputValue:null});})),ye(ke(i),"onInputClick",(function(){i.props.disabled||i.props.readOnly||i.setOpen(!0),i.props.onInputClick();})),ye(ke(i),"onInputKeyDown",(function(e){i.props.onKeyDown(e);var t=e.key;if(i.state.open||i.props.inline||i.props.preventOpenOnFocus){if(i.state.open){if("ArrowDown"===t||"ArrowUp"===t){e.preventDefault();var r=i.calendar.componentNode&&i.calendar.componentNode.querySelector('.react-datepicker__day[tabindex="0"]');return void(r&&r.focus({preventScroll:!0}))}var n=Ye(i.state.preSelection);"Enter"===t?(e.preventDefault(),i.inputOk()&&i.state.lastPreSelectChange===rr?(i.handleSelect(n,e),!i.props.shouldCloseOnSelect&&i.setPreSelection(n)):i.setOpen(!1)):"Escape"===t?(e.preventDefault(),i.setOpen(!1)):"Tab"===t&&i.setOpen(!1),i.inputOk()||i.props.onInputError({code:1,msg:Zt});}}else "ArrowDown"!==t&&"ArrowUp"!==t&&"Enter"!==t||i.onInputClick();})),ye(ke(i),"onPortalKeyDown",(function(e){"Escape"===e.key&&(e.preventDefault(),i.setState({preventFocus:!0},(function(){i.setOpen(!1),setTimeout((function(){i.setFocus(),i.setState({preventFocus:!1});}));})));})),ye(ke(i),"onDayKeyDown",(function(e){i.props.onKeyDown(e);var t=e.key,r=Ye(i.state.preSelection);if("Enter"===t)e.preventDefault(),i.handleSelect(r,e),!i.props.shouldCloseOnSelect&&i.setPreSelection(r);else if("Escape"===t)e.preventDefault(),i.setOpen(!1),i.inputOk()||i.props.onInputError({code:1,msg:Zt});else if(!i.props.disabledKeyboardNavigation){var n;switch(t){case"ArrowLeft":n=subDays(r,1);break;case"ArrowRight":n=addDays(r,1);break;case"ArrowUp":n=subWeeks(r,1);break;case"ArrowDown":n=addWeeks(r,1);break;case"PageUp":n=subMonths(r,1);break;case"PageDown":n=addMonths(r,1);break;case"Home":n=subYears(r,1);break;case"End":n=addYears(r,1);}if(!n)return void(i.props.onInputError&&i.props.onInputError({code:1,msg:Zt}));if(e.preventDefault(),i.setState({lastPreSelectChange:rr}),i.props.adjustDateOnChange&&i.setSelected(n),i.setPreSelection(n),i.props.inline){var o=getMonth(r),a=getMonth(n),s=getYear(r),d=getYear(n);o!==a||s!==d?i.setState({shouldFocusDayInline:!0}):i.setState({shouldFocusDayInline:!1});}}})),ye(ke(i),"onPopperKeyDown",(function(e){"Escape"===e.key&&(e.preventDefault(),i.setState({preventFocus:!0},(function(){i.setOpen(!1),setTimeout((function(){i.setFocus(),i.setState({preventFocus:!1});}));})));})),ye(ke(i),"onClearClick",(function(e){e&&e.preventDefault&&e.preventDefault(),i.props.selectsRange?i.props.onChange([null,null],e):i.props.onChange(null,e),i.setState({inputValue:null});})),ye(ke(i),"clear",(function(){i.onClearClick();})),ye(ke(i),"onScroll",(function(e){"boolean"==typeof i.props.closeOnScroll&&i.props.closeOnScroll?e.target!==document&&e.target!==document.documentElement&&e.target!==document.body||i.setOpen(!1):"function"==typeof i.props.closeOnScroll&&i.props.closeOnScroll(e)&&i.setOpen(!1);})),ye(ke(i),"renderCalendar",(function(){return i.props.inline||i.isCalendarOpen()?e$1.createElement(Xt,{ref:function(e){i.calendar=e;},locale:i.props.locale,calendarStartDay:i.props.calendarStartDay,chooseDayAriaLabelPrefix:i.props.chooseDayAriaLabelPrefix,disabledDayAriaLabelPrefix:i.props.disabledDayAriaLabelPrefix,weekAriaLabelPrefix:i.props.weekAriaLabelPrefix,monthAriaLabelPrefix:i.props.monthAriaLabelPrefix,adjustDateOnChange:i.props.adjustDateOnChange,setOpen:i.setOpen,shouldCloseOnSelect:i.props.shouldCloseOnSelect,dateFormat:i.props.dateFormatCalendar,useWeekdaysShort:i.props.useWeekdaysShort,formatWeekDay:i.props.formatWeekDay,dropdownMode:i.props.dropdownMode,selected:i.props.selected,preSelection:i.state.preSelection,onSelect:i.handleSelect,onWeekSelect:i.props.onWeekSelect,openToDate:i.props.openToDate,minDate:i.props.minDate,maxDate:i.props.maxDate,selectsStart:i.props.selectsStart,selectsEnd:i.props.selectsEnd,selectsRange:i.props.selectsRange,startDate:i.props.startDate,endDate:i.props.endDate,excludeDates:i.props.excludeDates,excludeDateIntervals:i.props.excludeDateIntervals,filterDate:i.props.filterDate,onClickOutside:i.handleCalendarClickOutside,formatWeekNumber:i.props.formatWeekNumber,highlightDates:i.state.highlightDates,holidays:i.state.holidays,includeDates:i.props.includeDates,includeDateIntervals:i.props.includeDateIntervals,includeTimes:i.props.includeTimes,injectTimes:i.props.injectTimes,inline:i.props.inline,shouldFocusDayInline:i.state.shouldFocusDayInline,peekNextMonth:i.props.peekNextMonth,showMonthDropdown:i.props.showMonthDropdown,showPreviousMonths:i.props.showPreviousMonths,useShortMonthInDropdown:i.props.useShortMonthInDropdown,showMonthYearDropdown:i.props.showMonthYearDropdown,showWeekNumbers:i.props.showWeekNumbers,showYearDropdown:i.props.showYearDropdown,withPortal:i.props.withPortal,forceShowMonthNavigation:i.props.forceShowMonthNavigation,showDisabledMonthNavigation:i.props.showDisabledMonthNavigation,scrollableYearDropdown:i.props.scrollableYearDropdown,scrollableMonthYearDropdown:i.props.scrollableMonthYearDropdown,todayButton:i.props.todayButton,weekLabel:i.props.weekLabel,outsideClickIgnoreClass:Jt,fixedHeight:i.props.fixedHeight,monthsShown:i.props.monthsShown,monthSelectedIn:i.state.monthSelectedIn,onDropdownFocus:i.handleDropdownFocus,onMonthChange:i.props.onMonthChange,onYearChange:i.props.onYearChange,dayClassName:i.props.dayClassName,weekDayClassName:i.props.weekDayClassName,monthClassName:i.props.monthClassName,timeClassName:i.props.timeClassName,showDateSelect:i.props.showDateSelect,showTimeSelect:i.props.showTimeSelect,showTimeSelectOnly:i.props.showTimeSelectOnly,onTimeChange:i.handleTimeChange,timeFormat:i.props.timeFormat,timeIntervals:i.props.timeIntervals,minTime:i.props.minTime,maxTime:i.props.maxTime,excludeTimes:i.props.excludeTimes,filterTime:i.props.filterTime,timeCaption:i.props.timeCaption,className:i.props.calendarClassName,container:i.props.calendarContainer,yearItemNumber:i.props.yearItemNumber,yearDropdownItemNumber:i.props.yearDropdownItemNumber,previousMonthAriaLabel:i.props.previousMonthAriaLabel,previousMonthButtonLabel:i.props.previousMonthButtonLabel,nextMonthAriaLabel:i.props.nextMonthAriaLabel,nextMonthButtonLabel:i.props.nextMonthButtonLabel,previousYearAriaLabel:i.props.previousYearAriaLabel,previousYearButtonLabel:i.props.previousYearButtonLabel,nextYearAriaLabel:i.props.nextYearAriaLabel,nextYearButtonLabel:i.props.nextYearButtonLabel,timeInputLabel:i.props.timeInputLabel,disabledKeyboardNavigation:i.props.disabledKeyboardNavigation,renderCustomHeader:i.props.renderCustomHeader,popperProps:i.props.popperProps,renderDayContents:i.props.renderDayContents,renderMonthContent:i.props.renderMonthContent,renderQuarterContent:i.props.renderQuarterContent,renderYearContent:i.props.renderYearContent,onDayMouseEnter:i.props.onDayMouseEnter,onMonthMouseLeave:i.props.onMonthMouseLeave,onYearMouseEnter:i.props.onYearMouseEnter,onYearMouseLeave:i.props.onYearMouseLeave,selectsDisabledDaysInRange:i.props.selectsDisabledDaysInRange,showTimeInput:i.props.showTimeInput,showMonthYearPicker:i.props.showMonthYearPicker,showFullMonthYearPicker:i.props.showFullMonthYearPicker,showTwoColumnMonthYearPicker:i.props.showTwoColumnMonthYearPicker,showFourColumnMonthYearPicker:i.props.showFourColumnMonthYearPicker,showYearPicker:i.props.showYearPicker,showQuarterYearPicker:i.props.showQuarterYearPicker,showPopperArrow:i.props.showPopperArrow,excludeScrollbar:i.props.excludeScrollbar,handleOnKeyDown:i.props.onKeyDown,handleOnDayKeyDown:i.onDayKeyDown,isInputFocused:i.state.focused,customTimeInput:i.props.customTimeInput,setPreSelection:i.setPreSelection},i.props.children):null})),ye(ke(i),"renderAriaLiveRegion",(function(){var t,r=i.props,n=r.dateFormat,o=r.locale,a=i.props.showTimeInput||i.props.showTimeSelect?"PPPPp":"PPPP";return t=i.props.selectsRange?"Selected start date: ".concat(Oe(i.props.startDate,{dateFormat:a,locale:o}),". ").concat(i.props.endDate?"End date: "+Oe(i.props.endDate,{dateFormat:a,locale:o}):""):i.props.showTimeSelectOnly?"Selected time: ".concat(Oe(i.props.selected,{dateFormat:n,locale:o})):i.props.showYearPicker?"Selected year: ".concat(Oe(i.props.selected,{dateFormat:"yyyy",locale:o})):i.props.showMonthYearPicker?"Selected month: ".concat(Oe(i.props.selected,{dateFormat:"MMMM yyyy",locale:o})):i.props.showQuarterYearPicker?"Selected quarter: ".concat(Oe(i.props.selected,{dateFormat:"yyyy, QQQ",locale:o})):"Selected date: ".concat(Oe(i.props.selected,{dateFormat:a,locale:o})),e$1.createElement("span",{role:"alert","aria-live":"polite",className:"react-datepicker__aria-live"},t)})),ye(ke(i),"renderDateInput",(function(){var t,n=classNames$1(i.props.className,ye({},Jt,i.state.open)),o=i.props.customInput||e$1.createElement("input",{type:"text"}),a=i.props.customInputRef||"ref",s="string"==typeof i.props.value?i.props.value:"string"==typeof i.state.inputValue?i.state.inputValue:i.props.selectsRange?function(e,t,r){if(!e)return "";var n=Oe(e,r),o=t?Oe(t,r):"";return "".concat(n," - ").concat(o)}(i.props.startDate,i.props.endDate,i.props):Oe(i.props.selected,i.props);return e$1.cloneElement(o,(ye(t={},a,(function(e){i.input=e;})),ye(t,"value",s),ye(t,"onBlur",i.handleBlur),ye(t,"onChange",i.handleChange),ye(t,"onClick",i.onInputClick),ye(t,"onFocus",i.handleFocus),ye(t,"onKeyDown",i.onInputKeyDown),ye(t,"id",i.props.id),ye(t,"name",i.props.name),ye(t,"form",i.props.form),ye(t,"autoFocus",i.props.autoFocus),ye(t,"placeholder",i.props.placeholderText),ye(t,"disabled",i.props.disabled),ye(t,"autoComplete",i.props.autoComplete),ye(t,"className",classNames$1(o.props.className,n)),ye(t,"title",i.props.title),ye(t,"readOnly",i.props.readOnly),ye(t,"required",i.props.required),ye(t,"tabIndex",i.props.tabIndex),ye(t,"aria-describedby",i.props.ariaDescribedBy),ye(t,"aria-invalid",i.props.ariaInvalid),ye(t,"aria-labelledby",i.props.ariaLabelledBy),ye(t,"aria-required",i.props.ariaRequired),t))})),ye(ke(i),"renderClearButton",(function(){var t=i.props,r=t.isClearable,n=t.selected,o=t.startDate,a=t.endDate,s=t.clearButtonTitle,p=t.clearButtonClassName,c=void 0===p?"":p,l=t.ariaLabelClose,d=void 0===l?"Close":l;return !r||null==n&&null==o&&null==a?null:e$1.createElement("button",{type:"button",className:"react-datepicker__close-icon ".concat(c).trim(),"aria-label":d,onClick:i.onClearClick,title:s,tabIndex:-1})})),i.state=i.calcInitialState(),i}return fe(s,[{key:"componentDidMount",value:function(){window.addEventListener("scroll",this.onScroll,!0);}},{key:"componentDidUpdate",value:function(e,t){var r,n;e.inline&&(r=e.selected,n=this.props.selected,r&&n?getMonth(r)!==getMonth(n)||getYear(r)!==getYear(n):r!==n)&&this.setPreSelection(this.props.selected),void 0!==this.state.monthSelectedIn&&e.monthsShown!==this.props.monthsShown&&this.setState({monthSelectedIn:0}),e.highlightDates!==this.props.highlightDates&&this.setState({highlightDates:vt(this.props.highlightDates)}),t.focused||Ve(e.selected,this.props.selected)||this.setState({inputValue:null}),t.open!==this.state.open&&(!1===t.open&&!0===this.state.open&&this.props.onCalendarOpen(),!0===t.open&&!1===this.state.open&&this.props.onCalendarClose());}},{key:"componentWillUnmount",value:function(){this.clearPreventFocusTimeout(),window.removeEventListener("scroll",this.onScroll,!0);}},{key:"renderInputContainer",value:function(){var t=this.props.showIcon;return e$1.createElement("div",{className:"react-datepicker__input-container".concat(t?" react-datepicker__view-calendar-icon":"")},t&&e$1.createElement("svg",{className:"react-datepicker__calendar-icon",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 448 512"},e$1.createElement("path",{d:"M96 32V64H48C21.5 64 0 85.5 0 112v48H448V112c0-26.5-21.5-48-48-48H352V32c0-17.7-14.3-32-32-32s-32 14.3-32 32V64H160V32c0-17.7-14.3-32-32-32S96 14.3 96 32zM448 192H0V464c0 26.5 21.5 48 48 48H400c26.5 0 48-21.5 48-48V192z"})),this.state.isRenderAriaLiveMessage&&this.renderAriaLiveRegion(),this.renderDateInput(),this.renderClearButton())}},{key:"render",value:function(){var t=this.renderCalendar();if(this.props.inline)return t;if(this.props.withPortal){var r=this.state.open?e$1.createElement($t,{enableTabLoop:this.props.enableTabLoop},e$1.createElement("div",{className:"react-datepicker__portal",tabIndex:-1,onKeyDown:this.onPortalKeyDown},t)):null;return this.state.open&&this.props.portalId&&(r=e$1.createElement(Ut,{portalId:this.props.portalId,portalHost:this.props.portalHost},r)),e$1.createElement("div",null,this.renderInputContainer(),r)}return e$1.createElement(Gt,{className:this.props.popperClassName,wrapperClassName:this.props.wrapperClassName,hidePopper:!this.isCalendarOpen(),portalId:this.props.portalId,portalHost:this.props.portalHost,popperModifiers:this.props.popperModifiers,targetComponent:this.renderInputContainer(),popperContainer:this.props.popperContainer,popperComponent:t,popperPlacement:this.props.popperPlacement,popperProps:this.props.popperProps,popperOnKeyDown:this.onPopperKeyDown,enableTabLoop:this.props.enableTabLoop})}}],[{key:"defaultProps",get:function(){return {allowSameDay:!1,dateFormat:"MM/dd/yyyy",dateFormatCalendar:"LLLL yyyy",onChange:function(){},disabled:!1,disabledKeyboardNavigation:!1,dropdownMode:"scroll",onFocus:function(){},onBlur:function(){},onKeyDown:function(){},onInputClick:function(){},onSelect:function(){},onClickOutside:function(){},onMonthChange:function(){},onCalendarOpen:function(){},onCalendarClose:function(){},preventOpenOnFocus:!1,onYearChange:function(){},onInputError:function(){},monthsShown:1,readOnly:!1,withPortal:!1,selectsDisabledDaysInRange:!1,shouldCloseOnSelect:!0,showTimeSelect:!1,showTimeInput:!1,showPreviousMonths:!1,showMonthYearPicker:!1,showFullMonthYearPicker:!1,showTwoColumnMonthYearPicker:!1,showFourColumnMonthYearPicker:!1,showYearPicker:!1,showQuarterYearPicker:!1,strictParsing:!1,timeIntervals:30,timeCaption:"Time",previousMonthAriaLabel:"Previous Month",previousMonthButtonLabel:"Previous Month",nextMonthAriaLabel:"Next Month",nextMonthButtonLabel:"Next Month",previousYearAriaLabel:"Previous Year",previousYearButtonLabel:"Previous Year",nextYearAriaLabel:"Next Year",nextYearButtonLabel:"Next Year",timeInputLabel:"Time",enableTabLoop:!0,yearItemNumber:Ne,focusSelectedMonth:!1,showPopperArrow:!0,excludeScrollbar:!0,customTimeInput:null,calendarStartDay:void 0}}}]),s}(),tr="input",rr="navigate";

	function commonjsRequire(path) {
		throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
	}

	var moment$1 = {exports: {}};

	(function (module, exports) {
	(function (global, factory) {
		    module.exports = factory() ;
		}(commonjsGlobal, (function () {
		    var hookCallback;

		    function hooks() {
		        return hookCallback.apply(null, arguments);
		    }

		    // This is done to register the method called with moment()
		    // without creating circular dependencies.
		    function setHookCallback(callback) {
		        hookCallback = callback;
		    }

		    function isArray(input) {
		        return (
		            input instanceof Array ||
		            Object.prototype.toString.call(input) === '[object Array]'
		        );
		    }

		    function isObject(input) {
		        // IE8 will treat undefined and null as object if it wasn't for
		        // input != null
		        return (
		            input != null &&
		            Object.prototype.toString.call(input) === '[object Object]'
		        );
		    }

		    function hasOwnProp(a, b) {
		        return Object.prototype.hasOwnProperty.call(a, b);
		    }

		    function isObjectEmpty(obj) {
		        if (Object.getOwnPropertyNames) {
		            return Object.getOwnPropertyNames(obj).length === 0;
		        } else {
		            var k;
		            for (k in obj) {
		                if (hasOwnProp(obj, k)) {
		                    return false;
		                }
		            }
		            return true;
		        }
		    }

		    function isUndefined(input) {
		        return input === void 0;
		    }

		    function isNumber(input) {
		        return (
		            typeof input === 'number' ||
		            Object.prototype.toString.call(input) === '[object Number]'
		        );
		    }

		    function isDate(input) {
		        return (
		            input instanceof Date ||
		            Object.prototype.toString.call(input) === '[object Date]'
		        );
		    }

		    function map(arr, fn) {
		        var res = [],
		            i,
		            arrLen = arr.length;
		        for (i = 0; i < arrLen; ++i) {
		            res.push(fn(arr[i], i));
		        }
		        return res;
		    }

		    function extend(a, b) {
		        for (var i in b) {
		            if (hasOwnProp(b, i)) {
		                a[i] = b[i];
		            }
		        }

		        if (hasOwnProp(b, 'toString')) {
		            a.toString = b.toString;
		        }

		        if (hasOwnProp(b, 'valueOf')) {
		            a.valueOf = b.valueOf;
		        }

		        return a;
		    }

		    function createUTC(input, format, locale, strict) {
		        return createLocalOrUTC(input, format, locale, strict, true).utc();
		    }

		    function defaultParsingFlags() {
		        // We need to deep clone this object.
		        return {
		            empty: false,
		            unusedTokens: [],
		            unusedInput: [],
		            overflow: -2,
		            charsLeftOver: 0,
		            nullInput: false,
		            invalidEra: null,
		            invalidMonth: null,
		            invalidFormat: false,
		            userInvalidated: false,
		            iso: false,
		            parsedDateParts: [],
		            era: null,
		            meridiem: null,
		            rfc2822: false,
		            weekdayMismatch: false,
		        };
		    }

		    function getParsingFlags(m) {
		        if (m._pf == null) {
		            m._pf = defaultParsingFlags();
		        }
		        return m._pf;
		    }

		    var some;
		    if (Array.prototype.some) {
		        some = Array.prototype.some;
		    } else {
		        some = function (fun) {
		            var t = Object(this),
		                len = t.length >>> 0,
		                i;

		            for (i = 0; i < len; i++) {
		                if (i in t && fun.call(this, t[i], i, t)) {
		                    return true;
		                }
		            }

		            return false;
		        };
		    }

		    function isValid(m) {
		        if (m._isValid == null) {
		            var flags = getParsingFlags(m),
		                parsedParts = some.call(flags.parsedDateParts, function (i) {
		                    return i != null;
		                }),
		                isNowValid =
		                    !isNaN(m._d.getTime()) &&
		                    flags.overflow < 0 &&
		                    !flags.empty &&
		                    !flags.invalidEra &&
		                    !flags.invalidMonth &&
		                    !flags.invalidWeekday &&
		                    !flags.weekdayMismatch &&
		                    !flags.nullInput &&
		                    !flags.invalidFormat &&
		                    !flags.userInvalidated &&
		                    (!flags.meridiem || (flags.meridiem && parsedParts));

		            if (m._strict) {
		                isNowValid =
		                    isNowValid &&
		                    flags.charsLeftOver === 0 &&
		                    flags.unusedTokens.length === 0 &&
		                    flags.bigHour === undefined;
		            }

		            if (Object.isFrozen == null || !Object.isFrozen(m)) {
		                m._isValid = isNowValid;
		            } else {
		                return isNowValid;
		            }
		        }
		        return m._isValid;
		    }

		    function createInvalid(flags) {
		        var m = createUTC(NaN);
		        if (flags != null) {
		            extend(getParsingFlags(m), flags);
		        } else {
		            getParsingFlags(m).userInvalidated = true;
		        }

		        return m;
		    }

		    // Plugins that add properties should also add the key here (null value),
		    // so we can properly clone ourselves.
		    var momentProperties = (hooks.momentProperties = []),
		        updateInProgress = false;

		    function copyConfig(to, from) {
		        var i,
		            prop,
		            val,
		            momentPropertiesLen = momentProperties.length;

		        if (!isUndefined(from._isAMomentObject)) {
		            to._isAMomentObject = from._isAMomentObject;
		        }
		        if (!isUndefined(from._i)) {
		            to._i = from._i;
		        }
		        if (!isUndefined(from._f)) {
		            to._f = from._f;
		        }
		        if (!isUndefined(from._l)) {
		            to._l = from._l;
		        }
		        if (!isUndefined(from._strict)) {
		            to._strict = from._strict;
		        }
		        if (!isUndefined(from._tzm)) {
		            to._tzm = from._tzm;
		        }
		        if (!isUndefined(from._isUTC)) {
		            to._isUTC = from._isUTC;
		        }
		        if (!isUndefined(from._offset)) {
		            to._offset = from._offset;
		        }
		        if (!isUndefined(from._pf)) {
		            to._pf = getParsingFlags(from);
		        }
		        if (!isUndefined(from._locale)) {
		            to._locale = from._locale;
		        }

		        if (momentPropertiesLen > 0) {
		            for (i = 0; i < momentPropertiesLen; i++) {
		                prop = momentProperties[i];
		                val = from[prop];
		                if (!isUndefined(val)) {
		                    to[prop] = val;
		                }
		            }
		        }

		        return to;
		    }

		    // Moment prototype object
		    function Moment(config) {
		        copyConfig(this, config);
		        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
		        if (!this.isValid()) {
		            this._d = new Date(NaN);
		        }
		        // Prevent infinite loop in case updateOffset creates new moment
		        // objects.
		        if (updateInProgress === false) {
		            updateInProgress = true;
		            hooks.updateOffset(this);
		            updateInProgress = false;
		        }
		    }

		    function isMoment(obj) {
		        return (
		            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
		        );
		    }

		    function warn(msg) {
		        if (
		            hooks.suppressDeprecationWarnings === false &&
		            typeof console !== 'undefined' &&
		            console.warn
		        ) {
		            console.warn('Deprecation warning: ' + msg);
		        }
		    }

		    function deprecate(msg, fn) {
		        var firstTime = true;

		        return extend(function () {
		            if (hooks.deprecationHandler != null) {
		                hooks.deprecationHandler(null, msg);
		            }
		            if (firstTime) {
		                var args = [],
		                    arg,
		                    i,
		                    key,
		                    argLen = arguments.length;
		                for (i = 0; i < argLen; i++) {
		                    arg = '';
		                    if (typeof arguments[i] === 'object') {
		                        arg += '\n[' + i + '] ';
		                        for (key in arguments[0]) {
		                            if (hasOwnProp(arguments[0], key)) {
		                                arg += key + ': ' + arguments[0][key] + ', ';
		                            }
		                        }
		                        arg = arg.slice(0, -2); // Remove trailing comma and space
		                    } else {
		                        arg = arguments[i];
		                    }
		                    args.push(arg);
		                }
		                warn(
		                    msg +
		                        '\nArguments: ' +
		                        Array.prototype.slice.call(args).join('') +
		                        '\n' +
		                        new Error().stack
		                );
		                firstTime = false;
		            }
		            return fn.apply(this, arguments);
		        }, fn);
		    }

		    var deprecations = {};

		    function deprecateSimple(name, msg) {
		        if (hooks.deprecationHandler != null) {
		            hooks.deprecationHandler(name, msg);
		        }
		        if (!deprecations[name]) {
		            warn(msg);
		            deprecations[name] = true;
		        }
		    }

		    hooks.suppressDeprecationWarnings = false;
		    hooks.deprecationHandler = null;

		    function isFunction(input) {
		        return (
		            (typeof Function !== 'undefined' && input instanceof Function) ||
		            Object.prototype.toString.call(input) === '[object Function]'
		        );
		    }

		    function set(config) {
		        var prop, i;
		        for (i in config) {
		            if (hasOwnProp(config, i)) {
		                prop = config[i];
		                if (isFunction(prop)) {
		                    this[i] = prop;
		                } else {
		                    this['_' + i] = prop;
		                }
		            }
		        }
		        this._config = config;
		        // Lenient ordinal parsing accepts just a number in addition to
		        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
		        // TODO: Remove "ordinalParse" fallback in next major release.
		        this._dayOfMonthOrdinalParseLenient = new RegExp(
		            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
		                '|' +
		                /\d{1,2}/.source
		        );
		    }

		    function mergeConfigs(parentConfig, childConfig) {
		        var res = extend({}, parentConfig),
		            prop;
		        for (prop in childConfig) {
		            if (hasOwnProp(childConfig, prop)) {
		                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
		                    res[prop] = {};
		                    extend(res[prop], parentConfig[prop]);
		                    extend(res[prop], childConfig[prop]);
		                } else if (childConfig[prop] != null) {
		                    res[prop] = childConfig[prop];
		                } else {
		                    delete res[prop];
		                }
		            }
		        }
		        for (prop in parentConfig) {
		            if (
		                hasOwnProp(parentConfig, prop) &&
		                !hasOwnProp(childConfig, prop) &&
		                isObject(parentConfig[prop])
		            ) {
		                // make sure changes to properties don't modify parent config
		                res[prop] = extend({}, res[prop]);
		            }
		        }
		        return res;
		    }

		    function Locale(config) {
		        if (config != null) {
		            this.set(config);
		        }
		    }

		    var keys;

		    if (Object.keys) {
		        keys = Object.keys;
		    } else {
		        keys = function (obj) {
		            var i,
		                res = [];
		            for (i in obj) {
		                if (hasOwnProp(obj, i)) {
		                    res.push(i);
		                }
		            }
		            return res;
		        };
		    }

		    var defaultCalendar = {
		        sameDay: '[Today at] LT',
		        nextDay: '[Tomorrow at] LT',
		        nextWeek: 'dddd [at] LT',
		        lastDay: '[Yesterday at] LT',
		        lastWeek: '[Last] dddd [at] LT',
		        sameElse: 'L',
		    };

		    function calendar(key, mom, now) {
		        var output = this._calendar[key] || this._calendar['sameElse'];
		        return isFunction(output) ? output.call(mom, now) : output;
		    }

		    function zeroFill(number, targetLength, forceSign) {
		        var absNumber = '' + Math.abs(number),
		            zerosToFill = targetLength - absNumber.length,
		            sign = number >= 0;
		        return (
		            (sign ? (forceSign ? '+' : '') : '-') +
		            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
		            absNumber
		        );
		    }

		    var formattingTokens =
		            /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
		        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
		        formatFunctions = {},
		        formatTokenFunctions = {};

		    // token:    'M'
		    // padded:   ['MM', 2]
		    // ordinal:  'Mo'
		    // callback: function () { this.month() + 1 }
		    function addFormatToken(token, padded, ordinal, callback) {
		        var func = callback;
		        if (typeof callback === 'string') {
		            func = function () {
		                return this[callback]();
		            };
		        }
		        if (token) {
		            formatTokenFunctions[token] = func;
		        }
		        if (padded) {
		            formatTokenFunctions[padded[0]] = function () {
		                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
		            };
		        }
		        if (ordinal) {
		            formatTokenFunctions[ordinal] = function () {
		                return this.localeData().ordinal(
		                    func.apply(this, arguments),
		                    token
		                );
		            };
		        }
		    }

		    function removeFormattingTokens(input) {
		        if (input.match(/\[[\s\S]/)) {
		            return input.replace(/^\[|\]$/g, '');
		        }
		        return input.replace(/\\/g, '');
		    }

		    function makeFormatFunction(format) {
		        var array = format.match(formattingTokens),
		            i,
		            length;

		        for (i = 0, length = array.length; i < length; i++) {
		            if (formatTokenFunctions[array[i]]) {
		                array[i] = formatTokenFunctions[array[i]];
		            } else {
		                array[i] = removeFormattingTokens(array[i]);
		            }
		        }

		        return function (mom) {
		            var output = '',
		                i;
		            for (i = 0; i < length; i++) {
		                output += isFunction(array[i])
		                    ? array[i].call(mom, format)
		                    : array[i];
		            }
		            return output;
		        };
		    }

		    // format date using native date object
		    function formatMoment(m, format) {
		        if (!m.isValid()) {
		            return m.localeData().invalidDate();
		        }

		        format = expandFormat(format, m.localeData());
		        formatFunctions[format] =
		            formatFunctions[format] || makeFormatFunction(format);

		        return formatFunctions[format](m);
		    }

		    function expandFormat(format, locale) {
		        var i = 5;

		        function replaceLongDateFormatTokens(input) {
		            return locale.longDateFormat(input) || input;
		        }

		        localFormattingTokens.lastIndex = 0;
		        while (i >= 0 && localFormattingTokens.test(format)) {
		            format = format.replace(
		                localFormattingTokens,
		                replaceLongDateFormatTokens
		            );
		            localFormattingTokens.lastIndex = 0;
		            i -= 1;
		        }

		        return format;
		    }

		    var defaultLongDateFormat = {
		        LTS: 'h:mm:ss A',
		        LT: 'h:mm A',
		        L: 'MM/DD/YYYY',
		        LL: 'MMMM D, YYYY',
		        LLL: 'MMMM D, YYYY h:mm A',
		        LLLL: 'dddd, MMMM D, YYYY h:mm A',
		    };

		    function longDateFormat(key) {
		        var format = this._longDateFormat[key],
		            formatUpper = this._longDateFormat[key.toUpperCase()];

		        if (format || !formatUpper) {
		            return format;
		        }

		        this._longDateFormat[key] = formatUpper
		            .match(formattingTokens)
		            .map(function (tok) {
		                if (
		                    tok === 'MMMM' ||
		                    tok === 'MM' ||
		                    tok === 'DD' ||
		                    tok === 'dddd'
		                ) {
		                    return tok.slice(1);
		                }
		                return tok;
		            })
		            .join('');

		        return this._longDateFormat[key];
		    }

		    var defaultInvalidDate = 'Invalid date';

		    function invalidDate() {
		        return this._invalidDate;
		    }

		    var defaultOrdinal = '%d',
		        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

		    function ordinal(number) {
		        return this._ordinal.replace('%d', number);
		    }

		    var defaultRelativeTime = {
		        future: 'in %s',
		        past: '%s ago',
		        s: 'a few seconds',
		        ss: '%d seconds',
		        m: 'a minute',
		        mm: '%d minutes',
		        h: 'an hour',
		        hh: '%d hours',
		        d: 'a day',
		        dd: '%d days',
		        w: 'a week',
		        ww: '%d weeks',
		        M: 'a month',
		        MM: '%d months',
		        y: 'a year',
		        yy: '%d years',
		    };

		    function relativeTime(number, withoutSuffix, string, isFuture) {
		        var output = this._relativeTime[string];
		        return isFunction(output)
		            ? output(number, withoutSuffix, string, isFuture)
		            : output.replace(/%d/i, number);
		    }

		    function pastFuture(diff, output) {
		        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
		        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
		    }

		    var aliases = {};

		    function addUnitAlias(unit, shorthand) {
		        var lowerCase = unit.toLowerCase();
		        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
		    }

		    function normalizeUnits(units) {
		        return typeof units === 'string'
		            ? aliases[units] || aliases[units.toLowerCase()]
		            : undefined;
		    }

		    function normalizeObjectUnits(inputObject) {
		        var normalizedInput = {},
		            normalizedProp,
		            prop;

		        for (prop in inputObject) {
		            if (hasOwnProp(inputObject, prop)) {
		                normalizedProp = normalizeUnits(prop);
		                if (normalizedProp) {
		                    normalizedInput[normalizedProp] = inputObject[prop];
		                }
		            }
		        }

		        return normalizedInput;
		    }

		    var priorities = {};

		    function addUnitPriority(unit, priority) {
		        priorities[unit] = priority;
		    }

		    function getPrioritizedUnits(unitsObj) {
		        var units = [],
		            u;
		        for (u in unitsObj) {
		            if (hasOwnProp(unitsObj, u)) {
		                units.push({ unit: u, priority: priorities[u] });
		            }
		        }
		        units.sort(function (a, b) {
		            return a.priority - b.priority;
		        });
		        return units;
		    }

		    function isLeapYear(year) {
		        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
		    }

		    function absFloor(number) {
		        if (number < 0) {
		            // -0 -> 0
		            return Math.ceil(number) || 0;
		        } else {
		            return Math.floor(number);
		        }
		    }

		    function toInt(argumentForCoercion) {
		        var coercedNumber = +argumentForCoercion,
		            value = 0;

		        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
		            value = absFloor(coercedNumber);
		        }

		        return value;
		    }

		    function makeGetSet(unit, keepTime) {
		        return function (value) {
		            if (value != null) {
		                set$1(this, unit, value);
		                hooks.updateOffset(this, keepTime);
		                return this;
		            } else {
		                return get(this, unit);
		            }
		        };
		    }

		    function get(mom, unit) {
		        return mom.isValid()
		            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
		            : NaN;
		    }

		    function set$1(mom, unit, value) {
		        if (mom.isValid() && !isNaN(value)) {
		            if (
		                unit === 'FullYear' &&
		                isLeapYear(mom.year()) &&
		                mom.month() === 1 &&
		                mom.date() === 29
		            ) {
		                value = toInt(value);
		                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
		                    value,
		                    mom.month(),
		                    daysInMonth(value, mom.month())
		                );
		            } else {
		                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
		            }
		        }
		    }

		    // MOMENTS

		    function stringGet(units) {
		        units = normalizeUnits(units);
		        if (isFunction(this[units])) {
		            return this[units]();
		        }
		        return this;
		    }

		    function stringSet(units, value) {
		        if (typeof units === 'object') {
		            units = normalizeObjectUnits(units);
		            var prioritized = getPrioritizedUnits(units),
		                i,
		                prioritizedLen = prioritized.length;
		            for (i = 0; i < prioritizedLen; i++) {
		                this[prioritized[i].unit](units[prioritized[i].unit]);
		            }
		        } else {
		            units = normalizeUnits(units);
		            if (isFunction(this[units])) {
		                return this[units](value);
		            }
		        }
		        return this;
		    }

		    var match1 = /\d/, //       0 - 9
		        match2 = /\d\d/, //      00 - 99
		        match3 = /\d{3}/, //     000 - 999
		        match4 = /\d{4}/, //    0000 - 9999
		        match6 = /[+-]?\d{6}/, // -999999 - 999999
		        match1to2 = /\d\d?/, //       0 - 99
		        match3to4 = /\d\d\d\d?/, //     999 - 9999
		        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
		        match1to3 = /\d{1,3}/, //       0 - 999
		        match1to4 = /\d{1,4}/, //       0 - 9999
		        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
		        matchUnsigned = /\d+/, //       0 - inf
		        matchSigned = /[+-]?\d+/, //    -inf - inf
		        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
		        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
		        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
		        // any word (or two) characters or numbers including two/three word month in arabic.
		        // includes scottish gaelic two word and hyphenated months
		        matchWord =
		            /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
		        regexes;

		    regexes = {};

		    function addRegexToken(token, regex, strictRegex) {
		        regexes[token] = isFunction(regex)
		            ? regex
		            : function (isStrict, localeData) {
		                  return isStrict && strictRegex ? strictRegex : regex;
		              };
		    }

		    function getParseRegexForToken(token, config) {
		        if (!hasOwnProp(regexes, token)) {
		            return new RegExp(unescapeFormat(token));
		        }

		        return regexes[token](config._strict, config._locale);
		    }

		    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
		    function unescapeFormat(s) {
		        return regexEscape(
		            s
		                .replace('\\', '')
		                .replace(
		                    /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
		                    function (matched, p1, p2, p3, p4) {
		                        return p1 || p2 || p3 || p4;
		                    }
		                )
		        );
		    }

		    function regexEscape(s) {
		        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
		    }

		    var tokens = {};

		    function addParseToken(token, callback) {
		        var i,
		            func = callback,
		            tokenLen;
		        if (typeof token === 'string') {
		            token = [token];
		        }
		        if (isNumber(callback)) {
		            func = function (input, array) {
		                array[callback] = toInt(input);
		            };
		        }
		        tokenLen = token.length;
		        for (i = 0; i < tokenLen; i++) {
		            tokens[token[i]] = func;
		        }
		    }

		    function addWeekParseToken(token, callback) {
		        addParseToken(token, function (input, array, config, token) {
		            config._w = config._w || {};
		            callback(input, config._w, config, token);
		        });
		    }

		    function addTimeToArrayFromToken(token, input, config) {
		        if (input != null && hasOwnProp(tokens, token)) {
		            tokens[token](input, config._a, config, token);
		        }
		    }

		    var YEAR = 0,
		        MONTH = 1,
		        DATE = 2,
		        HOUR = 3,
		        MINUTE = 4,
		        SECOND = 5,
		        MILLISECOND = 6,
		        WEEK = 7,
		        WEEKDAY = 8;

		    function mod(n, x) {
		        return ((n % x) + x) % x;
		    }

		    var indexOf;

		    if (Array.prototype.indexOf) {
		        indexOf = Array.prototype.indexOf;
		    } else {
		        indexOf = function (o) {
		            // I know
		            var i;
		            for (i = 0; i < this.length; ++i) {
		                if (this[i] === o) {
		                    return i;
		                }
		            }
		            return -1;
		        };
		    }

		    function daysInMonth(year, month) {
		        if (isNaN(year) || isNaN(month)) {
		            return NaN;
		        }
		        var modMonth = mod(month, 12);
		        year += (month - modMonth) / 12;
		        return modMonth === 1
		            ? isLeapYear(year)
		                ? 29
		                : 28
		            : 31 - ((modMonth % 7) % 2);
		    }

		    // FORMATTING

		    addFormatToken('M', ['MM', 2], 'Mo', function () {
		        return this.month() + 1;
		    });

		    addFormatToken('MMM', 0, 0, function (format) {
		        return this.localeData().monthsShort(this, format);
		    });

		    addFormatToken('MMMM', 0, 0, function (format) {
		        return this.localeData().months(this, format);
		    });

		    // ALIASES

		    addUnitAlias('month', 'M');

		    // PRIORITY

		    addUnitPriority('month', 8);

		    // PARSING

		    addRegexToken('M', match1to2);
		    addRegexToken('MM', match1to2, match2);
		    addRegexToken('MMM', function (isStrict, locale) {
		        return locale.monthsShortRegex(isStrict);
		    });
		    addRegexToken('MMMM', function (isStrict, locale) {
		        return locale.monthsRegex(isStrict);
		    });

		    addParseToken(['M', 'MM'], function (input, array) {
		        array[MONTH] = toInt(input) - 1;
		    });

		    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
		        var month = config._locale.monthsParse(input, token, config._strict);
		        // if we didn't find a month name, mark the date as invalid.
		        if (month != null) {
		            array[MONTH] = month;
		        } else {
		            getParsingFlags(config).invalidMonth = input;
		        }
		    });

		    // LOCALES

		    var defaultLocaleMonths =
		            'January_February_March_April_May_June_July_August_September_October_November_December'.split(
		                '_'
		            ),
		        defaultLocaleMonthsShort =
		            'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
		        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
		        defaultMonthsShortRegex = matchWord,
		        defaultMonthsRegex = matchWord;

		    function localeMonths(m, format) {
		        if (!m) {
		            return isArray(this._months)
		                ? this._months
		                : this._months['standalone'];
		        }
		        return isArray(this._months)
		            ? this._months[m.month()]
		            : this._months[
		                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
		                      ? 'format'
		                      : 'standalone'
		              ][m.month()];
		    }

		    function localeMonthsShort(m, format) {
		        if (!m) {
		            return isArray(this._monthsShort)
		                ? this._monthsShort
		                : this._monthsShort['standalone'];
		        }
		        return isArray(this._monthsShort)
		            ? this._monthsShort[m.month()]
		            : this._monthsShort[
		                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
		              ][m.month()];
		    }

		    function handleStrictParse(monthName, format, strict) {
		        var i,
		            ii,
		            mom,
		            llc = monthName.toLocaleLowerCase();
		        if (!this._monthsParse) {
		            // this is not used
		            this._monthsParse = [];
		            this._longMonthsParse = [];
		            this._shortMonthsParse = [];
		            for (i = 0; i < 12; ++i) {
		                mom = createUTC([2000, i]);
		                this._shortMonthsParse[i] = this.monthsShort(
		                    mom,
		                    ''
		                ).toLocaleLowerCase();
		                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
		            }
		        }

		        if (strict) {
		            if (format === 'MMM') {
		                ii = indexOf.call(this._shortMonthsParse, llc);
		                return ii !== -1 ? ii : null;
		            } else {
		                ii = indexOf.call(this._longMonthsParse, llc);
		                return ii !== -1 ? ii : null;
		            }
		        } else {
		            if (format === 'MMM') {
		                ii = indexOf.call(this._shortMonthsParse, llc);
		                if (ii !== -1) {
		                    return ii;
		                }
		                ii = indexOf.call(this._longMonthsParse, llc);
		                return ii !== -1 ? ii : null;
		            } else {
		                ii = indexOf.call(this._longMonthsParse, llc);
		                if (ii !== -1) {
		                    return ii;
		                }
		                ii = indexOf.call(this._shortMonthsParse, llc);
		                return ii !== -1 ? ii : null;
		            }
		        }
		    }

		    function localeMonthsParse(monthName, format, strict) {
		        var i, mom, regex;

		        if (this._monthsParseExact) {
		            return handleStrictParse.call(this, monthName, format, strict);
		        }

		        if (!this._monthsParse) {
		            this._monthsParse = [];
		            this._longMonthsParse = [];
		            this._shortMonthsParse = [];
		        }

		        // TODO: add sorting
		        // Sorting makes sure if one month (or abbr) is a prefix of another
		        // see sorting in computeMonthsParse
		        for (i = 0; i < 12; i++) {
		            // make the regex if we don't have it already
		            mom = createUTC([2000, i]);
		            if (strict && !this._longMonthsParse[i]) {
		                this._longMonthsParse[i] = new RegExp(
		                    '^' + this.months(mom, '').replace('.', '') + '$',
		                    'i'
		                );
		                this._shortMonthsParse[i] = new RegExp(
		                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
		                    'i'
		                );
		            }
		            if (!strict && !this._monthsParse[i]) {
		                regex =
		                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
		                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
		            }
		            // test the regex
		            if (
		                strict &&
		                format === 'MMMM' &&
		                this._longMonthsParse[i].test(monthName)
		            ) {
		                return i;
		            } else if (
		                strict &&
		                format === 'MMM' &&
		                this._shortMonthsParse[i].test(monthName)
		            ) {
		                return i;
		            } else if (!strict && this._monthsParse[i].test(monthName)) {
		                return i;
		            }
		        }
		    }

		    // MOMENTS

		    function setMonth(mom, value) {
		        var dayOfMonth;

		        if (!mom.isValid()) {
		            // No op
		            return mom;
		        }

		        if (typeof value === 'string') {
		            if (/^\d+$/.test(value)) {
		                value = toInt(value);
		            } else {
		                value = mom.localeData().monthsParse(value);
		                // TODO: Another silent failure?
		                if (!isNumber(value)) {
		                    return mom;
		                }
		            }
		        }

		        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
		        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
		        return mom;
		    }

		    function getSetMonth(value) {
		        if (value != null) {
		            setMonth(this, value);
		            hooks.updateOffset(this, true);
		            return this;
		        } else {
		            return get(this, 'Month');
		        }
		    }

		    function getDaysInMonth() {
		        return daysInMonth(this.year(), this.month());
		    }

		    function monthsShortRegex(isStrict) {
		        if (this._monthsParseExact) {
		            if (!hasOwnProp(this, '_monthsRegex')) {
		                computeMonthsParse.call(this);
		            }
		            if (isStrict) {
		                return this._monthsShortStrictRegex;
		            } else {
		                return this._monthsShortRegex;
		            }
		        } else {
		            if (!hasOwnProp(this, '_monthsShortRegex')) {
		                this._monthsShortRegex = defaultMonthsShortRegex;
		            }
		            return this._monthsShortStrictRegex && isStrict
		                ? this._monthsShortStrictRegex
		                : this._monthsShortRegex;
		        }
		    }

		    function monthsRegex(isStrict) {
		        if (this._monthsParseExact) {
		            if (!hasOwnProp(this, '_monthsRegex')) {
		                computeMonthsParse.call(this);
		            }
		            if (isStrict) {
		                return this._monthsStrictRegex;
		            } else {
		                return this._monthsRegex;
		            }
		        } else {
		            if (!hasOwnProp(this, '_monthsRegex')) {
		                this._monthsRegex = defaultMonthsRegex;
		            }
		            return this._monthsStrictRegex && isStrict
		                ? this._monthsStrictRegex
		                : this._monthsRegex;
		        }
		    }

		    function computeMonthsParse() {
		        function cmpLenRev(a, b) {
		            return b.length - a.length;
		        }

		        var shortPieces = [],
		            longPieces = [],
		            mixedPieces = [],
		            i,
		            mom;
		        for (i = 0; i < 12; i++) {
		            // make the regex if we don't have it already
		            mom = createUTC([2000, i]);
		            shortPieces.push(this.monthsShort(mom, ''));
		            longPieces.push(this.months(mom, ''));
		            mixedPieces.push(this.months(mom, ''));
		            mixedPieces.push(this.monthsShort(mom, ''));
		        }
		        // Sorting makes sure if one month (or abbr) is a prefix of another it
		        // will match the longer piece.
		        shortPieces.sort(cmpLenRev);
		        longPieces.sort(cmpLenRev);
		        mixedPieces.sort(cmpLenRev);
		        for (i = 0; i < 12; i++) {
		            shortPieces[i] = regexEscape(shortPieces[i]);
		            longPieces[i] = regexEscape(longPieces[i]);
		        }
		        for (i = 0; i < 24; i++) {
		            mixedPieces[i] = regexEscape(mixedPieces[i]);
		        }

		        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
		        this._monthsShortRegex = this._monthsRegex;
		        this._monthsStrictRegex = new RegExp(
		            '^(' + longPieces.join('|') + ')',
		            'i'
		        );
		        this._monthsShortStrictRegex = new RegExp(
		            '^(' + shortPieces.join('|') + ')',
		            'i'
		        );
		    }

		    // FORMATTING

		    addFormatToken('Y', 0, 0, function () {
		        var y = this.year();
		        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
		    });

		    addFormatToken(0, ['YY', 2], 0, function () {
		        return this.year() % 100;
		    });

		    addFormatToken(0, ['YYYY', 4], 0, 'year');
		    addFormatToken(0, ['YYYYY', 5], 0, 'year');
		    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

		    // ALIASES

		    addUnitAlias('year', 'y');

		    // PRIORITIES

		    addUnitPriority('year', 1);

		    // PARSING

		    addRegexToken('Y', matchSigned);
		    addRegexToken('YY', match1to2, match2);
		    addRegexToken('YYYY', match1to4, match4);
		    addRegexToken('YYYYY', match1to6, match6);
		    addRegexToken('YYYYYY', match1to6, match6);

		    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
		    addParseToken('YYYY', function (input, array) {
		        array[YEAR] =
		            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
		    });
		    addParseToken('YY', function (input, array) {
		        array[YEAR] = hooks.parseTwoDigitYear(input);
		    });
		    addParseToken('Y', function (input, array) {
		        array[YEAR] = parseInt(input, 10);
		    });

		    // HELPERS

		    function daysInYear(year) {
		        return isLeapYear(year) ? 366 : 365;
		    }

		    // HOOKS

		    hooks.parseTwoDigitYear = function (input) {
		        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
		    };

		    // MOMENTS

		    var getSetYear = makeGetSet('FullYear', true);

		    function getIsLeapYear() {
		        return isLeapYear(this.year());
		    }

		    function createDate(y, m, d, h, M, s, ms) {
		        // can't just apply() to create a date:
		        // https://stackoverflow.com/q/181348
		        var date;
		        // the date constructor remaps years 0-99 to 1900-1999
		        if (y < 100 && y >= 0) {
		            // preserve leap years using a full 400 year cycle, then reset
		            date = new Date(y + 400, m, d, h, M, s, ms);
		            if (isFinite(date.getFullYear())) {
		                date.setFullYear(y);
		            }
		        } else {
		            date = new Date(y, m, d, h, M, s, ms);
		        }

		        return date;
		    }

		    function createUTCDate(y) {
		        var date, args;
		        // the Date.UTC function remaps years 0-99 to 1900-1999
		        if (y < 100 && y >= 0) {
		            args = Array.prototype.slice.call(arguments);
		            // preserve leap years using a full 400 year cycle, then reset
		            args[0] = y + 400;
		            date = new Date(Date.UTC.apply(null, args));
		            if (isFinite(date.getUTCFullYear())) {
		                date.setUTCFullYear(y);
		            }
		        } else {
		            date = new Date(Date.UTC.apply(null, arguments));
		        }

		        return date;
		    }

		    // start-of-first-week - start-of-year
		    function firstWeekOffset(year, dow, doy) {
		        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
		            fwd = 7 + dow - doy,
		            // first-week day local weekday -- which local weekday is fwd
		            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

		        return -fwdlw + fwd - 1;
		    }

		    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
		    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
		        var localWeekday = (7 + weekday - dow) % 7,
		            weekOffset = firstWeekOffset(year, dow, doy),
		            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
		            resYear,
		            resDayOfYear;

		        if (dayOfYear <= 0) {
		            resYear = year - 1;
		            resDayOfYear = daysInYear(resYear) + dayOfYear;
		        } else if (dayOfYear > daysInYear(year)) {
		            resYear = year + 1;
		            resDayOfYear = dayOfYear - daysInYear(year);
		        } else {
		            resYear = year;
		            resDayOfYear = dayOfYear;
		        }

		        return {
		            year: resYear,
		            dayOfYear: resDayOfYear,
		        };
		    }

		    function weekOfYear(mom, dow, doy) {
		        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
		            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
		            resWeek,
		            resYear;

		        if (week < 1) {
		            resYear = mom.year() - 1;
		            resWeek = week + weeksInYear(resYear, dow, doy);
		        } else if (week > weeksInYear(mom.year(), dow, doy)) {
		            resWeek = week - weeksInYear(mom.year(), dow, doy);
		            resYear = mom.year() + 1;
		        } else {
		            resYear = mom.year();
		            resWeek = week;
		        }

		        return {
		            week: resWeek,
		            year: resYear,
		        };
		    }

		    function weeksInYear(year, dow, doy) {
		        var weekOffset = firstWeekOffset(year, dow, doy),
		            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
		        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
		    }

		    // FORMATTING

		    addFormatToken('w', ['ww', 2], 'wo', 'week');
		    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

		    // ALIASES

		    addUnitAlias('week', 'w');
		    addUnitAlias('isoWeek', 'W');

		    // PRIORITIES

		    addUnitPriority('week', 5);
		    addUnitPriority('isoWeek', 5);

		    // PARSING

		    addRegexToken('w', match1to2);
		    addRegexToken('ww', match1to2, match2);
		    addRegexToken('W', match1to2);
		    addRegexToken('WW', match1to2, match2);

		    addWeekParseToken(
		        ['w', 'ww', 'W', 'WW'],
		        function (input, week, config, token) {
		            week[token.substr(0, 1)] = toInt(input);
		        }
		    );

		    // HELPERS

		    // LOCALES

		    function localeWeek(mom) {
		        return weekOfYear(mom, this._week.dow, this._week.doy).week;
		    }

		    var defaultLocaleWeek = {
		        dow: 0, // Sunday is the first day of the week.
		        doy: 6, // The week that contains Jan 6th is the first week of the year.
		    };

		    function localeFirstDayOfWeek() {
		        return this._week.dow;
		    }

		    function localeFirstDayOfYear() {
		        return this._week.doy;
		    }

		    // MOMENTS

		    function getSetWeek(input) {
		        var week = this.localeData().week(this);
		        return input == null ? week : this.add((input - week) * 7, 'd');
		    }

		    function getSetISOWeek(input) {
		        var week = weekOfYear(this, 1, 4).week;
		        return input == null ? week : this.add((input - week) * 7, 'd');
		    }

		    // FORMATTING

		    addFormatToken('d', 0, 'do', 'day');

		    addFormatToken('dd', 0, 0, function (format) {
		        return this.localeData().weekdaysMin(this, format);
		    });

		    addFormatToken('ddd', 0, 0, function (format) {
		        return this.localeData().weekdaysShort(this, format);
		    });

		    addFormatToken('dddd', 0, 0, function (format) {
		        return this.localeData().weekdays(this, format);
		    });

		    addFormatToken('e', 0, 0, 'weekday');
		    addFormatToken('E', 0, 0, 'isoWeekday');

		    // ALIASES

		    addUnitAlias('day', 'd');
		    addUnitAlias('weekday', 'e');
		    addUnitAlias('isoWeekday', 'E');

		    // PRIORITY
		    addUnitPriority('day', 11);
		    addUnitPriority('weekday', 11);
		    addUnitPriority('isoWeekday', 11);

		    // PARSING

		    addRegexToken('d', match1to2);
		    addRegexToken('e', match1to2);
		    addRegexToken('E', match1to2);
		    addRegexToken('dd', function (isStrict, locale) {
		        return locale.weekdaysMinRegex(isStrict);
		    });
		    addRegexToken('ddd', function (isStrict, locale) {
		        return locale.weekdaysShortRegex(isStrict);
		    });
		    addRegexToken('dddd', function (isStrict, locale) {
		        return locale.weekdaysRegex(isStrict);
		    });

		    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
		        var weekday = config._locale.weekdaysParse(input, token, config._strict);
		        // if we didn't get a weekday name, mark the date as invalid
		        if (weekday != null) {
		            week.d = weekday;
		        } else {
		            getParsingFlags(config).invalidWeekday = input;
		        }
		    });

		    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
		        week[token] = toInt(input);
		    });

		    // HELPERS

		    function parseWeekday(input, locale) {
		        if (typeof input !== 'string') {
		            return input;
		        }

		        if (!isNaN(input)) {
		            return parseInt(input, 10);
		        }

		        input = locale.weekdaysParse(input);
		        if (typeof input === 'number') {
		            return input;
		        }

		        return null;
		    }

		    function parseIsoWeekday(input, locale) {
		        if (typeof input === 'string') {
		            return locale.weekdaysParse(input) % 7 || 7;
		        }
		        return isNaN(input) ? null : input;
		    }

		    // LOCALES
		    function shiftWeekdays(ws, n) {
		        return ws.slice(n, 7).concat(ws.slice(0, n));
		    }

		    var defaultLocaleWeekdays =
		            'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
		        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
		        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
		        defaultWeekdaysRegex = matchWord,
		        defaultWeekdaysShortRegex = matchWord,
		        defaultWeekdaysMinRegex = matchWord;

		    function localeWeekdays(m, format) {
		        var weekdays = isArray(this._weekdays)
		            ? this._weekdays
		            : this._weekdays[
		                  m && m !== true && this._weekdays.isFormat.test(format)
		                      ? 'format'
		                      : 'standalone'
		              ];
		        return m === true
		            ? shiftWeekdays(weekdays, this._week.dow)
		            : m
		            ? weekdays[m.day()]
		            : weekdays;
		    }

		    function localeWeekdaysShort(m) {
		        return m === true
		            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
		            : m
		            ? this._weekdaysShort[m.day()]
		            : this._weekdaysShort;
		    }

		    function localeWeekdaysMin(m) {
		        return m === true
		            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
		            : m
		            ? this._weekdaysMin[m.day()]
		            : this._weekdaysMin;
		    }

		    function handleStrictParse$1(weekdayName, format, strict) {
		        var i,
		            ii,
		            mom,
		            llc = weekdayName.toLocaleLowerCase();
		        if (!this._weekdaysParse) {
		            this._weekdaysParse = [];
		            this._shortWeekdaysParse = [];
		            this._minWeekdaysParse = [];

		            for (i = 0; i < 7; ++i) {
		                mom = createUTC([2000, 1]).day(i);
		                this._minWeekdaysParse[i] = this.weekdaysMin(
		                    mom,
		                    ''
		                ).toLocaleLowerCase();
		                this._shortWeekdaysParse[i] = this.weekdaysShort(
		                    mom,
		                    ''
		                ).toLocaleLowerCase();
		                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
		            }
		        }

		        if (strict) {
		            if (format === 'dddd') {
		                ii = indexOf.call(this._weekdaysParse, llc);
		                return ii !== -1 ? ii : null;
		            } else if (format === 'ddd') {
		                ii = indexOf.call(this._shortWeekdaysParse, llc);
		                return ii !== -1 ? ii : null;
		            } else {
		                ii = indexOf.call(this._minWeekdaysParse, llc);
		                return ii !== -1 ? ii : null;
		            }
		        } else {
		            if (format === 'dddd') {
		                ii = indexOf.call(this._weekdaysParse, llc);
		                if (ii !== -1) {
		                    return ii;
		                }
		                ii = indexOf.call(this._shortWeekdaysParse, llc);
		                if (ii !== -1) {
		                    return ii;
		                }
		                ii = indexOf.call(this._minWeekdaysParse, llc);
		                return ii !== -1 ? ii : null;
		            } else if (format === 'ddd') {
		                ii = indexOf.call(this._shortWeekdaysParse, llc);
		                if (ii !== -1) {
		                    return ii;
		                }
		                ii = indexOf.call(this._weekdaysParse, llc);
		                if (ii !== -1) {
		                    return ii;
		                }
		                ii = indexOf.call(this._minWeekdaysParse, llc);
		                return ii !== -1 ? ii : null;
		            } else {
		                ii = indexOf.call(this._minWeekdaysParse, llc);
		                if (ii !== -1) {
		                    return ii;
		                }
		                ii = indexOf.call(this._weekdaysParse, llc);
		                if (ii !== -1) {
		                    return ii;
		                }
		                ii = indexOf.call(this._shortWeekdaysParse, llc);
		                return ii !== -1 ? ii : null;
		            }
		        }
		    }

		    function localeWeekdaysParse(weekdayName, format, strict) {
		        var i, mom, regex;

		        if (this._weekdaysParseExact) {
		            return handleStrictParse$1.call(this, weekdayName, format, strict);
		        }

		        if (!this._weekdaysParse) {
		            this._weekdaysParse = [];
		            this._minWeekdaysParse = [];
		            this._shortWeekdaysParse = [];
		            this._fullWeekdaysParse = [];
		        }

		        for (i = 0; i < 7; i++) {
		            // make the regex if we don't have it already

		            mom = createUTC([2000, 1]).day(i);
		            if (strict && !this._fullWeekdaysParse[i]) {
		                this._fullWeekdaysParse[i] = new RegExp(
		                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
		                    'i'
		                );
		                this._shortWeekdaysParse[i] = new RegExp(
		                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
		                    'i'
		                );
		                this._minWeekdaysParse[i] = new RegExp(
		                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
		                    'i'
		                );
		            }
		            if (!this._weekdaysParse[i]) {
		                regex =
		                    '^' +
		                    this.weekdays(mom, '') +
		                    '|^' +
		                    this.weekdaysShort(mom, '') +
		                    '|^' +
		                    this.weekdaysMin(mom, '');
		                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
		            }
		            // test the regex
		            if (
		                strict &&
		                format === 'dddd' &&
		                this._fullWeekdaysParse[i].test(weekdayName)
		            ) {
		                return i;
		            } else if (
		                strict &&
		                format === 'ddd' &&
		                this._shortWeekdaysParse[i].test(weekdayName)
		            ) {
		                return i;
		            } else if (
		                strict &&
		                format === 'dd' &&
		                this._minWeekdaysParse[i].test(weekdayName)
		            ) {
		                return i;
		            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
		                return i;
		            }
		        }
		    }

		    // MOMENTS

		    function getSetDayOfWeek(input) {
		        if (!this.isValid()) {
		            return input != null ? this : NaN;
		        }
		        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
		        if (input != null) {
		            input = parseWeekday(input, this.localeData());
		            return this.add(input - day, 'd');
		        } else {
		            return day;
		        }
		    }

		    function getSetLocaleDayOfWeek(input) {
		        if (!this.isValid()) {
		            return input != null ? this : NaN;
		        }
		        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
		        return input == null ? weekday : this.add(input - weekday, 'd');
		    }

		    function getSetISODayOfWeek(input) {
		        if (!this.isValid()) {
		            return input != null ? this : NaN;
		        }

		        // behaves the same as moment#day except
		        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
		        // as a setter, sunday should belong to the previous week.

		        if (input != null) {
		            var weekday = parseIsoWeekday(input, this.localeData());
		            return this.day(this.day() % 7 ? weekday : weekday - 7);
		        } else {
		            return this.day() || 7;
		        }
		    }

		    function weekdaysRegex(isStrict) {
		        if (this._weekdaysParseExact) {
		            if (!hasOwnProp(this, '_weekdaysRegex')) {
		                computeWeekdaysParse.call(this);
		            }
		            if (isStrict) {
		                return this._weekdaysStrictRegex;
		            } else {
		                return this._weekdaysRegex;
		            }
		        } else {
		            if (!hasOwnProp(this, '_weekdaysRegex')) {
		                this._weekdaysRegex = defaultWeekdaysRegex;
		            }
		            return this._weekdaysStrictRegex && isStrict
		                ? this._weekdaysStrictRegex
		                : this._weekdaysRegex;
		        }
		    }

		    function weekdaysShortRegex(isStrict) {
		        if (this._weekdaysParseExact) {
		            if (!hasOwnProp(this, '_weekdaysRegex')) {
		                computeWeekdaysParse.call(this);
		            }
		            if (isStrict) {
		                return this._weekdaysShortStrictRegex;
		            } else {
		                return this._weekdaysShortRegex;
		            }
		        } else {
		            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
		                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
		            }
		            return this._weekdaysShortStrictRegex && isStrict
		                ? this._weekdaysShortStrictRegex
		                : this._weekdaysShortRegex;
		        }
		    }

		    function weekdaysMinRegex(isStrict) {
		        if (this._weekdaysParseExact) {
		            if (!hasOwnProp(this, '_weekdaysRegex')) {
		                computeWeekdaysParse.call(this);
		            }
		            if (isStrict) {
		                return this._weekdaysMinStrictRegex;
		            } else {
		                return this._weekdaysMinRegex;
		            }
		        } else {
		            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
		                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
		            }
		            return this._weekdaysMinStrictRegex && isStrict
		                ? this._weekdaysMinStrictRegex
		                : this._weekdaysMinRegex;
		        }
		    }

		    function computeWeekdaysParse() {
		        function cmpLenRev(a, b) {
		            return b.length - a.length;
		        }

		        var minPieces = [],
		            shortPieces = [],
		            longPieces = [],
		            mixedPieces = [],
		            i,
		            mom,
		            minp,
		            shortp,
		            longp;
		        for (i = 0; i < 7; i++) {
		            // make the regex if we don't have it already
		            mom = createUTC([2000, 1]).day(i);
		            minp = regexEscape(this.weekdaysMin(mom, ''));
		            shortp = regexEscape(this.weekdaysShort(mom, ''));
		            longp = regexEscape(this.weekdays(mom, ''));
		            minPieces.push(minp);
		            shortPieces.push(shortp);
		            longPieces.push(longp);
		            mixedPieces.push(minp);
		            mixedPieces.push(shortp);
		            mixedPieces.push(longp);
		        }
		        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
		        // will match the longer piece.
		        minPieces.sort(cmpLenRev);
		        shortPieces.sort(cmpLenRev);
		        longPieces.sort(cmpLenRev);
		        mixedPieces.sort(cmpLenRev);

		        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
		        this._weekdaysShortRegex = this._weekdaysRegex;
		        this._weekdaysMinRegex = this._weekdaysRegex;

		        this._weekdaysStrictRegex = new RegExp(
		            '^(' + longPieces.join('|') + ')',
		            'i'
		        );
		        this._weekdaysShortStrictRegex = new RegExp(
		            '^(' + shortPieces.join('|') + ')',
		            'i'
		        );
		        this._weekdaysMinStrictRegex = new RegExp(
		            '^(' + minPieces.join('|') + ')',
		            'i'
		        );
		    }

		    // FORMATTING

		    function hFormat() {
		        return this.hours() % 12 || 12;
		    }

		    function kFormat() {
		        return this.hours() || 24;
		    }

		    addFormatToken('H', ['HH', 2], 0, 'hour');
		    addFormatToken('h', ['hh', 2], 0, hFormat);
		    addFormatToken('k', ['kk', 2], 0, kFormat);

		    addFormatToken('hmm', 0, 0, function () {
		        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
		    });

		    addFormatToken('hmmss', 0, 0, function () {
		        return (
		            '' +
		            hFormat.apply(this) +
		            zeroFill(this.minutes(), 2) +
		            zeroFill(this.seconds(), 2)
		        );
		    });

		    addFormatToken('Hmm', 0, 0, function () {
		        return '' + this.hours() + zeroFill(this.minutes(), 2);
		    });

		    addFormatToken('Hmmss', 0, 0, function () {
		        return (
		            '' +
		            this.hours() +
		            zeroFill(this.minutes(), 2) +
		            zeroFill(this.seconds(), 2)
		        );
		    });

		    function meridiem(token, lowercase) {
		        addFormatToken(token, 0, 0, function () {
		            return this.localeData().meridiem(
		                this.hours(),
		                this.minutes(),
		                lowercase
		            );
		        });
		    }

		    meridiem('a', true);
		    meridiem('A', false);

		    // ALIASES

		    addUnitAlias('hour', 'h');

		    // PRIORITY
		    addUnitPriority('hour', 13);

		    // PARSING

		    function matchMeridiem(isStrict, locale) {
		        return locale._meridiemParse;
		    }

		    addRegexToken('a', matchMeridiem);
		    addRegexToken('A', matchMeridiem);
		    addRegexToken('H', match1to2);
		    addRegexToken('h', match1to2);
		    addRegexToken('k', match1to2);
		    addRegexToken('HH', match1to2, match2);
		    addRegexToken('hh', match1to2, match2);
		    addRegexToken('kk', match1to2, match2);

		    addRegexToken('hmm', match3to4);
		    addRegexToken('hmmss', match5to6);
		    addRegexToken('Hmm', match3to4);
		    addRegexToken('Hmmss', match5to6);

		    addParseToken(['H', 'HH'], HOUR);
		    addParseToken(['k', 'kk'], function (input, array, config) {
		        var kInput = toInt(input);
		        array[HOUR] = kInput === 24 ? 0 : kInput;
		    });
		    addParseToken(['a', 'A'], function (input, array, config) {
		        config._isPm = config._locale.isPM(input);
		        config._meridiem = input;
		    });
		    addParseToken(['h', 'hh'], function (input, array, config) {
		        array[HOUR] = toInt(input);
		        getParsingFlags(config).bigHour = true;
		    });
		    addParseToken('hmm', function (input, array, config) {
		        var pos = input.length - 2;
		        array[HOUR] = toInt(input.substr(0, pos));
		        array[MINUTE] = toInt(input.substr(pos));
		        getParsingFlags(config).bigHour = true;
		    });
		    addParseToken('hmmss', function (input, array, config) {
		        var pos1 = input.length - 4,
		            pos2 = input.length - 2;
		        array[HOUR] = toInt(input.substr(0, pos1));
		        array[MINUTE] = toInt(input.substr(pos1, 2));
		        array[SECOND] = toInt(input.substr(pos2));
		        getParsingFlags(config).bigHour = true;
		    });
		    addParseToken('Hmm', function (input, array, config) {
		        var pos = input.length - 2;
		        array[HOUR] = toInt(input.substr(0, pos));
		        array[MINUTE] = toInt(input.substr(pos));
		    });
		    addParseToken('Hmmss', function (input, array, config) {
		        var pos1 = input.length - 4,
		            pos2 = input.length - 2;
		        array[HOUR] = toInt(input.substr(0, pos1));
		        array[MINUTE] = toInt(input.substr(pos1, 2));
		        array[SECOND] = toInt(input.substr(pos2));
		    });

		    // LOCALES

		    function localeIsPM(input) {
		        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
		        // Using charAt should be more compatible.
		        return (input + '').toLowerCase().charAt(0) === 'p';
		    }

		    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
		        // Setting the hour should keep the time, because the user explicitly
		        // specified which hour they want. So trying to maintain the same hour (in
		        // a new timezone) makes sense. Adding/subtracting hours does not follow
		        // this rule.
		        getSetHour = makeGetSet('Hours', true);

		    function localeMeridiem(hours, minutes, isLower) {
		        if (hours > 11) {
		            return isLower ? 'pm' : 'PM';
		        } else {
		            return isLower ? 'am' : 'AM';
		        }
		    }

		    var baseConfig = {
		        calendar: defaultCalendar,
		        longDateFormat: defaultLongDateFormat,
		        invalidDate: defaultInvalidDate,
		        ordinal: defaultOrdinal,
		        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
		        relativeTime: defaultRelativeTime,

		        months: defaultLocaleMonths,
		        monthsShort: defaultLocaleMonthsShort,

		        week: defaultLocaleWeek,

		        weekdays: defaultLocaleWeekdays,
		        weekdaysMin: defaultLocaleWeekdaysMin,
		        weekdaysShort: defaultLocaleWeekdaysShort,

		        meridiemParse: defaultLocaleMeridiemParse,
		    };

		    // internal storage for locale config files
		    var locales = {},
		        localeFamilies = {},
		        globalLocale;

		    function commonPrefix(arr1, arr2) {
		        var i,
		            minl = Math.min(arr1.length, arr2.length);
		        for (i = 0; i < minl; i += 1) {
		            if (arr1[i] !== arr2[i]) {
		                return i;
		            }
		        }
		        return minl;
		    }

		    function normalizeLocale(key) {
		        return key ? key.toLowerCase().replace('_', '-') : key;
		    }

		    // pick the locale from the array
		    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
		    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
		    function chooseLocale(names) {
		        var i = 0,
		            j,
		            next,
		            locale,
		            split;

		        while (i < names.length) {
		            split = normalizeLocale(names[i]).split('-');
		            j = split.length;
		            next = normalizeLocale(names[i + 1]);
		            next = next ? next.split('-') : null;
		            while (j > 0) {
		                locale = loadLocale(split.slice(0, j).join('-'));
		                if (locale) {
		                    return locale;
		                }
		                if (
		                    next &&
		                    next.length >= j &&
		                    commonPrefix(split, next) >= j - 1
		                ) {
		                    //the next array item is better than a shallower substring of this one
		                    break;
		                }
		                j--;
		            }
		            i++;
		        }
		        return globalLocale;
		    }

		    function isLocaleNameSane(name) {
		        // Prevent names that look like filesystem paths, i.e contain '/' or '\'
		        return name.match('^[^/\\\\]*$') != null;
		    }

		    function loadLocale(name) {
		        var oldLocale = null,
		            aliasedRequire;
		        // TODO: Find a better way to register and load all the locales in Node
		        if (
		            locales[name] === undefined &&
		            'object' !== 'undefined' &&
		            module &&
		            module.exports &&
		            isLocaleNameSane(name)
		        ) {
		            try {
		                oldLocale = globalLocale._abbr;
		                aliasedRequire = commonjsRequire;
		                aliasedRequire('./locale/' + name);
		                getSetGlobalLocale(oldLocale);
		            } catch (e) {
		                // mark as not found to avoid repeating expensive file require call causing high CPU
		                // when trying to find en-US, en_US, en-us for every format call
		                locales[name] = null; // null means not found
		            }
		        }
		        return locales[name];
		    }

		    // This function will load locale and then set the global locale.  If
		    // no arguments are passed in, it will simply return the current global
		    // locale key.
		    function getSetGlobalLocale(key, values) {
		        var data;
		        if (key) {
		            if (isUndefined(values)) {
		                data = getLocale(key);
		            } else {
		                data = defineLocale(key, values);
		            }

		            if (data) {
		                // moment.duration._locale = moment._locale = data;
		                globalLocale = data;
		            } else {
		                if (typeof console !== 'undefined' && console.warn) {
		                    //warn user if arguments are passed but the locale could not be set
		                    console.warn(
		                        'Locale ' + key + ' not found. Did you forget to load it?'
		                    );
		                }
		            }
		        }

		        return globalLocale._abbr;
		    }

		    function defineLocale(name, config) {
		        if (config !== null) {
		            var locale,
		                parentConfig = baseConfig;
		            config.abbr = name;
		            if (locales[name] != null) {
		                deprecateSimple(
		                    'defineLocaleOverride',
		                    'use moment.updateLocale(localeName, config) to change ' +
		                        'an existing locale. moment.defineLocale(localeName, ' +
		                        'config) should only be used for creating a new locale ' +
		                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
		                );
		                parentConfig = locales[name]._config;
		            } else if (config.parentLocale != null) {
		                if (locales[config.parentLocale] != null) {
		                    parentConfig = locales[config.parentLocale]._config;
		                } else {
		                    locale = loadLocale(config.parentLocale);
		                    if (locale != null) {
		                        parentConfig = locale._config;
		                    } else {
		                        if (!localeFamilies[config.parentLocale]) {
		                            localeFamilies[config.parentLocale] = [];
		                        }
		                        localeFamilies[config.parentLocale].push({
		                            name: name,
		                            config: config,
		                        });
		                        return null;
		                    }
		                }
		            }
		            locales[name] = new Locale(mergeConfigs(parentConfig, config));

		            if (localeFamilies[name]) {
		                localeFamilies[name].forEach(function (x) {
		                    defineLocale(x.name, x.config);
		                });
		            }

		            // backwards compat for now: also set the locale
		            // make sure we set the locale AFTER all child locales have been
		            // created, so we won't end up with the child locale set.
		            getSetGlobalLocale(name);

		            return locales[name];
		        } else {
		            // useful for testing
		            delete locales[name];
		            return null;
		        }
		    }

		    function updateLocale(name, config) {
		        if (config != null) {
		            var locale,
		                tmpLocale,
		                parentConfig = baseConfig;

		            if (locales[name] != null && locales[name].parentLocale != null) {
		                // Update existing child locale in-place to avoid memory-leaks
		                locales[name].set(mergeConfigs(locales[name]._config, config));
		            } else {
		                // MERGE
		                tmpLocale = loadLocale(name);
		                if (tmpLocale != null) {
		                    parentConfig = tmpLocale._config;
		                }
		                config = mergeConfigs(parentConfig, config);
		                if (tmpLocale == null) {
		                    // updateLocale is called for creating a new locale
		                    // Set abbr so it will have a name (getters return
		                    // undefined otherwise).
		                    config.abbr = name;
		                }
		                locale = new Locale(config);
		                locale.parentLocale = locales[name];
		                locales[name] = locale;
		            }

		            // backwards compat for now: also set the locale
		            getSetGlobalLocale(name);
		        } else {
		            // pass null for config to unupdate, useful for tests
		            if (locales[name] != null) {
		                if (locales[name].parentLocale != null) {
		                    locales[name] = locales[name].parentLocale;
		                    if (name === getSetGlobalLocale()) {
		                        getSetGlobalLocale(name);
		                    }
		                } else if (locales[name] != null) {
		                    delete locales[name];
		                }
		            }
		        }
		        return locales[name];
		    }

		    // returns locale data
		    function getLocale(key) {
		        var locale;

		        if (key && key._locale && key._locale._abbr) {
		            key = key._locale._abbr;
		        }

		        if (!key) {
		            return globalLocale;
		        }

		        if (!isArray(key)) {
		            //short-circuit everything else
		            locale = loadLocale(key);
		            if (locale) {
		                return locale;
		            }
		            key = [key];
		        }

		        return chooseLocale(key);
		    }

		    function listLocales() {
		        return keys(locales);
		    }

		    function checkOverflow(m) {
		        var overflow,
		            a = m._a;

		        if (a && getParsingFlags(m).overflow === -2) {
		            overflow =
		                a[MONTH] < 0 || a[MONTH] > 11
		                    ? MONTH
		                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
		                    ? DATE
		                    : a[HOUR] < 0 ||
		                      a[HOUR] > 24 ||
		                      (a[HOUR] === 24 &&
		                          (a[MINUTE] !== 0 ||
		                              a[SECOND] !== 0 ||
		                              a[MILLISECOND] !== 0))
		                    ? HOUR
		                    : a[MINUTE] < 0 || a[MINUTE] > 59
		                    ? MINUTE
		                    : a[SECOND] < 0 || a[SECOND] > 59
		                    ? SECOND
		                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
		                    ? MILLISECOND
		                    : -1;

		            if (
		                getParsingFlags(m)._overflowDayOfYear &&
		                (overflow < YEAR || overflow > DATE)
		            ) {
		                overflow = DATE;
		            }
		            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
		                overflow = WEEK;
		            }
		            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
		                overflow = WEEKDAY;
		            }

		            getParsingFlags(m).overflow = overflow;
		        }

		        return m;
		    }

		    // iso 8601 regex
		    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
		    var extendedIsoRegex =
		            /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
		        basicIsoRegex =
		            /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
		        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
		        isoDates = [
		            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
		            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
		            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
		            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
		            ['YYYY-DDD', /\d{4}-\d{3}/],
		            ['YYYY-MM', /\d{4}-\d\d/, false],
		            ['YYYYYYMMDD', /[+-]\d{10}/],
		            ['YYYYMMDD', /\d{8}/],
		            ['GGGG[W]WWE', /\d{4}W\d{3}/],
		            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
		            ['YYYYDDD', /\d{7}/],
		            ['YYYYMM', /\d{6}/, false],
		            ['YYYY', /\d{4}/, false],
		        ],
		        // iso time formats and regexes
		        isoTimes = [
		            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
		            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
		            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
		            ['HH:mm', /\d\d:\d\d/],
		            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
		            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
		            ['HHmmss', /\d\d\d\d\d\d/],
		            ['HHmm', /\d\d\d\d/],
		            ['HH', /\d\d/],
		        ],
		        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
		        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
		        rfc2822 =
		            /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
		        obsOffsets = {
		            UT: 0,
		            GMT: 0,
		            EDT: -4 * 60,
		            EST: -5 * 60,
		            CDT: -5 * 60,
		            CST: -6 * 60,
		            MDT: -6 * 60,
		            MST: -7 * 60,
		            PDT: -7 * 60,
		            PST: -8 * 60,
		        };

		    // date from iso format
		    function configFromISO(config) {
		        var i,
		            l,
		            string = config._i,
		            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
		            allowTime,
		            dateFormat,
		            timeFormat,
		            tzFormat,
		            isoDatesLen = isoDates.length,
		            isoTimesLen = isoTimes.length;

		        if (match) {
		            getParsingFlags(config).iso = true;
		            for (i = 0, l = isoDatesLen; i < l; i++) {
		                if (isoDates[i][1].exec(match[1])) {
		                    dateFormat = isoDates[i][0];
		                    allowTime = isoDates[i][2] !== false;
		                    break;
		                }
		            }
		            if (dateFormat == null) {
		                config._isValid = false;
		                return;
		            }
		            if (match[3]) {
		                for (i = 0, l = isoTimesLen; i < l; i++) {
		                    if (isoTimes[i][1].exec(match[3])) {
		                        // match[2] should be 'T' or space
		                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
		                        break;
		                    }
		                }
		                if (timeFormat == null) {
		                    config._isValid = false;
		                    return;
		                }
		            }
		            if (!allowTime && timeFormat != null) {
		                config._isValid = false;
		                return;
		            }
		            if (match[4]) {
		                if (tzRegex.exec(match[4])) {
		                    tzFormat = 'Z';
		                } else {
		                    config._isValid = false;
		                    return;
		                }
		            }
		            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
		            configFromStringAndFormat(config);
		        } else {
		            config._isValid = false;
		        }
		    }

		    function extractFromRFC2822Strings(
		        yearStr,
		        monthStr,
		        dayStr,
		        hourStr,
		        minuteStr,
		        secondStr
		    ) {
		        var result = [
		            untruncateYear(yearStr),
		            defaultLocaleMonthsShort.indexOf(monthStr),
		            parseInt(dayStr, 10),
		            parseInt(hourStr, 10),
		            parseInt(minuteStr, 10),
		        ];

		        if (secondStr) {
		            result.push(parseInt(secondStr, 10));
		        }

		        return result;
		    }

		    function untruncateYear(yearStr) {
		        var year = parseInt(yearStr, 10);
		        if (year <= 49) {
		            return 2000 + year;
		        } else if (year <= 999) {
		            return 1900 + year;
		        }
		        return year;
		    }

		    function preprocessRFC2822(s) {
		        // Remove comments and folding whitespace and replace multiple-spaces with a single space
		        return s
		            .replace(/\([^()]*\)|[\n\t]/g, ' ')
		            .replace(/(\s\s+)/g, ' ')
		            .replace(/^\s\s*/, '')
		            .replace(/\s\s*$/, '');
		    }

		    function checkWeekday(weekdayStr, parsedInput, config) {
		        if (weekdayStr) {
		            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
		            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
		                weekdayActual = new Date(
		                    parsedInput[0],
		                    parsedInput[1],
		                    parsedInput[2]
		                ).getDay();
		            if (weekdayProvided !== weekdayActual) {
		                getParsingFlags(config).weekdayMismatch = true;
		                config._isValid = false;
		                return false;
		            }
		        }
		        return true;
		    }

		    function calculateOffset(obsOffset, militaryOffset, numOffset) {
		        if (obsOffset) {
		            return obsOffsets[obsOffset];
		        } else if (militaryOffset) {
		            // the only allowed military tz is Z
		            return 0;
		        } else {
		            var hm = parseInt(numOffset, 10),
		                m = hm % 100,
		                h = (hm - m) / 100;
		            return h * 60 + m;
		        }
		    }

		    // date and time from ref 2822 format
		    function configFromRFC2822(config) {
		        var match = rfc2822.exec(preprocessRFC2822(config._i)),
		            parsedArray;
		        if (match) {
		            parsedArray = extractFromRFC2822Strings(
		                match[4],
		                match[3],
		                match[2],
		                match[5],
		                match[6],
		                match[7]
		            );
		            if (!checkWeekday(match[1], parsedArray, config)) {
		                return;
		            }

		            config._a = parsedArray;
		            config._tzm = calculateOffset(match[8], match[9], match[10]);

		            config._d = createUTCDate.apply(null, config._a);
		            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

		            getParsingFlags(config).rfc2822 = true;
		        } else {
		            config._isValid = false;
		        }
		    }

		    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
		    function configFromString(config) {
		        var matched = aspNetJsonRegex.exec(config._i);
		        if (matched !== null) {
		            config._d = new Date(+matched[1]);
		            return;
		        }

		        configFromISO(config);
		        if (config._isValid === false) {
		            delete config._isValid;
		        } else {
		            return;
		        }

		        configFromRFC2822(config);
		        if (config._isValid === false) {
		            delete config._isValid;
		        } else {
		            return;
		        }

		        if (config._strict) {
		            config._isValid = false;
		        } else {
		            // Final attempt, use Input Fallback
		            hooks.createFromInputFallback(config);
		        }
		    }

		    hooks.createFromInputFallback = deprecate(
		        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
		            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
		            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
		        function (config) {
		            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
		        }
		    );

		    // Pick the first defined of two or three arguments.
		    function defaults(a, b, c) {
		        if (a != null) {
		            return a;
		        }
		        if (b != null) {
		            return b;
		        }
		        return c;
		    }

		    function currentDateArray(config) {
		        // hooks is actually the exported moment object
		        var nowValue = new Date(hooks.now());
		        if (config._useUTC) {
		            return [
		                nowValue.getUTCFullYear(),
		                nowValue.getUTCMonth(),
		                nowValue.getUTCDate(),
		            ];
		        }
		        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
		    }

		    // convert an array to a date.
		    // the array should mirror the parameters below
		    // note: all values past the year are optional and will default to the lowest possible value.
		    // [year, month, day , hour, minute, second, millisecond]
		    function configFromArray(config) {
		        var i,
		            date,
		            input = [],
		            currentDate,
		            expectedWeekday,
		            yearToUse;

		        if (config._d) {
		            return;
		        }

		        currentDate = currentDateArray(config);

		        //compute day of the year from weeks and weekdays
		        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
		            dayOfYearFromWeekInfo(config);
		        }

		        //if the day of the year is set, figure out what it is
		        if (config._dayOfYear != null) {
		            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

		            if (
		                config._dayOfYear > daysInYear(yearToUse) ||
		                config._dayOfYear === 0
		            ) {
		                getParsingFlags(config)._overflowDayOfYear = true;
		            }

		            date = createUTCDate(yearToUse, 0, config._dayOfYear);
		            config._a[MONTH] = date.getUTCMonth();
		            config._a[DATE] = date.getUTCDate();
		        }

		        // Default to current date.
		        // * if no year, month, day of month are given, default to today
		        // * if day of month is given, default month and year
		        // * if month is given, default only year
		        // * if year is given, don't default anything
		        for (i = 0; i < 3 && config._a[i] == null; ++i) {
		            config._a[i] = input[i] = currentDate[i];
		        }

		        // Zero out whatever was not defaulted, including time
		        for (; i < 7; i++) {
		            config._a[i] = input[i] =
		                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
		        }

		        // Check for 24:00:00.000
		        if (
		            config._a[HOUR] === 24 &&
		            config._a[MINUTE] === 0 &&
		            config._a[SECOND] === 0 &&
		            config._a[MILLISECOND] === 0
		        ) {
		            config._nextDay = true;
		            config._a[HOUR] = 0;
		        }

		        config._d = (config._useUTC ? createUTCDate : createDate).apply(
		            null,
		            input
		        );
		        expectedWeekday = config._useUTC
		            ? config._d.getUTCDay()
		            : config._d.getDay();

		        // Apply timezone offset from input. The actual utcOffset can be changed
		        // with parseZone.
		        if (config._tzm != null) {
		            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
		        }

		        if (config._nextDay) {
		            config._a[HOUR] = 24;
		        }

		        // check for mismatching day of week
		        if (
		            config._w &&
		            typeof config._w.d !== 'undefined' &&
		            config._w.d !== expectedWeekday
		        ) {
		            getParsingFlags(config).weekdayMismatch = true;
		        }
		    }

		    function dayOfYearFromWeekInfo(config) {
		        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

		        w = config._w;
		        if (w.GG != null || w.W != null || w.E != null) {
		            dow = 1;
		            doy = 4;

		            // TODO: We need to take the current isoWeekYear, but that depends on
		            // how we interpret now (local, utc, fixed offset). So create
		            // a now version of current config (take local/utc/offset flags, and
		            // create now).
		            weekYear = defaults(
		                w.GG,
		                config._a[YEAR],
		                weekOfYear(createLocal(), 1, 4).year
		            );
		            week = defaults(w.W, 1);
		            weekday = defaults(w.E, 1);
		            if (weekday < 1 || weekday > 7) {
		                weekdayOverflow = true;
		            }
		        } else {
		            dow = config._locale._week.dow;
		            doy = config._locale._week.doy;

		            curWeek = weekOfYear(createLocal(), dow, doy);

		            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

		            // Default to current week.
		            week = defaults(w.w, curWeek.week);

		            if (w.d != null) {
		                // weekday -- low day numbers are considered next week
		                weekday = w.d;
		                if (weekday < 0 || weekday > 6) {
		                    weekdayOverflow = true;
		                }
		            } else if (w.e != null) {
		                // local weekday -- counting starts from beginning of week
		                weekday = w.e + dow;
		                if (w.e < 0 || w.e > 6) {
		                    weekdayOverflow = true;
		                }
		            } else {
		                // default to beginning of week
		                weekday = dow;
		            }
		        }
		        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
		            getParsingFlags(config)._overflowWeeks = true;
		        } else if (weekdayOverflow != null) {
		            getParsingFlags(config)._overflowWeekday = true;
		        } else {
		            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
		            config._a[YEAR] = temp.year;
		            config._dayOfYear = temp.dayOfYear;
		        }
		    }

		    // constant that refers to the ISO standard
		    hooks.ISO_8601 = function () {};

		    // constant that refers to the RFC 2822 form
		    hooks.RFC_2822 = function () {};

		    // date from string and format string
		    function configFromStringAndFormat(config) {
		        // TODO: Move this to another part of the creation flow to prevent circular deps
		        if (config._f === hooks.ISO_8601) {
		            configFromISO(config);
		            return;
		        }
		        if (config._f === hooks.RFC_2822) {
		            configFromRFC2822(config);
		            return;
		        }
		        config._a = [];
		        getParsingFlags(config).empty = true;

		        // This array is used to make a Date, either with `new Date` or `Date.UTC`
		        var string = '' + config._i,
		            i,
		            parsedInput,
		            tokens,
		            token,
		            skipped,
		            stringLength = string.length,
		            totalParsedInputLength = 0,
		            era,
		            tokenLen;

		        tokens =
		            expandFormat(config._f, config._locale).match(formattingTokens) || [];
		        tokenLen = tokens.length;
		        for (i = 0; i < tokenLen; i++) {
		            token = tokens[i];
		            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
		                [])[0];
		            if (parsedInput) {
		                skipped = string.substr(0, string.indexOf(parsedInput));
		                if (skipped.length > 0) {
		                    getParsingFlags(config).unusedInput.push(skipped);
		                }
		                string = string.slice(
		                    string.indexOf(parsedInput) + parsedInput.length
		                );
		                totalParsedInputLength += parsedInput.length;
		            }
		            // don't parse if it's not a known token
		            if (formatTokenFunctions[token]) {
		                if (parsedInput) {
		                    getParsingFlags(config).empty = false;
		                } else {
		                    getParsingFlags(config).unusedTokens.push(token);
		                }
		                addTimeToArrayFromToken(token, parsedInput, config);
		            } else if (config._strict && !parsedInput) {
		                getParsingFlags(config).unusedTokens.push(token);
		            }
		        }

		        // add remaining unparsed input length to the string
		        getParsingFlags(config).charsLeftOver =
		            stringLength - totalParsedInputLength;
		        if (string.length > 0) {
		            getParsingFlags(config).unusedInput.push(string);
		        }

		        // clear _12h flag if hour is <= 12
		        if (
		            config._a[HOUR] <= 12 &&
		            getParsingFlags(config).bigHour === true &&
		            config._a[HOUR] > 0
		        ) {
		            getParsingFlags(config).bigHour = undefined;
		        }

		        getParsingFlags(config).parsedDateParts = config._a.slice(0);
		        getParsingFlags(config).meridiem = config._meridiem;
		        // handle meridiem
		        config._a[HOUR] = meridiemFixWrap(
		            config._locale,
		            config._a[HOUR],
		            config._meridiem
		        );

		        // handle era
		        era = getParsingFlags(config).era;
		        if (era !== null) {
		            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
		        }

		        configFromArray(config);
		        checkOverflow(config);
		    }

		    function meridiemFixWrap(locale, hour, meridiem) {
		        var isPm;

		        if (meridiem == null) {
		            // nothing to do
		            return hour;
		        }
		        if (locale.meridiemHour != null) {
		            return locale.meridiemHour(hour, meridiem);
		        } else if (locale.isPM != null) {
		            // Fallback
		            isPm = locale.isPM(meridiem);
		            if (isPm && hour < 12) {
		                hour += 12;
		            }
		            if (!isPm && hour === 12) {
		                hour = 0;
		            }
		            return hour;
		        } else {
		            // this is not supposed to happen
		            return hour;
		        }
		    }

		    // date from string and array of format strings
		    function configFromStringAndArray(config) {
		        var tempConfig,
		            bestMoment,
		            scoreToBeat,
		            i,
		            currentScore,
		            validFormatFound,
		            bestFormatIsValid = false,
		            configfLen = config._f.length;

		        if (configfLen === 0) {
		            getParsingFlags(config).invalidFormat = true;
		            config._d = new Date(NaN);
		            return;
		        }

		        for (i = 0; i < configfLen; i++) {
		            currentScore = 0;
		            validFormatFound = false;
		            tempConfig = copyConfig({}, config);
		            if (config._useUTC != null) {
		                tempConfig._useUTC = config._useUTC;
		            }
		            tempConfig._f = config._f[i];
		            configFromStringAndFormat(tempConfig);

		            if (isValid(tempConfig)) {
		                validFormatFound = true;
		            }

		            // if there is any input that was not parsed add a penalty for that format
		            currentScore += getParsingFlags(tempConfig).charsLeftOver;

		            //or tokens
		            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

		            getParsingFlags(tempConfig).score = currentScore;

		            if (!bestFormatIsValid) {
		                if (
		                    scoreToBeat == null ||
		                    currentScore < scoreToBeat ||
		                    validFormatFound
		                ) {
		                    scoreToBeat = currentScore;
		                    bestMoment = tempConfig;
		                    if (validFormatFound) {
		                        bestFormatIsValid = true;
		                    }
		                }
		            } else {
		                if (currentScore < scoreToBeat) {
		                    scoreToBeat = currentScore;
		                    bestMoment = tempConfig;
		                }
		            }
		        }

		        extend(config, bestMoment || tempConfig);
		    }

		    function configFromObject(config) {
		        if (config._d) {
		            return;
		        }

		        var i = normalizeObjectUnits(config._i),
		            dayOrDate = i.day === undefined ? i.date : i.day;
		        config._a = map(
		            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
		            function (obj) {
		                return obj && parseInt(obj, 10);
		            }
		        );

		        configFromArray(config);
		    }

		    function createFromConfig(config) {
		        var res = new Moment(checkOverflow(prepareConfig(config)));
		        if (res._nextDay) {
		            // Adding is smart enough around DST
		            res.add(1, 'd');
		            res._nextDay = undefined;
		        }

		        return res;
		    }

		    function prepareConfig(config) {
		        var input = config._i,
		            format = config._f;

		        config._locale = config._locale || getLocale(config._l);

		        if (input === null || (format === undefined && input === '')) {
		            return createInvalid({ nullInput: true });
		        }

		        if (typeof input === 'string') {
		            config._i = input = config._locale.preparse(input);
		        }

		        if (isMoment(input)) {
		            return new Moment(checkOverflow(input));
		        } else if (isDate(input)) {
		            config._d = input;
		        } else if (isArray(format)) {
		            configFromStringAndArray(config);
		        } else if (format) {
		            configFromStringAndFormat(config);
		        } else {
		            configFromInput(config);
		        }

		        if (!isValid(config)) {
		            config._d = null;
		        }

		        return config;
		    }

		    function configFromInput(config) {
		        var input = config._i;
		        if (isUndefined(input)) {
		            config._d = new Date(hooks.now());
		        } else if (isDate(input)) {
		            config._d = new Date(input.valueOf());
		        } else if (typeof input === 'string') {
		            configFromString(config);
		        } else if (isArray(input)) {
		            config._a = map(input.slice(0), function (obj) {
		                return parseInt(obj, 10);
		            });
		            configFromArray(config);
		        } else if (isObject(input)) {
		            configFromObject(config);
		        } else if (isNumber(input)) {
		            // from milliseconds
		            config._d = new Date(input);
		        } else {
		            hooks.createFromInputFallback(config);
		        }
		    }

		    function createLocalOrUTC(input, format, locale, strict, isUTC) {
		        var c = {};

		        if (format === true || format === false) {
		            strict = format;
		            format = undefined;
		        }

		        if (locale === true || locale === false) {
		            strict = locale;
		            locale = undefined;
		        }

		        if (
		            (isObject(input) && isObjectEmpty(input)) ||
		            (isArray(input) && input.length === 0)
		        ) {
		            input = undefined;
		        }
		        // object construction must be done this way.
		        // https://github.com/moment/moment/issues/1423
		        c._isAMomentObject = true;
		        c._useUTC = c._isUTC = isUTC;
		        c._l = locale;
		        c._i = input;
		        c._f = format;
		        c._strict = strict;

		        return createFromConfig(c);
		    }

		    function createLocal(input, format, locale, strict) {
		        return createLocalOrUTC(input, format, locale, strict, false);
		    }

		    var prototypeMin = deprecate(
		            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
		            function () {
		                var other = createLocal.apply(null, arguments);
		                if (this.isValid() && other.isValid()) {
		                    return other < this ? this : other;
		                } else {
		                    return createInvalid();
		                }
		            }
		        ),
		        prototypeMax = deprecate(
		            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
		            function () {
		                var other = createLocal.apply(null, arguments);
		                if (this.isValid() && other.isValid()) {
		                    return other > this ? this : other;
		                } else {
		                    return createInvalid();
		                }
		            }
		        );

		    // Pick a moment m from moments so that m[fn](other) is true for all
		    // other. This relies on the function fn to be transitive.
		    //
		    // moments should either be an array of moment objects or an array, whose
		    // first element is an array of moment objects.
		    function pickBy(fn, moments) {
		        var res, i;
		        if (moments.length === 1 && isArray(moments[0])) {
		            moments = moments[0];
		        }
		        if (!moments.length) {
		            return createLocal();
		        }
		        res = moments[0];
		        for (i = 1; i < moments.length; ++i) {
		            if (!moments[i].isValid() || moments[i][fn](res)) {
		                res = moments[i];
		            }
		        }
		        return res;
		    }

		    // TODO: Use [].sort instead?
		    function min() {
		        var args = [].slice.call(arguments, 0);

		        return pickBy('isBefore', args);
		    }

		    function max() {
		        var args = [].slice.call(arguments, 0);

		        return pickBy('isAfter', args);
		    }

		    var now = function () {
		        return Date.now ? Date.now() : +new Date();
		    };

		    var ordering = [
		        'year',
		        'quarter',
		        'month',
		        'week',
		        'day',
		        'hour',
		        'minute',
		        'second',
		        'millisecond',
		    ];

		    function isDurationValid(m) {
		        var key,
		            unitHasDecimal = false,
		            i,
		            orderLen = ordering.length;
		        for (key in m) {
		            if (
		                hasOwnProp(m, key) &&
		                !(
		                    indexOf.call(ordering, key) !== -1 &&
		                    (m[key] == null || !isNaN(m[key]))
		                )
		            ) {
		                return false;
		            }
		        }

		        for (i = 0; i < orderLen; ++i) {
		            if (m[ordering[i]]) {
		                if (unitHasDecimal) {
		                    return false; // only allow non-integers for smallest unit
		                }
		                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
		                    unitHasDecimal = true;
		                }
		            }
		        }

		        return true;
		    }

		    function isValid$1() {
		        return this._isValid;
		    }

		    function createInvalid$1() {
		        return createDuration(NaN);
		    }

		    function Duration(duration) {
		        var normalizedInput = normalizeObjectUnits(duration),
		            years = normalizedInput.year || 0,
		            quarters = normalizedInput.quarter || 0,
		            months = normalizedInput.month || 0,
		            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
		            days = normalizedInput.day || 0,
		            hours = normalizedInput.hour || 0,
		            minutes = normalizedInput.minute || 0,
		            seconds = normalizedInput.second || 0,
		            milliseconds = normalizedInput.millisecond || 0;

		        this._isValid = isDurationValid(normalizedInput);

		        // representation for dateAddRemove
		        this._milliseconds =
		            +milliseconds +
		            seconds * 1e3 + // 1000
		            minutes * 6e4 + // 1000 * 60
		            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
		        // Because of dateAddRemove treats 24 hours as different from a
		        // day when working around DST, we need to store them separately
		        this._days = +days + weeks * 7;
		        // It is impossible to translate months into days without knowing
		        // which months you are are talking about, so we have to store
		        // it separately.
		        this._months = +months + quarters * 3 + years * 12;

		        this._data = {};

		        this._locale = getLocale();

		        this._bubble();
		    }

		    function isDuration(obj) {
		        return obj instanceof Duration;
		    }

		    function absRound(number) {
		        if (number < 0) {
		            return Math.round(-1 * number) * -1;
		        } else {
		            return Math.round(number);
		        }
		    }

		    // compare two arrays, return the number of differences
		    function compareArrays(array1, array2, dontConvert) {
		        var len = Math.min(array1.length, array2.length),
		            lengthDiff = Math.abs(array1.length - array2.length),
		            diffs = 0,
		            i;
		        for (i = 0; i < len; i++) {
		            if (
		                (dontConvert && array1[i] !== array2[i]) ||
		                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
		            ) {
		                diffs++;
		            }
		        }
		        return diffs + lengthDiff;
		    }

		    // FORMATTING

		    function offset(token, separator) {
		        addFormatToken(token, 0, 0, function () {
		            var offset = this.utcOffset(),
		                sign = '+';
		            if (offset < 0) {
		                offset = -offset;
		                sign = '-';
		            }
		            return (
		                sign +
		                zeroFill(~~(offset / 60), 2) +
		                separator +
		                zeroFill(~~offset % 60, 2)
		            );
		        });
		    }

		    offset('Z', ':');
		    offset('ZZ', '');

		    // PARSING

		    addRegexToken('Z', matchShortOffset);
		    addRegexToken('ZZ', matchShortOffset);
		    addParseToken(['Z', 'ZZ'], function (input, array, config) {
		        config._useUTC = true;
		        config._tzm = offsetFromString(matchShortOffset, input);
		    });

		    // HELPERS

		    // timezone chunker
		    // '+10:00' > ['10',  '00']
		    // '-1530'  > ['-15', '30']
		    var chunkOffset = /([\+\-]|\d\d)/gi;

		    function offsetFromString(matcher, string) {
		        var matches = (string || '').match(matcher),
		            chunk,
		            parts,
		            minutes;

		        if (matches === null) {
		            return null;
		        }

		        chunk = matches[matches.length - 1] || [];
		        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
		        minutes = +(parts[1] * 60) + toInt(parts[2]);

		        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
		    }

		    // Return a moment from input, that is local/utc/zone equivalent to model.
		    function cloneWithOffset(input, model) {
		        var res, diff;
		        if (model._isUTC) {
		            res = model.clone();
		            diff =
		                (isMoment(input) || isDate(input)
		                    ? input.valueOf()
		                    : createLocal(input).valueOf()) - res.valueOf();
		            // Use low-level api, because this fn is low-level api.
		            res._d.setTime(res._d.valueOf() + diff);
		            hooks.updateOffset(res, false);
		            return res;
		        } else {
		            return createLocal(input).local();
		        }
		    }

		    function getDateOffset(m) {
		        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
		        // https://github.com/moment/moment/pull/1871
		        return -Math.round(m._d.getTimezoneOffset());
		    }

		    // HOOKS

		    // This function will be called whenever a moment is mutated.
		    // It is intended to keep the offset in sync with the timezone.
		    hooks.updateOffset = function () {};

		    // MOMENTS

		    // keepLocalTime = true means only change the timezone, without
		    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
		    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
		    // +0200, so we adjust the time as needed, to be valid.
		    //
		    // Keeping the time actually adds/subtracts (one hour)
		    // from the actual represented time. That is why we call updateOffset
		    // a second time. In case it wants us to change the offset again
		    // _changeInProgress == true case, then we have to adjust, because
		    // there is no such time in the given timezone.
		    function getSetOffset(input, keepLocalTime, keepMinutes) {
		        var offset = this._offset || 0,
		            localAdjust;
		        if (!this.isValid()) {
		            return input != null ? this : NaN;
		        }
		        if (input != null) {
		            if (typeof input === 'string') {
		                input = offsetFromString(matchShortOffset, input);
		                if (input === null) {
		                    return this;
		                }
		            } else if (Math.abs(input) < 16 && !keepMinutes) {
		                input = input * 60;
		            }
		            if (!this._isUTC && keepLocalTime) {
		                localAdjust = getDateOffset(this);
		            }
		            this._offset = input;
		            this._isUTC = true;
		            if (localAdjust != null) {
		                this.add(localAdjust, 'm');
		            }
		            if (offset !== input) {
		                if (!keepLocalTime || this._changeInProgress) {
		                    addSubtract(
		                        this,
		                        createDuration(input - offset, 'm'),
		                        1,
		                        false
		                    );
		                } else if (!this._changeInProgress) {
		                    this._changeInProgress = true;
		                    hooks.updateOffset(this, true);
		                    this._changeInProgress = null;
		                }
		            }
		            return this;
		        } else {
		            return this._isUTC ? offset : getDateOffset(this);
		        }
		    }

		    function getSetZone(input, keepLocalTime) {
		        if (input != null) {
		            if (typeof input !== 'string') {
		                input = -input;
		            }

		            this.utcOffset(input, keepLocalTime);

		            return this;
		        } else {
		            return -this.utcOffset();
		        }
		    }

		    function setOffsetToUTC(keepLocalTime) {
		        return this.utcOffset(0, keepLocalTime);
		    }

		    function setOffsetToLocal(keepLocalTime) {
		        if (this._isUTC) {
		            this.utcOffset(0, keepLocalTime);
		            this._isUTC = false;

		            if (keepLocalTime) {
		                this.subtract(getDateOffset(this), 'm');
		            }
		        }
		        return this;
		    }

		    function setOffsetToParsedOffset() {
		        if (this._tzm != null) {
		            this.utcOffset(this._tzm, false, true);
		        } else if (typeof this._i === 'string') {
		            var tZone = offsetFromString(matchOffset, this._i);
		            if (tZone != null) {
		                this.utcOffset(tZone);
		            } else {
		                this.utcOffset(0, true);
		            }
		        }
		        return this;
		    }

		    function hasAlignedHourOffset(input) {
		        if (!this.isValid()) {
		            return false;
		        }
		        input = input ? createLocal(input).utcOffset() : 0;

		        return (this.utcOffset() - input) % 60 === 0;
		    }

		    function isDaylightSavingTime() {
		        return (
		            this.utcOffset() > this.clone().month(0).utcOffset() ||
		            this.utcOffset() > this.clone().month(5).utcOffset()
		        );
		    }

		    function isDaylightSavingTimeShifted() {
		        if (!isUndefined(this._isDSTShifted)) {
		            return this._isDSTShifted;
		        }

		        var c = {},
		            other;

		        copyConfig(c, this);
		        c = prepareConfig(c);

		        if (c._a) {
		            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
		            this._isDSTShifted =
		                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
		        } else {
		            this._isDSTShifted = false;
		        }

		        return this._isDSTShifted;
		    }

		    function isLocal() {
		        return this.isValid() ? !this._isUTC : false;
		    }

		    function isUtcOffset() {
		        return this.isValid() ? this._isUTC : false;
		    }

		    function isUtc() {
		        return this.isValid() ? this._isUTC && this._offset === 0 : false;
		    }

		    // ASP.NET json date format regex
		    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
		        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
		        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
		        // and further modified to allow for strings containing both week and day
		        isoRegex =
		            /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

		    function createDuration(input, key) {
		        var duration = input,
		            // matching against regexp is expensive, do it on demand
		            match = null,
		            sign,
		            ret,
		            diffRes;

		        if (isDuration(input)) {
		            duration = {
		                ms: input._milliseconds,
		                d: input._days,
		                M: input._months,
		            };
		        } else if (isNumber(input) || !isNaN(+input)) {
		            duration = {};
		            if (key) {
		                duration[key] = +input;
		            } else {
		                duration.milliseconds = +input;
		            }
		        } else if ((match = aspNetRegex.exec(input))) {
		            sign = match[1] === '-' ? -1 : 1;
		            duration = {
		                y: 0,
		                d: toInt(match[DATE]) * sign,
		                h: toInt(match[HOUR]) * sign,
		                m: toInt(match[MINUTE]) * sign,
		                s: toInt(match[SECOND]) * sign,
		                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
		            };
		        } else if ((match = isoRegex.exec(input))) {
		            sign = match[1] === '-' ? -1 : 1;
		            duration = {
		                y: parseIso(match[2], sign),
		                M: parseIso(match[3], sign),
		                w: parseIso(match[4], sign),
		                d: parseIso(match[5], sign),
		                h: parseIso(match[6], sign),
		                m: parseIso(match[7], sign),
		                s: parseIso(match[8], sign),
		            };
		        } else if (duration == null) {
		            // checks for null or undefined
		            duration = {};
		        } else if (
		            typeof duration === 'object' &&
		            ('from' in duration || 'to' in duration)
		        ) {
		            diffRes = momentsDifference(
		                createLocal(duration.from),
		                createLocal(duration.to)
		            );

		            duration = {};
		            duration.ms = diffRes.milliseconds;
		            duration.M = diffRes.months;
		        }

		        ret = new Duration(duration);

		        if (isDuration(input) && hasOwnProp(input, '_locale')) {
		            ret._locale = input._locale;
		        }

		        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
		            ret._isValid = input._isValid;
		        }

		        return ret;
		    }

		    createDuration.fn = Duration.prototype;
		    createDuration.invalid = createInvalid$1;

		    function parseIso(inp, sign) {
		        // We'd normally use ~~inp for this, but unfortunately it also
		        // converts floats to ints.
		        // inp may be undefined, so careful calling replace on it.
		        var res = inp && parseFloat(inp.replace(',', '.'));
		        // apply sign while we're at it
		        return (isNaN(res) ? 0 : res) * sign;
		    }

		    function positiveMomentsDifference(base, other) {
		        var res = {};

		        res.months =
		            other.month() - base.month() + (other.year() - base.year()) * 12;
		        if (base.clone().add(res.months, 'M').isAfter(other)) {
		            --res.months;
		        }

		        res.milliseconds = +other - +base.clone().add(res.months, 'M');

		        return res;
		    }

		    function momentsDifference(base, other) {
		        var res;
		        if (!(base.isValid() && other.isValid())) {
		            return { milliseconds: 0, months: 0 };
		        }

		        other = cloneWithOffset(other, base);
		        if (base.isBefore(other)) {
		            res = positiveMomentsDifference(base, other);
		        } else {
		            res = positiveMomentsDifference(other, base);
		            res.milliseconds = -res.milliseconds;
		            res.months = -res.months;
		        }

		        return res;
		    }

		    // TODO: remove 'name' arg after deprecation is removed
		    function createAdder(direction, name) {
		        return function (val, period) {
		            var dur, tmp;
		            //invert the arguments, but complain about it
		            if (period !== null && !isNaN(+period)) {
		                deprecateSimple(
		                    name,
		                    'moment().' +
		                        name +
		                        '(period, number) is deprecated. Please use moment().' +
		                        name +
		                        '(number, period). ' +
		                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
		                );
		                tmp = val;
		                val = period;
		                period = tmp;
		            }

		            dur = createDuration(val, period);
		            addSubtract(this, dur, direction);
		            return this;
		        };
		    }

		    function addSubtract(mom, duration, isAdding, updateOffset) {
		        var milliseconds = duration._milliseconds,
		            days = absRound(duration._days),
		            months = absRound(duration._months);

		        if (!mom.isValid()) {
		            // No op
		            return;
		        }

		        updateOffset = updateOffset == null ? true : updateOffset;

		        if (months) {
		            setMonth(mom, get(mom, 'Month') + months * isAdding);
		        }
		        if (days) {
		            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
		        }
		        if (milliseconds) {
		            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
		        }
		        if (updateOffset) {
		            hooks.updateOffset(mom, days || months);
		        }
		    }

		    var add = createAdder(1, 'add'),
		        subtract = createAdder(-1, 'subtract');

		    function isString(input) {
		        return typeof input === 'string' || input instanceof String;
		    }

		    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
		    function isMomentInput(input) {
		        return (
		            isMoment(input) ||
		            isDate(input) ||
		            isString(input) ||
		            isNumber(input) ||
		            isNumberOrStringArray(input) ||
		            isMomentInputObject(input) ||
		            input === null ||
		            input === undefined
		        );
		    }

		    function isMomentInputObject(input) {
		        var objectTest = isObject(input) && !isObjectEmpty(input),
		            propertyTest = false,
		            properties = [
		                'years',
		                'year',
		                'y',
		                'months',
		                'month',
		                'M',
		                'days',
		                'day',
		                'd',
		                'dates',
		                'date',
		                'D',
		                'hours',
		                'hour',
		                'h',
		                'minutes',
		                'minute',
		                'm',
		                'seconds',
		                'second',
		                's',
		                'milliseconds',
		                'millisecond',
		                'ms',
		            ],
		            i,
		            property,
		            propertyLen = properties.length;

		        for (i = 0; i < propertyLen; i += 1) {
		            property = properties[i];
		            propertyTest = propertyTest || hasOwnProp(input, property);
		        }

		        return objectTest && propertyTest;
		    }

		    function isNumberOrStringArray(input) {
		        var arrayTest = isArray(input),
		            dataTypeTest = false;
		        if (arrayTest) {
		            dataTypeTest =
		                input.filter(function (item) {
		                    return !isNumber(item) && isString(input);
		                }).length === 0;
		        }
		        return arrayTest && dataTypeTest;
		    }

		    function isCalendarSpec(input) {
		        var objectTest = isObject(input) && !isObjectEmpty(input),
		            propertyTest = false,
		            properties = [
		                'sameDay',
		                'nextDay',
		                'lastDay',
		                'nextWeek',
		                'lastWeek',
		                'sameElse',
		            ],
		            i,
		            property;

		        for (i = 0; i < properties.length; i += 1) {
		            property = properties[i];
		            propertyTest = propertyTest || hasOwnProp(input, property);
		        }

		        return objectTest && propertyTest;
		    }

		    function getCalendarFormat(myMoment, now) {
		        var diff = myMoment.diff(now, 'days', true);
		        return diff < -6
		            ? 'sameElse'
		            : diff < -1
		            ? 'lastWeek'
		            : diff < 0
		            ? 'lastDay'
		            : diff < 1
		            ? 'sameDay'
		            : diff < 2
		            ? 'nextDay'
		            : diff < 7
		            ? 'nextWeek'
		            : 'sameElse';
		    }

		    function calendar$1(time, formats) {
		        // Support for single parameter, formats only overload to the calendar function
		        if (arguments.length === 1) {
		            if (!arguments[0]) {
		                time = undefined;
		                formats = undefined;
		            } else if (isMomentInput(arguments[0])) {
		                time = arguments[0];
		                formats = undefined;
		            } else if (isCalendarSpec(arguments[0])) {
		                formats = arguments[0];
		                time = undefined;
		            }
		        }
		        // We want to compare the start of today, vs this.
		        // Getting start-of-today depends on whether we're local/utc/offset or not.
		        var now = time || createLocal(),
		            sod = cloneWithOffset(now, this).startOf('day'),
		            format = hooks.calendarFormat(this, sod) || 'sameElse',
		            output =
		                formats &&
		                (isFunction(formats[format])
		                    ? formats[format].call(this, now)
		                    : formats[format]);

		        return this.format(
		            output || this.localeData().calendar(format, this, createLocal(now))
		        );
		    }

		    function clone() {
		        return new Moment(this);
		    }

		    function isAfter(input, units) {
		        var localInput = isMoment(input) ? input : createLocal(input);
		        if (!(this.isValid() && localInput.isValid())) {
		            return false;
		        }
		        units = normalizeUnits(units) || 'millisecond';
		        if (units === 'millisecond') {
		            return this.valueOf() > localInput.valueOf();
		        } else {
		            return localInput.valueOf() < this.clone().startOf(units).valueOf();
		        }
		    }

		    function isBefore(input, units) {
		        var localInput = isMoment(input) ? input : createLocal(input);
		        if (!(this.isValid() && localInput.isValid())) {
		            return false;
		        }
		        units = normalizeUnits(units) || 'millisecond';
		        if (units === 'millisecond') {
		            return this.valueOf() < localInput.valueOf();
		        } else {
		            return this.clone().endOf(units).valueOf() < localInput.valueOf();
		        }
		    }

		    function isBetween(from, to, units, inclusivity) {
		        var localFrom = isMoment(from) ? from : createLocal(from),
		            localTo = isMoment(to) ? to : createLocal(to);
		        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
		            return false;
		        }
		        inclusivity = inclusivity || '()';
		        return (
		            (inclusivity[0] === '('
		                ? this.isAfter(localFrom, units)
		                : !this.isBefore(localFrom, units)) &&
		            (inclusivity[1] === ')'
		                ? this.isBefore(localTo, units)
		                : !this.isAfter(localTo, units))
		        );
		    }

		    function isSame(input, units) {
		        var localInput = isMoment(input) ? input : createLocal(input),
		            inputMs;
		        if (!(this.isValid() && localInput.isValid())) {
		            return false;
		        }
		        units = normalizeUnits(units) || 'millisecond';
		        if (units === 'millisecond') {
		            return this.valueOf() === localInput.valueOf();
		        } else {
		            inputMs = localInput.valueOf();
		            return (
		                this.clone().startOf(units).valueOf() <= inputMs &&
		                inputMs <= this.clone().endOf(units).valueOf()
		            );
		        }
		    }

		    function isSameOrAfter(input, units) {
		        return this.isSame(input, units) || this.isAfter(input, units);
		    }

		    function isSameOrBefore(input, units) {
		        return this.isSame(input, units) || this.isBefore(input, units);
		    }

		    function diff(input, units, asFloat) {
		        var that, zoneDelta, output;

		        if (!this.isValid()) {
		            return NaN;
		        }

		        that = cloneWithOffset(input, this);

		        if (!that.isValid()) {
		            return NaN;
		        }

		        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

		        units = normalizeUnits(units);

		        switch (units) {
		            case 'year':
		                output = monthDiff(this, that) / 12;
		                break;
		            case 'month':
		                output = monthDiff(this, that);
		                break;
		            case 'quarter':
		                output = monthDiff(this, that) / 3;
		                break;
		            case 'second':
		                output = (this - that) / 1e3;
		                break; // 1000
		            case 'minute':
		                output = (this - that) / 6e4;
		                break; // 1000 * 60
		            case 'hour':
		                output = (this - that) / 36e5;
		                break; // 1000 * 60 * 60
		            case 'day':
		                output = (this - that - zoneDelta) / 864e5;
		                break; // 1000 * 60 * 60 * 24, negate dst
		            case 'week':
		                output = (this - that - zoneDelta) / 6048e5;
		                break; // 1000 * 60 * 60 * 24 * 7, negate dst
		            default:
		                output = this - that;
		        }

		        return asFloat ? output : absFloor(output);
		    }

		    function monthDiff(a, b) {
		        if (a.date() < b.date()) {
		            // end-of-month calculations work correct when the start month has more
		            // days than the end month.
		            return -monthDiff(b, a);
		        }
		        // difference in months
		        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
		            // b is in (anchor - 1 month, anchor + 1 month)
		            anchor = a.clone().add(wholeMonthDiff, 'months'),
		            anchor2,
		            adjust;

		        if (b - anchor < 0) {
		            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
		            // linear across the month
		            adjust = (b - anchor) / (anchor - anchor2);
		        } else {
		            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
		            // linear across the month
		            adjust = (b - anchor) / (anchor2 - anchor);
		        }

		        //check for negative zero, return zero if negative zero
		        return -(wholeMonthDiff + adjust) || 0;
		    }

		    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
		    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

		    function toString() {
		        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
		    }

		    function toISOString(keepOffset) {
		        if (!this.isValid()) {
		            return null;
		        }
		        var utc = keepOffset !== true,
		            m = utc ? this.clone().utc() : this;
		        if (m.year() < 0 || m.year() > 9999) {
		            return formatMoment(
		                m,
		                utc
		                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
		                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
		            );
		        }
		        if (isFunction(Date.prototype.toISOString)) {
		            // native implementation is ~50x faster, use it when we can
		            if (utc) {
		                return this.toDate().toISOString();
		            } else {
		                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
		                    .toISOString()
		                    .replace('Z', formatMoment(m, 'Z'));
		            }
		        }
		        return formatMoment(
		            m,
		            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
		        );
		    }

		    /**
		     * Return a human readable representation of a moment that can
		     * also be evaluated to get a new moment which is the same
		     *
		     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
		     */
		    function inspect() {
		        if (!this.isValid()) {
		            return 'moment.invalid(/* ' + this._i + ' */)';
		        }
		        var func = 'moment',
		            zone = '',
		            prefix,
		            year,
		            datetime,
		            suffix;
		        if (!this.isLocal()) {
		            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
		            zone = 'Z';
		        }
		        prefix = '[' + func + '("]';
		        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
		        datetime = '-MM-DD[T]HH:mm:ss.SSS';
		        suffix = zone + '[")]';

		        return this.format(prefix + year + datetime + suffix);
		    }

		    function format(inputString) {
		        if (!inputString) {
		            inputString = this.isUtc()
		                ? hooks.defaultFormatUtc
		                : hooks.defaultFormat;
		        }
		        var output = formatMoment(this, inputString);
		        return this.localeData().postformat(output);
		    }

		    function from(time, withoutSuffix) {
		        if (
		            this.isValid() &&
		            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
		        ) {
		            return createDuration({ to: this, from: time })
		                .locale(this.locale())
		                .humanize(!withoutSuffix);
		        } else {
		            return this.localeData().invalidDate();
		        }
		    }

		    function fromNow(withoutSuffix) {
		        return this.from(createLocal(), withoutSuffix);
		    }

		    function to(time, withoutSuffix) {
		        if (
		            this.isValid() &&
		            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
		        ) {
		            return createDuration({ from: this, to: time })
		                .locale(this.locale())
		                .humanize(!withoutSuffix);
		        } else {
		            return this.localeData().invalidDate();
		        }
		    }

		    function toNow(withoutSuffix) {
		        return this.to(createLocal(), withoutSuffix);
		    }

		    // If passed a locale key, it will set the locale for this
		    // instance.  Otherwise, it will return the locale configuration
		    // variables for this instance.
		    function locale(key) {
		        var newLocaleData;

		        if (key === undefined) {
		            return this._locale._abbr;
		        } else {
		            newLocaleData = getLocale(key);
		            if (newLocaleData != null) {
		                this._locale = newLocaleData;
		            }
		            return this;
		        }
		    }

		    var lang = deprecate(
		        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
		        function (key) {
		            if (key === undefined) {
		                return this.localeData();
		            } else {
		                return this.locale(key);
		            }
		        }
		    );

		    function localeData() {
		        return this._locale;
		    }

		    var MS_PER_SECOND = 1000,
		        MS_PER_MINUTE = 60 * MS_PER_SECOND,
		        MS_PER_HOUR = 60 * MS_PER_MINUTE,
		        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

		    // actual modulo - handles negative numbers (for dates before 1970):
		    function mod$1(dividend, divisor) {
		        return ((dividend % divisor) + divisor) % divisor;
		    }

		    function localStartOfDate(y, m, d) {
		        // the date constructor remaps years 0-99 to 1900-1999
		        if (y < 100 && y >= 0) {
		            // preserve leap years using a full 400 year cycle, then reset
		            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
		        } else {
		            return new Date(y, m, d).valueOf();
		        }
		    }

		    function utcStartOfDate(y, m, d) {
		        // Date.UTC remaps years 0-99 to 1900-1999
		        if (y < 100 && y >= 0) {
		            // preserve leap years using a full 400 year cycle, then reset
		            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
		        } else {
		            return Date.UTC(y, m, d);
		        }
		    }

		    function startOf(units) {
		        var time, startOfDate;
		        units = normalizeUnits(units);
		        if (units === undefined || units === 'millisecond' || !this.isValid()) {
		            return this;
		        }

		        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

		        switch (units) {
		            case 'year':
		                time = startOfDate(this.year(), 0, 1);
		                break;
		            case 'quarter':
		                time = startOfDate(
		                    this.year(),
		                    this.month() - (this.month() % 3),
		                    1
		                );
		                break;
		            case 'month':
		                time = startOfDate(this.year(), this.month(), 1);
		                break;
		            case 'week':
		                time = startOfDate(
		                    this.year(),
		                    this.month(),
		                    this.date() - this.weekday()
		                );
		                break;
		            case 'isoWeek':
		                time = startOfDate(
		                    this.year(),
		                    this.month(),
		                    this.date() - (this.isoWeekday() - 1)
		                );
		                break;
		            case 'day':
		            case 'date':
		                time = startOfDate(this.year(), this.month(), this.date());
		                break;
		            case 'hour':
		                time = this._d.valueOf();
		                time -= mod$1(
		                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
		                    MS_PER_HOUR
		                );
		                break;
		            case 'minute':
		                time = this._d.valueOf();
		                time -= mod$1(time, MS_PER_MINUTE);
		                break;
		            case 'second':
		                time = this._d.valueOf();
		                time -= mod$1(time, MS_PER_SECOND);
		                break;
		        }

		        this._d.setTime(time);
		        hooks.updateOffset(this, true);
		        return this;
		    }

		    function endOf(units) {
		        var time, startOfDate;
		        units = normalizeUnits(units);
		        if (units === undefined || units === 'millisecond' || !this.isValid()) {
		            return this;
		        }

		        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

		        switch (units) {
		            case 'year':
		                time = startOfDate(this.year() + 1, 0, 1) - 1;
		                break;
		            case 'quarter':
		                time =
		                    startOfDate(
		                        this.year(),
		                        this.month() - (this.month() % 3) + 3,
		                        1
		                    ) - 1;
		                break;
		            case 'month':
		                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
		                break;
		            case 'week':
		                time =
		                    startOfDate(
		                        this.year(),
		                        this.month(),
		                        this.date() - this.weekday() + 7
		                    ) - 1;
		                break;
		            case 'isoWeek':
		                time =
		                    startOfDate(
		                        this.year(),
		                        this.month(),
		                        this.date() - (this.isoWeekday() - 1) + 7
		                    ) - 1;
		                break;
		            case 'day':
		            case 'date':
		                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
		                break;
		            case 'hour':
		                time = this._d.valueOf();
		                time +=
		                    MS_PER_HOUR -
		                    mod$1(
		                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
		                        MS_PER_HOUR
		                    ) -
		                    1;
		                break;
		            case 'minute':
		                time = this._d.valueOf();
		                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
		                break;
		            case 'second':
		                time = this._d.valueOf();
		                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
		                break;
		        }

		        this._d.setTime(time);
		        hooks.updateOffset(this, true);
		        return this;
		    }

		    function valueOf() {
		        return this._d.valueOf() - (this._offset || 0) * 60000;
		    }

		    function unix() {
		        return Math.floor(this.valueOf() / 1000);
		    }

		    function toDate() {
		        return new Date(this.valueOf());
		    }

		    function toArray() {
		        var m = this;
		        return [
		            m.year(),
		            m.month(),
		            m.date(),
		            m.hour(),
		            m.minute(),
		            m.second(),
		            m.millisecond(),
		        ];
		    }

		    function toObject() {
		        var m = this;
		        return {
		            years: m.year(),
		            months: m.month(),
		            date: m.date(),
		            hours: m.hours(),
		            minutes: m.minutes(),
		            seconds: m.seconds(),
		            milliseconds: m.milliseconds(),
		        };
		    }

		    function toJSON() {
		        // new Date(NaN).toJSON() === null
		        return this.isValid() ? this.toISOString() : null;
		    }

		    function isValid$2() {
		        return isValid(this);
		    }

		    function parsingFlags() {
		        return extend({}, getParsingFlags(this));
		    }

		    function invalidAt() {
		        return getParsingFlags(this).overflow;
		    }

		    function creationData() {
		        return {
		            input: this._i,
		            format: this._f,
		            locale: this._locale,
		            isUTC: this._isUTC,
		            strict: this._strict,
		        };
		    }

		    addFormatToken('N', 0, 0, 'eraAbbr');
		    addFormatToken('NN', 0, 0, 'eraAbbr');
		    addFormatToken('NNN', 0, 0, 'eraAbbr');
		    addFormatToken('NNNN', 0, 0, 'eraName');
		    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

		    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
		    addFormatToken('y', ['yy', 2], 0, 'eraYear');
		    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
		    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

		    addRegexToken('N', matchEraAbbr);
		    addRegexToken('NN', matchEraAbbr);
		    addRegexToken('NNN', matchEraAbbr);
		    addRegexToken('NNNN', matchEraName);
		    addRegexToken('NNNNN', matchEraNarrow);

		    addParseToken(
		        ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],
		        function (input, array, config, token) {
		            var era = config._locale.erasParse(input, token, config._strict);
		            if (era) {
		                getParsingFlags(config).era = era;
		            } else {
		                getParsingFlags(config).invalidEra = input;
		            }
		        }
		    );

		    addRegexToken('y', matchUnsigned);
		    addRegexToken('yy', matchUnsigned);
		    addRegexToken('yyy', matchUnsigned);
		    addRegexToken('yyyy', matchUnsigned);
		    addRegexToken('yo', matchEraYearOrdinal);

		    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
		    addParseToken(['yo'], function (input, array, config, token) {
		        var match;
		        if (config._locale._eraYearOrdinalRegex) {
		            match = input.match(config._locale._eraYearOrdinalRegex);
		        }

		        if (config._locale.eraYearOrdinalParse) {
		            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
		        } else {
		            array[YEAR] = parseInt(input, 10);
		        }
		    });

		    function localeEras(m, format) {
		        var i,
		            l,
		            date,
		            eras = this._eras || getLocale('en')._eras;
		        for (i = 0, l = eras.length; i < l; ++i) {
		            switch (typeof eras[i].since) {
		                case 'string':
		                    // truncate time
		                    date = hooks(eras[i].since).startOf('day');
		                    eras[i].since = date.valueOf();
		                    break;
		            }

		            switch (typeof eras[i].until) {
		                case 'undefined':
		                    eras[i].until = +Infinity;
		                    break;
		                case 'string':
		                    // truncate time
		                    date = hooks(eras[i].until).startOf('day').valueOf();
		                    eras[i].until = date.valueOf();
		                    break;
		            }
		        }
		        return eras;
		    }

		    function localeErasParse(eraName, format, strict) {
		        var i,
		            l,
		            eras = this.eras(),
		            name,
		            abbr,
		            narrow;
		        eraName = eraName.toUpperCase();

		        for (i = 0, l = eras.length; i < l; ++i) {
		            name = eras[i].name.toUpperCase();
		            abbr = eras[i].abbr.toUpperCase();
		            narrow = eras[i].narrow.toUpperCase();

		            if (strict) {
		                switch (format) {
		                    case 'N':
		                    case 'NN':
		                    case 'NNN':
		                        if (abbr === eraName) {
		                            return eras[i];
		                        }
		                        break;

		                    case 'NNNN':
		                        if (name === eraName) {
		                            return eras[i];
		                        }
		                        break;

		                    case 'NNNNN':
		                        if (narrow === eraName) {
		                            return eras[i];
		                        }
		                        break;
		                }
		            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
		                return eras[i];
		            }
		        }
		    }

		    function localeErasConvertYear(era, year) {
		        var dir = era.since <= era.until ? +1 : -1;
		        if (year === undefined) {
		            return hooks(era.since).year();
		        } else {
		            return hooks(era.since).year() + (year - era.offset) * dir;
		        }
		    }

		    function getEraName() {
		        var i,
		            l,
		            val,
		            eras = this.localeData().eras();
		        for (i = 0, l = eras.length; i < l; ++i) {
		            // truncate time
		            val = this.clone().startOf('day').valueOf();

		            if (eras[i].since <= val && val <= eras[i].until) {
		                return eras[i].name;
		            }
		            if (eras[i].until <= val && val <= eras[i].since) {
		                return eras[i].name;
		            }
		        }

		        return '';
		    }

		    function getEraNarrow() {
		        var i,
		            l,
		            val,
		            eras = this.localeData().eras();
		        for (i = 0, l = eras.length; i < l; ++i) {
		            // truncate time
		            val = this.clone().startOf('day').valueOf();

		            if (eras[i].since <= val && val <= eras[i].until) {
		                return eras[i].narrow;
		            }
		            if (eras[i].until <= val && val <= eras[i].since) {
		                return eras[i].narrow;
		            }
		        }

		        return '';
		    }

		    function getEraAbbr() {
		        var i,
		            l,
		            val,
		            eras = this.localeData().eras();
		        for (i = 0, l = eras.length; i < l; ++i) {
		            // truncate time
		            val = this.clone().startOf('day').valueOf();

		            if (eras[i].since <= val && val <= eras[i].until) {
		                return eras[i].abbr;
		            }
		            if (eras[i].until <= val && val <= eras[i].since) {
		                return eras[i].abbr;
		            }
		        }

		        return '';
		    }

		    function getEraYear() {
		        var i,
		            l,
		            dir,
		            val,
		            eras = this.localeData().eras();
		        for (i = 0, l = eras.length; i < l; ++i) {
		            dir = eras[i].since <= eras[i].until ? +1 : -1;

		            // truncate time
		            val = this.clone().startOf('day').valueOf();

		            if (
		                (eras[i].since <= val && val <= eras[i].until) ||
		                (eras[i].until <= val && val <= eras[i].since)
		            ) {
		                return (
		                    (this.year() - hooks(eras[i].since).year()) * dir +
		                    eras[i].offset
		                );
		            }
		        }

		        return this.year();
		    }

		    function erasNameRegex(isStrict) {
		        if (!hasOwnProp(this, '_erasNameRegex')) {
		            computeErasParse.call(this);
		        }
		        return isStrict ? this._erasNameRegex : this._erasRegex;
		    }

		    function erasAbbrRegex(isStrict) {
		        if (!hasOwnProp(this, '_erasAbbrRegex')) {
		            computeErasParse.call(this);
		        }
		        return isStrict ? this._erasAbbrRegex : this._erasRegex;
		    }

		    function erasNarrowRegex(isStrict) {
		        if (!hasOwnProp(this, '_erasNarrowRegex')) {
		            computeErasParse.call(this);
		        }
		        return isStrict ? this._erasNarrowRegex : this._erasRegex;
		    }

		    function matchEraAbbr(isStrict, locale) {
		        return locale.erasAbbrRegex(isStrict);
		    }

		    function matchEraName(isStrict, locale) {
		        return locale.erasNameRegex(isStrict);
		    }

		    function matchEraNarrow(isStrict, locale) {
		        return locale.erasNarrowRegex(isStrict);
		    }

		    function matchEraYearOrdinal(isStrict, locale) {
		        return locale._eraYearOrdinalRegex || matchUnsigned;
		    }

		    function computeErasParse() {
		        var abbrPieces = [],
		            namePieces = [],
		            narrowPieces = [],
		            mixedPieces = [],
		            i,
		            l,
		            eras = this.eras();

		        for (i = 0, l = eras.length; i < l; ++i) {
		            namePieces.push(regexEscape(eras[i].name));
		            abbrPieces.push(regexEscape(eras[i].abbr));
		            narrowPieces.push(regexEscape(eras[i].narrow));

		            mixedPieces.push(regexEscape(eras[i].name));
		            mixedPieces.push(regexEscape(eras[i].abbr));
		            mixedPieces.push(regexEscape(eras[i].narrow));
		        }

		        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
		        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
		        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
		        this._erasNarrowRegex = new RegExp(
		            '^(' + narrowPieces.join('|') + ')',
		            'i'
		        );
		    }

		    // FORMATTING

		    addFormatToken(0, ['gg', 2], 0, function () {
		        return this.weekYear() % 100;
		    });

		    addFormatToken(0, ['GG', 2], 0, function () {
		        return this.isoWeekYear() % 100;
		    });

		    function addWeekYearFormatToken(token, getter) {
		        addFormatToken(0, [token, token.length], 0, getter);
		    }

		    addWeekYearFormatToken('gggg', 'weekYear');
		    addWeekYearFormatToken('ggggg', 'weekYear');
		    addWeekYearFormatToken('GGGG', 'isoWeekYear');
		    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

		    // ALIASES

		    addUnitAlias('weekYear', 'gg');
		    addUnitAlias('isoWeekYear', 'GG');

		    // PRIORITY

		    addUnitPriority('weekYear', 1);
		    addUnitPriority('isoWeekYear', 1);

		    // PARSING

		    addRegexToken('G', matchSigned);
		    addRegexToken('g', matchSigned);
		    addRegexToken('GG', match1to2, match2);
		    addRegexToken('gg', match1to2, match2);
		    addRegexToken('GGGG', match1to4, match4);
		    addRegexToken('gggg', match1to4, match4);
		    addRegexToken('GGGGG', match1to6, match6);
		    addRegexToken('ggggg', match1to6, match6);

		    addWeekParseToken(
		        ['gggg', 'ggggg', 'GGGG', 'GGGGG'],
		        function (input, week, config, token) {
		            week[token.substr(0, 2)] = toInt(input);
		        }
		    );

		    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
		        week[token] = hooks.parseTwoDigitYear(input);
		    });

		    // MOMENTS

		    function getSetWeekYear(input) {
		        return getSetWeekYearHelper.call(
		            this,
		            input,
		            this.week(),
		            this.weekday(),
		            this.localeData()._week.dow,
		            this.localeData()._week.doy
		        );
		    }

		    function getSetISOWeekYear(input) {
		        return getSetWeekYearHelper.call(
		            this,
		            input,
		            this.isoWeek(),
		            this.isoWeekday(),
		            1,
		            4
		        );
		    }

		    function getISOWeeksInYear() {
		        return weeksInYear(this.year(), 1, 4);
		    }

		    function getISOWeeksInISOWeekYear() {
		        return weeksInYear(this.isoWeekYear(), 1, 4);
		    }

		    function getWeeksInYear() {
		        var weekInfo = this.localeData()._week;
		        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
		    }

		    function getWeeksInWeekYear() {
		        var weekInfo = this.localeData()._week;
		        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
		    }

		    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
		        var weeksTarget;
		        if (input == null) {
		            return weekOfYear(this, dow, doy).year;
		        } else {
		            weeksTarget = weeksInYear(input, dow, doy);
		            if (week > weeksTarget) {
		                week = weeksTarget;
		            }
		            return setWeekAll.call(this, input, week, weekday, dow, doy);
		        }
		    }

		    function setWeekAll(weekYear, week, weekday, dow, doy) {
		        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
		            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

		        this.year(date.getUTCFullYear());
		        this.month(date.getUTCMonth());
		        this.date(date.getUTCDate());
		        return this;
		    }

		    // FORMATTING

		    addFormatToken('Q', 0, 'Qo', 'quarter');

		    // ALIASES

		    addUnitAlias('quarter', 'Q');

		    // PRIORITY

		    addUnitPriority('quarter', 7);

		    // PARSING

		    addRegexToken('Q', match1);
		    addParseToken('Q', function (input, array) {
		        array[MONTH] = (toInt(input) - 1) * 3;
		    });

		    // MOMENTS

		    function getSetQuarter(input) {
		        return input == null
		            ? Math.ceil((this.month() + 1) / 3)
		            : this.month((input - 1) * 3 + (this.month() % 3));
		    }

		    // FORMATTING

		    addFormatToken('D', ['DD', 2], 'Do', 'date');

		    // ALIASES

		    addUnitAlias('date', 'D');

		    // PRIORITY
		    addUnitPriority('date', 9);

		    // PARSING

		    addRegexToken('D', match1to2);
		    addRegexToken('DD', match1to2, match2);
		    addRegexToken('Do', function (isStrict, locale) {
		        // TODO: Remove "ordinalParse" fallback in next major release.
		        return isStrict
		            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
		            : locale._dayOfMonthOrdinalParseLenient;
		    });

		    addParseToken(['D', 'DD'], DATE);
		    addParseToken('Do', function (input, array) {
		        array[DATE] = toInt(input.match(match1to2)[0]);
		    });

		    // MOMENTS

		    var getSetDayOfMonth = makeGetSet('Date', true);

		    // FORMATTING

		    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

		    // ALIASES

		    addUnitAlias('dayOfYear', 'DDD');

		    // PRIORITY
		    addUnitPriority('dayOfYear', 4);

		    // PARSING

		    addRegexToken('DDD', match1to3);
		    addRegexToken('DDDD', match3);
		    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
		        config._dayOfYear = toInt(input);
		    });

		    // HELPERS

		    // MOMENTS

		    function getSetDayOfYear(input) {
		        var dayOfYear =
		            Math.round(
		                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
		            ) + 1;
		        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
		    }

		    // FORMATTING

		    addFormatToken('m', ['mm', 2], 0, 'minute');

		    // ALIASES

		    addUnitAlias('minute', 'm');

		    // PRIORITY

		    addUnitPriority('minute', 14);

		    // PARSING

		    addRegexToken('m', match1to2);
		    addRegexToken('mm', match1to2, match2);
		    addParseToken(['m', 'mm'], MINUTE);

		    // MOMENTS

		    var getSetMinute = makeGetSet('Minutes', false);

		    // FORMATTING

		    addFormatToken('s', ['ss', 2], 0, 'second');

		    // ALIASES

		    addUnitAlias('second', 's');

		    // PRIORITY

		    addUnitPriority('second', 15);

		    // PARSING

		    addRegexToken('s', match1to2);
		    addRegexToken('ss', match1to2, match2);
		    addParseToken(['s', 'ss'], SECOND);

		    // MOMENTS

		    var getSetSecond = makeGetSet('Seconds', false);

		    // FORMATTING

		    addFormatToken('S', 0, 0, function () {
		        return ~~(this.millisecond() / 100);
		    });

		    addFormatToken(0, ['SS', 2], 0, function () {
		        return ~~(this.millisecond() / 10);
		    });

		    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
		    addFormatToken(0, ['SSSS', 4], 0, function () {
		        return this.millisecond() * 10;
		    });
		    addFormatToken(0, ['SSSSS', 5], 0, function () {
		        return this.millisecond() * 100;
		    });
		    addFormatToken(0, ['SSSSSS', 6], 0, function () {
		        return this.millisecond() * 1000;
		    });
		    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
		        return this.millisecond() * 10000;
		    });
		    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
		        return this.millisecond() * 100000;
		    });
		    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
		        return this.millisecond() * 1000000;
		    });

		    // ALIASES

		    addUnitAlias('millisecond', 'ms');

		    // PRIORITY

		    addUnitPriority('millisecond', 16);

		    // PARSING

		    addRegexToken('S', match1to3, match1);
		    addRegexToken('SS', match1to3, match2);
		    addRegexToken('SSS', match1to3, match3);

		    var token, getSetMillisecond;
		    for (token = 'SSSS'; token.length <= 9; token += 'S') {
		        addRegexToken(token, matchUnsigned);
		    }

		    function parseMs(input, array) {
		        array[MILLISECOND] = toInt(('0.' + input) * 1000);
		    }

		    for (token = 'S'; token.length <= 9; token += 'S') {
		        addParseToken(token, parseMs);
		    }

		    getSetMillisecond = makeGetSet('Milliseconds', false);

		    // FORMATTING

		    addFormatToken('z', 0, 0, 'zoneAbbr');
		    addFormatToken('zz', 0, 0, 'zoneName');

		    // MOMENTS

		    function getZoneAbbr() {
		        return this._isUTC ? 'UTC' : '';
		    }

		    function getZoneName() {
		        return this._isUTC ? 'Coordinated Universal Time' : '';
		    }

		    var proto = Moment.prototype;

		    proto.add = add;
		    proto.calendar = calendar$1;
		    proto.clone = clone;
		    proto.diff = diff;
		    proto.endOf = endOf;
		    proto.format = format;
		    proto.from = from;
		    proto.fromNow = fromNow;
		    proto.to = to;
		    proto.toNow = toNow;
		    proto.get = stringGet;
		    proto.invalidAt = invalidAt;
		    proto.isAfter = isAfter;
		    proto.isBefore = isBefore;
		    proto.isBetween = isBetween;
		    proto.isSame = isSame;
		    proto.isSameOrAfter = isSameOrAfter;
		    proto.isSameOrBefore = isSameOrBefore;
		    proto.isValid = isValid$2;
		    proto.lang = lang;
		    proto.locale = locale;
		    proto.localeData = localeData;
		    proto.max = prototypeMax;
		    proto.min = prototypeMin;
		    proto.parsingFlags = parsingFlags;
		    proto.set = stringSet;
		    proto.startOf = startOf;
		    proto.subtract = subtract;
		    proto.toArray = toArray;
		    proto.toObject = toObject;
		    proto.toDate = toDate;
		    proto.toISOString = toISOString;
		    proto.inspect = inspect;
		    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
		        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
		            return 'Moment<' + this.format() + '>';
		        };
		    }
		    proto.toJSON = toJSON;
		    proto.toString = toString;
		    proto.unix = unix;
		    proto.valueOf = valueOf;
		    proto.creationData = creationData;
		    proto.eraName = getEraName;
		    proto.eraNarrow = getEraNarrow;
		    proto.eraAbbr = getEraAbbr;
		    proto.eraYear = getEraYear;
		    proto.year = getSetYear;
		    proto.isLeapYear = getIsLeapYear;
		    proto.weekYear = getSetWeekYear;
		    proto.isoWeekYear = getSetISOWeekYear;
		    proto.quarter = proto.quarters = getSetQuarter;
		    proto.month = getSetMonth;
		    proto.daysInMonth = getDaysInMonth;
		    proto.week = proto.weeks = getSetWeek;
		    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
		    proto.weeksInYear = getWeeksInYear;
		    proto.weeksInWeekYear = getWeeksInWeekYear;
		    proto.isoWeeksInYear = getISOWeeksInYear;
		    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
		    proto.date = getSetDayOfMonth;
		    proto.day = proto.days = getSetDayOfWeek;
		    proto.weekday = getSetLocaleDayOfWeek;
		    proto.isoWeekday = getSetISODayOfWeek;
		    proto.dayOfYear = getSetDayOfYear;
		    proto.hour = proto.hours = getSetHour;
		    proto.minute = proto.minutes = getSetMinute;
		    proto.second = proto.seconds = getSetSecond;
		    proto.millisecond = proto.milliseconds = getSetMillisecond;
		    proto.utcOffset = getSetOffset;
		    proto.utc = setOffsetToUTC;
		    proto.local = setOffsetToLocal;
		    proto.parseZone = setOffsetToParsedOffset;
		    proto.hasAlignedHourOffset = hasAlignedHourOffset;
		    proto.isDST = isDaylightSavingTime;
		    proto.isLocal = isLocal;
		    proto.isUtcOffset = isUtcOffset;
		    proto.isUtc = isUtc;
		    proto.isUTC = isUtc;
		    proto.zoneAbbr = getZoneAbbr;
		    proto.zoneName = getZoneName;
		    proto.dates = deprecate(
		        'dates accessor is deprecated. Use date instead.',
		        getSetDayOfMonth
		    );
		    proto.months = deprecate(
		        'months accessor is deprecated. Use month instead',
		        getSetMonth
		    );
		    proto.years = deprecate(
		        'years accessor is deprecated. Use year instead',
		        getSetYear
		    );
		    proto.zone = deprecate(
		        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
		        getSetZone
		    );
		    proto.isDSTShifted = deprecate(
		        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
		        isDaylightSavingTimeShifted
		    );

		    function createUnix(input) {
		        return createLocal(input * 1000);
		    }

		    function createInZone() {
		        return createLocal.apply(null, arguments).parseZone();
		    }

		    function preParsePostFormat(string) {
		        return string;
		    }

		    var proto$1 = Locale.prototype;

		    proto$1.calendar = calendar;
		    proto$1.longDateFormat = longDateFormat;
		    proto$1.invalidDate = invalidDate;
		    proto$1.ordinal = ordinal;
		    proto$1.preparse = preParsePostFormat;
		    proto$1.postformat = preParsePostFormat;
		    proto$1.relativeTime = relativeTime;
		    proto$1.pastFuture = pastFuture;
		    proto$1.set = set;
		    proto$1.eras = localeEras;
		    proto$1.erasParse = localeErasParse;
		    proto$1.erasConvertYear = localeErasConvertYear;
		    proto$1.erasAbbrRegex = erasAbbrRegex;
		    proto$1.erasNameRegex = erasNameRegex;
		    proto$1.erasNarrowRegex = erasNarrowRegex;

		    proto$1.months = localeMonths;
		    proto$1.monthsShort = localeMonthsShort;
		    proto$1.monthsParse = localeMonthsParse;
		    proto$1.monthsRegex = monthsRegex;
		    proto$1.monthsShortRegex = monthsShortRegex;
		    proto$1.week = localeWeek;
		    proto$1.firstDayOfYear = localeFirstDayOfYear;
		    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

		    proto$1.weekdays = localeWeekdays;
		    proto$1.weekdaysMin = localeWeekdaysMin;
		    proto$1.weekdaysShort = localeWeekdaysShort;
		    proto$1.weekdaysParse = localeWeekdaysParse;

		    proto$1.weekdaysRegex = weekdaysRegex;
		    proto$1.weekdaysShortRegex = weekdaysShortRegex;
		    proto$1.weekdaysMinRegex = weekdaysMinRegex;

		    proto$1.isPM = localeIsPM;
		    proto$1.meridiem = localeMeridiem;

		    function get$1(format, index, field, setter) {
		        var locale = getLocale(),
		            utc = createUTC().set(setter, index);
		        return locale[field](utc, format);
		    }

		    function listMonthsImpl(format, index, field) {
		        if (isNumber(format)) {
		            index = format;
		            format = undefined;
		        }

		        format = format || '';

		        if (index != null) {
		            return get$1(format, index, field, 'month');
		        }

		        var i,
		            out = [];
		        for (i = 0; i < 12; i++) {
		            out[i] = get$1(format, i, field, 'month');
		        }
		        return out;
		    }

		    // ()
		    // (5)
		    // (fmt, 5)
		    // (fmt)
		    // (true)
		    // (true, 5)
		    // (true, fmt, 5)
		    // (true, fmt)
		    function listWeekdaysImpl(localeSorted, format, index, field) {
		        if (typeof localeSorted === 'boolean') {
		            if (isNumber(format)) {
		                index = format;
		                format = undefined;
		            }

		            format = format || '';
		        } else {
		            format = localeSorted;
		            index = format;
		            localeSorted = false;

		            if (isNumber(format)) {
		                index = format;
		                format = undefined;
		            }

		            format = format || '';
		        }

		        var locale = getLocale(),
		            shift = localeSorted ? locale._week.dow : 0,
		            i,
		            out = [];

		        if (index != null) {
		            return get$1(format, (index + shift) % 7, field, 'day');
		        }

		        for (i = 0; i < 7; i++) {
		            out[i] = get$1(format, (i + shift) % 7, field, 'day');
		        }
		        return out;
		    }

		    function listMonths(format, index) {
		        return listMonthsImpl(format, index, 'months');
		    }

		    function listMonthsShort(format, index) {
		        return listMonthsImpl(format, index, 'monthsShort');
		    }

		    function listWeekdays(localeSorted, format, index) {
		        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
		    }

		    function listWeekdaysShort(localeSorted, format, index) {
		        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
		    }

		    function listWeekdaysMin(localeSorted, format, index) {
		        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
		    }

		    getSetGlobalLocale('en', {
		        eras: [
		            {
		                since: '0001-01-01',
		                until: +Infinity,
		                offset: 1,
		                name: 'Anno Domini',
		                narrow: 'AD',
		                abbr: 'AD',
		            },
		            {
		                since: '0000-12-31',
		                until: -Infinity,
		                offset: 1,
		                name: 'Before Christ',
		                narrow: 'BC',
		                abbr: 'BC',
		            },
		        ],
		        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
		        ordinal: function (number) {
		            var b = number % 10,
		                output =
		                    toInt((number % 100) / 10) === 1
		                        ? 'th'
		                        : b === 1
		                        ? 'st'
		                        : b === 2
		                        ? 'nd'
		                        : b === 3
		                        ? 'rd'
		                        : 'th';
		            return number + output;
		        },
		    });

		    // Side effect imports

		    hooks.lang = deprecate(
		        'moment.lang is deprecated. Use moment.locale instead.',
		        getSetGlobalLocale
		    );
		    hooks.langData = deprecate(
		        'moment.langData is deprecated. Use moment.localeData instead.',
		        getLocale
		    );

		    var mathAbs = Math.abs;

		    function abs() {
		        var data = this._data;

		        this._milliseconds = mathAbs(this._milliseconds);
		        this._days = mathAbs(this._days);
		        this._months = mathAbs(this._months);

		        data.milliseconds = mathAbs(data.milliseconds);
		        data.seconds = mathAbs(data.seconds);
		        data.minutes = mathAbs(data.minutes);
		        data.hours = mathAbs(data.hours);
		        data.months = mathAbs(data.months);
		        data.years = mathAbs(data.years);

		        return this;
		    }

		    function addSubtract$1(duration, input, value, direction) {
		        var other = createDuration(input, value);

		        duration._milliseconds += direction * other._milliseconds;
		        duration._days += direction * other._days;
		        duration._months += direction * other._months;

		        return duration._bubble();
		    }

		    // supports only 2.0-style add(1, 's') or add(duration)
		    function add$1(input, value) {
		        return addSubtract$1(this, input, value, 1);
		    }

		    // supports only 2.0-style subtract(1, 's') or subtract(duration)
		    function subtract$1(input, value) {
		        return addSubtract$1(this, input, value, -1);
		    }

		    function absCeil(number) {
		        if (number < 0) {
		            return Math.floor(number);
		        } else {
		            return Math.ceil(number);
		        }
		    }

		    function bubble() {
		        var milliseconds = this._milliseconds,
		            days = this._days,
		            months = this._months,
		            data = this._data,
		            seconds,
		            minutes,
		            hours,
		            years,
		            monthsFromDays;

		        // if we have a mix of positive and negative values, bubble down first
		        // check: https://github.com/moment/moment/issues/2166
		        if (
		            !(
		                (milliseconds >= 0 && days >= 0 && months >= 0) ||
		                (milliseconds <= 0 && days <= 0 && months <= 0)
		            )
		        ) {
		            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
		            days = 0;
		            months = 0;
		        }

		        // The following code bubbles up values, see the tests for
		        // examples of what that means.
		        data.milliseconds = milliseconds % 1000;

		        seconds = absFloor(milliseconds / 1000);
		        data.seconds = seconds % 60;

		        minutes = absFloor(seconds / 60);
		        data.minutes = minutes % 60;

		        hours = absFloor(minutes / 60);
		        data.hours = hours % 24;

		        days += absFloor(hours / 24);

		        // convert days to months
		        monthsFromDays = absFloor(daysToMonths(days));
		        months += monthsFromDays;
		        days -= absCeil(monthsToDays(monthsFromDays));

		        // 12 months -> 1 year
		        years = absFloor(months / 12);
		        months %= 12;

		        data.days = days;
		        data.months = months;
		        data.years = years;

		        return this;
		    }

		    function daysToMonths(days) {
		        // 400 years have 146097 days (taking into account leap year rules)
		        // 400 years have 12 months === 4800
		        return (days * 4800) / 146097;
		    }

		    function monthsToDays(months) {
		        // the reverse of daysToMonths
		        return (months * 146097) / 4800;
		    }

		    function as(units) {
		        if (!this.isValid()) {
		            return NaN;
		        }
		        var days,
		            months,
		            milliseconds = this._milliseconds;

		        units = normalizeUnits(units);

		        if (units === 'month' || units === 'quarter' || units === 'year') {
		            days = this._days + milliseconds / 864e5;
		            months = this._months + daysToMonths(days);
		            switch (units) {
		                case 'month':
		                    return months;
		                case 'quarter':
		                    return months / 3;
		                case 'year':
		                    return months / 12;
		            }
		        } else {
		            // handle milliseconds separately because of floating point math errors (issue #1867)
		            days = this._days + Math.round(monthsToDays(this._months));
		            switch (units) {
		                case 'week':
		                    return days / 7 + milliseconds / 6048e5;
		                case 'day':
		                    return days + milliseconds / 864e5;
		                case 'hour':
		                    return days * 24 + milliseconds / 36e5;
		                case 'minute':
		                    return days * 1440 + milliseconds / 6e4;
		                case 'second':
		                    return days * 86400 + milliseconds / 1000;
		                // Math.floor prevents floating point math errors here
		                case 'millisecond':
		                    return Math.floor(days * 864e5) + milliseconds;
		                default:
		                    throw new Error('Unknown unit ' + units);
		            }
		        }
		    }

		    // TODO: Use this.as('ms')?
		    function valueOf$1() {
		        if (!this.isValid()) {
		            return NaN;
		        }
		        return (
		            this._milliseconds +
		            this._days * 864e5 +
		            (this._months % 12) * 2592e6 +
		            toInt(this._months / 12) * 31536e6
		        );
		    }

		    function makeAs(alias) {
		        return function () {
		            return this.as(alias);
		        };
		    }

		    var asMilliseconds = makeAs('ms'),
		        asSeconds = makeAs('s'),
		        asMinutes = makeAs('m'),
		        asHours = makeAs('h'),
		        asDays = makeAs('d'),
		        asWeeks = makeAs('w'),
		        asMonths = makeAs('M'),
		        asQuarters = makeAs('Q'),
		        asYears = makeAs('y');

		    function clone$1() {
		        return createDuration(this);
		    }

		    function get$2(units) {
		        units = normalizeUnits(units);
		        return this.isValid() ? this[units + 's']() : NaN;
		    }

		    function makeGetter(name) {
		        return function () {
		            return this.isValid() ? this._data[name] : NaN;
		        };
		    }

		    var milliseconds = makeGetter('milliseconds'),
		        seconds = makeGetter('seconds'),
		        minutes = makeGetter('minutes'),
		        hours = makeGetter('hours'),
		        days = makeGetter('days'),
		        months = makeGetter('months'),
		        years = makeGetter('years');

		    function weeks() {
		        return absFloor(this.days() / 7);
		    }

		    var round = Math.round,
		        thresholds = {
		            ss: 44, // a few seconds to seconds
		            s: 45, // seconds to minute
		            m: 45, // minutes to hour
		            h: 22, // hours to day
		            d: 26, // days to month/week
		            w: null, // weeks to month
		            M: 11, // months to year
		        };

		    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
		    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
		        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
		    }

		    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
		        var duration = createDuration(posNegDuration).abs(),
		            seconds = round(duration.as('s')),
		            minutes = round(duration.as('m')),
		            hours = round(duration.as('h')),
		            days = round(duration.as('d')),
		            months = round(duration.as('M')),
		            weeks = round(duration.as('w')),
		            years = round(duration.as('y')),
		            a =
		                (seconds <= thresholds.ss && ['s', seconds]) ||
		                (seconds < thresholds.s && ['ss', seconds]) ||
		                (minutes <= 1 && ['m']) ||
		                (minutes < thresholds.m && ['mm', minutes]) ||
		                (hours <= 1 && ['h']) ||
		                (hours < thresholds.h && ['hh', hours]) ||
		                (days <= 1 && ['d']) ||
		                (days < thresholds.d && ['dd', days]);

		        if (thresholds.w != null) {
		            a =
		                a ||
		                (weeks <= 1 && ['w']) ||
		                (weeks < thresholds.w && ['ww', weeks]);
		        }
		        a = a ||
		            (months <= 1 && ['M']) ||
		            (months < thresholds.M && ['MM', months]) ||
		            (years <= 1 && ['y']) || ['yy', years];

		        a[2] = withoutSuffix;
		        a[3] = +posNegDuration > 0;
		        a[4] = locale;
		        return substituteTimeAgo.apply(null, a);
		    }

		    // This function allows you to set the rounding function for relative time strings
		    function getSetRelativeTimeRounding(roundingFunction) {
		        if (roundingFunction === undefined) {
		            return round;
		        }
		        if (typeof roundingFunction === 'function') {
		            round = roundingFunction;
		            return true;
		        }
		        return false;
		    }

		    // This function allows you to set a threshold for relative time strings
		    function getSetRelativeTimeThreshold(threshold, limit) {
		        if (thresholds[threshold] === undefined) {
		            return false;
		        }
		        if (limit === undefined) {
		            return thresholds[threshold];
		        }
		        thresholds[threshold] = limit;
		        if (threshold === 's') {
		            thresholds.ss = limit - 1;
		        }
		        return true;
		    }

		    function humanize(argWithSuffix, argThresholds) {
		        if (!this.isValid()) {
		            return this.localeData().invalidDate();
		        }

		        var withSuffix = false,
		            th = thresholds,
		            locale,
		            output;

		        if (typeof argWithSuffix === 'object') {
		            argThresholds = argWithSuffix;
		            argWithSuffix = false;
		        }
		        if (typeof argWithSuffix === 'boolean') {
		            withSuffix = argWithSuffix;
		        }
		        if (typeof argThresholds === 'object') {
		            th = Object.assign({}, thresholds, argThresholds);
		            if (argThresholds.s != null && argThresholds.ss == null) {
		                th.ss = argThresholds.s - 1;
		            }
		        }

		        locale = this.localeData();
		        output = relativeTime$1(this, !withSuffix, th, locale);

		        if (withSuffix) {
		            output = locale.pastFuture(+this, output);
		        }

		        return locale.postformat(output);
		    }

		    var abs$1 = Math.abs;

		    function sign(x) {
		        return (x > 0) - (x < 0) || +x;
		    }

		    function toISOString$1() {
		        // for ISO strings we do not use the normal bubbling rules:
		        //  * milliseconds bubble up until they become hours
		        //  * days do not bubble at all
		        //  * months bubble up until they become years
		        // This is because there is no context-free conversion between hours and days
		        // (think of clock changes)
		        // and also not between days and months (28-31 days per month)
		        if (!this.isValid()) {
		            return this.localeData().invalidDate();
		        }

		        var seconds = abs$1(this._milliseconds) / 1000,
		            days = abs$1(this._days),
		            months = abs$1(this._months),
		            minutes,
		            hours,
		            years,
		            s,
		            total = this.asSeconds(),
		            totalSign,
		            ymSign,
		            daysSign,
		            hmsSign;

		        if (!total) {
		            // this is the same as C#'s (Noda) and python (isodate)...
		            // but not other JS (goog.date)
		            return 'P0D';
		        }

		        // 3600 seconds -> 60 minutes -> 1 hour
		        minutes = absFloor(seconds / 60);
		        hours = absFloor(minutes / 60);
		        seconds %= 60;
		        minutes %= 60;

		        // 12 months -> 1 year
		        years = absFloor(months / 12);
		        months %= 12;

		        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
		        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

		        totalSign = total < 0 ? '-' : '';
		        ymSign = sign(this._months) !== sign(total) ? '-' : '';
		        daysSign = sign(this._days) !== sign(total) ? '-' : '';
		        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

		        return (
		            totalSign +
		            'P' +
		            (years ? ymSign + years + 'Y' : '') +
		            (months ? ymSign + months + 'M' : '') +
		            (days ? daysSign + days + 'D' : '') +
		            (hours || minutes || seconds ? 'T' : '') +
		            (hours ? hmsSign + hours + 'H' : '') +
		            (minutes ? hmsSign + minutes + 'M' : '') +
		            (seconds ? hmsSign + s + 'S' : '')
		        );
		    }

		    var proto$2 = Duration.prototype;

		    proto$2.isValid = isValid$1;
		    proto$2.abs = abs;
		    proto$2.add = add$1;
		    proto$2.subtract = subtract$1;
		    proto$2.as = as;
		    proto$2.asMilliseconds = asMilliseconds;
		    proto$2.asSeconds = asSeconds;
		    proto$2.asMinutes = asMinutes;
		    proto$2.asHours = asHours;
		    proto$2.asDays = asDays;
		    proto$2.asWeeks = asWeeks;
		    proto$2.asMonths = asMonths;
		    proto$2.asQuarters = asQuarters;
		    proto$2.asYears = asYears;
		    proto$2.valueOf = valueOf$1;
		    proto$2._bubble = bubble;
		    proto$2.clone = clone$1;
		    proto$2.get = get$2;
		    proto$2.milliseconds = milliseconds;
		    proto$2.seconds = seconds;
		    proto$2.minutes = minutes;
		    proto$2.hours = hours;
		    proto$2.days = days;
		    proto$2.weeks = weeks;
		    proto$2.months = months;
		    proto$2.years = years;
		    proto$2.humanize = humanize;
		    proto$2.toISOString = toISOString$1;
		    proto$2.toString = toISOString$1;
		    proto$2.toJSON = toISOString$1;
		    proto$2.locale = locale;
		    proto$2.localeData = localeData;

		    proto$2.toIsoString = deprecate(
		        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
		        toISOString$1
		    );
		    proto$2.lang = lang;

		    // FORMATTING

		    addFormatToken('X', 0, 0, 'unix');
		    addFormatToken('x', 0, 0, 'valueOf');

		    // PARSING

		    addRegexToken('x', matchSigned);
		    addRegexToken('X', matchTimestamp);
		    addParseToken('X', function (input, array, config) {
		        config._d = new Date(parseFloat(input) * 1000);
		    });
		    addParseToken('x', function (input, array, config) {
		        config._d = new Date(toInt(input));
		    });

		    //! moment.js

		    hooks.version = '2.29.4';

		    setHookCallback(createLocal);

		    hooks.fn = proto;
		    hooks.min = min;
		    hooks.max = max;
		    hooks.now = now;
		    hooks.utc = createUTC;
		    hooks.unix = createUnix;
		    hooks.months = listMonths;
		    hooks.isDate = isDate;
		    hooks.locale = getSetGlobalLocale;
		    hooks.invalid = createInvalid;
		    hooks.duration = createDuration;
		    hooks.isMoment = isMoment;
		    hooks.weekdays = listWeekdays;
		    hooks.parseZone = createInZone;
		    hooks.localeData = getLocale;
		    hooks.isDuration = isDuration;
		    hooks.monthsShort = listMonthsShort;
		    hooks.weekdaysMin = listWeekdaysMin;
		    hooks.defineLocale = defineLocale;
		    hooks.updateLocale = updateLocale;
		    hooks.locales = listLocales;
		    hooks.weekdaysShort = listWeekdaysShort;
		    hooks.normalizeUnits = normalizeUnits;
		    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
		    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
		    hooks.calendarFormat = getCalendarFormat;
		    hooks.prototype = proto;

		    // currently HTML5 input type only supports 24-hour formats
		    hooks.HTML5_FMT = {
		        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
		        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
		        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
		        DATE: 'YYYY-MM-DD', // <input type="date" />
		        TIME: 'HH:mm', // <input type="time" />
		        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
		        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
		        WEEK: 'GGGG-[W]WW', // <input type="week" />
		        MONTH: 'YYYY-MM', // <input type="month" />
		    };

		    return hooks;

		}))); 
	} (moment$1));

	var momentExports = moment$1.exports;
	var moment = /*@__PURE__*/getDefaultExportFromCjs(momentExports);

	(function (module, exports) {
		!function(e,a){"function"==typeof commonjsRequire?a(momentExports):a(e.moment);}(commonjsGlobal,function(e){e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return /^nm$/i.test(e)},meridiem:function(e,a,_){return e<12?_?"vm":"VM":_?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[M\xf4re om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||20<=e?"ste":"de")},week:{dow:1,doy:4}});function E(e){return 0===e?0:1===e?1:2===e?2:3<=e%100&&e%100<=10?3:11<=e%100?4:5}function a(n){return function(e,a,_,s){var d=E(e),t=J[n][E(e)];return (t=2===d?t[a?0:1]:t).replace(/%d/i,e)}}function F(e){return 0===e?0:1===e?1:2===e?2:3<=e%100&&e%100<=10?3:11<=e%100?4:5}function _(n){return function(e,a,_,s){var d=F(e),t=N[n][F(e)];return (t=2===d?t[a?0:1]:t).replace(/%d/i,e)}}function z(e){return 0===e?0:1===e?1:2===e?2:3<=e%100&&e%100<=10?3:11<=e%100?4:5}function s(n){return function(e,a,_,s){var d=z(e),t=B[n][z(e)];return (t=2===d?t[a?0:1]:t).replace(/%d/i,e)}}var J={s:["\u0623\u0642\u0644 \u0645\u0646 \u062b\u0627\u0646\u064a\u0629","\u062b\u0627\u0646\u064a\u0629 \u0648\u0627\u062d\u062f\u0629",["\u062b\u0627\u0646\u064a\u062a\u0627\u0646","\u062b\u0627\u0646\u064a\u062a\u064a\u0646"],"%d \u062b\u0648\u0627\u0646","%d \u062b\u0627\u0646\u064a\u0629","%d \u062b\u0627\u0646\u064a\u0629"],m:["\u0623\u0642\u0644 \u0645\u0646 \u062f\u0642\u064a\u0642\u0629","\u062f\u0642\u064a\u0642\u0629 \u0648\u0627\u062d\u062f\u0629",["\u062f\u0642\u064a\u0642\u062a\u0627\u0646","\u062f\u0642\u064a\u0642\u062a\u064a\u0646"],"%d \u062f\u0642\u0627\u0626\u0642","%d \u062f\u0642\u064a\u0642\u0629","%d \u062f\u0642\u064a\u0642\u0629"],h:["\u0623\u0642\u0644 \u0645\u0646 \u0633\u0627\u0639\u0629","\u0633\u0627\u0639\u0629 \u0648\u0627\u062d\u062f\u0629",["\u0633\u0627\u0639\u062a\u0627\u0646","\u0633\u0627\u0639\u062a\u064a\u0646"],"%d \u0633\u0627\u0639\u0627\u062a","%d \u0633\u0627\u0639\u0629","%d \u0633\u0627\u0639\u0629"],d:["\u0623\u0642\u0644 \u0645\u0646 \u064a\u0648\u0645","\u064a\u0648\u0645 \u0648\u0627\u062d\u062f",["\u064a\u0648\u0645\u0627\u0646","\u064a\u0648\u0645\u064a\u0646"],"%d \u0623\u064a\u0627\u0645","%d \u064a\u0648\u0645\u064b\u0627","%d \u064a\u0648\u0645"],M:["\u0623\u0642\u0644 \u0645\u0646 \u0634\u0647\u0631","\u0634\u0647\u0631 \u0648\u0627\u062d\u062f",["\u0634\u0647\u0631\u0627\u0646","\u0634\u0647\u0631\u064a\u0646"],"%d \u0623\u0634\u0647\u0631","%d \u0634\u0647\u0631\u0627","%d \u0634\u0647\u0631"],y:["\u0623\u0642\u0644 \u0645\u0646 \u0639\u0627\u0645","\u0639\u0627\u0645 \u0648\u0627\u062d\u062f",["\u0639\u0627\u0645\u0627\u0646","\u0639\u0627\u0645\u064a\u0646"],"%d \u0623\u0639\u0648\u0627\u0645","%d \u0639\u0627\u0645\u064b\u0627","%d \u0639\u0627\u0645"]},d=["\u062c\u0627\u0646\u0641\u064a","\u0641\u064a\u0641\u0631\u064a","\u0645\u0627\u0631\u0633","\u0623\u0641\u0631\u064a\u0644","\u0645\u0627\u064a","\u062c\u0648\u0627\u0646","\u062c\u0648\u064a\u0644\u064a\u0629","\u0623\u0648\u062a","\u0633\u0628\u062a\u0645\u0628\u0631","\u0623\u0643\u062a\u0648\u0628\u0631","\u0646\u0648\u0641\u0645\u0628\u0631","\u062f\u064a\u0633\u0645\u0628\u0631"],I=(e.defineLocale("ar-dz",{months:d,monthsShort:d,weekdays:"\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062b\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a".split("_"),weekdaysShort:"\u0623\u062d\u062f_\u0625\u062b\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a".split("_"),weekdaysMin:"\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/\u200fM/\u200fYYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/\u0635|\u0645/,isPM:function(e){return "\u0645"===e},meridiem:function(e,a,_){return e<12?"\u0635":"\u0645"},calendar:{sameDay:"[\u0627\u0644\u064a\u0648\u0645 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",nextDay:"[\u063a\u062f\u064b\u0627 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",nextWeek:"dddd [\u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",lastDay:"[\u0623\u0645\u0633 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",lastWeek:"dddd [\u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",sameElse:"L"},relativeTime:{future:"\u0628\u0639\u062f %s",past:"\u0645\u0646\u0630 %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},postformat:function(e){return e.replace(/,/g,"\u060c")},week:{dow:0,doy:4}}),e.defineLocale("ar-kw",{months:"\u064a\u0646\u0627\u064a\u0631_\u0641\u0628\u0631\u0627\u064a\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064a\u0644_\u0645\u0627\u064a_\u064a\u0648\u0646\u064a\u0648_\u064a\u0648\u0644\u064a\u0648\u0632_\u063a\u0634\u062a_\u0634\u062a\u0646\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0646\u0628\u0631_\u062f\u062c\u0646\u0628\u0631".split("_"),monthsShort:"\u064a\u0646\u0627\u064a\u0631_\u0641\u0628\u0631\u0627\u064a\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064a\u0644_\u0645\u0627\u064a_\u064a\u0648\u0646\u064a\u0648_\u064a\u0648\u0644\u064a\u0648\u0632_\u063a\u0634\u062a_\u0634\u062a\u0646\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0646\u0628\u0631_\u062f\u062c\u0646\u0628\u0631".split("_"),weekdays:"\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062a\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a".split("_"),weekdaysShort:"\u0627\u062d\u062f_\u0627\u062a\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a".split("_"),weekdaysMin:"\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[\u0627\u0644\u064a\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",nextDay:"[\u063a\u062f\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",nextWeek:"dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",lastDay:"[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",lastWeek:"dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",sameElse:"L"},relativeTime:{future:"\u0641\u064a %s",past:"\u0645\u0646\u0630 %s",s:"\u062b\u0648\u0627\u0646",ss:"%d \u062b\u0627\u0646\u064a\u0629",m:"\u062f\u0642\u064a\u0642\u0629",mm:"%d \u062f\u0642\u0627\u0626\u0642",h:"\u0633\u0627\u0639\u0629",hh:"%d \u0633\u0627\u0639\u0627\u062a",d:"\u064a\u0648\u0645",dd:"%d \u0623\u064a\u0627\u0645",M:"\u0634\u0647\u0631",MM:"%d \u0623\u0634\u0647\u0631",y:"\u0633\u0646\u0629",yy:"%d \u0633\u0646\u0648\u0627\u062a"},week:{dow:0,doy:12}}),{1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"}),N={s:["\u0623\u0642\u0644 \u0645\u0646 \u062b\u0627\u0646\u064a\u0629","\u062b\u0627\u0646\u064a\u0629 \u0648\u0627\u062d\u062f\u0629",["\u062b\u0627\u0646\u064a\u062a\u0627\u0646","\u062b\u0627\u0646\u064a\u062a\u064a\u0646"],"%d \u062b\u0648\u0627\u0646","%d \u062b\u0627\u0646\u064a\u0629","%d \u062b\u0627\u0646\u064a\u0629"],m:["\u0623\u0642\u0644 \u0645\u0646 \u062f\u0642\u064a\u0642\u0629","\u062f\u0642\u064a\u0642\u0629 \u0648\u0627\u062d\u062f\u0629",["\u062f\u0642\u064a\u0642\u062a\u0627\u0646","\u062f\u0642\u064a\u0642\u062a\u064a\u0646"],"%d \u062f\u0642\u0627\u0626\u0642","%d \u062f\u0642\u064a\u0642\u0629","%d \u062f\u0642\u064a\u0642\u0629"],h:["\u0623\u0642\u0644 \u0645\u0646 \u0633\u0627\u0639\u0629","\u0633\u0627\u0639\u0629 \u0648\u0627\u062d\u062f\u0629",["\u0633\u0627\u0639\u062a\u0627\u0646","\u0633\u0627\u0639\u062a\u064a\u0646"],"%d \u0633\u0627\u0639\u0627\u062a","%d \u0633\u0627\u0639\u0629","%d \u0633\u0627\u0639\u0629"],d:["\u0623\u0642\u0644 \u0645\u0646 \u064a\u0648\u0645","\u064a\u0648\u0645 \u0648\u0627\u062d\u062f",["\u064a\u0648\u0645\u0627\u0646","\u064a\u0648\u0645\u064a\u0646"],"%d \u0623\u064a\u0627\u0645","%d \u064a\u0648\u0645\u064b\u0627","%d \u064a\u0648\u0645"],M:["\u0623\u0642\u0644 \u0645\u0646 \u0634\u0647\u0631","\u0634\u0647\u0631 \u0648\u0627\u062d\u062f",["\u0634\u0647\u0631\u0627\u0646","\u0634\u0647\u0631\u064a\u0646"],"%d \u0623\u0634\u0647\u0631","%d \u0634\u0647\u0631\u0627","%d \u0634\u0647\u0631"],y:["\u0623\u0642\u0644 \u0645\u0646 \u0639\u0627\u0645","\u0639\u0627\u0645 \u0648\u0627\u062d\u062f",["\u0639\u0627\u0645\u0627\u0646","\u0639\u0627\u0645\u064a\u0646"],"%d \u0623\u0639\u0648\u0627\u0645","%d \u0639\u0627\u0645\u064b\u0627","%d \u0639\u0627\u0645"]},d=["\u064a\u0646\u0627\u064a\u0631","\u0641\u0628\u0631\u0627\u064a\u0631","\u0645\u0627\u0631\u0633","\u0623\u0628\u0631\u064a\u0644","\u0645\u0627\u064a\u0648","\u064a\u0648\u0646\u064a\u0648","\u064a\u0648\u0644\u064a\u0648","\u0623\u063a\u0633\u0637\u0633","\u0633\u0628\u062a\u0645\u0628\u0631","\u0623\u0643\u062a\u0648\u0628\u0631","\u0646\u0648\u0641\u0645\u0628\u0631","\u062f\u064a\u0633\u0645\u0628\u0631"],R=(e.defineLocale("ar-ly",{months:d,monthsShort:d,weekdays:"\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062b\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a".split("_"),weekdaysShort:"\u0623\u062d\u062f_\u0625\u062b\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a".split("_"),weekdaysMin:"\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/\u200fM/\u200fYYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/\u0635|\u0645/,isPM:function(e){return "\u0645"===e},meridiem:function(e,a,_){return e<12?"\u0635":"\u0645"},calendar:{sameDay:"[\u0627\u0644\u064a\u0648\u0645 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",nextDay:"[\u063a\u062f\u064b\u0627 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",nextWeek:"dddd [\u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",lastDay:"[\u0623\u0645\u0633 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",lastWeek:"dddd [\u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",sameElse:"L"},relativeTime:{future:"\u0628\u0639\u062f %s",past:"\u0645\u0646\u0630 %s",s:_("s"),ss:_("s"),m:_("m"),mm:_("m"),h:_("h"),hh:_("h"),d:_("d"),dd:_("d"),M:_("M"),MM:_("M"),y:_("y"),yy:_("y")},preparse:function(e){return e.replace(/\u060c/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return I[e]}).replace(/,/g,"\u060c")},week:{dow:6,doy:12}}),e.defineLocale("ar-ma",{months:"\u064a\u0646\u0627\u064a\u0631_\u0641\u0628\u0631\u0627\u064a\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064a\u0644_\u0645\u0627\u064a_\u064a\u0648\u0646\u064a\u0648_\u064a\u0648\u0644\u064a\u0648\u0632_\u063a\u0634\u062a_\u0634\u062a\u0646\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0646\u0628\u0631_\u062f\u062c\u0646\u0628\u0631".split("_"),monthsShort:"\u064a\u0646\u0627\u064a\u0631_\u0641\u0628\u0631\u0627\u064a\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064a\u0644_\u0645\u0627\u064a_\u064a\u0648\u0646\u064a\u0648_\u064a\u0648\u0644\u064a\u0648\u0632_\u063a\u0634\u062a_\u0634\u062a\u0646\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0646\u0628\u0631_\u062f\u062c\u0646\u0628\u0631".split("_"),weekdays:"\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062b\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a".split("_"),weekdaysShort:"\u0627\u062d\u062f_\u0627\u062b\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a".split("_"),weekdaysMin:"\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[\u0627\u0644\u064a\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",nextDay:"[\u063a\u062f\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",nextWeek:"dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",lastDay:"[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",lastWeek:"dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",sameElse:"L"},relativeTime:{future:"\u0641\u064a %s",past:"\u0645\u0646\u0630 %s",s:"\u062b\u0648\u0627\u0646",ss:"%d \u062b\u0627\u0646\u064a\u0629",m:"\u062f\u0642\u064a\u0642\u0629",mm:"%d \u062f\u0642\u0627\u0626\u0642",h:"\u0633\u0627\u0639\u0629",hh:"%d \u0633\u0627\u0639\u0627\u062a",d:"\u064a\u0648\u0645",dd:"%d \u0623\u064a\u0627\u0645",M:"\u0634\u0647\u0631",MM:"%d \u0623\u0634\u0647\u0631",y:"\u0633\u0646\u0629",yy:"%d \u0633\u0646\u0648\u0627\u062a"},week:{dow:1,doy:4}}),{1:"\u0661",2:"\u0662",3:"\u0663",4:"\u0664",5:"\u0665",6:"\u0666",7:"\u0667",8:"\u0668",9:"\u0669",0:"\u0660"}),C={"\u0661":"1","\u0662":"2","\u0663":"3","\u0664":"4","\u0665":"5","\u0666":"6","\u0667":"7","\u0668":"8","\u0669":"9","\u0660":"0"},K=(e.defineLocale("ar-sa",{months:"\u064a\u0646\u0627\u064a\u0631_\u0641\u0628\u0631\u0627\u064a\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064a\u0644_\u0645\u0627\u064a\u0648_\u064a\u0648\u0646\u064a\u0648_\u064a\u0648\u0644\u064a\u0648_\u0623\u063a\u0633\u0637\u0633_\u0633\u0628\u062a\u0645\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062f\u064a\u0633\u0645\u0628\u0631".split("_"),monthsShort:"\u064a\u0646\u0627\u064a\u0631_\u0641\u0628\u0631\u0627\u064a\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064a\u0644_\u0645\u0627\u064a\u0648_\u064a\u0648\u0646\u064a\u0648_\u064a\u0648\u0644\u064a\u0648_\u0623\u063a\u0633\u0637\u0633_\u0633\u0628\u062a\u0645\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062f\u064a\u0633\u0645\u0628\u0631".split("_"),weekdays:"\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062b\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a".split("_"),weekdaysShort:"\u0623\u062d\u062f_\u0625\u062b\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a".split("_"),weekdaysMin:"\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/\u0635|\u0645/,isPM:function(e){return "\u0645"===e},meridiem:function(e,a,_){return e<12?"\u0635":"\u0645"},calendar:{sameDay:"[\u0627\u0644\u064a\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",nextDay:"[\u063a\u062f\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",nextWeek:"dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",lastDay:"[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",lastWeek:"dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",sameElse:"L"},relativeTime:{future:"\u0641\u064a %s",past:"\u0645\u0646\u0630 %s",s:"\u062b\u0648\u0627\u0646",ss:"%d \u062b\u0627\u0646\u064a\u0629",m:"\u062f\u0642\u064a\u0642\u0629",mm:"%d \u062f\u0642\u0627\u0626\u0642",h:"\u0633\u0627\u0639\u0629",hh:"%d \u0633\u0627\u0639\u0627\u062a",d:"\u064a\u0648\u0645",dd:"%d \u0623\u064a\u0627\u0645",M:"\u0634\u0647\u0631",MM:"%d \u0623\u0634\u0647\u0631",y:"\u0633\u0646\u0629",yy:"%d \u0633\u0646\u0648\u0627\u062a"},preparse:function(e){return e.replace(/[\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u0660]/g,function(e){return C[e]}).replace(/\u060c/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return R[e]}).replace(/,/g,"\u060c")},week:{dow:0,doy:6}}),e.defineLocale("ar-tn",{months:"\u062c\u0627\u0646\u0641\u064a_\u0641\u064a\u0641\u0631\u064a_\u0645\u0627\u0631\u0633_\u0623\u0641\u0631\u064a\u0644_\u0645\u0627\u064a_\u062c\u0648\u0627\u0646_\u062c\u0648\u064a\u0644\u064a\u0629_\u0623\u0648\u062a_\u0633\u0628\u062a\u0645\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062f\u064a\u0633\u0645\u0628\u0631".split("_"),monthsShort:"\u062c\u0627\u0646\u0641\u064a_\u0641\u064a\u0641\u0631\u064a_\u0645\u0627\u0631\u0633_\u0623\u0641\u0631\u064a\u0644_\u0645\u0627\u064a_\u062c\u0648\u0627\u0646_\u062c\u0648\u064a\u0644\u064a\u0629_\u0623\u0648\u062a_\u0633\u0628\u062a\u0645\u0628\u0631_\u0623\u0643\u062a\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062f\u064a\u0633\u0645\u0628\u0631".split("_"),weekdays:"\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062b\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a".split("_"),weekdaysShort:"\u0623\u062d\u062f_\u0625\u062b\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a".split("_"),weekdaysMin:"\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[\u0627\u0644\u064a\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",nextDay:"[\u063a\u062f\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",nextWeek:"dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",lastDay:"[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",lastWeek:"dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT",sameElse:"L"},relativeTime:{future:"\u0641\u064a %s",past:"\u0645\u0646\u0630 %s",s:"\u062b\u0648\u0627\u0646",ss:"%d \u062b\u0627\u0646\u064a\u0629",m:"\u062f\u0642\u064a\u0642\u0629",mm:"%d \u062f\u0642\u0627\u0626\u0642",h:"\u0633\u0627\u0639\u0629",hh:"%d \u0633\u0627\u0639\u0627\u062a",d:"\u064a\u0648\u0645",dd:"%d \u0623\u064a\u0627\u0645",M:"\u0634\u0647\u0631",MM:"%d \u0623\u0634\u0647\u0631",y:"\u0633\u0646\u0629",yy:"%d \u0633\u0646\u0648\u0627\u062a"},week:{dow:1,doy:4}}),{1:"\u0661",2:"\u0662",3:"\u0663",4:"\u0664",5:"\u0665",6:"\u0666",7:"\u0667",8:"\u0668",9:"\u0669",0:"\u0660"}),G={"\u0661":"1","\u0662":"2","\u0663":"3","\u0664":"4","\u0665":"5","\u0666":"6","\u0667":"7","\u0668":"8","\u0669":"9","\u0660":"0"},B={s:["\u0623\u0642\u0644 \u0645\u0646 \u062b\u0627\u0646\u064a\u0629","\u062b\u0627\u0646\u064a\u0629 \u0648\u0627\u062d\u062f\u0629",["\u062b\u0627\u0646\u064a\u062a\u0627\u0646","\u062b\u0627\u0646\u064a\u062a\u064a\u0646"],"%d \u062b\u0648\u0627\u0646","%d \u062b\u0627\u0646\u064a\u0629","%d \u062b\u0627\u0646\u064a\u0629"],m:["\u0623\u0642\u0644 \u0645\u0646 \u062f\u0642\u064a\u0642\u0629","\u062f\u0642\u064a\u0642\u0629 \u0648\u0627\u062d\u062f\u0629",["\u062f\u0642\u064a\u0642\u062a\u0627\u0646","\u062f\u0642\u064a\u0642\u062a\u064a\u0646"],"%d \u062f\u0642\u0627\u0626\u0642","%d \u062f\u0642\u064a\u0642\u0629","%d \u062f\u0642\u064a\u0642\u0629"],h:["\u0623\u0642\u0644 \u0645\u0646 \u0633\u0627\u0639\u0629","\u0633\u0627\u0639\u0629 \u0648\u0627\u062d\u062f\u0629",["\u0633\u0627\u0639\u062a\u0627\u0646","\u0633\u0627\u0639\u062a\u064a\u0646"],"%d \u0633\u0627\u0639\u0627\u062a","%d \u0633\u0627\u0639\u0629","%d \u0633\u0627\u0639\u0629"],d:["\u0623\u0642\u0644 \u0645\u0646 \u064a\u0648\u0645","\u064a\u0648\u0645 \u0648\u0627\u062d\u062f",["\u064a\u0648\u0645\u0627\u0646","\u064a\u0648\u0645\u064a\u0646"],"%d \u0623\u064a\u0627\u0645","%d \u064a\u0648\u0645\u064b\u0627","%d \u064a\u0648\u0645"],M:["\u0623\u0642\u0644 \u0645\u0646 \u0634\u0647\u0631","\u0634\u0647\u0631 \u0648\u0627\u062d\u062f",["\u0634\u0647\u0631\u0627\u0646","\u0634\u0647\u0631\u064a\u0646"],"%d \u0623\u0634\u0647\u0631","%d \u0634\u0647\u0631\u0627","%d \u0634\u0647\u0631"],y:["\u0623\u0642\u0644 \u0645\u0646 \u0639\u0627\u0645","\u0639\u0627\u0645 \u0648\u0627\u062d\u062f",["\u0639\u0627\u0645\u0627\u0646","\u0639\u0627\u0645\u064a\u0646"],"%d \u0623\u0639\u0648\u0627\u0645","%d \u0639\u0627\u0645\u064b\u0627","%d \u0639\u0627\u0645"]},d=["\u064a\u0646\u0627\u064a\u0631","\u0641\u0628\u0631\u0627\u064a\u0631","\u0645\u0627\u0631\u0633","\u0623\u0628\u0631\u064a\u0644","\u0645\u0627\u064a\u0648","\u064a\u0648\u0646\u064a\u0648","\u064a\u0648\u0644\u064a\u0648","\u0623\u063a\u0633\u0637\u0633","\u0633\u0628\u062a\u0645\u0628\u0631","\u0623\u0643\u062a\u0648\u0628\u0631","\u0646\u0648\u0641\u0645\u0628\u0631","\u062f\u064a\u0633\u0645\u0628\u0631"],q=(e.defineLocale("ar",{months:d,monthsShort:d,weekdays:"\u0627\u0644\u0623\u062d\u062f_\u0627\u0644\u0625\u062b\u0646\u064a\u0646_\u0627\u0644\u062b\u0644\u0627\u062b\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062e\u0645\u064a\u0633_\u0627\u0644\u062c\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062a".split("_"),weekdaysShort:"\u0623\u062d\u062f_\u0625\u062b\u0646\u064a\u0646_\u062b\u0644\u0627\u062b\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062e\u0645\u064a\u0633_\u062c\u0645\u0639\u0629_\u0633\u0628\u062a".split("_"),weekdaysMin:"\u062d_\u0646_\u062b_\u0631_\u062e_\u062c_\u0633".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/\u200fM/\u200fYYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/\u0635|\u0645/,isPM:function(e){return "\u0645"===e},meridiem:function(e,a,_){return e<12?"\u0635":"\u0645"},calendar:{sameDay:"[\u0627\u0644\u064a\u0648\u0645 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",nextDay:"[\u063a\u062f\u064b\u0627 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",nextWeek:"dddd [\u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",lastDay:"[\u0623\u0645\u0633 \u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",lastWeek:"dddd [\u0639\u0646\u062f \u0627\u0644\u0633\u0627\u0639\u0629] LT",sameElse:"L"},relativeTime:{future:"\u0628\u0639\u062f %s",past:"\u0645\u0646\u0630 %s",s:s("s"),ss:s("s"),m:s("m"),mm:s("m"),h:s("h"),hh:s("h"),d:s("d"),dd:s("d"),M:s("M"),MM:s("M"),y:s("y"),yy:s("y")},preparse:function(e){return e.replace(/[\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u0660]/g,function(e){return G[e]}).replace(/\u060c/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return K[e]}).replace(/,/g,"\u060c")},week:{dow:6,doy:12}}),{1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-\xfcnc\xfc",4:"-\xfcnc\xfc",100:"-\xfcnc\xfc",6:"-nc\u0131",9:"-uncu",10:"-uncu",30:"-uncu",60:"-\u0131nc\u0131",90:"-\u0131nc\u0131"});function t(e,a,_){return "m"===_?a?"\u0445\u0432\u0456\u043b\u0456\u043d\u0430":"\u0445\u0432\u0456\u043b\u0456\u043d\u0443":"h"===_?a?"\u0433\u0430\u0434\u0437\u0456\u043d\u0430":"\u0433\u0430\u0434\u0437\u0456\u043d\u0443":e+" "+(e=+e,a=(a={ss:a?"\u0441\u0435\u043a\u0443\u043d\u0434\u0430_\u0441\u0435\u043a\u0443\u043d\u0434\u044b_\u0441\u0435\u043a\u0443\u043d\u0434":"\u0441\u0435\u043a\u0443\u043d\u0434\u0443_\u0441\u0435\u043a\u0443\u043d\u0434\u044b_\u0441\u0435\u043a\u0443\u043d\u0434",mm:a?"\u0445\u0432\u0456\u043b\u0456\u043d\u0430_\u0445\u0432\u0456\u043b\u0456\u043d\u044b_\u0445\u0432\u0456\u043b\u0456\u043d":"\u0445\u0432\u0456\u043b\u0456\u043d\u0443_\u0445\u0432\u0456\u043b\u0456\u043d\u044b_\u0445\u0432\u0456\u043b\u0456\u043d",hh:a?"\u0433\u0430\u0434\u0437\u0456\u043d\u0430_\u0433\u0430\u0434\u0437\u0456\u043d\u044b_\u0433\u0430\u0434\u0437\u0456\u043d":"\u0433\u0430\u0434\u0437\u0456\u043d\u0443_\u0433\u0430\u0434\u0437\u0456\u043d\u044b_\u0433\u0430\u0434\u0437\u0456\u043d",dd:"\u0434\u0437\u0435\u043d\u044c_\u0434\u043d\u0456_\u0434\u0437\u0451\u043d",MM:"\u043c\u0435\u0441\u044f\u0446_\u043c\u0435\u0441\u044f\u0446\u044b_\u043c\u0435\u0441\u044f\u0446\u0430\u045e",yy:"\u0433\u043e\u0434_\u0433\u0430\u0434\u044b_\u0433\u0430\u0434\u043e\u045e"}[_]).split("_"),e%10==1&&e%100!=11?a[0]:2<=e%10&&e%10<=4&&(e%100<10||20<=e%100)?a[1]:a[2])}e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ert\u0259si_\xc7\u0259r\u015f\u0259nb\u0259 ax\u015fam\u0131_\xc7\u0259r\u015f\u0259nb\u0259_C\xfcm\u0259 ax\u015fam\u0131_C\xfcm\u0259_\u015e\u0259nb\u0259".split("_"),weekdaysShort:"Baz_BzE_\xc7Ax_\xc7\u0259r_CAx_C\xfcm_\u015e\u0259n".split("_"),weekdaysMin:"Bz_BE_\xc7A_\xc7\u0259_CA_C\xfc_\u015e\u0259".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bug\xfcn saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[g\u0259l\u0259n h\u0259ft\u0259] dddd [saat] LT",lastDay:"[d\xfcn\u0259n] LT",lastWeek:"[ke\xe7\u0259n h\u0259ft\u0259] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s \u0259vv\u0259l",s:"bir ne\xe7\u0259 saniy\u0259",ss:"%d saniy\u0259",m:"bir d\u0259qiq\u0259",mm:"%d d\u0259qiq\u0259",h:"bir saat",hh:"%d saat",d:"bir g\xfcn",dd:"%d g\xfcn",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gec\u0259|s\u0259h\u0259r|g\xfcnd\xfcz|ax\u015fam/,isPM:function(e){return /^(g\xfcnd\xfcz|ax\u015fam)$/.test(e)},meridiem:function(e,a,_){return e<4?"gec\u0259":e<12?"s\u0259h\u0259r":e<17?"g\xfcnd\xfcz":"ax\u015fam"},dayOfMonthOrdinalParse:/\d{1,2}-(\u0131nc\u0131|inci|nci|\xfcnc\xfc|nc\u0131|uncu)/,ordinal:function(e){if(0===e)return e+"-\u0131nc\u0131";var a=e%10;return e+(q[a]||q[e%100-a]||q[100<=e?100:null])},week:{dow:1,doy:7}}),e.defineLocale("be",{months:{format:"\u0441\u0442\u0443\u0434\u0437\u0435\u043d\u044f_\u043b\u044e\u0442\u0430\u0433\u0430_\u0441\u0430\u043a\u0430\u0432\u0456\u043a\u0430_\u043a\u0440\u0430\u0441\u0430\u0432\u0456\u043a\u0430_\u0442\u0440\u0430\u045e\u043d\u044f_\u0447\u044d\u0440\u0432\u0435\u043d\u044f_\u043b\u0456\u043f\u0435\u043d\u044f_\u0436\u043d\u0456\u045e\u043d\u044f_\u0432\u0435\u0440\u0430\u0441\u043d\u044f_\u043a\u0430\u0441\u0442\u0440\u044b\u0447\u043d\u0456\u043a\u0430_\u043b\u0456\u0441\u0442\u0430\u043f\u0430\u0434\u0430_\u0441\u043d\u0435\u0436\u043d\u044f".split("_"),standalone:"\u0441\u0442\u0443\u0434\u0437\u0435\u043d\u044c_\u043b\u044e\u0442\u044b_\u0441\u0430\u043a\u0430\u0432\u0456\u043a_\u043a\u0440\u0430\u0441\u0430\u0432\u0456\u043a_\u0442\u0440\u0430\u0432\u0435\u043d\u044c_\u0447\u044d\u0440\u0432\u0435\u043d\u044c_\u043b\u0456\u043f\u0435\u043d\u044c_\u0436\u043d\u0456\u0432\u0435\u043d\u044c_\u0432\u0435\u0440\u0430\u0441\u0435\u043d\u044c_\u043a\u0430\u0441\u0442\u0440\u044b\u0447\u043d\u0456\u043a_\u043b\u0456\u0441\u0442\u0430\u043f\u0430\u0434_\u0441\u043d\u0435\u0436\u0430\u043d\u044c".split("_")},monthsShort:"\u0441\u0442\u0443\u0434_\u043b\u044e\u0442_\u0441\u0430\u043a_\u043a\u0440\u0430\u0441_\u0442\u0440\u0430\u0432_\u0447\u044d\u0440\u0432_\u043b\u0456\u043f_\u0436\u043d\u0456\u0432_\u0432\u0435\u0440_\u043a\u0430\u0441\u0442_\u043b\u0456\u0441\u0442_\u0441\u043d\u0435\u0436".split("_"),weekdays:{format:"\u043d\u044f\u0434\u0437\u0435\u043b\u044e_\u043f\u0430\u043d\u044f\u0434\u0437\u0435\u043b\u0430\u043a_\u0430\u045e\u0442\u043e\u0440\u0430\u043a_\u0441\u0435\u0440\u0430\u0434\u0443_\u0447\u0430\u0446\u0432\u0435\u0440_\u043f\u044f\u0442\u043d\u0456\u0446\u0443_\u0441\u0443\u0431\u043e\u0442\u0443".split("_"),standalone:"\u043d\u044f\u0434\u0437\u0435\u043b\u044f_\u043f\u0430\u043d\u044f\u0434\u0437\u0435\u043b\u0430\u043a_\u0430\u045e\u0442\u043e\u0440\u0430\u043a_\u0441\u0435\u0440\u0430\u0434\u0430_\u0447\u0430\u0446\u0432\u0435\u0440_\u043f\u044f\u0442\u043d\u0456\u0446\u0430_\u0441\u0443\u0431\u043e\u0442\u0430".split("_"),isFormat:/\[ ?[\u0423\u0443\u045e] ?(?:\u043c\u0456\u043d\u0443\u043b\u0443\u044e|\u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0443\u044e)? ?\] ?dddd/},weekdaysShort:"\u043d\u0434_\u043f\u043d_\u0430\u0442_\u0441\u0440_\u0447\u0446_\u043f\u0442_\u0441\u0431".split("_"),weekdaysMin:"\u043d\u0434_\u043f\u043d_\u0430\u0442_\u0441\u0440_\u0447\u0446_\u043f\u0442_\u0441\u0431".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY \u0433.",LLL:"D MMMM YYYY \u0433., HH:mm",LLLL:"dddd, D MMMM YYYY \u0433., HH:mm"},calendar:{sameDay:"[\u0421\u0451\u043d\u043d\u044f \u045e] LT",nextDay:"[\u0417\u0430\u045e\u0442\u0440\u0430 \u045e] LT",lastDay:"[\u0423\u0447\u043e\u0440\u0430 \u045e] LT",nextWeek:function(){return "[\u0423] dddd [\u045e] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return "[\u0423 \u043c\u0456\u043d\u0443\u043b\u0443\u044e] dddd [\u045e] LT";case 1:case 2:case 4:return "[\u0423 \u043c\u0456\u043d\u0443\u043b\u044b] dddd [\u045e] LT"}},sameElse:"L"},relativeTime:{future:"\u043f\u0440\u0430\u0437 %s",past:"%s \u0442\u0430\u043c\u0443",s:"\u043d\u0435\u043a\u0430\u043b\u044c\u043a\u0456 \u0441\u0435\u043a\u0443\u043d\u0434",m:t,mm:t,h:t,hh:t,d:"\u0434\u0437\u0435\u043d\u044c",dd:t,M:"\u043c\u0435\u0441\u044f\u0446",MM:t,y:"\u0433\u043e\u0434",yy:t},meridiemParse:/\u043d\u043e\u0447\u044b|\u0440\u0430\u043d\u0456\u0446\u044b|\u0434\u043d\u044f|\u0432\u0435\u0447\u0430\u0440\u0430/,isPM:function(e){return /^(\u0434\u043d\u044f|\u0432\u0435\u0447\u0430\u0440\u0430)$/.test(e)},meridiem:function(e,a,_){return e<4?"\u043d\u043e\u0447\u044b":e<12?"\u0440\u0430\u043d\u0456\u0446\u044b":e<17?"\u0434\u043d\u044f":"\u0432\u0435\u0447\u0430\u0440\u0430"},dayOfMonthOrdinalParse:/\d{1,2}-(\u0456|\u044b|\u0433\u0430)/,ordinal:function(e,a){switch(a){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-\u044b":e+"-\u0456";case"D":return e+"-\u0433\u0430";default:return e}},week:{dow:1,doy:7}}),e.defineLocale("bg",{months:"\u044f\u043d\u0443\u0430\u0440\u0438_\u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0438\u043b_\u043c\u0430\u0439_\u044e\u043d\u0438_\u044e\u043b\u0438_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043f\u0442\u0435\u043c\u0432\u0440\u0438_\u043e\u043a\u0442\u043e\u043c\u0432\u0440\u0438_\u043d\u043e\u0435\u043c\u0432\u0440\u0438_\u0434\u0435\u043a\u0435\u043c\u0432\u0440\u0438".split("_"),monthsShort:"\u044f\u043d\u0443_\u0444\u0435\u0432_\u043c\u0430\u0440_\u0430\u043f\u0440_\u043c\u0430\u0439_\u044e\u043d\u0438_\u044e\u043b\u0438_\u0430\u0432\u0433_\u0441\u0435\u043f_\u043e\u043a\u0442_\u043d\u043e\u0435_\u0434\u0435\u043a".split("_"),weekdays:"\u043d\u0435\u0434\u0435\u043b\u044f_\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u043d\u0438\u043a_\u0432\u0442\u043e\u0440\u043d\u0438\u043a_\u0441\u0440\u044f\u0434\u0430_\u0447\u0435\u0442\u0432\u044a\u0440\u0442\u044a\u043a_\u043f\u0435\u0442\u044a\u043a_\u0441\u044a\u0431\u043e\u0442\u0430".split("_"),weekdaysShort:"\u043d\u0435\u0434_\u043f\u043e\u043d_\u0432\u0442\u043e_\u0441\u0440\u044f_\u0447\u0435\u0442_\u043f\u0435\u0442_\u0441\u044a\u0431".split("_"),weekdaysMin:"\u043d\u0434_\u043f\u043d_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043f\u0442_\u0441\u0431".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[\u0414\u043d\u0435\u0441 \u0432] LT",nextDay:"[\u0423\u0442\u0440\u0435 \u0432] LT",nextWeek:"dddd [\u0432] LT",lastDay:"[\u0412\u0447\u0435\u0440\u0430 \u0432] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return "[\u041c\u0438\u043d\u0430\u043b\u0430\u0442\u0430] dddd [\u0432] LT";case 1:case 2:case 4:case 5:return "[\u041c\u0438\u043d\u0430\u043b\u0438\u044f] dddd [\u0432] LT"}},sameElse:"L"},relativeTime:{future:"\u0441\u043b\u0435\u0434 %s",past:"\u043f\u0440\u0435\u0434\u0438 %s",s:"\u043d\u044f\u043a\u043e\u043b\u043a\u043e \u0441\u0435\u043a\u0443\u043d\u0434\u0438",ss:"%d \u0441\u0435\u043a\u0443\u043d\u0434\u0438",m:"\u043c\u0438\u043d\u0443\u0442\u0430",mm:"%d \u043c\u0438\u043d\u0443\u0442\u0438",h:"\u0447\u0430\u0441",hh:"%d \u0447\u0430\u0441\u0430",d:"\u0434\u0435\u043d",dd:"%d \u0434\u0435\u043d\u0430",w:"\u0441\u0435\u0434\u043c\u0438\u0446\u0430",ww:"%d \u0441\u0435\u0434\u043c\u0438\u0446\u0438",M:"\u043c\u0435\u0441\u0435\u0446",MM:"%d \u043c\u0435\u0441\u0435\u0446\u0430",y:"\u0433\u043e\u0434\u0438\u043d\u0430",yy:"%d \u0433\u043e\u0434\u0438\u043d\u0438"},dayOfMonthOrdinalParse:/\d{1,2}-(\u0435\u0432|\u0435\u043d|\u0442\u0438|\u0432\u0438|\u0440\u0438|\u043c\u0438)/,ordinal:function(e){var a=e%10,_=e%100;return 0===e?e+"-\u0435\u0432":0==_?e+"-\u0435\u043d":10<_&&_<20?e+"-\u0442\u0438":1==a?e+"-\u0432\u0438":2==a?e+"-\u0440\u0438":7==a||8==a?e+"-\u043c\u0438":e+"-\u0442\u0438"},week:{dow:1,doy:7}}),e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_M\u025bkalo_Zuw\u025bnkalo_Zuluyekalo_Utikalo_S\u025btanburukalo_\u0254kut\u0254burukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_M\u025b_Zuw_Zul_Uti_S\u025bt_\u0254ku_Now_Des".split("_"),weekdays:"Kari_Nt\u025bn\u025bn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Nt\u025b_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [l\u025br\u025b] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [l\u025br\u025b] HH:mm"},calendar:{sameDay:"[Bi l\u025br\u025b] LT",nextDay:"[Sini l\u025br\u025b] LT",nextWeek:"dddd [don l\u025br\u025b] LT",lastDay:"[Kunu l\u025br\u025b] LT",lastWeek:"dddd [t\u025bm\u025bnen l\u025br\u025b] LT",sameElse:"L"},relativeTime:{future:"%s k\u0254n\u0254",past:"a b\u025b %s b\u0254",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"l\u025br\u025b kelen",hh:"l\u025br\u025b %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}});var U={1:"\u09e7",2:"\u09e8",3:"\u09e9",4:"\u09ea",5:"\u09eb",6:"\u09ec",7:"\u09ed",8:"\u09ee",9:"\u09ef",0:"\u09e6"},$={"\u09e7":"1","\u09e8":"2","\u09e9":"3","\u09ea":"4","\u09eb":"5","\u09ec":"6","\u09ed":"7","\u09ee":"8","\u09ef":"9","\u09e6":"0"},Q=(e.defineLocale("bn-bd",{months:"\u099c\u09be\u09a8\u09c1\u09df\u09be\u09b0\u09bf_\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1\u09df\u09be\u09b0\u09bf_\u09ae\u09be\u09b0\u09cd\u099a_\u098f\u09aa\u09cd\u09b0\u09bf\u09b2_\u09ae\u09c7_\u099c\u09c1\u09a8_\u099c\u09c1\u09b2\u09be\u0987_\u0986\u0997\u09b8\u09cd\u099f_\u09b8\u09c7\u09aa\u09cd\u099f\u09c7\u09ae\u09cd\u09ac\u09b0_\u0985\u0995\u09cd\u099f\u09cb\u09ac\u09b0_\u09a8\u09ad\u09c7\u09ae\u09cd\u09ac\u09b0_\u09a1\u09bf\u09b8\u09c7\u09ae\u09cd\u09ac\u09b0".split("_"),monthsShort:"\u099c\u09be\u09a8\u09c1_\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1_\u09ae\u09be\u09b0\u09cd\u099a_\u098f\u09aa\u09cd\u09b0\u09bf\u09b2_\u09ae\u09c7_\u099c\u09c1\u09a8_\u099c\u09c1\u09b2\u09be\u0987_\u0986\u0997\u09b8\u09cd\u099f_\u09b8\u09c7\u09aa\u09cd\u099f_\u0985\u0995\u09cd\u099f\u09cb_\u09a8\u09ad\u09c7_\u09a1\u09bf\u09b8\u09c7".split("_"),weekdays:"\u09b0\u09ac\u09bf\u09ac\u09be\u09b0_\u09b8\u09cb\u09ae\u09ac\u09be\u09b0_\u09ae\u0999\u09cd\u0997\u09b2\u09ac\u09be\u09b0_\u09ac\u09c1\u09a7\u09ac\u09be\u09b0_\u09ac\u09c3\u09b9\u09b8\u09cd\u09aa\u09a4\u09bf\u09ac\u09be\u09b0_\u09b6\u09c1\u0995\u09cd\u09b0\u09ac\u09be\u09b0_\u09b6\u09a8\u09bf\u09ac\u09be\u09b0".split("_"),weekdaysShort:"\u09b0\u09ac\u09bf_\u09b8\u09cb\u09ae_\u09ae\u0999\u09cd\u0997\u09b2_\u09ac\u09c1\u09a7_\u09ac\u09c3\u09b9\u09b8\u09cd\u09aa\u09a4\u09bf_\u09b6\u09c1\u0995\u09cd\u09b0_\u09b6\u09a8\u09bf".split("_"),weekdaysMin:"\u09b0\u09ac\u09bf_\u09b8\u09cb\u09ae_\u09ae\u0999\u09cd\u0997\u09b2_\u09ac\u09c1\u09a7_\u09ac\u09c3\u09b9_\u09b6\u09c1\u0995\u09cd\u09b0_\u09b6\u09a8\u09bf".split("_"),longDateFormat:{LT:"A h:mm \u09b8\u09ae\u09df",LTS:"A h:mm:ss \u09b8\u09ae\u09df",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm \u09b8\u09ae\u09df",LLLL:"dddd, D MMMM YYYY, A h:mm \u09b8\u09ae\u09df"},calendar:{sameDay:"[\u0986\u099c] LT",nextDay:"[\u0986\u0997\u09be\u09ae\u09c0\u0995\u09be\u09b2] LT",nextWeek:"dddd, LT",lastDay:"[\u0997\u09a4\u0995\u09be\u09b2] LT",lastWeek:"[\u0997\u09a4] dddd, LT",sameElse:"L"},relativeTime:{future:"%s \u09aa\u09b0\u09c7",past:"%s \u0986\u0997\u09c7",s:"\u0995\u09df\u09c7\u0995 \u09b8\u09c7\u0995\u09c7\u09a8\u09cd\u09a1",ss:"%d \u09b8\u09c7\u0995\u09c7\u09a8\u09cd\u09a1",m:"\u098f\u0995 \u09ae\u09bf\u09a8\u09bf\u099f",mm:"%d \u09ae\u09bf\u09a8\u09bf\u099f",h:"\u098f\u0995 \u0998\u09a8\u09cd\u099f\u09be",hh:"%d \u0998\u09a8\u09cd\u099f\u09be",d:"\u098f\u0995 \u09a6\u09bf\u09a8",dd:"%d \u09a6\u09bf\u09a8",M:"\u098f\u0995 \u09ae\u09be\u09b8",MM:"%d \u09ae\u09be\u09b8",y:"\u098f\u0995 \u09ac\u099b\u09b0",yy:"%d \u09ac\u099b\u09b0"},preparse:function(e){return e.replace(/[\u09e7\u09e8\u09e9\u09ea\u09eb\u09ec\u09ed\u09ee\u09ef\u09e6]/g,function(e){return $[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return U[e]})},meridiemParse:/\u09b0\u09be\u09a4|\u09ad\u09cb\u09b0|\u09b8\u0995\u09be\u09b2|\u09a6\u09c1\u09aa\u09c1\u09b0|\u09ac\u09bf\u0995\u09be\u09b2|\u09b8\u09a8\u09cd\u09a7\u09cd\u09af\u09be|\u09b0\u09be\u09a4/,meridiemHour:function(e,a){return 12===e&&(e=0),"\u09b0\u09be\u09a4"===a?e<4?e:e+12:"\u09ad\u09cb\u09b0"===a||"\u09b8\u0995\u09be\u09b2"===a?e:"\u09a6\u09c1\u09aa\u09c1\u09b0"===a?3<=e?e:e+12:"\u09ac\u09bf\u0995\u09be\u09b2"===a||"\u09b8\u09a8\u09cd\u09a7\u09cd\u09af\u09be"===a?e+12:void 0},meridiem:function(e,a,_){return e<4?"\u09b0\u09be\u09a4":e<6?"\u09ad\u09cb\u09b0":e<12?"\u09b8\u0995\u09be\u09b2":e<15?"\u09a6\u09c1\u09aa\u09c1\u09b0":e<18?"\u09ac\u09bf\u0995\u09be\u09b2":e<20?"\u09b8\u09a8\u09cd\u09a7\u09cd\u09af\u09be":"\u09b0\u09be\u09a4"},week:{dow:0,doy:6}}),{1:"\u09e7",2:"\u09e8",3:"\u09e9",4:"\u09ea",5:"\u09eb",6:"\u09ec",7:"\u09ed",8:"\u09ee",9:"\u09ef",0:"\u09e6"}),V={"\u09e7":"1","\u09e8":"2","\u09e9":"3","\u09ea":"4","\u09eb":"5","\u09ec":"6","\u09ed":"7","\u09ee":"8","\u09ef":"9","\u09e6":"0"},Z=(e.defineLocale("bn",{months:"\u099c\u09be\u09a8\u09c1\u09df\u09be\u09b0\u09bf_\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1\u09df\u09be\u09b0\u09bf_\u09ae\u09be\u09b0\u09cd\u099a_\u098f\u09aa\u09cd\u09b0\u09bf\u09b2_\u09ae\u09c7_\u099c\u09c1\u09a8_\u099c\u09c1\u09b2\u09be\u0987_\u0986\u0997\u09b8\u09cd\u099f_\u09b8\u09c7\u09aa\u09cd\u099f\u09c7\u09ae\u09cd\u09ac\u09b0_\u0985\u0995\u09cd\u099f\u09cb\u09ac\u09b0_\u09a8\u09ad\u09c7\u09ae\u09cd\u09ac\u09b0_\u09a1\u09bf\u09b8\u09c7\u09ae\u09cd\u09ac\u09b0".split("_"),monthsShort:"\u099c\u09be\u09a8\u09c1_\u09ab\u09c7\u09ac\u09cd\u09b0\u09c1_\u09ae\u09be\u09b0\u09cd\u099a_\u098f\u09aa\u09cd\u09b0\u09bf\u09b2_\u09ae\u09c7_\u099c\u09c1\u09a8_\u099c\u09c1\u09b2\u09be\u0987_\u0986\u0997\u09b8\u09cd\u099f_\u09b8\u09c7\u09aa\u09cd\u099f_\u0985\u0995\u09cd\u099f\u09cb_\u09a8\u09ad\u09c7_\u09a1\u09bf\u09b8\u09c7".split("_"),weekdays:"\u09b0\u09ac\u09bf\u09ac\u09be\u09b0_\u09b8\u09cb\u09ae\u09ac\u09be\u09b0_\u09ae\u0999\u09cd\u0997\u09b2\u09ac\u09be\u09b0_\u09ac\u09c1\u09a7\u09ac\u09be\u09b0_\u09ac\u09c3\u09b9\u09b8\u09cd\u09aa\u09a4\u09bf\u09ac\u09be\u09b0_\u09b6\u09c1\u0995\u09cd\u09b0\u09ac\u09be\u09b0_\u09b6\u09a8\u09bf\u09ac\u09be\u09b0".split("_"),weekdaysShort:"\u09b0\u09ac\u09bf_\u09b8\u09cb\u09ae_\u09ae\u0999\u09cd\u0997\u09b2_\u09ac\u09c1\u09a7_\u09ac\u09c3\u09b9\u09b8\u09cd\u09aa\u09a4\u09bf_\u09b6\u09c1\u0995\u09cd\u09b0_\u09b6\u09a8\u09bf".split("_"),weekdaysMin:"\u09b0\u09ac\u09bf_\u09b8\u09cb\u09ae_\u09ae\u0999\u09cd\u0997\u09b2_\u09ac\u09c1\u09a7_\u09ac\u09c3\u09b9_\u09b6\u09c1\u0995\u09cd\u09b0_\u09b6\u09a8\u09bf".split("_"),longDateFormat:{LT:"A h:mm \u09b8\u09ae\u09df",LTS:"A h:mm:ss \u09b8\u09ae\u09df",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm \u09b8\u09ae\u09df",LLLL:"dddd, D MMMM YYYY, A h:mm \u09b8\u09ae\u09df"},calendar:{sameDay:"[\u0986\u099c] LT",nextDay:"[\u0986\u0997\u09be\u09ae\u09c0\u0995\u09be\u09b2] LT",nextWeek:"dddd, LT",lastDay:"[\u0997\u09a4\u0995\u09be\u09b2] LT",lastWeek:"[\u0997\u09a4] dddd, LT",sameElse:"L"},relativeTime:{future:"%s \u09aa\u09b0\u09c7",past:"%s \u0986\u0997\u09c7",s:"\u0995\u09df\u09c7\u0995 \u09b8\u09c7\u0995\u09c7\u09a8\u09cd\u09a1",ss:"%d \u09b8\u09c7\u0995\u09c7\u09a8\u09cd\u09a1",m:"\u098f\u0995 \u09ae\u09bf\u09a8\u09bf\u099f",mm:"%d \u09ae\u09bf\u09a8\u09bf\u099f",h:"\u098f\u0995 \u0998\u09a8\u09cd\u099f\u09be",hh:"%d \u0998\u09a8\u09cd\u099f\u09be",d:"\u098f\u0995 \u09a6\u09bf\u09a8",dd:"%d \u09a6\u09bf\u09a8",M:"\u098f\u0995 \u09ae\u09be\u09b8",MM:"%d \u09ae\u09be\u09b8",y:"\u098f\u0995 \u09ac\u099b\u09b0",yy:"%d \u09ac\u099b\u09b0"},preparse:function(e){return e.replace(/[\u09e7\u09e8\u09e9\u09ea\u09eb\u09ec\u09ed\u09ee\u09ef\u09e6]/g,function(e){return V[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Q[e]})},meridiemParse:/\u09b0\u09be\u09a4|\u09b8\u0995\u09be\u09b2|\u09a6\u09c1\u09aa\u09c1\u09b0|\u09ac\u09bf\u0995\u09be\u09b2|\u09b0\u09be\u09a4/,meridiemHour:function(e,a){return 12===e&&(e=0),"\u09b0\u09be\u09a4"===a&&4<=e||"\u09a6\u09c1\u09aa\u09c1\u09b0"===a&&e<5||"\u09ac\u09bf\u0995\u09be\u09b2"===a?e+12:e},meridiem:function(e,a,_){return e<4?"\u09b0\u09be\u09a4":e<10?"\u09b8\u0995\u09be\u09b2":e<17?"\u09a6\u09c1\u09aa\u09c1\u09b0":e<20?"\u09ac\u09bf\u0995\u09be\u09b2":"\u09b0\u09be\u09a4"},week:{dow:0,doy:6}}),{1:"\u0f21",2:"\u0f22",3:"\u0f23",4:"\u0f24",5:"\u0f25",6:"\u0f26",7:"\u0f27",8:"\u0f28",9:"\u0f29",0:"\u0f20"}),X={"\u0f21":"1","\u0f22":"2","\u0f23":"3","\u0f24":"4","\u0f25":"5","\u0f26":"6","\u0f27":"7","\u0f28":"8","\u0f29":"9","\u0f20":"0"};function ee(e,a,_){return e+" "+(_={mm:"munutenn",MM:"miz",dd:"devezh"}[_],2!==(e=e)?_:void 0!==(e={m:"v",b:"v",d:"z"})[(_=_).charAt(0)]?e[_.charAt(0)]+_.substring(1):_)}e.defineLocale("bo",{months:"\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f51\u0f44\u0f0b\u0f54\u0f7c_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f42\u0f49\u0f72\u0f66\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f42\u0f66\u0f74\u0f58\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f56\u0f5e\u0f72\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f63\u0f94\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f51\u0fb2\u0f74\u0f42\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f56\u0f51\u0f74\u0f53\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f56\u0f62\u0f92\u0fb1\u0f51\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f51\u0f42\u0f74\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f56\u0f45\u0f74\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f56\u0f45\u0f74\u0f0b\u0f42\u0f45\u0f72\u0f42\u0f0b\u0f54_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f56\u0f45\u0f74\u0f0b\u0f42\u0f49\u0f72\u0f66\u0f0b\u0f54".split("_"),monthsShort:"\u0f5f\u0fb3\u0f0b1_\u0f5f\u0fb3\u0f0b2_\u0f5f\u0fb3\u0f0b3_\u0f5f\u0fb3\u0f0b4_\u0f5f\u0fb3\u0f0b5_\u0f5f\u0fb3\u0f0b6_\u0f5f\u0fb3\u0f0b7_\u0f5f\u0fb3\u0f0b8_\u0f5f\u0fb3\u0f0b9_\u0f5f\u0fb3\u0f0b10_\u0f5f\u0fb3\u0f0b11_\u0f5f\u0fb3\u0f0b12".split("_"),monthsShortRegex:/^(\u0f5f\u0fb3\u0f0b\d{1,2})/,monthsParseExact:!0,weekdays:"\u0f42\u0f5f\u0f60\u0f0b\u0f49\u0f72\u0f0b\u0f58\u0f0b_\u0f42\u0f5f\u0f60\u0f0b\u0f5f\u0fb3\u0f0b\u0f56\u0f0b_\u0f42\u0f5f\u0f60\u0f0b\u0f58\u0f72\u0f42\u0f0b\u0f51\u0f58\u0f62\u0f0b_\u0f42\u0f5f\u0f60\u0f0b\u0f63\u0fb7\u0f42\u0f0b\u0f54\u0f0b_\u0f42\u0f5f\u0f60\u0f0b\u0f55\u0f74\u0f62\u0f0b\u0f56\u0f74_\u0f42\u0f5f\u0f60\u0f0b\u0f54\u0f0b\u0f66\u0f44\u0f66\u0f0b_\u0f42\u0f5f\u0f60\u0f0b\u0f66\u0fa4\u0f7a\u0f53\u0f0b\u0f54\u0f0b".split("_"),weekdaysShort:"\u0f49\u0f72\u0f0b\u0f58\u0f0b_\u0f5f\u0fb3\u0f0b\u0f56\u0f0b_\u0f58\u0f72\u0f42\u0f0b\u0f51\u0f58\u0f62\u0f0b_\u0f63\u0fb7\u0f42\u0f0b\u0f54\u0f0b_\u0f55\u0f74\u0f62\u0f0b\u0f56\u0f74_\u0f54\u0f0b\u0f66\u0f44\u0f66\u0f0b_\u0f66\u0fa4\u0f7a\u0f53\u0f0b\u0f54\u0f0b".split("_"),weekdaysMin:"\u0f49\u0f72_\u0f5f\u0fb3_\u0f58\u0f72\u0f42_\u0f63\u0fb7\u0f42_\u0f55\u0f74\u0f62_\u0f66\u0f44\u0f66_\u0f66\u0fa4\u0f7a\u0f53".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[\u0f51\u0f72\u0f0b\u0f62\u0f72\u0f44] LT",nextDay:"[\u0f66\u0f44\u0f0b\u0f49\u0f72\u0f53] LT",nextWeek:"[\u0f56\u0f51\u0f74\u0f53\u0f0b\u0f55\u0fb2\u0f42\u0f0b\u0f62\u0f97\u0f7a\u0f66\u0f0b\u0f58], LT",lastDay:"[\u0f41\u0f0b\u0f66\u0f44] LT",lastWeek:"[\u0f56\u0f51\u0f74\u0f53\u0f0b\u0f55\u0fb2\u0f42\u0f0b\u0f58\u0f50\u0f60\u0f0b\u0f58] dddd, LT",sameElse:"L"},relativeTime:{future:"%s \u0f63\u0f0b",past:"%s \u0f66\u0f94\u0f53\u0f0b\u0f63",s:"\u0f63\u0f58\u0f0b\u0f66\u0f44",ss:"%d \u0f66\u0f90\u0f62\u0f0b\u0f46\u0f0d",m:"\u0f66\u0f90\u0f62\u0f0b\u0f58\u0f0b\u0f42\u0f45\u0f72\u0f42",mm:"%d \u0f66\u0f90\u0f62\u0f0b\u0f58",h:"\u0f46\u0f74\u0f0b\u0f5a\u0f7c\u0f51\u0f0b\u0f42\u0f45\u0f72\u0f42",hh:"%d \u0f46\u0f74\u0f0b\u0f5a\u0f7c\u0f51",d:"\u0f49\u0f72\u0f53\u0f0b\u0f42\u0f45\u0f72\u0f42",dd:"%d \u0f49\u0f72\u0f53\u0f0b",M:"\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f42\u0f45\u0f72\u0f42",MM:"%d \u0f5f\u0fb3\u0f0b\u0f56",y:"\u0f63\u0f7c\u0f0b\u0f42\u0f45\u0f72\u0f42",yy:"%d \u0f63\u0f7c"},preparse:function(e){return e.replace(/[\u0f21\u0f22\u0f23\u0f24\u0f25\u0f26\u0f27\u0f28\u0f29\u0f20]/g,function(e){return X[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Z[e]})},meridiemParse:/\u0f58\u0f5a\u0f53\u0f0b\u0f58\u0f7c|\u0f5e\u0f7c\u0f42\u0f66\u0f0b\u0f40\u0f66|\u0f49\u0f72\u0f53\u0f0b\u0f42\u0f74\u0f44|\u0f51\u0f42\u0f7c\u0f44\u0f0b\u0f51\u0f42|\u0f58\u0f5a\u0f53\u0f0b\u0f58\u0f7c/,meridiemHour:function(e,a){return 12===e&&(e=0),"\u0f58\u0f5a\u0f53\u0f0b\u0f58\u0f7c"===a&&4<=e||"\u0f49\u0f72\u0f53\u0f0b\u0f42\u0f74\u0f44"===a&&e<5||"\u0f51\u0f42\u0f7c\u0f44\u0f0b\u0f51\u0f42"===a?e+12:e},meridiem:function(e,a,_){return e<4?"\u0f58\u0f5a\u0f53\u0f0b\u0f58\u0f7c":e<10?"\u0f5e\u0f7c\u0f42\u0f66\u0f0b\u0f40\u0f66":e<17?"\u0f49\u0f72\u0f53\u0f0b\u0f42\u0f74\u0f44":e<20?"\u0f51\u0f42\u0f7c\u0f44\u0f0b\u0f51\u0f42":"\u0f58\u0f5a\u0f53\u0f0b\u0f58\u0f7c"},week:{dow:0,doy:6}});var d=[/^gen/i,/^c[\u02bc\']hwe/i,/^meu/i,/^ebr/i,/^mae/i,/^(mez|eve)/i,/^gou/i,/^eos/i,/^gwe/i,/^her/i,/^du/i,/^ker/i],n=/^(genver|c[\u02bc\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[\u02bc\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,r=[/^Su/i,/^Lu/i,/^Me([^r]|$)/i,/^Mer/i,/^Ya/i,/^Gw/i,/^Sa/i];function i(e,a,_){var s=e+" ";switch(_){case"ss":return s+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return a?"jedna minuta":"jedne minute";case"mm":return s+=1!==e&&(2===e||3===e||4===e)?"minute":"minuta";case"h":return a?"jedan sat":"jednog sata";case"hh":return s+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return s+=1===e?"dan":"dana";case"MM":return s+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return s+=1!==e&&(2===e||3===e||4===e)?"godine":"godina"}}e.defineLocale("br",{months:"Genver_C\u02bchwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C\u02bchwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc\u02bcher_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParse:r,fullWeekdaysParse:[/^sul/i,/^lun/i,/^meurzh/i,/^merc[\u02bc\']her/i,/^yaou/i,/^gwener/i,/^sadorn/i],shortWeekdaysParse:[/^Sul/i,/^Lun/i,/^Meu/i,/^Mer/i,/^Yao/i,/^Gwe/i,/^Sad/i],minWeekdaysParse:r,monthsRegex:n,monthsShortRegex:n,monthsStrictRegex:/^(genver|c[\u02bc\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,monthsShortStrictRegex:/^(gen|c[\u02bc\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,monthsParse:d,longMonthsParse:d,shortMonthsParse:d,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY HH:mm",LLLL:"dddd, D [a viz] MMMM YYYY HH:mm"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc\u02bchoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec\u02bch da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s \u02bczo",s:"un nebeud segondenno\xf9",ss:"%d eilenn",m:"ur vunutenn",mm:ee,h:"un eur",hh:"%d eur",d:"un devezh",dd:ee,M:"ur miz",MM:ee,y:"ur bloaz",yy:function(e){switch(function e(a){if(9<a)return e(a%10);return a}(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(a\xf1|vet)/,ordinal:function(e){return e+(1===e?"a\xf1":"vet")},week:{dow:1,doy:4},meridiemParse:/a.m.|g.m./,isPM:function(e){return "g.m."===e},meridiem:function(e,a,_){return e<12?"a.m.":"g.m."}}),e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_\u010detvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._\u010det._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_\u010de_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return "[u] [nedjelju] [u] LT";case 3:return "[u] [srijedu] [u] LT";case 6:return "[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return "[u] dddd [u] LT"}},lastDay:"[ju\u010der u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return "[pro\u0161lu] dddd [u] LT";case 6:return "[pro\u0161le] [subote] [u] LT";case 1:case 2:case 4:case 5:return "[pro\u0161li] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:i,m:i,mm:i,h:i,hh:i,d:"dan",dd:i,M:"mjesec",MM:i,y:"godinu",yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),e.defineLocale("ca",{months:{standalone:"gener_febrer_mar\xe7_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de mar\xe7_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._mar\xe7_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return "[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return "[dem\xe0 a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return "dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return "[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return "[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aqu\xed %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|\xe8|a)/,ordinal:function(e,a){return e+("w"!==a&&"W"!==a?1===e?"r":2===e?"n":3===e?"r":4===e?"t":"\xe8":"a")},week:{dow:1,doy:4}});var r={format:"leden_\xfanor_b\u0159ezen_duben_kv\u011bten_\u010derven_\u010dervenec_srpen_z\xe1\u0159\xed_\u0159\xedjen_listopad_prosinec".split("_"),standalone:"ledna_\xfanora_b\u0159ezna_dubna_kv\u011btna_\u010dervna_\u010dervence_srpna_z\xe1\u0159\xed_\u0159\xedjna_listopadu_prosince".split("_")},n="led_\xfano_b\u0159e_dub_kv\u011b_\u010dvn_\u010dvc_srp_z\xe1\u0159_\u0159\xedj_lis_pro".split("_"),d=[/^led/i,/^\xfano/i,/^b\u0159e/i,/^dub/i,/^kv\u011b/i,/^(\u010dvn|\u010derven$|\u010dervna)/i,/^(\u010dvc|\u010dervenec|\u010dervence)/i,/^srp/i,/^z\xe1\u0159/i,/^\u0159\xedj/i,/^lis/i,/^pro/i],m=/^(leden|\xfanor|b\u0159ezen|duben|kv\u011bten|\u010dervenec|\u010dervence|\u010derven|\u010dervna|srpen|z\xe1\u0159\xed|\u0159\xedjen|listopad|prosinec|led|\xfano|b\u0159e|dub|kv\u011b|\u010dvn|\u010dvc|srp|z\xe1\u0159|\u0159\xedj|lis|pro)/i;function o(e){return 1<e&&e<5&&1!=~~(e/10)}function u(e,a,_,s){var d=e+" ";switch(_){case"s":return a||s?"p\xe1r sekund":"p\xe1r sekundami";case"ss":return a||s?d+(o(e)?"sekundy":"sekund"):d+"sekundami";case"m":return a?"minuta":s?"minutu":"minutou";case"mm":return a||s?d+(o(e)?"minuty":"minut"):d+"minutami";case"h":return a?"hodina":s?"hodinu":"hodinou";case"hh":return a||s?d+(o(e)?"hodiny":"hodin"):d+"hodinami";case"d":return a||s?"den":"dnem";case"dd":return a||s?d+(o(e)?"dny":"dn\xed"):d+"dny";case"M":return a||s?"m\u011bs\xedc":"m\u011bs\xedcem";case"MM":return a||s?d+(o(e)?"m\u011bs\xedce":"m\u011bs\xedc\u016f"):d+"m\u011bs\xedci";case"y":return a||s?"rok":"rokem";case"yy":return a||s?d+(o(e)?"roky":"let"):d+"lety"}}function l(e,a,_,s){e={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return a?e[_][0]:e[_][1]}function M(e,a,_,s){e={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return a?e[_][0]:e[_][1]}function L(e,a,_,s){e={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return a?e[_][0]:e[_][1]}e.defineLocale("cs",{months:r,monthsShort:n,monthsRegex:m,monthsShortRegex:m,monthsStrictRegex:/^(leden|ledna|\xfanora|\xfanor|b\u0159ezen|b\u0159ezna|duben|dubna|kv\u011bten|kv\u011btna|\u010dervenec|\u010dervence|\u010derven|\u010dervna|srpen|srpna|z\xe1\u0159\xed|\u0159\xedjen|\u0159\xedjna|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|\xfano|b\u0159e|dub|kv\u011b|\u010dvn|\u010dvc|srp|z\xe1\u0159|\u0159\xedj|lis|pro)/i,monthsParse:d,longMonthsParse:d,shortMonthsParse:d,weekdays:"ned\u011ble_pond\u011bl\xed_\xfater\xfd_st\u0159eda_\u010dtvrtek_p\xe1tek_sobota".split("_"),weekdaysShort:"ne_po_\xfat_st_\u010dt_p\xe1_so".split("_"),weekdaysMin:"ne_po_\xfat_st_\u010dt_p\xe1_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[z\xedtra v] LT",nextWeek:function(){switch(this.day()){case 0:return "[v ned\u011bli v] LT";case 1:case 2:return "[v] dddd [v] LT";case 3:return "[ve st\u0159edu v] LT";case 4:return "[ve \u010dtvrtek v] LT";case 5:return "[v p\xe1tek v] LT";case 6:return "[v sobotu v] LT"}},lastDay:"[v\u010dera v] LT",lastWeek:function(){switch(this.day()){case 0:return "[minulou ned\u011bli v] LT";case 1:case 2:return "[minul\xe9] dddd [v] LT";case 3:return "[minulou st\u0159edu v] LT";case 4:case 5:return "[minul\xfd] dddd [v] LT";case 6:return "[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"p\u0159ed %s",s:u,ss:u,m:u,mm:u,h:u,hh:u,d:u,dd:u,M:u,MM:u,y:u,yy:u},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("cv",{months:"\u043a\u04d1\u0440\u043b\u0430\u0447_\u043d\u0430\u0440\u04d1\u0441_\u043f\u0443\u0448_\u0430\u043a\u0430_\u043c\u0430\u0439_\u04ab\u04d7\u0440\u0442\u043c\u0435_\u0443\u0442\u04d1_\u04ab\u0443\u0440\u043b\u0430_\u0430\u0432\u04d1\u043d_\u044e\u043f\u0430_\u0447\u04f3\u043a_\u0440\u0430\u0448\u0442\u0430\u0432".split("_"),monthsShort:"\u043a\u04d1\u0440_\u043d\u0430\u0440_\u043f\u0443\u0448_\u0430\u043a\u0430_\u043c\u0430\u0439_\u04ab\u04d7\u0440_\u0443\u0442\u04d1_\u04ab\u0443\u0440_\u0430\u0432\u043d_\u044e\u043f\u0430_\u0447\u04f3\u043a_\u0440\u0430\u0448".split("_"),weekdays:"\u0432\u044b\u0440\u0441\u0430\u0440\u043d\u0438\u043a\u0443\u043d_\u0442\u0443\u043d\u0442\u0438\u043a\u0443\u043d_\u044b\u0442\u043b\u0430\u0440\u0438\u043a\u0443\u043d_\u044e\u043d\u043a\u0443\u043d_\u043a\u04d7\u04ab\u043d\u0435\u0440\u043d\u0438\u043a\u0443\u043d_\u044d\u0440\u043d\u0435\u043a\u0443\u043d_\u0448\u04d1\u043c\u0430\u0442\u043a\u0443\u043d".split("_"),weekdaysShort:"\u0432\u044b\u0440_\u0442\u0443\u043d_\u044b\u0442\u043b_\u044e\u043d_\u043a\u04d7\u04ab_\u044d\u0440\u043d_\u0448\u04d1\u043c".split("_"),weekdaysMin:"\u0432\u0440_\u0442\u043d_\u044b\u0442_\u044e\u043d_\u043a\u04ab_\u044d\u0440_\u0448\u043c".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [\u04ab\u0443\u043b\u0445\u0438] MMMM [\u0443\u0439\u04d1\u0445\u04d7\u043d] D[-\u043c\u04d7\u0448\u04d7]",LLL:"YYYY [\u04ab\u0443\u043b\u0445\u0438] MMMM [\u0443\u0439\u04d1\u0445\u04d7\u043d] D[-\u043c\u04d7\u0448\u04d7], HH:mm",LLLL:"dddd, YYYY [\u04ab\u0443\u043b\u0445\u0438] MMMM [\u0443\u0439\u04d1\u0445\u04d7\u043d] D[-\u043c\u04d7\u0448\u04d7], HH:mm"},calendar:{sameDay:"[\u041f\u0430\u044f\u043d] LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]",nextDay:"[\u042b\u0440\u0430\u043d] LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]",lastDay:"[\u04d6\u043d\u0435\u0440] LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]",nextWeek:"[\u04aa\u0438\u0442\u0435\u0441] dddd LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]",lastWeek:"[\u0418\u0440\u0442\u043d\u04d7] dddd LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]",sameElse:"L"},relativeTime:{future:function(e){return e+(/\u0441\u0435\u0445\u0435\u0442$/i.exec(e)?"\u0440\u0435\u043d":/\u04ab\u0443\u043b$/i.exec(e)?"\u0442\u0430\u043d":"\u0440\u0430\u043d")},past:"%s \u043a\u0430\u044f\u043b\u043b\u0430",s:"\u043f\u04d7\u0440-\u0438\u043a \u04ab\u0435\u043a\u043a\u0443\u043d\u0442",ss:"%d \u04ab\u0435\u043a\u043a\u0443\u043d\u0442",m:"\u043f\u04d7\u0440 \u043c\u0438\u043d\u0443\u0442",mm:"%d \u043c\u0438\u043d\u0443\u0442",h:"\u043f\u04d7\u0440 \u0441\u0435\u0445\u0435\u0442",hh:"%d \u0441\u0435\u0445\u0435\u0442",d:"\u043f\u04d7\u0440 \u043a\u0443\u043d",dd:"%d \u043a\u0443\u043d",M:"\u043f\u04d7\u0440 \u0443\u0439\u04d1\u0445",MM:"%d \u0443\u0439\u04d1\u0445",y:"\u043f\u04d7\u0440 \u04ab\u0443\u043b",yy:"%d \u04ab\u0443\u043b"},dayOfMonthOrdinalParse:/\d{1,2}-\u043c\u04d7\u0448/,ordinal:"%d-\u043c\u04d7\u0448",week:{dow:1,doy:7}}),e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn \xf4l",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var a="";return 20<e?a=40===e||50===e||60===e||80===e||100===e?"fed":"ain":0<e&&(a=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+a},week:{dow:1,doy:4}}),e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"s\xf8ndag_mandag_tirsdag_onsdag_torsdag_fredag_l\xf8rdag".split("_"),weekdaysShort:"s\xf8n_man_tir_ons_tor_fre_l\xf8r".split("_"),weekdaysMin:"s\xf8_ma_ti_on_to_fr_l\xf8".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"p\xe5 dddd [kl.] LT",lastDay:"[i g\xe5r kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"f\xe5 sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en m\xe5ned",MM:"%d m\xe5neder",y:"et \xe5r",yy:"%d \xe5r"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("de-at",{months:"J\xe4nner_Februar_M\xe4rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"J\xe4n._Feb._M\xe4rz_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:l,mm:"%d Minuten",h:l,hh:"%d Stunden",d:l,dd:l,w:l,ww:"%d Wochen",M:l,MM:l,y:l,yy:l},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("de-ch",{months:"Januar_Februar_M\xe4rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._M\xe4rz_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:M,mm:"%d Minuten",h:M,hh:"%d Stunden",d:M,dd:M,w:M,ww:"%d Wochen",M:M,MM:M,y:M,yy:M},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("de",{months:"Januar_Februar_M\xe4rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._M\xe4rz_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:L,mm:"%d Minuten",h:L,hh:"%d Stunden",d:L,dd:L,w:L,ww:"%d Wochen",M:L,MM:L,y:L,yy:L},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});r=["\u0796\u07ac\u0782\u07aa\u0787\u07a6\u0783\u07a9","\u078a\u07ac\u0784\u07b0\u0783\u07aa\u0787\u07a6\u0783\u07a9","\u0789\u07a7\u0783\u07a8\u0797\u07aa","\u0787\u07ad\u0795\u07b0\u0783\u07a9\u078d\u07aa","\u0789\u07ad","\u0796\u07ab\u0782\u07b0","\u0796\u07aa\u078d\u07a6\u0787\u07a8","\u0787\u07af\u078e\u07a6\u0790\u07b0\u0793\u07aa","\u0790\u07ac\u0795\u07b0\u0793\u07ac\u0789\u07b0\u0784\u07a6\u0783\u07aa","\u0787\u07ae\u0786\u07b0\u0793\u07af\u0784\u07a6\u0783\u07aa","\u0782\u07ae\u0788\u07ac\u0789\u07b0\u0784\u07a6\u0783\u07aa","\u0791\u07a8\u0790\u07ac\u0789\u07b0\u0784\u07a6\u0783\u07aa"],n=["\u0787\u07a7\u078b\u07a8\u0787\u07b0\u078c\u07a6","\u0780\u07af\u0789\u07a6","\u0787\u07a6\u0782\u07b0\u078e\u07a7\u0783\u07a6","\u0784\u07aa\u078b\u07a6","\u0784\u07aa\u0783\u07a7\u0790\u07b0\u078a\u07a6\u078c\u07a8","\u0780\u07aa\u0786\u07aa\u0783\u07aa","\u0780\u07ae\u0782\u07a8\u0780\u07a8\u0783\u07aa"];e.defineLocale("dv",{months:r,monthsShort:r,weekdays:n,weekdaysShort:n,weekdaysMin:"\u0787\u07a7\u078b\u07a8_\u0780\u07af\u0789\u07a6_\u0787\u07a6\u0782\u07b0_\u0784\u07aa\u078b\u07a6_\u0784\u07aa\u0783\u07a7_\u0780\u07aa\u0786\u07aa_\u0780\u07ae\u0782\u07a8".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/\u0789\u0786|\u0789\u078a/,isPM:function(e){return "\u0789\u078a"===e},meridiem:function(e,a,_){return e<12?"\u0789\u0786":"\u0789\u078a"},calendar:{sameDay:"[\u0789\u07a8\u0787\u07a6\u078b\u07aa] LT",nextDay:"[\u0789\u07a7\u078b\u07a6\u0789\u07a7] LT",nextWeek:"dddd LT",lastDay:"[\u0787\u07a8\u0787\u07b0\u0794\u07ac] LT",lastWeek:"[\u078a\u07a7\u0787\u07a8\u078c\u07aa\u0788\u07a8] dddd LT",sameElse:"L"},relativeTime:{future:"\u078c\u07ac\u0783\u07ad\u078e\u07a6\u0787\u07a8 %s",past:"\u0786\u07aa\u0783\u07a8\u0782\u07b0 %s",s:"\u0790\u07a8\u0786\u07aa\u0782\u07b0\u078c\u07aa\u0786\u07ae\u0785\u07ac\u0787\u07b0",ss:"d% \u0790\u07a8\u0786\u07aa\u0782\u07b0\u078c\u07aa",m:"\u0789\u07a8\u0782\u07a8\u0793\u07ac\u0787\u07b0",mm:"\u0789\u07a8\u0782\u07a8\u0793\u07aa %d",h:"\u078e\u07a6\u0791\u07a8\u0787\u07a8\u0783\u07ac\u0787\u07b0",hh:"\u078e\u07a6\u0791\u07a8\u0787\u07a8\u0783\u07aa %d",d:"\u078b\u07aa\u0788\u07a6\u0780\u07ac\u0787\u07b0",dd:"\u078b\u07aa\u0788\u07a6\u0790\u07b0 %d",M:"\u0789\u07a6\u0780\u07ac\u0787\u07b0",MM:"\u0789\u07a6\u0790\u07b0 %d",y:"\u0787\u07a6\u0780\u07a6\u0783\u07ac\u0787\u07b0",yy:"\u0787\u07a6\u0780\u07a6\u0783\u07aa %d"},preparse:function(e){return e.replace(/\u060c/g,",")},postformat:function(e){return e.replace(/,/g,"\u060c")},week:{dow:7,doy:12}}),e.defineLocale("el",{monthsNominativeEl:"\u0399\u03b1\u03bd\u03bf\u03c5\u03ac\u03c1\u03b9\u03bf\u03c2_\u03a6\u03b5\u03b2\u03c1\u03bf\u03c5\u03ac\u03c1\u03b9\u03bf\u03c2_\u039c\u03ac\u03c1\u03c4\u03b9\u03bf\u03c2_\u0391\u03c0\u03c1\u03af\u03bb\u03b9\u03bf\u03c2_\u039c\u03ac\u03b9\u03bf\u03c2_\u0399\u03bf\u03cd\u03bd\u03b9\u03bf\u03c2_\u0399\u03bf\u03cd\u03bb\u03b9\u03bf\u03c2_\u0391\u03cd\u03b3\u03bf\u03c5\u03c3\u03c4\u03bf\u03c2_\u03a3\u03b5\u03c0\u03c4\u03ad\u03bc\u03b2\u03c1\u03b9\u03bf\u03c2_\u039f\u03ba\u03c4\u03ce\u03b2\u03c1\u03b9\u03bf\u03c2_\u039d\u03bf\u03ad\u03bc\u03b2\u03c1\u03b9\u03bf\u03c2_\u0394\u03b5\u03ba\u03ad\u03bc\u03b2\u03c1\u03b9\u03bf\u03c2".split("_"),monthsGenitiveEl:"\u0399\u03b1\u03bd\u03bf\u03c5\u03b1\u03c1\u03af\u03bf\u03c5_\u03a6\u03b5\u03b2\u03c1\u03bf\u03c5\u03b1\u03c1\u03af\u03bf\u03c5_\u039c\u03b1\u03c1\u03c4\u03af\u03bf\u03c5_\u0391\u03c0\u03c1\u03b9\u03bb\u03af\u03bf\u03c5_\u039c\u03b1\u0390\u03bf\u03c5_\u0399\u03bf\u03c5\u03bd\u03af\u03bf\u03c5_\u0399\u03bf\u03c5\u03bb\u03af\u03bf\u03c5_\u0391\u03c5\u03b3\u03bf\u03cd\u03c3\u03c4\u03bf\u03c5_\u03a3\u03b5\u03c0\u03c4\u03b5\u03bc\u03b2\u03c1\u03af\u03bf\u03c5_\u039f\u03ba\u03c4\u03c9\u03b2\u03c1\u03af\u03bf\u03c5_\u039d\u03bf\u03b5\u03bc\u03b2\u03c1\u03af\u03bf\u03c5_\u0394\u03b5\u03ba\u03b5\u03bc\u03b2\u03c1\u03af\u03bf\u03c5".split("_"),months:function(e,a){return e?("string"==typeof a&&/D/.test(a.substring(0,a.indexOf("MMMM")))?this._monthsGenitiveEl:this._monthsNominativeEl)[e.month()]:this._monthsNominativeEl},monthsShort:"\u0399\u03b1\u03bd_\u03a6\u03b5\u03b2_\u039c\u03b1\u03c1_\u0391\u03c0\u03c1_\u039c\u03b1\u03ca_\u0399\u03bf\u03c5\u03bd_\u0399\u03bf\u03c5\u03bb_\u0391\u03c5\u03b3_\u03a3\u03b5\u03c0_\u039f\u03ba\u03c4_\u039d\u03bf\u03b5_\u0394\u03b5\u03ba".split("_"),weekdays:"\u039a\u03c5\u03c1\u03b9\u03b1\u03ba\u03ae_\u0394\u03b5\u03c5\u03c4\u03ad\u03c1\u03b1_\u03a4\u03c1\u03af\u03c4\u03b7_\u03a4\u03b5\u03c4\u03ac\u03c1\u03c4\u03b7_\u03a0\u03ad\u03bc\u03c0\u03c4\u03b7_\u03a0\u03b1\u03c1\u03b1\u03c3\u03ba\u03b5\u03c5\u03ae_\u03a3\u03ac\u03b2\u03b2\u03b1\u03c4\u03bf".split("_"),weekdaysShort:"\u039a\u03c5\u03c1_\u0394\u03b5\u03c5_\u03a4\u03c1\u03b9_\u03a4\u03b5\u03c4_\u03a0\u03b5\u03bc_\u03a0\u03b1\u03c1_\u03a3\u03b1\u03b2".split("_"),weekdaysMin:"\u039a\u03c5_\u0394\u03b5_\u03a4\u03c1_\u03a4\u03b5_\u03a0\u03b5_\u03a0\u03b1_\u03a3\u03b1".split("_"),meridiem:function(e,a,_){return 11<e?_?"\u03bc\u03bc":"\u039c\u039c":_?"\u03c0\u03bc":"\u03a0\u039c"},isPM:function(e){return "\u03bc"===(e+"").toLowerCase()[0]},meridiemParse:/[\u03a0\u039c]\.?\u039c?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[\u03a3\u03ae\u03bc\u03b5\u03c1\u03b1 {}] LT",nextDay:"[\u0391\u03cd\u03c1\u03b9\u03bf {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[\u03a7\u03b8\u03b5\u03c2 {}] LT",lastWeek:function(){switch(this.day()){case 6:return "[\u03c4\u03bf \u03c0\u03c1\u03bf\u03b7\u03b3\u03bf\u03cd\u03bc\u03b5\u03bd\u03bf] dddd [{}] LT";default:return "[\u03c4\u03b7\u03bd \u03c0\u03c1\u03bf\u03b7\u03b3\u03bf\u03cd\u03bc\u03b5\u03bd\u03b7] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,a){var _,e=this._calendarEl[e],s=a&&a.hours();return _=e,(e="undefined"!=typeof Function&&_ instanceof Function||"[object Function]"===Object.prototype.toString.call(_)?e.apply(a):e).replace("{}",s%12==1?"\u03c3\u03c4\u03b7":"\u03c3\u03c4\u03b9\u03c2")},relativeTime:{future:"\u03c3\u03b5 %s",past:"%s \u03c0\u03c1\u03b9\u03bd",s:"\u03bb\u03af\u03b3\u03b1 \u03b4\u03b5\u03c5\u03c4\u03b5\u03c1\u03cc\u03bb\u03b5\u03c0\u03c4\u03b1",ss:"%d \u03b4\u03b5\u03c5\u03c4\u03b5\u03c1\u03cc\u03bb\u03b5\u03c0\u03c4\u03b1",m:"\u03ad\u03bd\u03b1 \u03bb\u03b5\u03c0\u03c4\u03cc",mm:"%d \u03bb\u03b5\u03c0\u03c4\u03ac",h:"\u03bc\u03af\u03b1 \u03ce\u03c1\u03b1",hh:"%d \u03ce\u03c1\u03b5\u03c2",d:"\u03bc\u03af\u03b1 \u03bc\u03ad\u03c1\u03b1",dd:"%d \u03bc\u03ad\u03c1\u03b5\u03c2",M:"\u03ad\u03bd\u03b1\u03c2 \u03bc\u03ae\u03bd\u03b1\u03c2",MM:"%d \u03bc\u03ae\u03bd\u03b5\u03c2",y:"\u03ad\u03bd\u03b1\u03c2 \u03c7\u03c1\u03cc\u03bd\u03bf\u03c2",yy:"%d \u03c7\u03c1\u03cc\u03bd\u03b9\u03b1"},dayOfMonthOrdinalParse:/\d{1,2}\u03b7/,ordinal:"%d\u03b7",week:{dow:1,doy:4}}),e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var a=e%10;return e+(1==~~(e%100/10)?"th":1==a?"st":2==a?"nd":3==a?"rd":"th")},week:{dow:0,doy:4}}),e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var a=e%10;return e+(1==~~(e%100/10)?"th":1==a?"st":2==a?"nd":3==a?"rd":"th")}}),e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var a=e%10;return e+(1==~~(e%100/10)?"th":1==a?"st":2==a?"nd":3==a?"rd":"th")},week:{dow:1,doy:4}}),e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var a=e%10;return e+(1==~~(e%100/10)?"th":1==a?"st":2==a?"nd":3==a?"rd":"th")},week:{dow:1,doy:4}}),e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var a=e%10;return e+(1==~~(e%100/10)?"th":1==a?"st":2==a?"nd":3==a?"rd":"th")}}),e.defineLocale("en-in",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var a=e%10;return e+(1==~~(e%100/10)?"th":1==a?"st":2==a?"nd":3==a?"rd":"th")},week:{dow:0,doy:6}}),e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var a=e%10;return e+(1==~~(e%100/10)?"th":1==a?"st":2==a?"nd":3==a?"rd":"th")},week:{dow:1,doy:4}}),e.defineLocale("en-sg",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var a=e%10;return e+(1==~~(e%100/10)?"th":1==a?"st":2==a?"nd":3==a?"rd":"th")},week:{dow:1,doy:4}}),e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_a\u016dgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mart_apr_maj_jun_jul_a\u016dg_sept_okt_nov_dec".split("_"),weekdays:"diman\u0109o_lundo_mardo_merkredo_\u0135a\u016ddo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_\u0135a\u016d_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_\u0135a_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"[la] D[-an de] MMMM, YYYY",LLL:"[la] D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd[n], [la] D[-an de] MMMM, YYYY HH:mm",llll:"ddd, [la] D[-an de] MMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return "p"===e.charAt(0).toLowerCase()},meridiem:function(e,a,_){return 11<e?_?"p.t.m.":"P.T.M.":_?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodia\u016d je] LT",nextDay:"[Morga\u016d je] LT",nextWeek:"dddd[n je] LT",lastDay:"[Hiera\u016d je] LT",lastWeek:"[pasintan] dddd[n je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"anta\u016d %s",s:"kelkaj sekundoj",ss:"%d sekundoj",m:"unu minuto",mm:"%d minutoj",h:"unu horo",hh:"%d horoj",d:"unu tago",dd:"%d tagoj",M:"unu monato",MM:"%d monatoj",y:"unu jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}});var ae="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),_e="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),m=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],d=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,se=(e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,a){return e?(/-MMM-/.test(a)?_e:ae)[e.month()]:ae},monthsRegex:d,monthsShortRegex:d,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:m,longMonthsParse:m,shortMonthsParse:m,weekdays:"domingo_lunes_martes_mi\xe9rcoles_jueves_viernes_s\xe1bado".split("_"),weekdaysShort:"dom._lun._mar._mi\xe9._jue._vie._s\xe1b.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_s\xe1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return "[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return "[ma\xf1ana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return "dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return "[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return "[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un d\xeda",dd:"%d d\xedas",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un a\xf1o",yy:"%d a\xf1os"},dayOfMonthOrdinalParse:/\d{1,2}\xba/,ordinal:"%d\xba",week:{dow:1,doy:4}}),"ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_")),de="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],n=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,te=(e.defineLocale("es-mx",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,a){return e?(/-MMM-/.test(a)?de:se)[e.month()]:se},monthsRegex:n,monthsShortRegex:n,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_mi\xe9rcoles_jueves_viernes_s\xe1bado".split("_"),weekdaysShort:"dom._lun._mar._mi\xe9._jue._vie._s\xe1b.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_s\xe1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return "[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return "[ma\xf1ana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return "dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return "[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return "[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un d\xeda",dd:"%d d\xedas",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un a\xf1o",yy:"%d a\xf1os"},dayOfMonthOrdinalParse:/\d{1,2}\xba/,ordinal:"%d\xba",week:{dow:0,doy:4},invalidDate:"Fecha inv\xe1lida"}),"ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_")),ne="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),d=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],m=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,re=(e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,a){return e?(/-MMM-/.test(a)?ne:te)[e.month()]:te},monthsRegex:m,monthsShortRegex:m,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:d,longMonthsParse:d,shortMonthsParse:d,weekdays:"domingo_lunes_martes_mi\xe9rcoles_jueves_viernes_s\xe1bado".split("_"),weekdaysShort:"dom._lun._mar._mi\xe9._jue._vie._s\xe1b.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_s\xe1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return "[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return "[ma\xf1ana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return "dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return "[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return "[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un d\xeda",dd:"%d d\xedas",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un a\xf1o",yy:"%d a\xf1os"},dayOfMonthOrdinalParse:/\d{1,2}\xba/,ordinal:"%d\xba",week:{dow:0,doy:6}}),"ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_")),ie="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),n=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],r=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;function Y(e,a,_,s){e={s:["m\xf5ne sekundi","m\xf5ni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["\xfche minuti","\xfcks minut"],mm:[e+" minuti",e+" minutit"],h:["\xfche tunni","tund aega","\xfcks tund"],hh:[e+" tunni",e+" tundi"],d:["\xfche p\xe4eva","\xfcks p\xe4ev"],M:["kuu aja","kuu aega","\xfcks kuu"],MM:[e+" kuu",e+" kuud"],y:["\xfche aasta","aasta","\xfcks aasta"],yy:[e+" aasta",e+" aastat"]};return a?e[_][2]||e[_][1]:s?e[_][0]:e[_][1]}e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,a){return e?(/-MMM-/.test(a)?ie:re)[e.month()]:re},monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"domingo_lunes_martes_mi\xe9rcoles_jueves_viernes_s\xe1bado".split("_"),weekdaysShort:"dom._lun._mar._mi\xe9._jue._vie._s\xe1b.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_s\xe1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return "[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return "[ma\xf1ana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return "dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return "[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return "[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un d\xeda",dd:"%d d\xedas",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un a\xf1o",yy:"%d a\xf1os"},dayOfMonthOrdinalParse:/\d{1,2}\xba/,ordinal:"%d\xba",week:{dow:1,doy:4},invalidDate:"Fecha inv\xe1lida"}),e.defineLocale("et",{months:"jaanuar_veebruar_m\xe4rts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_m\xe4rts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"p\xfchap\xe4ev_esmasp\xe4ev_teisip\xe4ev_kolmap\xe4ev_neljap\xe4ev_reede_laup\xe4ev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[T\xe4na,] LT",nextDay:"[Homme,] LT",nextWeek:"[J\xe4rgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s p\xe4rast",past:"%s tagasi",s:Y,ss:Y,m:Y,mm:Y,h:Y,hh:Y,d:Y,dd:"%d p\xe4eva",M:Y,MM:Y,y:Y,yy:Y},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});var me={1:"\u06f1",2:"\u06f2",3:"\u06f3",4:"\u06f4",5:"\u06f5",6:"\u06f6",7:"\u06f7",8:"\u06f8",9:"\u06f9",0:"\u06f0"},oe={"\u06f1":"1","\u06f2":"2","\u06f3":"3","\u06f4":"4","\u06f5":"5","\u06f6":"6","\u06f7":"7","\u06f8":"8","\u06f9":"9","\u06f0":"0"},ue=(e.defineLocale("fa",{months:"\u0698\u0627\u0646\u0648\u06cc\u0647_\u0641\u0648\u0631\u06cc\u0647_\u0645\u0627\u0631\u0633_\u0622\u0648\u0631\u06cc\u0644_\u0645\u0647_\u0698\u0648\u0626\u0646_\u0698\u0648\u0626\u06cc\u0647_\u0627\u0648\u062a_\u0633\u067e\u062a\u0627\u0645\u0628\u0631_\u0627\u06a9\u062a\u0628\u0631_\u0646\u0648\u0627\u0645\u0628\u0631_\u062f\u0633\u0627\u0645\u0628\u0631".split("_"),monthsShort:"\u0698\u0627\u0646\u0648\u06cc\u0647_\u0641\u0648\u0631\u06cc\u0647_\u0645\u0627\u0631\u0633_\u0622\u0648\u0631\u06cc\u0644_\u0645\u0647_\u0698\u0648\u0626\u0646_\u0698\u0648\u0626\u06cc\u0647_\u0627\u0648\u062a_\u0633\u067e\u062a\u0627\u0645\u0628\u0631_\u0627\u06a9\u062a\u0628\u0631_\u0646\u0648\u0627\u0645\u0628\u0631_\u062f\u0633\u0627\u0645\u0628\u0631".split("_"),weekdays:"\u06cc\u06a9\u200c\u0634\u0646\u0628\u0647_\u062f\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200c\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067e\u0646\u062c\u200c\u0634\u0646\u0628\u0647_\u062c\u0645\u0639\u0647_\u0634\u0646\u0628\u0647".split("_"),weekdaysShort:"\u06cc\u06a9\u200c\u0634\u0646\u0628\u0647_\u062f\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200c\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067e\u0646\u062c\u200c\u0634\u0646\u0628\u0647_\u062c\u0645\u0639\u0647_\u0634\u0646\u0628\u0647".split("_"),weekdaysMin:"\u06cc_\u062f_\u0633_\u0686_\u067e_\u062c_\u0634".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/\u0642\u0628\u0644 \u0627\u0632 \u0638\u0647\u0631|\u0628\u0639\u062f \u0627\u0632 \u0638\u0647\u0631/,isPM:function(e){return /\u0628\u0639\u062f \u0627\u0632 \u0638\u0647\u0631/.test(e)},meridiem:function(e,a,_){return e<12?"\u0642\u0628\u0644 \u0627\u0632 \u0638\u0647\u0631":"\u0628\u0639\u062f \u0627\u0632 \u0638\u0647\u0631"},calendar:{sameDay:"[\u0627\u0645\u0631\u0648\u0632 \u0633\u0627\u0639\u062a] LT",nextDay:"[\u0641\u0631\u062f\u0627 \u0633\u0627\u0639\u062a] LT",nextWeek:"dddd [\u0633\u0627\u0639\u062a] LT",lastDay:"[\u062f\u06cc\u0631\u0648\u0632 \u0633\u0627\u0639\u062a] LT",lastWeek:"dddd [\u067e\u06cc\u0634] [\u0633\u0627\u0639\u062a] LT",sameElse:"L"},relativeTime:{future:"\u062f\u0631 %s",past:"%s \u067e\u06cc\u0634",s:"\u0686\u0646\u062f \u062b\u0627\u0646\u06cc\u0647",ss:"%d \u062b\u0627\u0646\u06cc\u0647",m:"\u06cc\u06a9 \u062f\u0642\u06cc\u0642\u0647",mm:"%d \u062f\u0642\u06cc\u0642\u0647",h:"\u06cc\u06a9 \u0633\u0627\u0639\u062a",hh:"%d \u0633\u0627\u0639\u062a",d:"\u06cc\u06a9 \u0631\u0648\u0632",dd:"%d \u0631\u0648\u0632",M:"\u06cc\u06a9 \u0645\u0627\u0647",MM:"%d \u0645\u0627\u0647",y:"\u06cc\u06a9 \u0633\u0627\u0644",yy:"%d \u0633\u0627\u0644"},preparse:function(e){return e.replace(/[\u06f0-\u06f9]/g,function(e){return oe[e]}).replace(/\u060c/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return me[e]}).replace(/,/g,"\u060c")},dayOfMonthOrdinalParse:/\d{1,2}\u0645/,ordinal:"%d\u0645",week:{dow:6,doy:12}}),"nolla yksi kaksi kolme nelj\xe4 viisi kuusi seitsem\xe4n kahdeksan yhdeks\xe4n".split(" ")),le=["nolla","yhden","kahden","kolmen","nelj\xe4n","viiden","kuuden",ue[7],ue[8],ue[9]];function h(e,a,_,s){var d="";switch(_){case"s":return s?"muutaman sekunnin":"muutama sekunti";case"ss":d=s?"sekunnin":"sekuntia";break;case"m":return s?"minuutin":"minuutti";case"mm":d=s?"minuutin":"minuuttia";break;case"h":return s?"tunnin":"tunti";case"hh":d=s?"tunnin":"tuntia";break;case"d":return s?"p\xe4iv\xe4n":"p\xe4iv\xe4";case"dd":d=s?"p\xe4iv\xe4n":"p\xe4iv\xe4\xe4";break;case"M":return s?"kuukauden":"kuukausi";case"MM":d=s?"kuukauden":"kuukautta";break;case"y":return s?"vuoden":"vuosi";case"yy":d=s?"vuoden":"vuotta";break}return _=s,d=((e=e)<10?(_?le:ue)[e]:e)+" "+d}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kes\xe4kuu_hein\xe4kuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kes\xe4_hein\xe4_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[t\xe4n\xe4\xe4n] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s p\xe4\xe4st\xe4",past:"%s sitten",s:h,ss:h,m:h,mm:h,h:h,hh:h,d:h,dd:h,M:h,MM:h,y:h,yy:h},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("fil",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}}),e.defineLocale("fo",{months:"januar_februar_mars_apr\xedl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_m\xe1nadagur_t\xfdsdagur_mikudagur_h\xf3sdagur_fr\xedggjadagur_leygardagur".split("_"),weekdaysShort:"sun_m\xe1n_t\xfds_mik_h\xf3s_fr\xed_ley".split("_"),weekdaysMin:"su_m\xe1_t\xfd_mi_h\xf3_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[\xcd dag kl.] LT",nextDay:"[\xcd morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[\xcd gj\xe1r kl.] LT",lastWeek:"[s\xed\xf0stu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s s\xed\xf0ani",s:"f\xe1 sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein t\xedmi",hh:"%d t\xedmar",d:"ein dagur",dd:"%d dagar",M:"ein m\xe1na\xf0ur",MM:"%d m\xe1na\xf0ir",y:"eitt \xe1r",yy:"%d \xe1r"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("fr-ca",{months:"janvier_f\xe9vrier_mars_avril_mai_juin_juillet_ao\xfbt_septembre_octobre_novembre_d\xe9cembre".split("_"),monthsShort:"janv._f\xe9vr._mars_avr._mai_juin_juil._ao\xfbt_sept._oct._nov._d\xe9c.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd\u2019hui \xe0] LT",nextDay:"[Demain \xe0] LT",nextWeek:"dddd [\xe0] LT",lastDay:"[Hier \xe0] LT",lastWeek:"dddd [dernier \xe0] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,a){switch(a){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}}),e.defineLocale("fr-ch",{months:"janvier_f\xe9vrier_mars_avril_mai_juin_juillet_ao\xfbt_septembre_octobre_novembre_d\xe9cembre".split("_"),monthsShort:"janv._f\xe9vr._mars_avr._mai_juin_juil._ao\xfbt_sept._oct._nov._d\xe9c.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd\u2019hui \xe0] LT",nextDay:"[Demain \xe0] LT",nextWeek:"dddd [\xe0] LT",lastDay:"[Hier \xe0] LT",lastWeek:"dddd [dernier \xe0] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,a){switch(a){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}});var m=/(janv\.?|f\xe9vr\.?|mars|avr\.?|mai|juin|juil\.?|ao\xfbt|sept\.?|oct\.?|nov\.?|d\xe9c\.?|janvier|f\xe9vrier|mars|avril|mai|juin|juillet|ao\xfbt|septembre|octobre|novembre|d\xe9cembre)/i,d=[/^janv/i,/^f\xe9vr/i,/^mars/i,/^avr/i,/^mai/i,/^juin/i,/^juil/i,/^ao\xfbt/i,/^sept/i,/^oct/i,/^nov/i,/^d\xe9c/i],Me=(e.defineLocale("fr",{months:"janvier_f\xe9vrier_mars_avril_mai_juin_juillet_ao\xfbt_septembre_octobre_novembre_d\xe9cembre".split("_"),monthsShort:"janv._f\xe9vr._mars_avr._mai_juin_juil._ao\xfbt_sept._oct._nov._d\xe9c.".split("_"),monthsRegex:m,monthsShortRegex:m,monthsStrictRegex:/^(janvier|f\xe9vrier|mars|avril|mai|juin|juillet|ao\xfbt|septembre|octobre|novembre|d\xe9cembre)/i,monthsShortStrictRegex:/(janv\.?|f\xe9vr\.?|mars|avr\.?|mai|juin|juil\.?|ao\xfbt|sept\.?|oct\.?|nov\.?|d\xe9c\.?)/i,monthsParse:d,longMonthsParse:d,shortMonthsParse:d,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd\u2019hui \xe0] LT",nextDay:"[Demain \xe0] LT",nextWeek:"dddd [\xe0] LT",lastDay:"[Hier \xe0] LT",lastWeek:"dddd [dernier \xe0] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",w:"une semaine",ww:"%d semaines",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,a){switch(a){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}}),"jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_")),Le="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,a){return e?(/-MMM-/.test(a)?Le:Me)[e.month()]:Me},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[\xf4fr\xfbne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien min\xfat",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||20<=e?"ste":"de")},week:{dow:1,doy:4}}),e.defineLocale("ga",{months:["Ean\xe1ir","Feabhra","M\xe1rta","Aibre\xe1n","Bealtaine","Meitheamh","I\xfail","L\xfanasa","Me\xe1n F\xf3mhair","Deireadh F\xf3mhair","Samhain","Nollaig"],monthsShort:["Ean","Feabh","M\xe1rt","Aib","Beal","Meith","I\xfail","L\xfan","M.F.","D.F.","Samh","Noll"],monthsParseExact:!0,weekdays:["D\xe9 Domhnaigh","D\xe9 Luain","D\xe9 M\xe1irt","D\xe9 C\xe9adaoin","D\xe9ardaoin","D\xe9 hAoine","D\xe9 Sathairn"],weekdaysShort:["Domh","Luan","M\xe1irt","C\xe9ad","D\xe9ar","Aoine","Sath"],weekdaysMin:["Do","Lu","M\xe1","C\xe9","D\xe9","A","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Am\xe1rach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inn\xe9 ag] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s \xf3 shin",s:"c\xfapla soicind",ss:"%d soicind",m:"n\xf3im\xe9ad",mm:"%d n\xf3im\xe9ad",h:"uair an chloig",hh:"%d uair an chloig",d:"l\xe1",dd:"%d l\xe1",M:"m\xed",MM:"%d m\xedonna",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}});function y(e,a,_,s){e={s:["\u0925\u094b\u0921\u092f\u093e \u0938\u0945\u0915\u0902\u0921\u093e\u0902\u0928\u0940","\u0925\u094b\u0921\u0947 \u0938\u0945\u0915\u0902\u0921"],ss:[e+" \u0938\u0945\u0915\u0902\u0921\u093e\u0902\u0928\u0940",e+" \u0938\u0945\u0915\u0902\u0921"],m:["\u090f\u0915\u093e \u092e\u093f\u0923\u091f\u093e\u0928","\u090f\u0915 \u092e\u093f\u0928\u0942\u091f"],mm:[e+" \u092e\u093f\u0923\u091f\u093e\u0902\u0928\u0940",e+" \u092e\u093f\u0923\u091f\u093e\u0902"],h:["\u090f\u0915\u093e \u0935\u0930\u093e\u0928","\u090f\u0915 \u0935\u0930"],hh:[e+" \u0935\u0930\u093e\u0902\u0928\u0940",e+" \u0935\u0930\u093e\u0902"],d:["\u090f\u0915\u093e \u0926\u093f\u0938\u093e\u0928","\u090f\u0915 \u0926\u0940\u0938"],dd:[e+" \u0926\u093f\u0938\u093e\u0902\u0928\u0940",e+" \u0926\u0940\u0938"],M:["\u090f\u0915\u093e \u092e\u094d\u0939\u092f\u0928\u094d\u092f\u093e\u0928","\u090f\u0915 \u092e\u094d\u0939\u092f\u0928\u094b"],MM:[e+" \u092e\u094d\u0939\u092f\u0928\u094d\u092f\u093e\u0928\u0940",e+" \u092e\u094d\u0939\u092f\u0928\u0947"],y:["\u090f\u0915\u093e \u0935\u0930\u094d\u0938\u093e\u0928","\u090f\u0915 \u0935\u0930\u094d\u0938"],yy:[e+" \u0935\u0930\u094d\u0938\u093e\u0902\u0928\u0940",e+" \u0935\u0930\u094d\u0938\u093e\u0902"]};return s?e[_][0]:e[_][1]}function c(e,a,_,s){e={s:["thoddea sekondamni","thodde sekond"],ss:[e+" sekondamni",e+" sekond"],m:["eka mintan","ek minut"],mm:[e+" mintamni",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voramni",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disamni",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineamni",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsamni",e+" vorsam"]};return s?e[_][0]:e[_][1]}e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am M\xe0rt","An Giblean","An C\xe8itean","An t-\xd2gmhios","An t-Iuchar","An L\xf9nastal","An t-Sultain","An D\xe0mhair","An t-Samhain","An D\xf9bhlachd"],monthsShort:["Faoi","Gear","M\xe0rt","Gibl","C\xe8it","\xd2gmh","Iuch","L\xf9n","Sult","D\xe0mh","Samh","D\xf9bh"],monthsParseExact:!0,weekdays:["Did\xf2mhnaich","Diluain","Dim\xe0irt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["D\xf2","Lu","M\xe0","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-m\xe0ireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-d\xe8 aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"m\xecos",MM:"%d m\xecosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}}),e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xu\xf1o_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xu\xf1._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_m\xe9rcores_xoves_venres_s\xe1bado".split("_"),weekdaysShort:"dom._lun._mar._m\xe9r._xov._ven._s\xe1b.".split("_"),weekdaysMin:"do_lu_ma_m\xe9_xo_ve_s\xe1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return "[hoxe "+(1!==this.hours()?"\xe1s":"\xe1")+"] LT"},nextDay:function(){return "[ma\xf1\xe1 "+(1!==this.hours()?"\xe1s":"\xe1")+"] LT"},nextWeek:function(){return "dddd ["+(1!==this.hours()?"\xe1s":"a")+"] LT"},lastDay:function(){return "[onte "+(1!==this.hours()?"\xe1":"a")+"] LT"},lastWeek:function(){return "[o] dddd [pasado "+(1!==this.hours()?"\xe1s":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un d\xeda",dd:"%d d\xedas",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}\xba/,ordinal:"%d\xba",week:{dow:1,doy:4}}),e.defineLocale("gom-deva",{months:{standalone:"\u091c\u093e\u0928\u0947\u0935\u093e\u0930\u0940_\u092b\u0947\u092c\u094d\u0930\u0941\u0935\u093e\u0930\u0940_\u092e\u093e\u0930\u094d\u091a_\u090f\u092a\u094d\u0930\u0940\u0932_\u092e\u0947_\u091c\u0942\u0928_\u091c\u0941\u0932\u092f_\u0911\u0917\u0938\u094d\u091f_\u0938\u092a\u094d\u091f\u0947\u0902\u092c\u0930_\u0911\u0915\u094d\u091f\u094b\u092c\u0930_\u0928\u094b\u0935\u094d\u0939\u0947\u0902\u092c\u0930_\u0921\u093f\u0938\u0947\u0902\u092c\u0930".split("_"),format:"\u091c\u093e\u0928\u0947\u0935\u093e\u0930\u0940\u091a\u094d\u092f\u093e_\u092b\u0947\u092c\u094d\u0930\u0941\u0935\u093e\u0930\u0940\u091a\u094d\u092f\u093e_\u092e\u093e\u0930\u094d\u091a\u093e\u091a\u094d\u092f\u093e_\u090f\u092a\u094d\u0930\u0940\u0932\u093e\u091a\u094d\u092f\u093e_\u092e\u0947\u092f\u093e\u091a\u094d\u092f\u093e_\u091c\u0942\u0928\u093e\u091a\u094d\u092f\u093e_\u091c\u0941\u0932\u092f\u093e\u091a\u094d\u092f\u093e_\u0911\u0917\u0938\u094d\u091f\u093e\u091a\u094d\u092f\u093e_\u0938\u092a\u094d\u091f\u0947\u0902\u092c\u0930\u093e\u091a\u094d\u092f\u093e_\u0911\u0915\u094d\u091f\u094b\u092c\u0930\u093e\u091a\u094d\u092f\u093e_\u0928\u094b\u0935\u094d\u0939\u0947\u0902\u092c\u0930\u093e\u091a\u094d\u092f\u093e_\u0921\u093f\u0938\u0947\u0902\u092c\u0930\u093e\u091a\u094d\u092f\u093e".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"\u091c\u093e\u0928\u0947._\u092b\u0947\u092c\u094d\u0930\u0941._\u092e\u093e\u0930\u094d\u091a_\u090f\u092a\u094d\u0930\u0940._\u092e\u0947_\u091c\u0942\u0928_\u091c\u0941\u0932._\u0911\u0917._\u0938\u092a\u094d\u091f\u0947\u0902._\u0911\u0915\u094d\u091f\u094b._\u0928\u094b\u0935\u094d\u0939\u0947\u0902._\u0921\u093f\u0938\u0947\u0902.".split("_"),monthsParseExact:!0,weekdays:"\u0906\u092f\u0924\u093e\u0930_\u0938\u094b\u092e\u093e\u0930_\u092e\u0902\u0917\u0933\u093e\u0930_\u092c\u0941\u0927\u0935\u093e\u0930_\u092c\u093f\u0930\u0947\u0938\u094d\u0924\u093e\u0930_\u0938\u0941\u0915\u094d\u0930\u093e\u0930_\u0936\u0947\u0928\u0935\u093e\u0930".split("_"),weekdaysShort:"\u0906\u092f\u0924._\u0938\u094b\u092e._\u092e\u0902\u0917\u0933._\u092c\u0941\u0927._\u092c\u094d\u0930\u0947\u0938\u094d\u0924._\u0938\u0941\u0915\u094d\u0930._\u0936\u0947\u0928.".split("_"),weekdaysMin:"\u0906_\u0938\u094b_\u092e\u0902_\u092c\u0941_\u092c\u094d\u0930\u0947_\u0938\u0941_\u0936\u0947".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [\u0935\u093e\u091c\u0924\u093e\u0902]",LTS:"A h:mm:ss [\u0935\u093e\u091c\u0924\u093e\u0902]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [\u0935\u093e\u091c\u0924\u093e\u0902]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [\u0935\u093e\u091c\u0924\u093e\u0902]",llll:"ddd, D MMM YYYY, A h:mm [\u0935\u093e\u091c\u0924\u093e\u0902]"},calendar:{sameDay:"[\u0906\u092f\u091c] LT",nextDay:"[\u092b\u093e\u0932\u094d\u092f\u093e\u0902] LT",nextWeek:"[\u092b\u0941\u0921\u0932\u094b] dddd[,] LT",lastDay:"[\u0915\u093e\u0932] LT",lastWeek:"[\u092b\u093e\u091f\u0932\u094b] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s \u0906\u0926\u0940\u0902",s:y,ss:y,m:y,mm:y,h:y,hh:y,d:y,dd:y,M:y,MM:y,y:y,yy:y},dayOfMonthOrdinalParse:/\d{1,2}(\u0935\u0947\u0930)/,ordinal:function(e,a){switch(a){case"D":return e+"\u0935\u0947\u0930";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/\u0930\u093e\u0924\u0940|\u0938\u0915\u093e\u0933\u0940\u0902|\u0926\u0928\u092a\u093e\u0930\u093e\u0902|\u0938\u093e\u0902\u091c\u0947/,meridiemHour:function(e,a){return 12===e&&(e=0),"\u0930\u093e\u0924\u0940"===a?e<4?e:e+12:"\u0938\u0915\u093e\u0933\u0940\u0902"===a?e:"\u0926\u0928\u092a\u093e\u0930\u093e\u0902"===a?12<e?e:e+12:"\u0938\u093e\u0902\u091c\u0947"===a?e+12:void 0},meridiem:function(e,a,_){return e<4?"\u0930\u093e\u0924\u0940":e<12?"\u0938\u0915\u093e\u0933\u0940\u0902":e<16?"\u0926\u0928\u092a\u093e\u0930\u093e\u0902":e<20?"\u0938\u093e\u0902\u091c\u0947":"\u0930\u093e\u0924\u0940"}}),e.defineLocale("gom-latn",{months:{standalone:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),format:"Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Fuddlo] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fattlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:c,ss:c,m:c,mm:c,h:c,hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,a){switch(a){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/rati|sokallim|donparam|sanje/,meridiemHour:function(e,a){return 12===e&&(e=0),"rati"===a?e<4?e:e+12:"sokallim"===a?e:"donparam"===a?12<e?e:e+12:"sanje"===a?e+12:void 0},meridiem:function(e,a,_){return e<4?"rati":e<12?"sokallim":e<16?"donparam":e<20?"sanje":"rati"}});var Ye={1:"\u0ae7",2:"\u0ae8",3:"\u0ae9",4:"\u0aea",5:"\u0aeb",6:"\u0aec",7:"\u0aed",8:"\u0aee",9:"\u0aef",0:"\u0ae6"},he={"\u0ae7":"1","\u0ae8":"2","\u0ae9":"3","\u0aea":"4","\u0aeb":"5","\u0aec":"6","\u0aed":"7","\u0aee":"8","\u0aef":"9","\u0ae6":"0"},ye=(e.defineLocale("gu",{months:"\u0a9c\u0abe\u0aa8\u0acd\u0aaf\u0ac1\u0a86\u0ab0\u0ac0_\u0aab\u0ac7\u0aac\u0acd\u0ab0\u0ac1\u0a86\u0ab0\u0ac0_\u0aae\u0abe\u0ab0\u0acd\u0a9a_\u0a8f\u0aaa\u0acd\u0ab0\u0abf\u0ab2_\u0aae\u0ac7_\u0a9c\u0ac2\u0aa8_\u0a9c\u0ac1\u0ab2\u0abe\u0a88_\u0a91\u0a97\u0ab8\u0acd\u0a9f_\u0ab8\u0aaa\u0acd\u0a9f\u0ac7\u0aae\u0acd\u0aac\u0ab0_\u0a91\u0a95\u0acd\u0a9f\u0acd\u0aac\u0ab0_\u0aa8\u0ab5\u0ac7\u0aae\u0acd\u0aac\u0ab0_\u0aa1\u0abf\u0ab8\u0ac7\u0aae\u0acd\u0aac\u0ab0".split("_"),monthsShort:"\u0a9c\u0abe\u0aa8\u0acd\u0aaf\u0ac1._\u0aab\u0ac7\u0aac\u0acd\u0ab0\u0ac1._\u0aae\u0abe\u0ab0\u0acd\u0a9a_\u0a8f\u0aaa\u0acd\u0ab0\u0abf._\u0aae\u0ac7_\u0a9c\u0ac2\u0aa8_\u0a9c\u0ac1\u0ab2\u0abe._\u0a91\u0a97._\u0ab8\u0aaa\u0acd\u0a9f\u0ac7._\u0a91\u0a95\u0acd\u0a9f\u0acd._\u0aa8\u0ab5\u0ac7._\u0aa1\u0abf\u0ab8\u0ac7.".split("_"),monthsParseExact:!0,weekdays:"\u0ab0\u0ab5\u0abf\u0ab5\u0abe\u0ab0_\u0ab8\u0acb\u0aae\u0ab5\u0abe\u0ab0_\u0aae\u0a82\u0a97\u0ab3\u0ab5\u0abe\u0ab0_\u0aac\u0ac1\u0aa7\u0acd\u0ab5\u0abe\u0ab0_\u0a97\u0ac1\u0ab0\u0ac1\u0ab5\u0abe\u0ab0_\u0ab6\u0ac1\u0a95\u0acd\u0ab0\u0ab5\u0abe\u0ab0_\u0ab6\u0aa8\u0abf\u0ab5\u0abe\u0ab0".split("_"),weekdaysShort:"\u0ab0\u0ab5\u0abf_\u0ab8\u0acb\u0aae_\u0aae\u0a82\u0a97\u0ab3_\u0aac\u0ac1\u0aa7\u0acd_\u0a97\u0ac1\u0ab0\u0ac1_\u0ab6\u0ac1\u0a95\u0acd\u0ab0_\u0ab6\u0aa8\u0abf".split("_"),weekdaysMin:"\u0ab0_\u0ab8\u0acb_\u0aae\u0a82_\u0aac\u0ac1_\u0a97\u0ac1_\u0ab6\u0ac1_\u0ab6".split("_"),longDateFormat:{LT:"A h:mm \u0ab5\u0abe\u0a97\u0acd\u0aaf\u0ac7",LTS:"A h:mm:ss \u0ab5\u0abe\u0a97\u0acd\u0aaf\u0ac7",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm \u0ab5\u0abe\u0a97\u0acd\u0aaf\u0ac7",LLLL:"dddd, D MMMM YYYY, A h:mm \u0ab5\u0abe\u0a97\u0acd\u0aaf\u0ac7"},calendar:{sameDay:"[\u0a86\u0a9c] LT",nextDay:"[\u0a95\u0abe\u0ab2\u0ac7] LT",nextWeek:"dddd, LT",lastDay:"[\u0a97\u0a87\u0a95\u0abe\u0ab2\u0ac7] LT",lastWeek:"[\u0aaa\u0abe\u0a9b\u0ab2\u0abe] dddd, LT",sameElse:"L"},relativeTime:{future:"%s \u0aae\u0abe",past:"%s \u0aaa\u0ab9\u0ac7\u0ab2\u0abe",s:"\u0a85\u0aae\u0ac1\u0a95 \u0aaa\u0ab3\u0acb",ss:"%d \u0ab8\u0ac7\u0a95\u0a82\u0aa1",m:"\u0a8f\u0a95 \u0aae\u0abf\u0aa8\u0abf\u0a9f",mm:"%d \u0aae\u0abf\u0aa8\u0abf\u0a9f",h:"\u0a8f\u0a95 \u0a95\u0ab2\u0abe\u0a95",hh:"%d \u0a95\u0ab2\u0abe\u0a95",d:"\u0a8f\u0a95 \u0aa6\u0abf\u0ab5\u0ab8",dd:"%d \u0aa6\u0abf\u0ab5\u0ab8",M:"\u0a8f\u0a95 \u0aae\u0ab9\u0abf\u0aa8\u0acb",MM:"%d \u0aae\u0ab9\u0abf\u0aa8\u0acb",y:"\u0a8f\u0a95 \u0ab5\u0ab0\u0acd\u0ab7",yy:"%d \u0ab5\u0ab0\u0acd\u0ab7"},preparse:function(e){return e.replace(/[\u0ae7\u0ae8\u0ae9\u0aea\u0aeb\u0aec\u0aed\u0aee\u0aef\u0ae6]/g,function(e){return he[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Ye[e]})},meridiemParse:/\u0ab0\u0abe\u0aa4|\u0aac\u0aaa\u0acb\u0ab0|\u0ab8\u0ab5\u0abe\u0ab0|\u0ab8\u0abe\u0a82\u0a9c/,meridiemHour:function(e,a){return 12===e&&(e=0),"\u0ab0\u0abe\u0aa4"===a?e<4?e:e+12:"\u0ab8\u0ab5\u0abe\u0ab0"===a?e:"\u0aac\u0aaa\u0acb\u0ab0"===a?10<=e?e:e+12:"\u0ab8\u0abe\u0a82\u0a9c"===a?e+12:void 0},meridiem:function(e,a,_){return e<4?"\u0ab0\u0abe\u0aa4":e<10?"\u0ab8\u0ab5\u0abe\u0ab0":e<17?"\u0aac\u0aaa\u0acb\u0ab0":e<20?"\u0ab8\u0abe\u0a82\u0a9c":"\u0ab0\u0abe\u0aa4"},week:{dow:0,doy:6}}),e.defineLocale("he",{months:"\u05d9\u05e0\u05d5\u05d0\u05e8_\u05e4\u05d1\u05e8\u05d5\u05d0\u05e8_\u05de\u05e8\u05e5_\u05d0\u05e4\u05e8\u05d9\u05dc_\u05de\u05d0\u05d9_\u05d9\u05d5\u05e0\u05d9_\u05d9\u05d5\u05dc\u05d9_\u05d0\u05d5\u05d2\u05d5\u05e1\u05d8_\u05e1\u05e4\u05d8\u05de\u05d1\u05e8_\u05d0\u05d5\u05e7\u05d8\u05d5\u05d1\u05e8_\u05e0\u05d5\u05d1\u05de\u05d1\u05e8_\u05d3\u05e6\u05de\u05d1\u05e8".split("_"),monthsShort:"\u05d9\u05e0\u05d5\u05f3_\u05e4\u05d1\u05e8\u05f3_\u05de\u05e8\u05e5_\u05d0\u05e4\u05e8\u05f3_\u05de\u05d0\u05d9_\u05d9\u05d5\u05e0\u05d9_\u05d9\u05d5\u05dc\u05d9_\u05d0\u05d5\u05d2\u05f3_\u05e1\u05e4\u05d8\u05f3_\u05d0\u05d5\u05e7\u05f3_\u05e0\u05d5\u05d1\u05f3_\u05d3\u05e6\u05de\u05f3".split("_"),weekdays:"\u05e8\u05d0\u05e9\u05d5\u05df_\u05e9\u05e0\u05d9_\u05e9\u05dc\u05d9\u05e9\u05d9_\u05e8\u05d1\u05d9\u05e2\u05d9_\u05d7\u05de\u05d9\u05e9\u05d9_\u05e9\u05d9\u05e9\u05d9_\u05e9\u05d1\u05ea".split("_"),weekdaysShort:"\u05d0\u05f3_\u05d1\u05f3_\u05d2\u05f3_\u05d3\u05f3_\u05d4\u05f3_\u05d5\u05f3_\u05e9\u05f3".split("_"),weekdaysMin:"\u05d0_\u05d1_\u05d2_\u05d3_\u05d4_\u05d5_\u05e9".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [\u05d1]MMMM YYYY",LLL:"D [\u05d1]MMMM YYYY HH:mm",LLLL:"dddd, D [\u05d1]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[\u05d4\u05d9\u05d5\u05dd \u05d1\u05be]LT",nextDay:"[\u05de\u05d7\u05e8 \u05d1\u05be]LT",nextWeek:"dddd [\u05d1\u05e9\u05e2\u05d4] LT",lastDay:"[\u05d0\u05ea\u05de\u05d5\u05dc \u05d1\u05be]LT",lastWeek:"[\u05d1\u05d9\u05d5\u05dd] dddd [\u05d4\u05d0\u05d7\u05e8\u05d5\u05df \u05d1\u05e9\u05e2\u05d4] LT",sameElse:"L"},relativeTime:{future:"\u05d1\u05e2\u05d5\u05d3 %s",past:"\u05dc\u05e4\u05e0\u05d9 %s",s:"\u05de\u05e1\u05e4\u05e8 \u05e9\u05e0\u05d9\u05d5\u05ea",ss:"%d \u05e9\u05e0\u05d9\u05d5\u05ea",m:"\u05d3\u05e7\u05d4",mm:"%d \u05d3\u05e7\u05d5\u05ea",h:"\u05e9\u05e2\u05d4",hh:function(e){return 2===e?"\u05e9\u05e2\u05ea\u05d9\u05d9\u05dd":e+" \u05e9\u05e2\u05d5\u05ea"},d:"\u05d9\u05d5\u05dd",dd:function(e){return 2===e?"\u05d9\u05d5\u05de\u05d9\u05d9\u05dd":e+" \u05d9\u05de\u05d9\u05dd"},M:"\u05d7\u05d5\u05d3\u05e9",MM:function(e){return 2===e?"\u05d7\u05d5\u05d3\u05e9\u05d9\u05d9\u05dd":e+" \u05d7\u05d5\u05d3\u05e9\u05d9\u05dd"},y:"\u05e9\u05e0\u05d4",yy:function(e){return 2===e?"\u05e9\u05e0\u05ea\u05d9\u05d9\u05dd":e%10==0&&10!==e?e+" \u05e9\u05e0\u05d4":e+" \u05e9\u05e0\u05d9\u05dd"}},meridiemParse:/\u05d0\u05d7\u05d4"\u05e6|\u05dc\u05e4\u05e0\u05d4"\u05e6|\u05d0\u05d7\u05e8\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd|\u05dc\u05e4\u05e0\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd|\u05dc\u05e4\u05e0\u05d5\u05ea \u05d1\u05d5\u05e7\u05e8|\u05d1\u05d1\u05d5\u05e7\u05e8|\u05d1\u05e2\u05e8\u05d1/i,isPM:function(e){return /^(\u05d0\u05d7\u05d4"\u05e6|\u05d0\u05d7\u05e8\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd|\u05d1\u05e2\u05e8\u05d1)$/.test(e)},meridiem:function(e,a,_){return e<5?"\u05dc\u05e4\u05e0\u05d5\u05ea \u05d1\u05d5\u05e7\u05e8":e<10?"\u05d1\u05d1\u05d5\u05e7\u05e8":e<12?_?'\u05dc\u05e4\u05e0\u05d4"\u05e6':"\u05dc\u05e4\u05e0\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd":e<18?_?'\u05d0\u05d7\u05d4"\u05e6':"\u05d0\u05d7\u05e8\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd":"\u05d1\u05e2\u05e8\u05d1"}}),{1:"\u0967",2:"\u0968",3:"\u0969",4:"\u096a",5:"\u096b",6:"\u096c",7:"\u096d",8:"\u096e",9:"\u096f",0:"\u0966"}),ce={"\u0967":"1","\u0968":"2","\u0969":"3","\u096a":"4","\u096b":"5","\u096c":"6","\u096d":"7","\u096e":"8","\u096f":"9","\u0966":"0"},r=[/^\u091c\u0928/i,/^\u092b\u093c\u0930|\u092b\u0930/i,/^\u092e\u093e\u0930\u094d\u091a/i,/^\u0905\u092a\u094d\u0930\u0948/i,/^\u092e\u0908/i,/^\u091c\u0942\u0928/i,/^\u091c\u0941\u0932/i,/^\u0905\u0917/i,/^\u0938\u093f\u0924\u0902|\u0938\u093f\u0924/i,/^\u0905\u0915\u094d\u091f\u0942/i,/^\u0928\u0935|\u0928\u0935\u0902/i,/^\u0926\u093f\u0938\u0902|\u0926\u093f\u0938/i];function k(e,a,_){var s=e+" ";switch(_){case"ss":return s+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return a?"jedna minuta":"jedne minute";case"mm":return s+=1!==e&&(2===e||3===e||4===e)?"minute":"minuta";case"h":return a?"jedan sat":"jednog sata";case"hh":return s+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return s+=1===e?"dan":"dana";case"MM":return s+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return s+=1!==e&&(2===e||3===e||4===e)?"godine":"godina"}}e.defineLocale("hi",{months:{format:"\u091c\u0928\u0935\u0930\u0940_\u092b\u093c\u0930\u0935\u0930\u0940_\u092e\u093e\u0930\u094d\u091a_\u0905\u092a\u094d\u0930\u0948\u0932_\u092e\u0908_\u091c\u0942\u0928_\u091c\u0941\u0932\u093e\u0908_\u0905\u0917\u0938\u094d\u0924_\u0938\u093f\u0924\u092e\u094d\u092c\u0930_\u0905\u0915\u094d\u091f\u0942\u092c\u0930_\u0928\u0935\u092e\u094d\u092c\u0930_\u0926\u093f\u0938\u092e\u094d\u092c\u0930".split("_"),standalone:"\u091c\u0928\u0935\u0930\u0940_\u092b\u0930\u0935\u0930\u0940_\u092e\u093e\u0930\u094d\u091a_\u0905\u092a\u094d\u0930\u0948\u0932_\u092e\u0908_\u091c\u0942\u0928_\u091c\u0941\u0932\u093e\u0908_\u0905\u0917\u0938\u094d\u0924_\u0938\u093f\u0924\u0902\u092c\u0930_\u0905\u0915\u094d\u091f\u0942\u092c\u0930_\u0928\u0935\u0902\u092c\u0930_\u0926\u093f\u0938\u0902\u092c\u0930".split("_")},monthsShort:"\u091c\u0928._\u092b\u093c\u0930._\u092e\u093e\u0930\u094d\u091a_\u0905\u092a\u094d\u0930\u0948._\u092e\u0908_\u091c\u0942\u0928_\u091c\u0941\u0932._\u0905\u0917._\u0938\u093f\u0924._\u0905\u0915\u094d\u091f\u0942._\u0928\u0935._\u0926\u093f\u0938.".split("_"),weekdays:"\u0930\u0935\u093f\u0935\u093e\u0930_\u0938\u094b\u092e\u0935\u093e\u0930_\u092e\u0902\u0917\u0932\u0935\u093e\u0930_\u092c\u0941\u0927\u0935\u093e\u0930_\u0917\u0941\u0930\u0942\u0935\u093e\u0930_\u0936\u0941\u0915\u094d\u0930\u0935\u093e\u0930_\u0936\u0928\u093f\u0935\u093e\u0930".split("_"),weekdaysShort:"\u0930\u0935\u093f_\u0938\u094b\u092e_\u092e\u0902\u0917\u0932_\u092c\u0941\u0927_\u0917\u0941\u0930\u0942_\u0936\u0941\u0915\u094d\u0930_\u0936\u0928\u093f".split("_"),weekdaysMin:"\u0930_\u0938\u094b_\u092e\u0902_\u092c\u0941_\u0917\u0941_\u0936\u0941_\u0936".split("_"),longDateFormat:{LT:"A h:mm \u092c\u091c\u0947",LTS:"A h:mm:ss \u092c\u091c\u0947",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm \u092c\u091c\u0947",LLLL:"dddd, D MMMM YYYY, A h:mm \u092c\u091c\u0947"},monthsParse:r,longMonthsParse:r,shortMonthsParse:[/^\u091c\u0928/i,/^\u092b\u093c\u0930/i,/^\u092e\u093e\u0930\u094d\u091a/i,/^\u0905\u092a\u094d\u0930\u0948/i,/^\u092e\u0908/i,/^\u091c\u0942\u0928/i,/^\u091c\u0941\u0932/i,/^\u0905\u0917/i,/^\u0938\u093f\u0924/i,/^\u0905\u0915\u094d\u091f\u0942/i,/^\u0928\u0935/i,/^\u0926\u093f\u0938/i],monthsRegex:/^(\u091c\u0928\u0935\u0930\u0940|\u091c\u0928\.?|\u092b\u093c\u0930\u0935\u0930\u0940|\u092b\u0930\u0935\u0930\u0940|\u092b\u093c\u0930\.?|\u092e\u093e\u0930\u094d\u091a?|\u0905\u092a\u094d\u0930\u0948\u0932|\u0905\u092a\u094d\u0930\u0948\.?|\u092e\u0908?|\u091c\u0942\u0928?|\u091c\u0941\u0932\u093e\u0908|\u091c\u0941\u0932\.?|\u0905\u0917\u0938\u094d\u0924|\u0905\u0917\.?|\u0938\u093f\u0924\u092e\u094d\u092c\u0930|\u0938\u093f\u0924\u0902\u092c\u0930|\u0938\u093f\u0924\.?|\u0905\u0915\u094d\u091f\u0942\u092c\u0930|\u0905\u0915\u094d\u091f\u0942\.?|\u0928\u0935\u092e\u094d\u092c\u0930|\u0928\u0935\u0902\u092c\u0930|\u0928\u0935\.?|\u0926\u093f\u0938\u092e\u094d\u092c\u0930|\u0926\u093f\u0938\u0902\u092c\u0930|\u0926\u093f\u0938\.?)/i,monthsShortRegex:/^(\u091c\u0928\u0935\u0930\u0940|\u091c\u0928\.?|\u092b\u093c\u0930\u0935\u0930\u0940|\u092b\u0930\u0935\u0930\u0940|\u092b\u093c\u0930\.?|\u092e\u093e\u0930\u094d\u091a?|\u0905\u092a\u094d\u0930\u0948\u0932|\u0905\u092a\u094d\u0930\u0948\.?|\u092e\u0908?|\u091c\u0942\u0928?|\u091c\u0941\u0932\u093e\u0908|\u091c\u0941\u0932\.?|\u0905\u0917\u0938\u094d\u0924|\u0905\u0917\.?|\u0938\u093f\u0924\u092e\u094d\u092c\u0930|\u0938\u093f\u0924\u0902\u092c\u0930|\u0938\u093f\u0924\.?|\u0905\u0915\u094d\u091f\u0942\u092c\u0930|\u0905\u0915\u094d\u091f\u0942\.?|\u0928\u0935\u092e\u094d\u092c\u0930|\u0928\u0935\u0902\u092c\u0930|\u0928\u0935\.?|\u0926\u093f\u0938\u092e\u094d\u092c\u0930|\u0926\u093f\u0938\u0902\u092c\u0930|\u0926\u093f\u0938\.?)/i,monthsStrictRegex:/^(\u091c\u0928\u0935\u0930\u0940?|\u092b\u093c\u0930\u0935\u0930\u0940|\u092b\u0930\u0935\u0930\u0940?|\u092e\u093e\u0930\u094d\u091a?|\u0905\u092a\u094d\u0930\u0948\u0932?|\u092e\u0908?|\u091c\u0942\u0928?|\u091c\u0941\u0932\u093e\u0908?|\u0905\u0917\u0938\u094d\u0924?|\u0938\u093f\u0924\u092e\u094d\u092c\u0930|\u0938\u093f\u0924\u0902\u092c\u0930|\u0938\u093f\u0924?\.?|\u0905\u0915\u094d\u091f\u0942\u092c\u0930|\u0905\u0915\u094d\u091f\u0942\.?|\u0928\u0935\u092e\u094d\u092c\u0930|\u0928\u0935\u0902\u092c\u0930?|\u0926\u093f\u0938\u092e\u094d\u092c\u0930|\u0926\u093f\u0938\u0902\u092c\u0930?)/i,monthsShortStrictRegex:/^(\u091c\u0928\.?|\u092b\u093c\u0930\.?|\u092e\u093e\u0930\u094d\u091a?|\u0905\u092a\u094d\u0930\u0948\.?|\u092e\u0908?|\u091c\u0942\u0928?|\u091c\u0941\u0932\.?|\u0905\u0917\.?|\u0938\u093f\u0924\.?|\u0905\u0915\u094d\u091f\u0942\.?|\u0928\u0935\.?|\u0926\u093f\u0938\.?)/i,calendar:{sameDay:"[\u0906\u091c] LT",nextDay:"[\u0915\u0932] LT",nextWeek:"dddd, LT",lastDay:"[\u0915\u0932] LT",lastWeek:"[\u092a\u093f\u091b\u0932\u0947] dddd, LT",sameElse:"L"},relativeTime:{future:"%s \u092e\u0947\u0902",past:"%s \u092a\u0939\u0932\u0947",s:"\u0915\u0941\u091b \u0939\u0940 \u0915\u094d\u0937\u0923",ss:"%d \u0938\u0947\u0915\u0902\u0921",m:"\u090f\u0915 \u092e\u093f\u0928\u091f",mm:"%d \u092e\u093f\u0928\u091f",h:"\u090f\u0915 \u0918\u0902\u091f\u093e",hh:"%d \u0918\u0902\u091f\u0947",d:"\u090f\u0915 \u0926\u093f\u0928",dd:"%d \u0926\u093f\u0928",M:"\u090f\u0915 \u092e\u0939\u0940\u0928\u0947",MM:"%d \u092e\u0939\u0940\u0928\u0947",y:"\u090f\u0915 \u0935\u0930\u094d\u0937",yy:"%d \u0935\u0930\u094d\u0937"},preparse:function(e){return e.replace(/[\u0967\u0968\u0969\u096a\u096b\u096c\u096d\u096e\u096f\u0966]/g,function(e){return ce[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return ye[e]})},meridiemParse:/\u0930\u093e\u0924|\u0938\u0941\u092c\u0939|\u0926\u094b\u092a\u0939\u0930|\u0936\u093e\u092e/,meridiemHour:function(e,a){return 12===e&&(e=0),"\u0930\u093e\u0924"===a?e<4?e:e+12:"\u0938\u0941\u092c\u0939"===a?e:"\u0926\u094b\u092a\u0939\u0930"===a?10<=e?e:e+12:"\u0936\u093e\u092e"===a?e+12:void 0},meridiem:function(e,a,_){return e<4?"\u0930\u093e\u0924":e<10?"\u0938\u0941\u092c\u0939":e<17?"\u0926\u094b\u092a\u0939\u0930":e<20?"\u0936\u093e\u092e":"\u0930\u093e\u0924"},week:{dow:0,doy:6}}),e.defineLocale("hr",{months:{format:"sije\u010dnja_velja\u010de_o\u017eujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"sije\u010danj_velja\u010da_o\u017eujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._o\u017eu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_\u010detvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._\u010det._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_\u010de_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM YYYY",LLL:"Do MMMM YYYY H:mm",LLLL:"dddd, Do MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return "[u] [nedjelju] [u] LT";case 3:return "[u] [srijedu] [u] LT";case 6:return "[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return "[u] dddd [u] LT"}},lastDay:"[ju\u010der u] LT",lastWeek:function(){switch(this.day()){case 0:return "[pro\u0161lu] [nedjelju] [u] LT";case 3:return "[pro\u0161lu] [srijedu] [u] LT";case 6:return "[pro\u0161le] [subote] [u] LT";case 1:case 2:case 4:case 5:return "[pro\u0161li] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:k,m:k,mm:k,h:k,hh:k,d:"dan",dd:k,M:"mjesec",MM:k,y:"godinu",yy:k},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});var ke="vas\xe1rnap h\xe9tf\u0151n kedden szerd\xe1n cs\xfct\xf6rt\xf6k\xf6n p\xe9nteken szombaton".split(" ");function D(e,a,_,s){var d=e;switch(_){case"s":return s||a?"n\xe9h\xe1ny m\xe1sodperc":"n\xe9h\xe1ny m\xe1sodperce";case"ss":return d+(s||a)?" m\xe1sodperc":" m\xe1sodperce";case"m":return "egy"+(s||a?" perc":" perce");case"mm":return d+(s||a?" perc":" perce");case"h":return "egy"+(s||a?" \xf3ra":" \xf3r\xe1ja");case"hh":return d+(s||a?" \xf3ra":" \xf3r\xe1ja");case"d":return "egy"+(s||a?" nap":" napja");case"dd":return d+(s||a?" nap":" napja");case"M":return "egy"+(s||a?" h\xf3nap":" h\xf3napja");case"MM":return d+(s||a?" h\xf3nap":" h\xf3napja");case"y":return "egy"+(s||a?" \xe9v":" \xe9ve");case"yy":return d+(s||a?" \xe9v":" \xe9ve")}return ""}function De(e){return (e?"":"[m\xfalt] ")+"["+ke[this.day()]+"] LT[-kor]"}function p(e){return e%100==11||e%10!=1}function T(e,a,_,s){var d=e+" ";switch(_){case"s":return a||s?"nokkrar sek\xfandur":"nokkrum sek\xfandum";case"ss":return p(e)?d+(a||s?"sek\xfandur":"sek\xfandum"):d+"sek\xfanda";case"m":return a?"m\xedn\xfata":"m\xedn\xfatu";case"mm":return p(e)?d+(a||s?"m\xedn\xfatur":"m\xedn\xfatum"):a?d+"m\xedn\xfata":d+"m\xedn\xfatu";case"hh":return p(e)?d+(a||s?"klukkustundir":"klukkustundum"):d+"klukkustund";case"d":return a?"dagur":s?"dag":"degi";case"dd":return p(e)?a?d+"dagar":d+(s?"daga":"d\xf6gum"):a?d+"dagur":d+(s?"dag":"degi");case"M":return a?"m\xe1nu\xf0ur":s?"m\xe1nu\xf0":"m\xe1nu\xf0i";case"MM":return p(e)?a?d+"m\xe1nu\xf0ir":d+(s?"m\xe1nu\xf0i":"m\xe1nu\xf0um"):a?d+"m\xe1nu\xf0ur":d+(s?"m\xe1nu\xf0":"m\xe1nu\xf0i");case"y":return a||s?"\xe1r":"\xe1ri";case"yy":return p(e)?d+(a||s?"\xe1r":"\xe1rum"):d+(a||s?"\xe1r":"\xe1ri")}}e.defineLocale("hu",{months:"janu\xe1r_febru\xe1r_m\xe1rcius_\xe1prilis_m\xe1jus_j\xfanius_j\xfalius_augusztus_szeptember_okt\xf3ber_november_december".split("_"),monthsShort:"jan._feb._m\xe1rc._\xe1pr._m\xe1j._j\xfan._j\xfal._aug._szept._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"vas\xe1rnap_h\xe9tf\u0151_kedd_szerda_cs\xfct\xf6rt\xf6k_p\xe9ntek_szombat".split("_"),weekdaysShort:"vas_h\xe9t_kedd_sze_cs\xfct_p\xe9n_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return "u"===e.charAt(1).toLowerCase()},meridiem:function(e,a,_){return e<12?!0===_?"de":"DE":!0===_?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return De.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return De.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s m\xfalva",past:"%s",s:D,ss:D,m:D,mm:D,h:D,hh:D,d:D,dd:D,M:D,MM:D,y:D,yy:D},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("hy-am",{months:{format:"\u0570\u0578\u0582\u0576\u057e\u0561\u0580\u056b_\u0583\u0565\u057f\u0580\u057e\u0561\u0580\u056b_\u0574\u0561\u0580\u057f\u056b_\u0561\u057a\u0580\u056b\u056c\u056b_\u0574\u0561\u0575\u056b\u057d\u056b_\u0570\u0578\u0582\u0576\u056b\u057d\u056b_\u0570\u0578\u0582\u056c\u056b\u057d\u056b_\u0585\u0563\u0578\u057d\u057f\u0578\u057d\u056b_\u057d\u0565\u057a\u057f\u0565\u0574\u0562\u0565\u0580\u056b_\u0570\u0578\u056f\u057f\u0565\u0574\u0562\u0565\u0580\u056b_\u0576\u0578\u0575\u0565\u0574\u0562\u0565\u0580\u056b_\u0564\u0565\u056f\u057f\u0565\u0574\u0562\u0565\u0580\u056b".split("_"),standalone:"\u0570\u0578\u0582\u0576\u057e\u0561\u0580_\u0583\u0565\u057f\u0580\u057e\u0561\u0580_\u0574\u0561\u0580\u057f_\u0561\u057a\u0580\u056b\u056c_\u0574\u0561\u0575\u056b\u057d_\u0570\u0578\u0582\u0576\u056b\u057d_\u0570\u0578\u0582\u056c\u056b\u057d_\u0585\u0563\u0578\u057d\u057f\u0578\u057d_\u057d\u0565\u057a\u057f\u0565\u0574\u0562\u0565\u0580_\u0570\u0578\u056f\u057f\u0565\u0574\u0562\u0565\u0580_\u0576\u0578\u0575\u0565\u0574\u0562\u0565\u0580_\u0564\u0565\u056f\u057f\u0565\u0574\u0562\u0565\u0580".split("_")},monthsShort:"\u0570\u0576\u057e_\u0583\u057f\u0580_\u0574\u0580\u057f_\u0561\u057a\u0580_\u0574\u0575\u057d_\u0570\u0576\u057d_\u0570\u056c\u057d_\u0585\u0563\u057d_\u057d\u057a\u057f_\u0570\u056f\u057f_\u0576\u0574\u0562_\u0564\u056f\u057f".split("_"),weekdays:"\u056f\u056b\u0580\u0561\u056f\u056b_\u0565\u0580\u056f\u0578\u0582\u0577\u0561\u0562\u0569\u056b_\u0565\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056b_\u0579\u0578\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056b_\u0570\u056b\u0576\u0563\u0577\u0561\u0562\u0569\u056b_\u0578\u0582\u0580\u0562\u0561\u0569_\u0577\u0561\u0562\u0561\u0569".split("_"),weekdaysShort:"\u056f\u0580\u056f_\u0565\u0580\u056f_\u0565\u0580\u0584_\u0579\u0580\u0584_\u0570\u0576\u0563_\u0578\u0582\u0580\u0562_\u0577\u0562\u0569".split("_"),weekdaysMin:"\u056f\u0580\u056f_\u0565\u0580\u056f_\u0565\u0580\u0584_\u0579\u0580\u0584_\u0570\u0576\u0563_\u0578\u0582\u0580\u0562_\u0577\u0562\u0569".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY \u0569.",LLL:"D MMMM YYYY \u0569., HH:mm",LLLL:"dddd, D MMMM YYYY \u0569., HH:mm"},calendar:{sameDay:"[\u0561\u0575\u057d\u0585\u0580] LT",nextDay:"[\u057e\u0561\u0572\u0568] LT",lastDay:"[\u0565\u0580\u0565\u056f] LT",nextWeek:function(){return "dddd [\u0585\u0580\u0568 \u056a\u0561\u0574\u0568] LT"},lastWeek:function(){return "[\u0561\u0576\u0581\u0561\u056e] dddd [\u0585\u0580\u0568 \u056a\u0561\u0574\u0568] LT"},sameElse:"L"},relativeTime:{future:"%s \u0570\u0565\u057f\u0578",past:"%s \u0561\u057c\u0561\u057b",s:"\u0574\u056b \u0584\u0561\u0576\u056b \u057e\u0561\u0575\u0580\u056f\u0575\u0561\u0576",ss:"%d \u057e\u0561\u0575\u0580\u056f\u0575\u0561\u0576",m:"\u0580\u0578\u057a\u0565",mm:"%d \u0580\u0578\u057a\u0565",h:"\u056a\u0561\u0574",hh:"%d \u056a\u0561\u0574",d:"\u0585\u0580",dd:"%d \u0585\u0580",M:"\u0561\u0574\u056b\u057d",MM:"%d \u0561\u0574\u056b\u057d",y:"\u057f\u0561\u0580\u056b",yy:"%d \u057f\u0561\u0580\u056b"},meridiemParse:/\u0563\u056b\u0577\u0565\u0580\u057e\u0561|\u0561\u057c\u0561\u057e\u0578\u057f\u057e\u0561|\u0581\u0565\u0580\u0565\u056f\u057e\u0561|\u0565\u0580\u0565\u056f\u0578\u0575\u0561\u0576/,isPM:function(e){return /^(\u0581\u0565\u0580\u0565\u056f\u057e\u0561|\u0565\u0580\u0565\u056f\u0578\u0575\u0561\u0576)$/.test(e)},meridiem:function(e){return e<4?"\u0563\u056b\u0577\u0565\u0580\u057e\u0561":e<12?"\u0561\u057c\u0561\u057e\u0578\u057f\u057e\u0561":e<17?"\u0581\u0565\u0580\u0565\u056f\u057e\u0561":"\u0565\u0580\u0565\u056f\u0578\u0575\u0561\u0576"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(\u056b\u0576|\u0580\u0564)/,ordinal:function(e,a){switch(a){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-\u056b\u0576":e+"-\u0580\u0564";default:return e}},week:{dow:1,doy:7}}),e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,a){return 12===e&&(e=0),"pagi"===a?e:"siang"===a?11<=e?e:e+12:"sore"===a||"malam"===a?e+12:void 0},meridiem:function(e,a,_){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:0,doy:6}}),e.defineLocale("is",{months:"jan\xfaar_febr\xfaar_mars_apr\xedl_ma\xed_j\xfan\xed_j\xfal\xed_\xe1g\xfast_september_okt\xf3ber_n\xf3vember_desember".split("_"),monthsShort:"jan_feb_mar_apr_ma\xed_j\xfan_j\xfal_\xe1g\xfa_sep_okt_n\xf3v_des".split("_"),weekdays:"sunnudagur_m\xe1nudagur_\xferi\xf0judagur_mi\xf0vikudagur_fimmtudagur_f\xf6studagur_laugardagur".split("_"),weekdaysShort:"sun_m\xe1n_\xferi_mi\xf0_fim_f\xf6s_lau".split("_"),weekdaysMin:"Su_M\xe1_\xder_Mi_Fi_F\xf6_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[\xed dag kl.] LT",nextDay:"[\xe1 morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[\xed g\xe6r kl.] LT",lastWeek:"[s\xed\xf0asta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s s\xed\xf0an",s:T,ss:T,m:T,mm:T,h:"klukkustund",hh:T,d:T,dd:T,M:T,MM:T,y:T,yy:T},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_luned\xec_marted\xec_mercoled\xec_gioved\xec_venerd\xec_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return "[la scorsa] dddd [alle] LT";default:return "[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return (/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}\xba/,ordinal:"%d\xba",week:{dow:1,doy:4}}),e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_luned\xec_marted\xec_mercoled\xec_gioved\xec_venerd\xec_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:function(){return "[Oggi a"+(1<this.hours()?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextDay:function(){return "[Domani a"+(1<this.hours()?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextWeek:function(){return "dddd [a"+(1<this.hours()?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastDay:function(){return "[Ieri a"+(1<this.hours()?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastWeek:function(){switch(this.day()){case 0:return "[La scorsa] dddd [a"+(1<this.hours()?"lle ":0===this.hours()?" ":"ll'")+"]LT";default:return "[Lo scorso] dddd [a"+(1<this.hours()?"lle ":0===this.hours()?" ":"ll'")+"]LT"}},sameElse:"L"},relativeTime:{future:"tra %s",past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",w:"una settimana",ww:"%d settimane",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}\xba/,ordinal:"%d\xba",week:{dow:1,doy:4}}),e.defineLocale("ja",{eras:[{since:"2019-05-01",offset:1,name:"\u4ee4\u548c",narrow:"\u32ff",abbr:"R"},{since:"1989-01-08",until:"2019-04-30",offset:1,name:"\u5e73\u6210",narrow:"\u337b",abbr:"H"},{since:"1926-12-25",until:"1989-01-07",offset:1,name:"\u662d\u548c",narrow:"\u337c",abbr:"S"},{since:"1912-07-30",until:"1926-12-24",offset:1,name:"\u5927\u6b63",narrow:"\u337d",abbr:"T"},{since:"1873-01-01",until:"1912-07-29",offset:6,name:"\u660e\u6cbb",narrow:"\u337e",abbr:"M"},{since:"0001-01-01",until:"1873-12-31",offset:1,name:"\u897f\u66a6",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"\u7d00\u5143\u524d",narrow:"BC",abbr:"BC"}],eraYearOrdinalRegex:/(\u5143|\d+)\u5e74/,eraYearOrdinalParse:function(e,a){return "\u5143"===a[1]?1:parseInt(a[1]||e,10)},months:"1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708".split("_"),monthsShort:"1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708".split("_"),weekdays:"\u65e5\u66dc\u65e5_\u6708\u66dc\u65e5_\u706b\u66dc\u65e5_\u6c34\u66dc\u65e5_\u6728\u66dc\u65e5_\u91d1\u66dc\u65e5_\u571f\u66dc\u65e5".split("_"),weekdaysShort:"\u65e5_\u6708_\u706b_\u6c34_\u6728_\u91d1_\u571f".split("_"),weekdaysMin:"\u65e5_\u6708_\u706b_\u6c34_\u6728_\u91d1_\u571f".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY\u5e74M\u6708D\u65e5",LLL:"YYYY\u5e74M\u6708D\u65e5 HH:mm",LLLL:"YYYY\u5e74M\u6708D\u65e5 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY\u5e74M\u6708D\u65e5",lll:"YYYY\u5e74M\u6708D\u65e5 HH:mm",llll:"YYYY\u5e74M\u6708D\u65e5(ddd) HH:mm"},meridiemParse:/\u5348\u524d|\u5348\u5f8c/i,isPM:function(e){return "\u5348\u5f8c"===e},meridiem:function(e,a,_){return e<12?"\u5348\u524d":"\u5348\u5f8c"},calendar:{sameDay:"[\u4eca\u65e5] LT",nextDay:"[\u660e\u65e5] LT",nextWeek:function(e){return e.week()!==this.week()?"[\u6765\u9031]dddd LT":"dddd LT"},lastDay:"[\u6628\u65e5] LT",lastWeek:function(e){return this.week()!==e.week()?"[\u5148\u9031]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}\u65e5/,ordinal:function(e,a){switch(a){case"y":return 1===e?"\u5143\u5e74":e+"\u5e74";case"d":case"D":case"DDD":return e+"\u65e5";default:return e}},relativeTime:{future:"%s\u5f8c",past:"%s\u524d",s:"\u6570\u79d2",ss:"%d\u79d2",m:"1\u5206",mm:"%d\u5206",h:"1\u6642\u9593",hh:"%d\u6642\u9593",d:"1\u65e5",dd:"%d\u65e5",M:"1\u30f6\u6708",MM:"%d\u30f6\u6708",y:"1\u5e74",yy:"%d\u5e74"}}),e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,a){return 12===e&&(e=0),"enjing"===a?e:"siyang"===a?11<=e?e:e+12:"sonten"===a||"ndalu"===a?e+12:void 0},meridiem:function(e,a,_){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}}),e.defineLocale("ka",{months:"\u10d8\u10d0\u10dc\u10d5\u10d0\u10e0\u10d8_\u10d7\u10d4\u10d1\u10d4\u10e0\u10d5\u10d0\u10da\u10d8_\u10db\u10d0\u10e0\u10e2\u10d8_\u10d0\u10de\u10e0\u10d8\u10da\u10d8_\u10db\u10d0\u10d8\u10e1\u10d8_\u10d8\u10d5\u10dc\u10d8\u10e1\u10d8_\u10d8\u10d5\u10da\u10d8\u10e1\u10d8_\u10d0\u10d2\u10d5\u10d8\u10e1\u10e2\u10dd_\u10e1\u10d4\u10e5\u10e2\u10d4\u10db\u10d1\u10d4\u10e0\u10d8_\u10dd\u10e5\u10e2\u10dd\u10db\u10d1\u10d4\u10e0\u10d8_\u10dc\u10dd\u10d4\u10db\u10d1\u10d4\u10e0\u10d8_\u10d3\u10d4\u10d9\u10d4\u10db\u10d1\u10d4\u10e0\u10d8".split("_"),monthsShort:"\u10d8\u10d0\u10dc_\u10d7\u10d4\u10d1_\u10db\u10d0\u10e0_\u10d0\u10de\u10e0_\u10db\u10d0\u10d8_\u10d8\u10d5\u10dc_\u10d8\u10d5\u10da_\u10d0\u10d2\u10d5_\u10e1\u10d4\u10e5_\u10dd\u10e5\u10e2_\u10dc\u10dd\u10d4_\u10d3\u10d4\u10d9".split("_"),weekdays:{standalone:"\u10d9\u10d5\u10d8\u10e0\u10d0_\u10dd\u10e0\u10e8\u10d0\u10d1\u10d0\u10d7\u10d8_\u10e1\u10d0\u10db\u10e8\u10d0\u10d1\u10d0\u10d7\u10d8_\u10dd\u10d7\u10ee\u10e8\u10d0\u10d1\u10d0\u10d7\u10d8_\u10ee\u10e3\u10d7\u10e8\u10d0\u10d1\u10d0\u10d7\u10d8_\u10de\u10d0\u10e0\u10d0\u10e1\u10d9\u10d4\u10d5\u10d8_\u10e8\u10d0\u10d1\u10d0\u10d7\u10d8".split("_"),format:"\u10d9\u10d5\u10d8\u10e0\u10d0\u10e1_\u10dd\u10e0\u10e8\u10d0\u10d1\u10d0\u10d7\u10e1_\u10e1\u10d0\u10db\u10e8\u10d0\u10d1\u10d0\u10d7\u10e1_\u10dd\u10d7\u10ee\u10e8\u10d0\u10d1\u10d0\u10d7\u10e1_\u10ee\u10e3\u10d7\u10e8\u10d0\u10d1\u10d0\u10d7\u10e1_\u10de\u10d0\u10e0\u10d0\u10e1\u10d9\u10d4\u10d5\u10e1_\u10e8\u10d0\u10d1\u10d0\u10d7\u10e1".split("_"),isFormat:/(\u10ec\u10d8\u10dc\u10d0|\u10e8\u10d4\u10db\u10d3\u10d4\u10d2)/},weekdaysShort:"\u10d9\u10d5\u10d8_\u10dd\u10e0\u10e8_\u10e1\u10d0\u10db_\u10dd\u10d7\u10ee_\u10ee\u10e3\u10d7_\u10de\u10d0\u10e0_\u10e8\u10d0\u10d1".split("_"),weekdaysMin:"\u10d9\u10d5_\u10dd\u10e0_\u10e1\u10d0_\u10dd\u10d7_\u10ee\u10e3_\u10de\u10d0_\u10e8\u10d0".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[\u10d3\u10e6\u10d4\u10e1] LT[-\u10d6\u10d4]",nextDay:"[\u10ee\u10d5\u10d0\u10da] LT[-\u10d6\u10d4]",lastDay:"[\u10d2\u10e3\u10e8\u10d8\u10dc] LT[-\u10d6\u10d4]",nextWeek:"[\u10e8\u10d4\u10db\u10d3\u10d4\u10d2] dddd LT[-\u10d6\u10d4]",lastWeek:"[\u10ec\u10d8\u10dc\u10d0] dddd LT-\u10d6\u10d4",sameElse:"L"},relativeTime:{future:function(e){return e.replace(/(\u10ec\u10d0\u10db|\u10ec\u10e3\u10d7|\u10e1\u10d0\u10d0\u10d7|\u10ec\u10d4\u10da|\u10d3\u10e6|\u10d7\u10d5)(\u10d8|\u10d4)/,function(e,a,_){return "\u10d8"===_?a+"\u10e8\u10d8":a+_+"\u10e8\u10d8"})},past:function(e){return /(\u10ec\u10d0\u10db\u10d8|\u10ec\u10e3\u10d7\u10d8|\u10e1\u10d0\u10d0\u10d7\u10d8|\u10d3\u10e6\u10d4|\u10d7\u10d5\u10d4)/.test(e)?e.replace(/(\u10d8|\u10d4)$/,"\u10d8\u10e1 \u10ec\u10d8\u10dc"):/\u10ec\u10d4\u10da\u10d8/.test(e)?e.replace(/\u10ec\u10d4\u10da\u10d8$/,"\u10ec\u10da\u10d8\u10e1 \u10ec\u10d8\u10dc"):e},s:"\u10e0\u10d0\u10db\u10d3\u10d4\u10dc\u10d8\u10db\u10d4 \u10ec\u10d0\u10db\u10d8",ss:"%d \u10ec\u10d0\u10db\u10d8",m:"\u10ec\u10e3\u10d7\u10d8",mm:"%d \u10ec\u10e3\u10d7\u10d8",h:"\u10e1\u10d0\u10d0\u10d7\u10d8",hh:"%d \u10e1\u10d0\u10d0\u10d7\u10d8",d:"\u10d3\u10e6\u10d4",dd:"%d \u10d3\u10e6\u10d4",M:"\u10d7\u10d5\u10d4",MM:"%d \u10d7\u10d5\u10d4",y:"\u10ec\u10d4\u10da\u10d8",yy:"%d \u10ec\u10d4\u10da\u10d8"},dayOfMonthOrdinalParse:/0|1-\u10da\u10d8|\u10db\u10d4-\d{1,2}|\d{1,2}-\u10d4/,ordinal:function(e){return 0===e?e:1===e?e+"-\u10da\u10d8":e<20||e<=100&&e%20==0||e%100==0?"\u10db\u10d4-"+e:e+"-\u10d4"},week:{dow:1,doy:7}});var pe={0:"-\u0448\u0456",1:"-\u0448\u0456",2:"-\u0448\u0456",3:"-\u0448\u0456",4:"-\u0448\u0456",5:"-\u0448\u0456",6:"-\u0448\u044b",7:"-\u0448\u0456",8:"-\u0448\u0456",9:"-\u0448\u044b",10:"-\u0448\u044b",20:"-\u0448\u044b",30:"-\u0448\u044b",40:"-\u0448\u044b",50:"-\u0448\u0456",60:"-\u0448\u044b",70:"-\u0448\u0456",80:"-\u0448\u0456",90:"-\u0448\u044b",100:"-\u0448\u0456"},Te=(e.defineLocale("kk",{months:"\u049b\u0430\u04a3\u0442\u0430\u0440_\u0430\u049b\u043f\u0430\u043d_\u043d\u0430\u0443\u0440\u044b\u0437_\u0441\u04d9\u0443\u0456\u0440_\u043c\u0430\u043c\u044b\u0440_\u043c\u0430\u0443\u0441\u044b\u043c_\u0448\u0456\u043b\u0434\u0435_\u0442\u0430\u043c\u044b\u0437_\u049b\u044b\u0440\u043a\u04af\u0439\u0435\u043a_\u049b\u0430\u0437\u0430\u043d_\u049b\u0430\u0440\u0430\u0448\u0430_\u0436\u0435\u043b\u0442\u043e\u049b\u0441\u0430\u043d".split("_"),monthsShort:"\u049b\u0430\u04a3_\u0430\u049b\u043f_\u043d\u0430\u0443_\u0441\u04d9\u0443_\u043c\u0430\u043c_\u043c\u0430\u0443_\u0448\u0456\u043b_\u0442\u0430\u043c_\u049b\u044b\u0440_\u049b\u0430\u0437_\u049b\u0430\u0440_\u0436\u0435\u043b".split("_"),weekdays:"\u0436\u0435\u043a\u0441\u0435\u043d\u0431\u0456_\u0434\u04af\u0439\u0441\u0435\u043d\u0431\u0456_\u0441\u0435\u0439\u0441\u0435\u043d\u0431\u0456_\u0441\u04d9\u0440\u0441\u0435\u043d\u0431\u0456_\u0431\u0435\u0439\u0441\u0435\u043d\u0431\u0456_\u0436\u04b1\u043c\u0430_\u0441\u0435\u043d\u0431\u0456".split("_"),weekdaysShort:"\u0436\u0435\u043a_\u0434\u04af\u0439_\u0441\u0435\u0439_\u0441\u04d9\u0440_\u0431\u0435\u0439_\u0436\u04b1\u043c_\u0441\u0435\u043d".split("_"),weekdaysMin:"\u0436\u043a_\u0434\u0439_\u0441\u0439_\u0441\u0440_\u0431\u0439_\u0436\u043c_\u0441\u043d".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[\u0411\u04af\u0433\u0456\u043d \u0441\u0430\u0493\u0430\u0442] LT",nextDay:"[\u0415\u0440\u0442\u0435\u04a3 \u0441\u0430\u0493\u0430\u0442] LT",nextWeek:"dddd [\u0441\u0430\u0493\u0430\u0442] LT",lastDay:"[\u041a\u0435\u0448\u0435 \u0441\u0430\u0493\u0430\u0442] LT",lastWeek:"[\u04e8\u0442\u043a\u0435\u043d \u0430\u043f\u0442\u0430\u043d\u044b\u04a3] dddd [\u0441\u0430\u0493\u0430\u0442] LT",sameElse:"L"},relativeTime:{future:"%s \u0456\u0448\u0456\u043d\u0434\u0435",past:"%s \u0431\u04b1\u0440\u044b\u043d",s:"\u0431\u0456\u0440\u043d\u0435\u0448\u0435 \u0441\u0435\u043a\u0443\u043d\u0434",ss:"%d \u0441\u0435\u043a\u0443\u043d\u0434",m:"\u0431\u0456\u0440 \u043c\u0438\u043d\u0443\u0442",mm:"%d \u043c\u0438\u043d\u0443\u0442",h:"\u0431\u0456\u0440 \u0441\u0430\u0493\u0430\u0442",hh:"%d \u0441\u0430\u0493\u0430\u0442",d:"\u0431\u0456\u0440 \u043a\u04af\u043d",dd:"%d \u043a\u04af\u043d",M:"\u0431\u0456\u0440 \u0430\u0439",MM:"%d \u0430\u0439",y:"\u0431\u0456\u0440 \u0436\u044b\u043b",yy:"%d \u0436\u044b\u043b"},dayOfMonthOrdinalParse:/\d{1,2}-(\u0448\u0456|\u0448\u044b)/,ordinal:function(e){return e+(pe[e]||pe[e%10]||pe[100<=e?100:null])},week:{dow:1,doy:7}}),{1:"\u17e1",2:"\u17e2",3:"\u17e3",4:"\u17e4",5:"\u17e5",6:"\u17e6",7:"\u17e7",8:"\u17e8",9:"\u17e9",0:"\u17e0"}),fe={"\u17e1":"1","\u17e2":"2","\u17e3":"3","\u17e4":"4","\u17e5":"5","\u17e6":"6","\u17e7":"7","\u17e8":"8","\u17e9":"9","\u17e0":"0"},we=(e.defineLocale("km",{months:"\u1798\u1780\u179a\u17b6_\u1780\u17bb\u1798\u17d2\u1797\u17c8_\u1798\u17b8\u1793\u17b6_\u1798\u17c1\u179f\u17b6_\u17a7\u179f\u1797\u17b6_\u1798\u17b7\u1790\u17bb\u1793\u17b6_\u1780\u1780\u17d2\u1780\u178a\u17b6_\u179f\u17b8\u17a0\u17b6_\u1780\u1789\u17d2\u1789\u17b6_\u178f\u17bb\u179b\u17b6_\u179c\u17b7\u1785\u17d2\u1786\u17b7\u1780\u17b6_\u1792\u17d2\u1793\u17bc".split("_"),monthsShort:"\u1798\u1780\u179a\u17b6_\u1780\u17bb\u1798\u17d2\u1797\u17c8_\u1798\u17b8\u1793\u17b6_\u1798\u17c1\u179f\u17b6_\u17a7\u179f\u1797\u17b6_\u1798\u17b7\u1790\u17bb\u1793\u17b6_\u1780\u1780\u17d2\u1780\u178a\u17b6_\u179f\u17b8\u17a0\u17b6_\u1780\u1789\u17d2\u1789\u17b6_\u178f\u17bb\u179b\u17b6_\u179c\u17b7\u1785\u17d2\u1786\u17b7\u1780\u17b6_\u1792\u17d2\u1793\u17bc".split("_"),weekdays:"\u17a2\u17b6\u1791\u17b7\u178f\u17d2\u1799_\u1785\u17d0\u1793\u17d2\u1791_\u17a2\u1784\u17d2\u1782\u17b6\u179a_\u1796\u17bb\u1792_\u1796\u17d2\u179a\u17a0\u179f\u17d2\u1794\u178f\u17b7\u17cd_\u179f\u17bb\u1780\u17d2\u179a_\u179f\u17c5\u179a\u17cd".split("_"),weekdaysShort:"\u17a2\u17b6_\u1785_\u17a2_\u1796_\u1796\u17d2\u179a_\u179f\u17bb_\u179f".split("_"),weekdaysMin:"\u17a2\u17b6_\u1785_\u17a2_\u1796_\u1796\u17d2\u179a_\u179f\u17bb_\u179f".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/\u1796\u17d2\u179a\u17b9\u1780|\u179b\u17d2\u1784\u17b6\u1785/,isPM:function(e){return "\u179b\u17d2\u1784\u17b6\u1785"===e},meridiem:function(e,a,_){return e<12?"\u1796\u17d2\u179a\u17b9\u1780":"\u179b\u17d2\u1784\u17b6\u1785"},calendar:{sameDay:"[\u1790\u17d2\u1784\u17c3\u1793\u17c1\u17c7 \u1798\u17c9\u17c4\u1784] LT",nextDay:"[\u179f\u17d2\u17a2\u17c2\u1780 \u1798\u17c9\u17c4\u1784] LT",nextWeek:"dddd [\u1798\u17c9\u17c4\u1784] LT",lastDay:"[\u1798\u17d2\u179f\u17b7\u179b\u1798\u17b7\u1789 \u1798\u17c9\u17c4\u1784] LT",lastWeek:"dddd [\u179f\u1794\u17d2\u178f\u17b6\u17a0\u17cd\u1798\u17bb\u1793] [\u1798\u17c9\u17c4\u1784] LT",sameElse:"L"},relativeTime:{future:"%s\u1791\u17c0\u178f",past:"%s\u1798\u17bb\u1793",s:"\u1794\u17c9\u17bb\u1793\u17d2\u1798\u17b6\u1793\u179c\u17b7\u1793\u17b6\u1791\u17b8",ss:"%d \u179c\u17b7\u1793\u17b6\u1791\u17b8",m:"\u1798\u17bd\u1799\u1793\u17b6\u1791\u17b8",mm:"%d \u1793\u17b6\u1791\u17b8",h:"\u1798\u17bd\u1799\u1798\u17c9\u17c4\u1784",hh:"%d \u1798\u17c9\u17c4\u1784",d:"\u1798\u17bd\u1799\u1790\u17d2\u1784\u17c3",dd:"%d \u1790\u17d2\u1784\u17c3",M:"\u1798\u17bd\u1799\u1781\u17c2",MM:"%d \u1781\u17c2",y:"\u1798\u17bd\u1799\u1786\u17d2\u1793\u17b6\u17c6",yy:"%d \u1786\u17d2\u1793\u17b6\u17c6"},dayOfMonthOrdinalParse:/\u1791\u17b8\d{1,2}/,ordinal:"\u1791\u17b8%d",preparse:function(e){return e.replace(/[\u17e1\u17e2\u17e3\u17e4\u17e5\u17e6\u17e7\u17e8\u17e9\u17e0]/g,function(e){return fe[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Te[e]})},week:{dow:1,doy:4}}),{1:"\u0ce7",2:"\u0ce8",3:"\u0ce9",4:"\u0cea",5:"\u0ceb",6:"\u0cec",7:"\u0ced",8:"\u0cee",9:"\u0cef",0:"\u0ce6"}),ge={"\u0ce7":"1","\u0ce8":"2","\u0ce9":"3","\u0cea":"4","\u0ceb":"5","\u0cec":"6","\u0ced":"7","\u0cee":"8","\u0cef":"9","\u0ce6":"0"},He=(e.defineLocale("kn",{months:"\u0c9c\u0ca8\u0cb5\u0cb0\u0cbf_\u0cab\u0cc6\u0cac\u0ccd\u0cb0\u0cb5\u0cb0\u0cbf_\u0cae\u0cbe\u0cb0\u0ccd\u0c9a\u0ccd_\u0c8f\u0caa\u0ccd\u0cb0\u0cbf\u0cb2\u0ccd_\u0cae\u0cc6\u0cd5_\u0c9c\u0cc2\u0ca8\u0ccd_\u0c9c\u0cc1\u0cb2\u0cc6\u0cd6_\u0c86\u0c97\u0cb8\u0ccd\u0c9f\u0ccd_\u0cb8\u0cc6\u0caa\u0ccd\u0c9f\u0cc6\u0c82\u0cac\u0cb0\u0ccd_\u0c85\u0c95\u0ccd\u0c9f\u0cc6\u0cc2\u0cd5\u0cac\u0cb0\u0ccd_\u0ca8\u0cb5\u0cc6\u0c82\u0cac\u0cb0\u0ccd_\u0ca1\u0cbf\u0cb8\u0cc6\u0c82\u0cac\u0cb0\u0ccd".split("_"),monthsShort:"\u0c9c\u0ca8_\u0cab\u0cc6\u0cac\u0ccd\u0cb0_\u0cae\u0cbe\u0cb0\u0ccd\u0c9a\u0ccd_\u0c8f\u0caa\u0ccd\u0cb0\u0cbf\u0cb2\u0ccd_\u0cae\u0cc6\u0cd5_\u0c9c\u0cc2\u0ca8\u0ccd_\u0c9c\u0cc1\u0cb2\u0cc6\u0cd6_\u0c86\u0c97\u0cb8\u0ccd\u0c9f\u0ccd_\u0cb8\u0cc6\u0caa\u0ccd\u0c9f\u0cc6\u0c82_\u0c85\u0c95\u0ccd\u0c9f\u0cc6\u0cc2\u0cd5_\u0ca8\u0cb5\u0cc6\u0c82_\u0ca1\u0cbf\u0cb8\u0cc6\u0c82".split("_"),monthsParseExact:!0,weekdays:"\u0cad\u0cbe\u0ca8\u0cc1\u0cb5\u0cbe\u0cb0_\u0cb8\u0cc6\u0cc2\u0cd5\u0cae\u0cb5\u0cbe\u0cb0_\u0cae\u0c82\u0c97\u0cb3\u0cb5\u0cbe\u0cb0_\u0cac\u0cc1\u0ca7\u0cb5\u0cbe\u0cb0_\u0c97\u0cc1\u0cb0\u0cc1\u0cb5\u0cbe\u0cb0_\u0cb6\u0cc1\u0c95\u0ccd\u0cb0\u0cb5\u0cbe\u0cb0_\u0cb6\u0ca8\u0cbf\u0cb5\u0cbe\u0cb0".split("_"),weekdaysShort:"\u0cad\u0cbe\u0ca8\u0cc1_\u0cb8\u0cc6\u0cc2\u0cd5\u0cae_\u0cae\u0c82\u0c97\u0cb3_\u0cac\u0cc1\u0ca7_\u0c97\u0cc1\u0cb0\u0cc1_\u0cb6\u0cc1\u0c95\u0ccd\u0cb0_\u0cb6\u0ca8\u0cbf".split("_"),weekdaysMin:"\u0cad\u0cbe_\u0cb8\u0cc6\u0cc2\u0cd5_\u0cae\u0c82_\u0cac\u0cc1_\u0c97\u0cc1_\u0cb6\u0cc1_\u0cb6".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[\u0c87\u0c82\u0ca6\u0cc1] LT",nextDay:"[\u0ca8\u0cbe\u0cb3\u0cc6] LT",nextWeek:"dddd, LT",lastDay:"[\u0ca8\u0cbf\u0ca8\u0ccd\u0ca8\u0cc6] LT",lastWeek:"[\u0c95\u0cc6\u0cc2\u0ca8\u0cc6\u0caf] dddd, LT",sameElse:"L"},relativeTime:{future:"%s \u0ca8\u0c82\u0ca4\u0cb0",past:"%s \u0cb9\u0cbf\u0c82\u0ca6\u0cc6",s:"\u0c95\u0cc6\u0cb2\u0cb5\u0cc1 \u0c95\u0ccd\u0cb7\u0ca3\u0c97\u0cb3\u0cc1",ss:"%d \u0cb8\u0cc6\u0c95\u0cc6\u0c82\u0ca1\u0cc1\u0c97\u0cb3\u0cc1",m:"\u0c92\u0c82\u0ca6\u0cc1 \u0ca8\u0cbf\u0cae\u0cbf\u0cb7",mm:"%d \u0ca8\u0cbf\u0cae\u0cbf\u0cb7",h:"\u0c92\u0c82\u0ca6\u0cc1 \u0c97\u0c82\u0c9f\u0cc6",hh:"%d \u0c97\u0c82\u0c9f\u0cc6",d:"\u0c92\u0c82\u0ca6\u0cc1 \u0ca6\u0cbf\u0ca8",dd:"%d \u0ca6\u0cbf\u0ca8",M:"\u0c92\u0c82\u0ca6\u0cc1 \u0ca4\u0cbf\u0c82\u0c97\u0cb3\u0cc1",MM:"%d \u0ca4\u0cbf\u0c82\u0c97\u0cb3\u0cc1",y:"\u0c92\u0c82\u0ca6\u0cc1 \u0cb5\u0cb0\u0ccd\u0cb7",yy:"%d \u0cb5\u0cb0\u0ccd\u0cb7"},preparse:function(e){return e.replace(/[\u0ce7\u0ce8\u0ce9\u0cea\u0ceb\u0cec\u0ced\u0cee\u0cef\u0ce6]/g,function(e){return ge[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return we[e]})},meridiemParse:/\u0cb0\u0cbe\u0ca4\u0ccd\u0cb0\u0cbf|\u0cac\u0cc6\u0cb3\u0cbf\u0c97\u0ccd\u0c97\u0cc6|\u0cae\u0ca7\u0ccd\u0caf\u0cbe\u0cb9\u0ccd\u0ca8|\u0cb8\u0c82\u0c9c\u0cc6/,meridiemHour:function(e,a){return 12===e&&(e=0),"\u0cb0\u0cbe\u0ca4\u0ccd\u0cb0\u0cbf"===a?e<4?e:e+12:"\u0cac\u0cc6\u0cb3\u0cbf\u0c97\u0ccd\u0c97\u0cc6"===a?e:"\u0cae\u0ca7\u0ccd\u0caf\u0cbe\u0cb9\u0ccd\u0ca8"===a?10<=e?e:e+12:"\u0cb8\u0c82\u0c9c\u0cc6"===a?e+12:void 0},meridiem:function(e,a,_){return e<4?"\u0cb0\u0cbe\u0ca4\u0ccd\u0cb0\u0cbf":e<10?"\u0cac\u0cc6\u0cb3\u0cbf\u0c97\u0ccd\u0c97\u0cc6":e<17?"\u0cae\u0ca7\u0ccd\u0caf\u0cbe\u0cb9\u0ccd\u0ca8":e<20?"\u0cb8\u0c82\u0c9c\u0cc6":"\u0cb0\u0cbe\u0ca4\u0ccd\u0cb0\u0cbf"},dayOfMonthOrdinalParse:/\d{1,2}(\u0ca8\u0cc6\u0cd5)/,ordinal:function(e){return e+"\u0ca8\u0cc6\u0cd5"},week:{dow:0,doy:6}}),e.defineLocale("ko",{months:"1\uc6d4_2\uc6d4_3\uc6d4_4\uc6d4_5\uc6d4_6\uc6d4_7\uc6d4_8\uc6d4_9\uc6d4_10\uc6d4_11\uc6d4_12\uc6d4".split("_"),monthsShort:"1\uc6d4_2\uc6d4_3\uc6d4_4\uc6d4_5\uc6d4_6\uc6d4_7\uc6d4_8\uc6d4_9\uc6d4_10\uc6d4_11\uc6d4_12\uc6d4".split("_"),weekdays:"\uc77c\uc694\uc77c_\uc6d4\uc694\uc77c_\ud654\uc694\uc77c_\uc218\uc694\uc77c_\ubaa9\uc694\uc77c_\uae08\uc694\uc77c_\ud1a0\uc694\uc77c".split("_"),weekdaysShort:"\uc77c_\uc6d4_\ud654_\uc218_\ubaa9_\uae08_\ud1a0".split("_"),weekdaysMin:"\uc77c_\uc6d4_\ud654_\uc218_\ubaa9_\uae08_\ud1a0".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY\ub144 MMMM D\uc77c",LLL:"YYYY\ub144 MMMM D\uc77c A h:mm",LLLL:"YYYY\ub144 MMMM D\uc77c dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY\ub144 MMMM D\uc77c",lll:"YYYY\ub144 MMMM D\uc77c A h:mm",llll:"YYYY\ub144 MMMM D\uc77c dddd A h:mm"},calendar:{sameDay:"\uc624\ub298 LT",nextDay:"\ub0b4\uc77c LT",nextWeek:"dddd LT",lastDay:"\uc5b4\uc81c LT",lastWeek:"\uc9c0\ub09c\uc8fc dddd LT",sameElse:"L"},relativeTime:{future:"%s \ud6c4",past:"%s \uc804",s:"\uba87 \ucd08",ss:"%d\ucd08",m:"1\ubd84",mm:"%d\ubd84",h:"\ud55c \uc2dc\uac04",hh:"%d\uc2dc\uac04",d:"\ud558\ub8e8",dd:"%d\uc77c",M:"\ud55c \ub2ec",MM:"%d\ub2ec",y:"\uc77c \ub144",yy:"%d\ub144"},dayOfMonthOrdinalParse:/\d{1,2}(\uc77c|\uc6d4|\uc8fc)/,ordinal:function(e,a){switch(a){case"d":case"D":case"DDD":return e+"\uc77c";case"M":return e+"\uc6d4";case"w":case"W":return e+"\uc8fc";default:return e}},meridiemParse:/\uc624\uc804|\uc624\ud6c4/,isPM:function(e){return "\uc624\ud6c4"===e},meridiem:function(e,a,_){return e<12?"\uc624\uc804":"\uc624\ud6c4"}}),{1:"\u0661",2:"\u0662",3:"\u0663",4:"\u0664",5:"\u0665",6:"\u0666",7:"\u0667",8:"\u0668",9:"\u0669",0:"\u0660"}),be={"\u0661":"1","\u0662":"2","\u0663":"3","\u0664":"4","\u0665":"5","\u0666":"6","\u0667":"7","\u0668":"8","\u0669":"9","\u0660":"0"},n=["\u06a9\u0627\u0646\u0648\u0646\u06cc \u062f\u0648\u0648\u06d5\u0645","\u0634\u0648\u0628\u0627\u062a","\u0626\u0627\u0632\u0627\u0631","\u0646\u06cc\u0633\u0627\u0646","\u0626\u0627\u06cc\u0627\u0631","\u062d\u0648\u0632\u06d5\u06cc\u0631\u0627\u0646","\u062a\u06d5\u0645\u0645\u0648\u0632","\u0626\u0627\u0628","\u0626\u06d5\u06cc\u0644\u0648\u0648\u0644","\u062a\u0634\u0631\u06cc\u0646\u06cc \u06cc\u06d5\u0643\u06d5\u0645","\u062a\u0634\u0631\u06cc\u0646\u06cc \u062f\u0648\u0648\u06d5\u0645","\u0643\u0627\u0646\u0648\u0646\u06cc \u06cc\u06d5\u06a9\u06d5\u0645"],Se=(e.defineLocale("ku",{months:n,monthsShort:n,weekdays:"\u06cc\u0647\u200c\u0643\u0634\u0647\u200c\u0645\u0645\u0647\u200c_\u062f\u0648\u0648\u0634\u0647\u200c\u0645\u0645\u0647\u200c_\u0633\u06ce\u0634\u0647\u200c\u0645\u0645\u0647\u200c_\u0686\u0648\u0627\u0631\u0634\u0647\u200c\u0645\u0645\u0647\u200c_\u067e\u06ce\u0646\u062c\u0634\u0647\u200c\u0645\u0645\u0647\u200c_\u0647\u0647\u200c\u06cc\u0646\u06cc_\u0634\u0647\u200c\u0645\u0645\u0647\u200c".split("_"),weekdaysShort:"\u06cc\u0647\u200c\u0643\u0634\u0647\u200c\u0645_\u062f\u0648\u0648\u0634\u0647\u200c\u0645_\u0633\u06ce\u0634\u0647\u200c\u0645_\u0686\u0648\u0627\u0631\u0634\u0647\u200c\u0645_\u067e\u06ce\u0646\u062c\u0634\u0647\u200c\u0645_\u0647\u0647\u200c\u06cc\u0646\u06cc_\u0634\u0647\u200c\u0645\u0645\u0647\u200c".split("_"),weekdaysMin:"\u06cc_\u062f_\u0633_\u0686_\u067e_\u0647_\u0634".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/\u0626\u06ce\u0648\u0627\u0631\u0647\u200c|\u0628\u0647\u200c\u06cc\u0627\u0646\u06cc/,isPM:function(e){return /\u0626\u06ce\u0648\u0627\u0631\u0647\u200c/.test(e)},meridiem:function(e,a,_){return e<12?"\u0628\u0647\u200c\u06cc\u0627\u0646\u06cc":"\u0626\u06ce\u0648\u0627\u0631\u0647\u200c"},calendar:{sameDay:"[\u0626\u0647\u200c\u0645\u0631\u06c6 \u0643\u0627\u062a\u0698\u0645\u06ce\u0631] LT",nextDay:"[\u0628\u0647\u200c\u06cc\u0627\u0646\u06cc \u0643\u0627\u062a\u0698\u0645\u06ce\u0631] LT",nextWeek:"dddd [\u0643\u0627\u062a\u0698\u0645\u06ce\u0631] LT",lastDay:"[\u062f\u0648\u06ce\u0646\u06ce \u0643\u0627\u062a\u0698\u0645\u06ce\u0631] LT",lastWeek:"dddd [\u0643\u0627\u062a\u0698\u0645\u06ce\u0631] LT",sameElse:"L"},relativeTime:{future:"\u0644\u0647\u200c %s",past:"%s",s:"\u0686\u0647\u200c\u0646\u062f \u0686\u0631\u0643\u0647\u200c\u06cc\u0647\u200c\u0643",ss:"\u0686\u0631\u0643\u0647\u200c %d",m:"\u06cc\u0647\u200c\u0643 \u062e\u0648\u0644\u0647\u200c\u0643",mm:"%d \u062e\u0648\u0644\u0647\u200c\u0643",h:"\u06cc\u0647\u200c\u0643 \u0643\u0627\u062a\u0698\u0645\u06ce\u0631",hh:"%d \u0643\u0627\u062a\u0698\u0645\u06ce\u0631",d:"\u06cc\u0647\u200c\u0643 \u0695\u06c6\u0698",dd:"%d \u0695\u06c6\u0698",M:"\u06cc\u0647\u200c\u0643 \u0645\u0627\u0646\u06af",MM:"%d \u0645\u0627\u0646\u06af",y:"\u06cc\u0647\u200c\u0643 \u0633\u0627\u06b5",yy:"%d \u0633\u0627\u06b5"},preparse:function(e){return e.replace(/[\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u0660]/g,function(e){return be[e]}).replace(/\u060c/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return He[e]}).replace(/,/g,"\u060c")},week:{dow:6,doy:12}}),{0:"-\u0447\u04af",1:"-\u0447\u0438",2:"-\u0447\u0438",3:"-\u0447\u04af",4:"-\u0447\u04af",5:"-\u0447\u0438",6:"-\u0447\u044b",7:"-\u0447\u0438",8:"-\u0447\u0438",9:"-\u0447\u0443",10:"-\u0447\u0443",20:"-\u0447\u044b",30:"-\u0447\u0443",40:"-\u0447\u044b",50:"-\u0447\u04af",60:"-\u0447\u044b",70:"-\u0447\u0438",80:"-\u0447\u0438",90:"-\u0447\u0443",100:"-\u0447\u04af"});function ve(e,a,_,s){var d={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return a?d[_][0]:d[_][1]}function je(e){if(e=parseInt(e,10),isNaN(e))return !1;if(e<0)return !0;if(e<10)return 4<=e&&e<=7;var a;if(e<100)return je(0==(a=e%10)?e/10:a);if(e<1e4){for(;10<=e;)e/=10;return je(e)}return je(e/=1e3)}e.defineLocale("ky",{months:"\u044f\u043d\u0432\u0430\u0440\u044c_\u0444\u0435\u0432\u0440\u0430\u043b\u044c_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0435\u043b\u044c_\u043c\u0430\u0439_\u0438\u044e\u043d\u044c_\u0438\u044e\u043b\u044c_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c_\u043e\u043a\u0442\u044f\u0431\u0440\u044c_\u043d\u043e\u044f\u0431\u0440\u044c_\u0434\u0435\u043a\u0430\u0431\u0440\u044c".split("_"),monthsShort:"\u044f\u043d\u0432_\u0444\u0435\u0432_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440_\u043c\u0430\u0439_\u0438\u044e\u043d\u044c_\u0438\u044e\u043b\u044c_\u0430\u0432\u0433_\u0441\u0435\u043d_\u043e\u043a\u0442_\u043d\u043e\u044f_\u0434\u0435\u043a".split("_"),weekdays:"\u0416\u0435\u043a\u0448\u0435\u043c\u0431\u0438_\u0414\u04af\u0439\u0448\u04e9\u043c\u0431\u04af_\u0428\u0435\u0439\u0448\u0435\u043c\u0431\u0438_\u0428\u0430\u0440\u0448\u0435\u043c\u0431\u0438_\u0411\u0435\u0439\u0448\u0435\u043c\u0431\u0438_\u0416\u0443\u043c\u0430_\u0418\u0448\u0435\u043c\u0431\u0438".split("_"),weekdaysShort:"\u0416\u0435\u043a_\u0414\u04af\u0439_\u0428\u0435\u0439_\u0428\u0430\u0440_\u0411\u0435\u0439_\u0416\u0443\u043c_\u0418\u0448\u0435".split("_"),weekdaysMin:"\u0416\u043a_\u0414\u0439_\u0428\u0439_\u0428\u0440_\u0411\u0439_\u0416\u043c_\u0418\u0448".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[\u0411\u04af\u0433\u04af\u043d \u0441\u0430\u0430\u0442] LT",nextDay:"[\u042d\u0440\u0442\u0435\u04a3 \u0441\u0430\u0430\u0442] LT",nextWeek:"dddd [\u0441\u0430\u0430\u0442] LT",lastDay:"[\u041a\u0435\u0447\u044d\u044d \u0441\u0430\u0430\u0442] LT",lastWeek:"[\u04e8\u0442\u043a\u04e9\u043d \u0430\u043f\u0442\u0430\u043d\u044b\u043d] dddd [\u043a\u04af\u043d\u04af] [\u0441\u0430\u0430\u0442] LT",sameElse:"L"},relativeTime:{future:"%s \u0438\u0447\u0438\u043d\u0434\u0435",past:"%s \u043c\u0443\u0440\u0443\u043d",s:"\u0431\u0438\u0440\u043d\u0435\u0447\u0435 \u0441\u0435\u043a\u0443\u043d\u0434",ss:"%d \u0441\u0435\u043a\u0443\u043d\u0434",m:"\u0431\u0438\u0440 \u043c\u04af\u043d\u04e9\u0442",mm:"%d \u043c\u04af\u043d\u04e9\u0442",h:"\u0431\u0438\u0440 \u0441\u0430\u0430\u0442",hh:"%d \u0441\u0430\u0430\u0442",d:"\u0431\u0438\u0440 \u043a\u04af\u043d",dd:"%d \u043a\u04af\u043d",M:"\u0431\u0438\u0440 \u0430\u0439",MM:"%d \u0430\u0439",y:"\u0431\u0438\u0440 \u0436\u044b\u043b",yy:"%d \u0436\u044b\u043b"},dayOfMonthOrdinalParse:/\d{1,2}-(\u0447\u0438|\u0447\u044b|\u0447\u04af|\u0447\u0443)/,ordinal:function(e){return e+(Se[e]||Se[e%10]||Se[100<=e?100:null])},week:{dow:1,doy:7}}),e.defineLocale("lb",{months:"Januar_Februar_M\xe4erz_Abr\xebll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_M\xe9indeg_D\xebnschdeg_M\xebttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._M\xe9._D\xeb._M\xeb._Do._Fr._Sa.".split("_"),weekdaysMin:"So_M\xe9_D\xeb_M\xeb_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[G\xebschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return "[Leschten] dddd [um] LT";default:return "[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return je(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return je(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:ve,mm:"%d Minutten",h:ve,hh:"%d Stonnen",d:ve,dd:"%d Deeg",M:ve,MM:"%d M\xe9int",y:ve,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("lo",{months:"\u0ea1\u0eb1\u0e87\u0e81\u0ead\u0e99_\u0e81\u0eb8\u0ea1\u0e9e\u0eb2_\u0ea1\u0eb5\u0e99\u0eb2_\u0ec0\u0ea1\u0eaa\u0eb2_\u0e9e\u0eb6\u0e94\u0eaa\u0eb0\u0e9e\u0eb2_\u0ea1\u0eb4\u0e96\u0eb8\u0e99\u0eb2_\u0e81\u0ecd\u0ea5\u0eb0\u0e81\u0ebb\u0e94_\u0eaa\u0eb4\u0e87\u0eab\u0eb2_\u0e81\u0eb1\u0e99\u0e8d\u0eb2_\u0e95\u0eb8\u0ea5\u0eb2_\u0e9e\u0eb0\u0e88\u0eb4\u0e81_\u0e97\u0eb1\u0e99\u0ea7\u0eb2".split("_"),monthsShort:"\u0ea1\u0eb1\u0e87\u0e81\u0ead\u0e99_\u0e81\u0eb8\u0ea1\u0e9e\u0eb2_\u0ea1\u0eb5\u0e99\u0eb2_\u0ec0\u0ea1\u0eaa\u0eb2_\u0e9e\u0eb6\u0e94\u0eaa\u0eb0\u0e9e\u0eb2_\u0ea1\u0eb4\u0e96\u0eb8\u0e99\u0eb2_\u0e81\u0ecd\u0ea5\u0eb0\u0e81\u0ebb\u0e94_\u0eaa\u0eb4\u0e87\u0eab\u0eb2_\u0e81\u0eb1\u0e99\u0e8d\u0eb2_\u0e95\u0eb8\u0ea5\u0eb2_\u0e9e\u0eb0\u0e88\u0eb4\u0e81_\u0e97\u0eb1\u0e99\u0ea7\u0eb2".split("_"),weekdays:"\u0ead\u0eb2\u0e97\u0eb4\u0e94_\u0e88\u0eb1\u0e99_\u0ead\u0eb1\u0e87\u0e84\u0eb2\u0e99_\u0e9e\u0eb8\u0e94_\u0e9e\u0eb0\u0eab\u0eb1\u0e94_\u0eaa\u0eb8\u0e81_\u0ec0\u0eaa\u0ebb\u0eb2".split("_"),weekdaysShort:"\u0e97\u0eb4\u0e94_\u0e88\u0eb1\u0e99_\u0ead\u0eb1\u0e87\u0e84\u0eb2\u0e99_\u0e9e\u0eb8\u0e94_\u0e9e\u0eb0\u0eab\u0eb1\u0e94_\u0eaa\u0eb8\u0e81_\u0ec0\u0eaa\u0ebb\u0eb2".split("_"),weekdaysMin:"\u0e97_\u0e88_\u0ead\u0e84_\u0e9e_\u0e9e\u0eab_\u0eaa\u0e81_\u0eaa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"\u0ea7\u0eb1\u0e99dddd D MMMM YYYY HH:mm"},meridiemParse:/\u0e95\u0ead\u0e99\u0ec0\u0e8a\u0ebb\u0ec9\u0eb2|\u0e95\u0ead\u0e99\u0ec1\u0ea5\u0e87/,isPM:function(e){return "\u0e95\u0ead\u0e99\u0ec1\u0ea5\u0e87"===e},meridiem:function(e,a,_){return e<12?"\u0e95\u0ead\u0e99\u0ec0\u0e8a\u0ebb\u0ec9\u0eb2":"\u0e95\u0ead\u0e99\u0ec1\u0ea5\u0e87"},calendar:{sameDay:"[\u0ea1\u0eb7\u0ec9\u0e99\u0eb5\u0ec9\u0ec0\u0ea7\u0ea5\u0eb2] LT",nextDay:"[\u0ea1\u0eb7\u0ec9\u0ead\u0eb7\u0ec8\u0e99\u0ec0\u0ea7\u0ea5\u0eb2] LT",nextWeek:"[\u0ea7\u0eb1\u0e99]dddd[\u0edc\u0ec9\u0eb2\u0ec0\u0ea7\u0ea5\u0eb2] LT",lastDay:"[\u0ea1\u0eb7\u0ec9\u0ea7\u0eb2\u0e99\u0e99\u0eb5\u0ec9\u0ec0\u0ea7\u0ea5\u0eb2] LT",lastWeek:"[\u0ea7\u0eb1\u0e99]dddd[\u0ec1\u0ea5\u0ec9\u0ea7\u0e99\u0eb5\u0ec9\u0ec0\u0ea7\u0ea5\u0eb2] LT",sameElse:"L"},relativeTime:{future:"\u0ead\u0eb5\u0e81 %s",past:"%s\u0e9c\u0ec8\u0eb2\u0e99\u0ea1\u0eb2",s:"\u0e9a\u0ecd\u0ec8\u0ec0\u0e97\u0ebb\u0ec8\u0eb2\u0ec3\u0e94\u0ea7\u0eb4\u0e99\u0eb2\u0e97\u0eb5",ss:"%d \u0ea7\u0eb4\u0e99\u0eb2\u0e97\u0eb5",m:"1 \u0e99\u0eb2\u0e97\u0eb5",mm:"%d \u0e99\u0eb2\u0e97\u0eb5",h:"1 \u0e8a\u0ebb\u0ec8\u0ea7\u0ec2\u0ea1\u0e87",hh:"%d \u0e8a\u0ebb\u0ec8\u0ea7\u0ec2\u0ea1\u0e87",d:"1 \u0ea1\u0eb7\u0ec9",dd:"%d \u0ea1\u0eb7\u0ec9",M:"1 \u0ec0\u0e94\u0eb7\u0ead\u0e99",MM:"%d \u0ec0\u0e94\u0eb7\u0ead\u0e99",y:"1 \u0e9b\u0eb5",yy:"%d \u0e9b\u0eb5"},dayOfMonthOrdinalParse:/(\u0e97\u0eb5\u0ec8)\d{1,2}/,ordinal:function(e){return "\u0e97\u0eb5\u0ec8"+e}});var xe={ss:"sekund\u0117_sekund\u017ei\u0173_sekundes",m:"minut\u0117_minut\u0117s_minut\u0119",mm:"minut\u0117s_minu\u010di\u0173_minutes",h:"valanda_valandos_valand\u0105",hh:"valandos_valand\u0173_valandas",d:"diena_dienos_dien\u0105",dd:"dienos_dien\u0173_dienas",M:"m\u0117nuo_m\u0117nesio_m\u0117nes\u012f",MM:"m\u0117nesiai_m\u0117nesi\u0173_m\u0117nesius",y:"metai_met\u0173_metus",yy:"metai_met\u0173_metus"};function Pe(e,a,_,s){return a?f(_)[0]:s?f(_)[1]:f(_)[2]}function We(e){return e%10==0||10<e&&e<20}function f(e){return xe[e].split("_")}function Ae(e,a,_,s){var d=e+" ";return 1===e?d+Pe(0,a,_[0],s):a?d+(We(e)?f(_)[1]:f(_)[0]):s?d+f(_)[1]:d+(We(e)?f(_)[1]:f(_)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_baland\u017eio_gegu\u017e\u0117s_bir\u017eelio_liepos_rugpj\u016b\u010dio_rugs\u0117jo_spalio_lapkri\u010dio_gruod\u017eio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegu\u017e\u0117_bir\u017eelis_liepa_rugpj\u016btis_rugs\u0117jis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadien\u012f_pirmadien\u012f_antradien\u012f_tre\u010diadien\u012f_ketvirtadien\u012f_penktadien\u012f_\u0161e\u0161tadien\u012f".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_tre\u010diadienis_ketvirtadienis_penktadienis_\u0161e\u0161tadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_\u0160e\u0161".split("_"),weekdaysMin:"S_P_A_T_K_Pn_\u0160".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[\u0160iandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Pra\u0117jus\u012f] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prie\u0161 %s",s:function(e,a,_,s){return a?"kelios sekund\u0117s":s?"keli\u0173 sekund\u017ei\u0173":"kelias sekundes"},ss:Ae,m:Pe,mm:Ae,h:Pe,hh:Ae,d:Pe,dd:Ae,M:Pe,MM:Ae,y:Pe,yy:Ae},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}});var Oe={ss:"sekundes_sekund\u0113m_sekunde_sekundes".split("_"),m:"min\u016btes_min\u016bt\u0113m_min\u016bte_min\u016btes".split("_"),mm:"min\u016btes_min\u016bt\u0113m_min\u016bte_min\u016btes".split("_"),h:"stundas_stund\u0101m_stunda_stundas".split("_"),hh:"stundas_stund\u0101m_stunda_stundas".split("_"),d:"dienas_dien\u0101m_diena_dienas".split("_"),dd:"dienas_dien\u0101m_diena_dienas".split("_"),M:"m\u0113ne\u0161a_m\u0113ne\u0161iem_m\u0113nesis_m\u0113ne\u0161i".split("_"),MM:"m\u0113ne\u0161a_m\u0113ne\u0161iem_m\u0113nesis_m\u0113ne\u0161i".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function Ee(e,a,_){return _?a%10==1&&a%100!=11?e[2]:e[3]:a%10==1&&a%100!=11?e[0]:e[1]}function Fe(e,a,_){return e+" "+Ee(Oe[_],e,a)}function ze(e,a,_){return Ee(Oe[_],e,a)}e.defineLocale("lv",{months:"janv\u0101ris_febru\u0101ris_marts_apr\u012blis_maijs_j\u016bnijs_j\u016blijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_j\u016bn_j\u016bl_aug_sep_okt_nov_dec".split("_"),weekdays:"sv\u0113tdiena_pirmdiena_otrdiena_tre\u0161diena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[\u0160odien pulksten] LT",nextDay:"[R\u012bt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pag\u0101ju\u0161\u0101] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"p\u0113c %s",past:"pirms %s",s:function(e,a){return a?"da\u017eas sekundes":"da\u017e\u0101m sekund\u0113m"},ss:Fe,m:ze,mm:Fe,h:ze,hh:Fe,d:ze,dd:Fe,M:ze,MM:Fe,y:ze,yy:Fe},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});var w={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,a){return 1===e?a[0]:2<=e&&e<=4?a[1]:a[2]},translate:function(e,a,_){var s=w.words[_];return 1===_.length?a?s[0]:s[1]:e+" "+w.correctGrammaticalCase(e,s)}};function g(e,a,_,s){switch(_){case"s":return a?"\u0445\u044d\u0434\u0445\u044d\u043d \u0441\u0435\u043a\u0443\u043d\u0434":"\u0445\u044d\u0434\u0445\u044d\u043d \u0441\u0435\u043a\u0443\u043d\u0434\u044b\u043d";case"ss":return e+(a?" \u0441\u0435\u043a\u0443\u043d\u0434":" \u0441\u0435\u043a\u0443\u043d\u0434\u044b\u043d");case"m":case"mm":return e+(a?" \u043c\u0438\u043d\u0443\u0442":" \u043c\u0438\u043d\u0443\u0442\u044b\u043d");case"h":case"hh":return e+(a?" \u0446\u0430\u0433":" \u0446\u0430\u0433\u0438\u0439\u043d");case"d":case"dd":return e+(a?" \u04e9\u0434\u04e9\u0440":" \u04e9\u0434\u0440\u0438\u0439\u043d");case"M":case"MM":return e+(a?" \u0441\u0430\u0440":" \u0441\u0430\u0440\u044b\u043d");case"y":case"yy":return e+(a?" \u0436\u0438\u043b":" \u0436\u0438\u043b\u0438\u0439\u043d");default:return e}}e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_\u010detvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._\u010det._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_\u010de_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return "[u] [nedjelju] [u] LT";case 3:return "[u] [srijedu] [u] LT";case 6:return "[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return "[u] dddd [u] LT"}},lastDay:"[ju\u010de u] LT",lastWeek:function(){return ["[pro\u0161le] [nedjelje] [u] LT","[pro\u0161log] [ponedjeljka] [u] LT","[pro\u0161log] [utorka] [u] LT","[pro\u0161le] [srijede] [u] LT","[pro\u0161log] [\u010detvrtka] [u] LT","[pro\u0161log] [petka] [u] LT","[pro\u0161le] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:w.translate,m:w.translate,mm:w.translate,h:w.translate,hh:w.translate,d:"dan",dd:w.translate,M:"mjesec",MM:w.translate,y:"godinu",yy:w.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),e.defineLocale("mi",{months:"Kohi-t\u0101te_Hui-tanguru_Pout\u016b-te-rangi_Paenga-wh\u0101wh\u0101_Haratua_Pipiri_H\u014dngoingoi_Here-turi-k\u014dk\u0101_Mahuru_Whiringa-\u0101-nuku_Whiringa-\u0101-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_H\u014dngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"R\u0101tapu_Mane_T\u016brei_Wenerei_T\u0101ite_Paraire_H\u0101tarei".split("_"),weekdaysShort:"Ta_Ma_T\u016b_We_T\u0101i_Pa_H\u0101".split("_"),weekdaysMin:"Ta_Ma_T\u016b_We_T\u0101i_Pa_H\u0101".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te h\u0113kona ruarua",ss:"%d h\u0113kona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}\xba/,ordinal:"%d\xba",week:{dow:1,doy:4}}),e.defineLocale("mk",{months:"\u0458\u0430\u043d\u0443\u0430\u0440\u0438_\u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0438\u043b_\u043c\u0430\u0458_\u0458\u0443\u043d\u0438_\u0458\u0443\u043b\u0438_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043f\u0442\u0435\u043c\u0432\u0440\u0438_\u043e\u043a\u0442\u043e\u043c\u0432\u0440\u0438_\u043d\u043e\u0435\u043c\u0432\u0440\u0438_\u0434\u0435\u043a\u0435\u043c\u0432\u0440\u0438".split("_"),monthsShort:"\u0458\u0430\u043d_\u0444\u0435\u0432_\u043c\u0430\u0440_\u0430\u043f\u0440_\u043c\u0430\u0458_\u0458\u0443\u043d_\u0458\u0443\u043b_\u0430\u0432\u0433_\u0441\u0435\u043f_\u043e\u043a\u0442_\u043d\u043e\u0435_\u0434\u0435\u043a".split("_"),weekdays:"\u043d\u0435\u0434\u0435\u043b\u0430_\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u043d\u0438\u043a_\u0432\u0442\u043e\u0440\u043d\u0438\u043a_\u0441\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0440\u0442\u043e\u043a_\u043f\u0435\u0442\u043e\u043a_\u0441\u0430\u0431\u043e\u0442\u0430".split("_"),weekdaysShort:"\u043d\u0435\u0434_\u043f\u043e\u043d_\u0432\u0442\u043e_\u0441\u0440\u0435_\u0447\u0435\u0442_\u043f\u0435\u0442_\u0441\u0430\u0431".split("_"),weekdaysMin:"\u043de_\u043fo_\u0432\u0442_\u0441\u0440_\u0447\u0435_\u043f\u0435_\u0441a".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[\u0414\u0435\u043d\u0435\u0441 \u0432\u043e] LT",nextDay:"[\u0423\u0442\u0440\u0435 \u0432\u043e] LT",nextWeek:"[\u0412\u043e] dddd [\u0432\u043e] LT",lastDay:"[\u0412\u0447\u0435\u0440\u0430 \u0432\u043e] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return "[\u0418\u0437\u043c\u0438\u043d\u0430\u0442\u0430\u0442\u0430] dddd [\u0432\u043e] LT";case 1:case 2:case 4:case 5:return "[\u0418\u0437\u043c\u0438\u043d\u0430\u0442\u0438\u043e\u0442] dddd [\u0432\u043e] LT"}},sameElse:"L"},relativeTime:{future:"\u0437\u0430 %s",past:"\u043f\u0440\u0435\u0434 %s",s:"\u043d\u0435\u043a\u043e\u043b\u043a\u0443 \u0441\u0435\u043a\u0443\u043d\u0434\u0438",ss:"%d \u0441\u0435\u043a\u0443\u043d\u0434\u0438",m:"\u0435\u0434\u043d\u0430 \u043c\u0438\u043d\u0443\u0442\u0430",mm:"%d \u043c\u0438\u043d\u0443\u0442\u0438",h:"\u0435\u0434\u0435\u043d \u0447\u0430\u0441",hh:"%d \u0447\u0430\u0441\u0430",d:"\u0435\u0434\u0435\u043d \u0434\u0435\u043d",dd:"%d \u0434\u0435\u043d\u0430",M:"\u0435\u0434\u0435\u043d \u043c\u0435\u0441\u0435\u0446",MM:"%d \u043c\u0435\u0441\u0435\u0446\u0438",y:"\u0435\u0434\u043d\u0430 \u0433\u043e\u0434\u0438\u043d\u0430",yy:"%d \u0433\u043e\u0434\u0438\u043d\u0438"},dayOfMonthOrdinalParse:/\d{1,2}-(\u0435\u0432|\u0435\u043d|\u0442\u0438|\u0432\u0438|\u0440\u0438|\u043c\u0438)/,ordinal:function(e){var a=e%10,_=e%100;return 0===e?e+"-\u0435\u0432":0==_?e+"-\u0435\u043d":10<_&&_<20?e+"-\u0442\u0438":1==a?e+"-\u0432\u0438":2==a?e+"-\u0440\u0438":7==a||8==a?e+"-\u043c\u0438":e+"-\u0442\u0438"},week:{dow:1,doy:7}}),e.defineLocale("ml",{months:"\u0d1c\u0d28\u0d41\u0d35\u0d30\u0d3f_\u0d2b\u0d46\u0d2c\u0d4d\u0d30\u0d41\u0d35\u0d30\u0d3f_\u0d2e\u0d3e\u0d7c\u0d1a\u0d4d\u0d1a\u0d4d_\u0d0f\u0d2a\u0d4d\u0d30\u0d3f\u0d7d_\u0d2e\u0d47\u0d2f\u0d4d_\u0d1c\u0d42\u0d7a_\u0d1c\u0d42\u0d32\u0d48_\u0d13\u0d17\u0d38\u0d4d\u0d31\u0d4d\u0d31\u0d4d_\u0d38\u0d46\u0d2a\u0d4d\u0d31\u0d4d\u0d31\u0d02\u0d2c\u0d7c_\u0d12\u0d15\u0d4d\u0d1f\u0d4b\u0d2c\u0d7c_\u0d28\u0d35\u0d02\u0d2c\u0d7c_\u0d21\u0d3f\u0d38\u0d02\u0d2c\u0d7c".split("_"),monthsShort:"\u0d1c\u0d28\u0d41._\u0d2b\u0d46\u0d2c\u0d4d\u0d30\u0d41._\u0d2e\u0d3e\u0d7c._\u0d0f\u0d2a\u0d4d\u0d30\u0d3f._\u0d2e\u0d47\u0d2f\u0d4d_\u0d1c\u0d42\u0d7a_\u0d1c\u0d42\u0d32\u0d48._\u0d13\u0d17._\u0d38\u0d46\u0d2a\u0d4d\u0d31\u0d4d\u0d31._\u0d12\u0d15\u0d4d\u0d1f\u0d4b._\u0d28\u0d35\u0d02._\u0d21\u0d3f\u0d38\u0d02.".split("_"),monthsParseExact:!0,weekdays:"\u0d1e\u0d3e\u0d2f\u0d31\u0d3e\u0d34\u0d4d\u0d1a_\u0d24\u0d3f\u0d19\u0d4d\u0d15\u0d33\u0d3e\u0d34\u0d4d\u0d1a_\u0d1a\u0d4a\u0d35\u0d4d\u0d35\u0d3e\u0d34\u0d4d\u0d1a_\u0d2c\u0d41\u0d27\u0d28\u0d3e\u0d34\u0d4d\u0d1a_\u0d35\u0d4d\u0d2f\u0d3e\u0d34\u0d3e\u0d34\u0d4d\u0d1a_\u0d35\u0d46\u0d33\u0d4d\u0d33\u0d3f\u0d2f\u0d3e\u0d34\u0d4d\u0d1a_\u0d36\u0d28\u0d3f\u0d2f\u0d3e\u0d34\u0d4d\u0d1a".split("_"),weekdaysShort:"\u0d1e\u0d3e\u0d2f\u0d7c_\u0d24\u0d3f\u0d19\u0d4d\u0d15\u0d7e_\u0d1a\u0d4a\u0d35\u0d4d\u0d35_\u0d2c\u0d41\u0d27\u0d7b_\u0d35\u0d4d\u0d2f\u0d3e\u0d34\u0d02_\u0d35\u0d46\u0d33\u0d4d\u0d33\u0d3f_\u0d36\u0d28\u0d3f".split("_"),weekdaysMin:"\u0d1e\u0d3e_\u0d24\u0d3f_\u0d1a\u0d4a_\u0d2c\u0d41_\u0d35\u0d4d\u0d2f\u0d3e_\u0d35\u0d46_\u0d36".split("_"),longDateFormat:{LT:"A h:mm -\u0d28\u0d41",LTS:"A h:mm:ss -\u0d28\u0d41",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -\u0d28\u0d41",LLLL:"dddd, D MMMM YYYY, A h:mm -\u0d28\u0d41"},calendar:{sameDay:"[\u0d07\u0d28\u0d4d\u0d28\u0d4d] LT",nextDay:"[\u0d28\u0d3e\u0d33\u0d46] LT",nextWeek:"dddd, LT",lastDay:"[\u0d07\u0d28\u0d4d\u0d28\u0d32\u0d46] LT",lastWeek:"[\u0d15\u0d34\u0d3f\u0d1e\u0d4d\u0d1e] dddd, LT",sameElse:"L"},relativeTime:{future:"%s \u0d15\u0d34\u0d3f\u0d1e\u0d4d\u0d1e\u0d4d",past:"%s \u0d2e\u0d41\u0d7b\u0d2a\u0d4d",s:"\u0d05\u0d7d\u0d2a \u0d28\u0d3f\u0d2e\u0d3f\u0d37\u0d19\u0d4d\u0d19\u0d7e",ss:"%d \u0d38\u0d46\u0d15\u0d4d\u0d15\u0d7b\u0d21\u0d4d",m:"\u0d12\u0d30\u0d41 \u0d2e\u0d3f\u0d28\u0d3f\u0d31\u0d4d\u0d31\u0d4d",mm:"%d \u0d2e\u0d3f\u0d28\u0d3f\u0d31\u0d4d\u0d31\u0d4d",h:"\u0d12\u0d30\u0d41 \u0d2e\u0d23\u0d3f\u0d15\u0d4d\u0d15\u0d42\u0d7c",hh:"%d \u0d2e\u0d23\u0d3f\u0d15\u0d4d\u0d15\u0d42\u0d7c",d:"\u0d12\u0d30\u0d41 \u0d26\u0d3f\u0d35\u0d38\u0d02",dd:"%d \u0d26\u0d3f\u0d35\u0d38\u0d02",M:"\u0d12\u0d30\u0d41 \u0d2e\u0d3e\u0d38\u0d02",MM:"%d \u0d2e\u0d3e\u0d38\u0d02",y:"\u0d12\u0d30\u0d41 \u0d35\u0d7c\u0d37\u0d02",yy:"%d \u0d35\u0d7c\u0d37\u0d02"},meridiemParse:/\u0d30\u0d3e\u0d24\u0d4d\u0d30\u0d3f|\u0d30\u0d3e\u0d35\u0d3f\u0d32\u0d46|\u0d09\u0d1a\u0d4d\u0d1a \u0d15\u0d34\u0d3f\u0d1e\u0d4d\u0d1e\u0d4d|\u0d35\u0d48\u0d15\u0d41\u0d28\u0d4d\u0d28\u0d47\u0d30\u0d02|\u0d30\u0d3e\u0d24\u0d4d\u0d30\u0d3f/i,meridiemHour:function(e,a){return 12===e&&(e=0),"\u0d30\u0d3e\u0d24\u0d4d\u0d30\u0d3f"===a&&4<=e||"\u0d09\u0d1a\u0d4d\u0d1a \u0d15\u0d34\u0d3f\u0d1e\u0d4d\u0d1e\u0d4d"===a||"\u0d35\u0d48\u0d15\u0d41\u0d28\u0d4d\u0d28\u0d47\u0d30\u0d02"===a?e+12:e},meridiem:function(e,a,_){return e<4?"\u0d30\u0d3e\u0d24\u0d4d\u0d30\u0d3f":e<12?"\u0d30\u0d3e\u0d35\u0d3f\u0d32\u0d46":e<17?"\u0d09\u0d1a\u0d4d\u0d1a \u0d15\u0d34\u0d3f\u0d1e\u0d4d\u0d1e\u0d4d":e<20?"\u0d35\u0d48\u0d15\u0d41\u0d28\u0d4d\u0d28\u0d47\u0d30\u0d02":"\u0d30\u0d3e\u0d24\u0d4d\u0d30\u0d3f"}}),e.defineLocale("mn",{months:"\u041d\u044d\u0433\u0434\u04af\u0433\u044d\u044d\u0440 \u0441\u0430\u0440_\u0425\u043e\u0451\u0440\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u0413\u0443\u0440\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u0414\u04e9\u0440\u04e9\u0432\u0434\u04af\u0433\u044d\u044d\u0440 \u0441\u0430\u0440_\u0422\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u0417\u0443\u0440\u0433\u0430\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u0414\u043e\u043b\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u041d\u0430\u0439\u043c\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u0415\u0441\u0434\u04af\u0433\u044d\u044d\u0440 \u0441\u0430\u0440_\u0410\u0440\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440_\u0410\u0440\u0432\u0430\u043d \u043d\u044d\u0433\u0434\u04af\u0433\u044d\u044d\u0440 \u0441\u0430\u0440_\u0410\u0440\u0432\u0430\u043d \u0445\u043e\u0451\u0440\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440".split("_"),monthsShort:"1 \u0441\u0430\u0440_2 \u0441\u0430\u0440_3 \u0441\u0430\u0440_4 \u0441\u0430\u0440_5 \u0441\u0430\u0440_6 \u0441\u0430\u0440_7 \u0441\u0430\u0440_8 \u0441\u0430\u0440_9 \u0441\u0430\u0440_10 \u0441\u0430\u0440_11 \u0441\u0430\u0440_12 \u0441\u0430\u0440".split("_"),monthsParseExact:!0,weekdays:"\u041d\u044f\u043c_\u0414\u0430\u0432\u0430\u0430_\u041c\u044f\u0433\u043c\u0430\u0440_\u041b\u0445\u0430\u0433\u0432\u0430_\u041f\u04af\u0440\u044d\u0432_\u0411\u0430\u0430\u0441\u0430\u043d_\u0411\u044f\u043c\u0431\u0430".split("_"),weekdaysShort:"\u041d\u044f\u043c_\u0414\u0430\u0432_\u041c\u044f\u0433_\u041b\u0445\u0430_\u041f\u04af\u0440_\u0411\u0430\u0430_\u0411\u044f\u043c".split("_"),weekdaysMin:"\u041d\u044f_\u0414\u0430_\u041c\u044f_\u041b\u0445_\u041f\u04af_\u0411\u0430_\u0411\u044f".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY \u043e\u043d\u044b MMMM\u044b\u043d D",LLL:"YYYY \u043e\u043d\u044b MMMM\u044b\u043d D HH:mm",LLLL:"dddd, YYYY \u043e\u043d\u044b MMMM\u044b\u043d D HH:mm"},meridiemParse:/\u04ae\u04e8|\u04ae\u0425/i,isPM:function(e){return "\u04ae\u0425"===e},meridiem:function(e,a,_){return e<12?"\u04ae\u04e8":"\u04ae\u0425"},calendar:{sameDay:"[\u04e8\u043d\u04e9\u04e9\u0434\u04e9\u0440] LT",nextDay:"[\u041c\u0430\u0440\u0433\u0430\u0430\u0448] LT",nextWeek:"[\u0418\u0440\u044d\u0445] dddd LT",lastDay:"[\u04e8\u0447\u0438\u0433\u0434\u04e9\u0440] LT",lastWeek:"[\u04e8\u043d\u0433\u04e9\u0440\u0441\u04e9\u043d] dddd LT",sameElse:"L"},relativeTime:{future:"%s \u0434\u0430\u0440\u0430\u0430",past:"%s \u04e9\u043c\u043d\u04e9",s:g,ss:g,m:g,mm:g,h:g,hh:g,d:g,dd:g,M:g,MM:g,y:g,yy:g},dayOfMonthOrdinalParse:/\d{1,2} \u04e9\u0434\u04e9\u0440/,ordinal:function(e,a){switch(a){case"d":case"D":case"DDD":return e+" \u04e9\u0434\u04e9\u0440";default:return e}}});var Je={1:"\u0967",2:"\u0968",3:"\u0969",4:"\u096a",5:"\u096b",6:"\u096c",7:"\u096d",8:"\u096e",9:"\u096f",0:"\u0966"},Ie={"\u0967":"1","\u0968":"2","\u0969":"3","\u096a":"4","\u096b":"5","\u096c":"6","\u096d":"7","\u096e":"8","\u096f":"9","\u0966":"0"};function H(e,a,_,s){var d="";if(a)switch(_){case"s":d="\u0915\u093e\u0939\u0940 \u0938\u0947\u0915\u0902\u0926";break;case"ss":d="%d \u0938\u0947\u0915\u0902\u0926";break;case"m":d="\u090f\u0915 \u092e\u093f\u0928\u093f\u091f";break;case"mm":d="%d \u092e\u093f\u0928\u093f\u091f\u0947";break;case"h":d="\u090f\u0915 \u0924\u093e\u0938";break;case"hh":d="%d \u0924\u093e\u0938";break;case"d":d="\u090f\u0915 \u0926\u093f\u0935\u0938";break;case"dd":d="%d \u0926\u093f\u0935\u0938";break;case"M":d="\u090f\u0915 \u092e\u0939\u093f\u0928\u093e";break;case"MM":d="%d \u092e\u0939\u093f\u0928\u0947";break;case"y":d="\u090f\u0915 \u0935\u0930\u094d\u0937";break;case"yy":d="%d \u0935\u0930\u094d\u0937\u0947";break}else switch(_){case"s":d="\u0915\u093e\u0939\u0940 \u0938\u0947\u0915\u0902\u0926\u093e\u0902";break;case"ss":d="%d \u0938\u0947\u0915\u0902\u0926\u093e\u0902";break;case"m":d="\u090f\u0915\u093e \u092e\u093f\u0928\u093f\u091f\u093e";break;case"mm":d="%d \u092e\u093f\u0928\u093f\u091f\u093e\u0902";break;case"h":d="\u090f\u0915\u093e \u0924\u093e\u0938\u093e";break;case"hh":d="%d \u0924\u093e\u0938\u093e\u0902";break;case"d":d="\u090f\u0915\u093e \u0926\u093f\u0935\u0938\u093e";break;case"dd":d="%d \u0926\u093f\u0935\u0938\u093e\u0902";break;case"M":d="\u090f\u0915\u093e \u092e\u0939\u093f\u0928\u094d\u092f\u093e";break;case"MM":d="%d \u092e\u0939\u093f\u0928\u094d\u092f\u093e\u0902";break;case"y":d="\u090f\u0915\u093e \u0935\u0930\u094d\u0937\u093e";break;case"yy":d="%d \u0935\u0930\u094d\u0937\u093e\u0902";break}return d.replace(/%d/i,e)}e.defineLocale("mr",{months:"\u091c\u093e\u0928\u0947\u0935\u093e\u0930\u0940_\u092b\u0947\u092c\u094d\u0930\u0941\u0935\u093e\u0930\u0940_\u092e\u093e\u0930\u094d\u091a_\u090f\u092a\u094d\u0930\u093f\u0932_\u092e\u0947_\u091c\u0942\u0928_\u091c\u0941\u0932\u0948_\u0911\u0917\u0938\u094d\u091f_\u0938\u092a\u094d\u091f\u0947\u0902\u092c\u0930_\u0911\u0915\u094d\u091f\u094b\u092c\u0930_\u0928\u094b\u0935\u094d\u0939\u0947\u0902\u092c\u0930_\u0921\u093f\u0938\u0947\u0902\u092c\u0930".split("_"),monthsShort:"\u091c\u093e\u0928\u0947._\u092b\u0947\u092c\u094d\u0930\u0941._\u092e\u093e\u0930\u094d\u091a._\u090f\u092a\u094d\u0930\u093f._\u092e\u0947._\u091c\u0942\u0928._\u091c\u0941\u0932\u0948._\u0911\u0917._\u0938\u092a\u094d\u091f\u0947\u0902._\u0911\u0915\u094d\u091f\u094b._\u0928\u094b\u0935\u094d\u0939\u0947\u0902._\u0921\u093f\u0938\u0947\u0902.".split("_"),monthsParseExact:!0,weekdays:"\u0930\u0935\u093f\u0935\u093e\u0930_\u0938\u094b\u092e\u0935\u093e\u0930_\u092e\u0902\u0917\u0933\u0935\u093e\u0930_\u092c\u0941\u0927\u0935\u093e\u0930_\u0917\u0941\u0930\u0942\u0935\u093e\u0930_\u0936\u0941\u0915\u094d\u0930\u0935\u093e\u0930_\u0936\u0928\u093f\u0935\u093e\u0930".split("_"),weekdaysShort:"\u0930\u0935\u093f_\u0938\u094b\u092e_\u092e\u0902\u0917\u0933_\u092c\u0941\u0927_\u0917\u0941\u0930\u0942_\u0936\u0941\u0915\u094d\u0930_\u0936\u0928\u093f".split("_"),weekdaysMin:"\u0930_\u0938\u094b_\u092e\u0902_\u092c\u0941_\u0917\u0941_\u0936\u0941_\u0936".split("_"),longDateFormat:{LT:"A h:mm \u0935\u093e\u091c\u0924\u093e",LTS:"A h:mm:ss \u0935\u093e\u091c\u0924\u093e",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm \u0935\u093e\u091c\u0924\u093e",LLLL:"dddd, D MMMM YYYY, A h:mm \u0935\u093e\u091c\u0924\u093e"},calendar:{sameDay:"[\u0906\u091c] LT",nextDay:"[\u0909\u0926\u094d\u092f\u093e] LT",nextWeek:"dddd, LT",lastDay:"[\u0915\u093e\u0932] LT",lastWeek:"[\u092e\u093e\u0917\u0940\u0932] dddd, LT",sameElse:"L"},relativeTime:{future:"%s\u092e\u0927\u094d\u092f\u0947",past:"%s\u092a\u0942\u0930\u094d\u0935\u0940",s:H,ss:H,m:H,mm:H,h:H,hh:H,d:H,dd:H,M:H,MM:H,y:H,yy:H},preparse:function(e){return e.replace(/[\u0967\u0968\u0969\u096a\u096b\u096c\u096d\u096e\u096f\u0966]/g,function(e){return Ie[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Je[e]})},meridiemParse:/\u092a\u0939\u093e\u091f\u0947|\u0938\u0915\u093e\u0933\u0940|\u0926\u0941\u092a\u093e\u0930\u0940|\u0938\u093e\u092f\u0902\u0915\u093e\u0933\u0940|\u0930\u093e\u0924\u094d\u0930\u0940/,meridiemHour:function(e,a){return 12===e&&(e=0),"\u092a\u0939\u093e\u091f\u0947"===a||"\u0938\u0915\u093e\u0933\u0940"===a?e:"\u0926\u0941\u092a\u093e\u0930\u0940"===a||"\u0938\u093e\u092f\u0902\u0915\u093e\u0933\u0940"===a||"\u0930\u093e\u0924\u094d\u0930\u0940"===a?12<=e?e:e+12:void 0},meridiem:function(e,a,_){return 0<=e&&e<6?"\u092a\u0939\u093e\u091f\u0947":e<12?"\u0938\u0915\u093e\u0933\u0940":e<17?"\u0926\u0941\u092a\u093e\u0930\u0940":e<20?"\u0938\u093e\u092f\u0902\u0915\u093e\u0933\u0940":"\u0930\u093e\u0924\u094d\u0930\u0940"},week:{dow:0,doy:6}}),e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,a){return 12===e&&(e=0),"pagi"===a?e:"tengahari"===a?11<=e?e:e+12:"petang"===a||"malam"===a?e+12:void 0},meridiem:function(e,a,_){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}}),e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,a){return 12===e&&(e=0),"pagi"===a?e:"tengahari"===a?11<=e?e:e+12:"petang"===a||"malam"===a?e+12:void 0},meridiem:function(e,a,_){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}}),e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_\u0120unju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Di\u010bembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_\u0120un_Lul_Aww_Set_Ott_Nov_Di\u010b".split("_"),weekdays:"Il-\u0126add_It-Tnejn_It-Tlieta_L-Erbg\u0127a_Il-\u0126amis_Il-\u0120img\u0127a_Is-Sibt".split("_"),weekdaysShort:"\u0126ad_Tne_Tli_Erb_\u0126am_\u0120im_Sib".split("_"),weekdaysMin:"\u0126a_Tn_Tl_Er_\u0126a_\u0120i_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[G\u0127ada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-biera\u0127 fil-]LT",lastWeek:"dddd [li g\u0127adda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f\u2019 %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"sieg\u0127a",hh:"%d sieg\u0127at",d:"\u0121urnata",dd:"%d \u0121ranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}\xba/,ordinal:"%d\xba",week:{dow:1,doy:4}});var Ne={1:"\u1041",2:"\u1042",3:"\u1043",4:"\u1044",5:"\u1045",6:"\u1046",7:"\u1047",8:"\u1048",9:"\u1049",0:"\u1040"},Re={"\u1041":"1","\u1042":"2","\u1043":"3","\u1044":"4","\u1045":"5","\u1046":"6","\u1047":"7","\u1048":"8","\u1049":"9","\u1040":"0"},Ce=(e.defineLocale("my",{months:"\u1007\u1014\u103a\u1014\u101d\u102b\u101b\u102e_\u1016\u1031\u1016\u1031\u102c\u103a\u101d\u102b\u101b\u102e_\u1019\u1010\u103a_\u1027\u1015\u103c\u102e_\u1019\u1031_\u1007\u103d\u1014\u103a_\u1007\u1030\u101c\u102d\u102f\u1004\u103a_\u101e\u103c\u1002\u102f\u1010\u103a_\u1005\u1000\u103a\u1010\u1004\u103a\u1018\u102c_\u1021\u1031\u102c\u1000\u103a\u1010\u102d\u102f\u1018\u102c_\u1014\u102d\u102f\u101d\u1004\u103a\u1018\u102c_\u1012\u102e\u1007\u1004\u103a\u1018\u102c".split("_"),monthsShort:"\u1007\u1014\u103a_\u1016\u1031_\u1019\u1010\u103a_\u1015\u103c\u102e_\u1019\u1031_\u1007\u103d\u1014\u103a_\u101c\u102d\u102f\u1004\u103a_\u101e\u103c_\u1005\u1000\u103a_\u1021\u1031\u102c\u1000\u103a_\u1014\u102d\u102f_\u1012\u102e".split("_"),weekdays:"\u1010\u1014\u1004\u103a\u1039\u1002\u1014\u103d\u1031_\u1010\u1014\u1004\u103a\u1039\u101c\u102c_\u1021\u1004\u103a\u1039\u1002\u102b_\u1017\u102f\u1012\u1039\u1013\u101f\u1030\u1038_\u1000\u103c\u102c\u101e\u1015\u1010\u1031\u1038_\u101e\u1031\u102c\u1000\u103c\u102c_\u1005\u1014\u1031".split("_"),weekdaysShort:"\u1014\u103d\u1031_\u101c\u102c_\u1002\u102b_\u101f\u1030\u1038_\u1000\u103c\u102c_\u101e\u1031\u102c_\u1014\u1031".split("_"),weekdaysMin:"\u1014\u103d\u1031_\u101c\u102c_\u1002\u102b_\u101f\u1030\u1038_\u1000\u103c\u102c_\u101e\u1031\u102c_\u1014\u1031".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[\u101a\u1014\u1031.] LT [\u1019\u103e\u102c]",nextDay:"[\u1019\u1014\u1000\u103a\u1016\u103c\u1014\u103a] LT [\u1019\u103e\u102c]",nextWeek:"dddd LT [\u1019\u103e\u102c]",lastDay:"[\u1019\u1014\u1031.\u1000] LT [\u1019\u103e\u102c]",lastWeek:"[\u1015\u103c\u102e\u1038\u1001\u1032\u1037\u101e\u1031\u102c] dddd LT [\u1019\u103e\u102c]",sameElse:"L"},relativeTime:{future:"\u101c\u102c\u1019\u100a\u103a\u1037 %s \u1019\u103e\u102c",past:"\u101c\u103d\u1014\u103a\u1001\u1032\u1037\u101e\u1031\u102c %s \u1000",s:"\u1005\u1000\u1039\u1000\u1014\u103a.\u1021\u1014\u100a\u103a\u1038\u1004\u101a\u103a",ss:"%d \u1005\u1000\u1039\u1000\u1014\u1037\u103a",m:"\u1010\u1005\u103a\u1019\u102d\u1014\u1005\u103a",mm:"%d \u1019\u102d\u1014\u1005\u103a",h:"\u1010\u1005\u103a\u1014\u102c\u101b\u102e",hh:"%d \u1014\u102c\u101b\u102e",d:"\u1010\u1005\u103a\u101b\u1000\u103a",dd:"%d \u101b\u1000\u103a",M:"\u1010\u1005\u103a\u101c",MM:"%d \u101c",y:"\u1010\u1005\u103a\u1014\u103e\u1005\u103a",yy:"%d \u1014\u103e\u1005\u103a"},preparse:function(e){return e.replace(/[\u1041\u1042\u1043\u1044\u1045\u1046\u1047\u1048\u1049\u1040]/g,function(e){return Re[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Ne[e]})},week:{dow:1,doy:4}}),e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"s\xf8ndag_mandag_tirsdag_onsdag_torsdag_fredag_l\xf8rdag".split("_"),weekdaysShort:"s\xf8._ma._ti._on._to._fr._l\xf8.".split("_"),weekdaysMin:"s\xf8_ma_ti_on_to_fr_l\xf8".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i g\xe5r kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",w:"en uke",ww:"%d uker",M:"en m\xe5ned",MM:"%d m\xe5neder",y:"ett \xe5r",yy:"%d \xe5r"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),{1:"\u0967",2:"\u0968",3:"\u0969",4:"\u096a",5:"\u096b",6:"\u096c",7:"\u096d",8:"\u096e",9:"\u096f",0:"\u0966"}),Ke={"\u0967":"1","\u0968":"2","\u0969":"3","\u096a":"4","\u096b":"5","\u096c":"6","\u096d":"7","\u096e":"8","\u096f":"9","\u0966":"0"},Ge=(e.defineLocale("ne",{months:"\u091c\u0928\u0935\u0930\u0940_\u092b\u0947\u092c\u094d\u0930\u0941\u0935\u0930\u0940_\u092e\u093e\u0930\u094d\u091a_\u0905\u092a\u094d\u0930\u093f\u0932_\u092e\u0908_\u091c\u0941\u0928_\u091c\u0941\u0932\u093e\u0908_\u0905\u0917\u0937\u094d\u091f_\u0938\u0947\u092a\u094d\u091f\u0947\u092e\u094d\u092c\u0930_\u0905\u0915\u094d\u091f\u094b\u092c\u0930_\u0928\u094b\u092d\u0947\u092e\u094d\u092c\u0930_\u0921\u093f\u0938\u0947\u092e\u094d\u092c\u0930".split("_"),monthsShort:"\u091c\u0928._\u092b\u0947\u092c\u094d\u0930\u0941._\u092e\u093e\u0930\u094d\u091a_\u0905\u092a\u094d\u0930\u093f._\u092e\u0908_\u091c\u0941\u0928_\u091c\u0941\u0932\u093e\u0908._\u0905\u0917._\u0938\u0947\u092a\u094d\u091f._\u0905\u0915\u094d\u091f\u094b._\u0928\u094b\u092d\u0947._\u0921\u093f\u0938\u0947.".split("_"),monthsParseExact:!0,weekdays:"\u0906\u0907\u0924\u092c\u093e\u0930_\u0938\u094b\u092e\u092c\u093e\u0930_\u092e\u0919\u094d\u0917\u0932\u092c\u093e\u0930_\u092c\u0941\u0927\u092c\u093e\u0930_\u092c\u093f\u0939\u093f\u092c\u093e\u0930_\u0936\u0941\u0915\u094d\u0930\u092c\u093e\u0930_\u0936\u0928\u093f\u092c\u093e\u0930".split("_"),weekdaysShort:"\u0906\u0907\u0924._\u0938\u094b\u092e._\u092e\u0919\u094d\u0917\u0932._\u092c\u0941\u0927._\u092c\u093f\u0939\u093f._\u0936\u0941\u0915\u094d\u0930._\u0936\u0928\u093f.".split("_"),weekdaysMin:"\u0906._\u0938\u094b._\u092e\u0902._\u092c\u0941._\u092c\u093f._\u0936\u0941._\u0936.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A\u0915\u094b h:mm \u092c\u091c\u0947",LTS:"A\u0915\u094b h:mm:ss \u092c\u091c\u0947",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A\u0915\u094b h:mm \u092c\u091c\u0947",LLLL:"dddd, D MMMM YYYY, A\u0915\u094b h:mm \u092c\u091c\u0947"},preparse:function(e){return e.replace(/[\u0967\u0968\u0969\u096a\u096b\u096c\u096d\u096e\u096f\u0966]/g,function(e){return Ke[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Ce[e]})},meridiemParse:/\u0930\u093e\u0924\u093f|\u092c\u093f\u0939\u093e\u0928|\u0926\u093f\u0909\u0901\u0938\u094b|\u0938\u093e\u0901\u091d/,meridiemHour:function(e,a){return 12===e&&(e=0),"\u0930\u093e\u0924\u093f"===a?e<4?e:e+12:"\u092c\u093f\u0939\u093e\u0928"===a?e:"\u0926\u093f\u0909\u0901\u0938\u094b"===a?10<=e?e:e+12:"\u0938\u093e\u0901\u091d"===a?e+12:void 0},meridiem:function(e,a,_){return e<3?"\u0930\u093e\u0924\u093f":e<12?"\u092c\u093f\u0939\u093e\u0928":e<16?"\u0926\u093f\u0909\u0901\u0938\u094b":e<20?"\u0938\u093e\u0901\u091d":"\u0930\u093e\u0924\u093f"},calendar:{sameDay:"[\u0906\u091c] LT",nextDay:"[\u092d\u094b\u0932\u093f] LT",nextWeek:"[\u0906\u0909\u0901\u0926\u094b] dddd[,] LT",lastDay:"[\u0939\u093f\u091c\u094b] LT",lastWeek:"[\u0917\u090f\u0915\u094b] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s\u092e\u093e",past:"%s \u0905\u0917\u093e\u0921\u093f",s:"\u0915\u0947\u0939\u0940 \u0915\u094d\u0937\u0923",ss:"%d \u0938\u0947\u0915\u0947\u0923\u094d\u0921",m:"\u090f\u0915 \u092e\u093f\u0928\u0947\u091f",mm:"%d \u092e\u093f\u0928\u0947\u091f",h:"\u090f\u0915 \u0918\u0923\u094d\u091f\u093e",hh:"%d \u0918\u0923\u094d\u091f\u093e",d:"\u090f\u0915 \u0926\u093f\u0928",dd:"%d \u0926\u093f\u0928",M:"\u090f\u0915 \u092e\u0939\u093f\u0928\u093e",MM:"%d \u092e\u0939\u093f\u0928\u093e",y:"\u090f\u0915 \u092c\u0930\u094d\u0937",yy:"%d \u092c\u0930\u094d\u0937"},week:{dow:0,doy:6}}),"jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_")),Be="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),m=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],d=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,qe=(e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,a){return e?(/-MMM-/.test(a)?Be:Ge)[e.month()]:Ge},monthsRegex:d,monthsShortRegex:d,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:m,longMonthsParse:m,shortMonthsParse:m,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"\xe9\xe9n minuut",mm:"%d minuten",h:"\xe9\xe9n uur",hh:"%d uur",d:"\xe9\xe9n dag",dd:"%d dagen",M:"\xe9\xe9n maand",MM:"%d maanden",y:"\xe9\xe9n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||20<=e?"ste":"de")},week:{dow:1,doy:4}}),"jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_")),Ue="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],n=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,$e=(e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,a){return e?(/-MMM-/.test(a)?Ue:qe)[e.month()]:qe},monthsRegex:n,monthsShortRegex:n,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"\xe9\xe9n minuut",mm:"%d minuten",h:"\xe9\xe9n uur",hh:"%d uur",d:"\xe9\xe9n dag",dd:"%d dagen",w:"\xe9\xe9n week",ww:"%d weken",M:"\xe9\xe9n maand",MM:"%d maanden",y:"\xe9\xe9n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||20<=e?"ste":"de")},week:{dow:1,doy:4}}),e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"sundag_m\xe5ndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"su._m\xe5._ty._on._to._fr._lau.".split("_"),weekdaysMin:"su_m\xe5_ty_on_to_fr_la".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I g\xe5r klokka] LT",lastWeek:"[F\xf8reg\xe5ande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",w:"ei veke",ww:"%d veker",M:"ein m\xe5nad",MM:"%d m\xe5nader",y:"eit \xe5r",yy:"%d \xe5r"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("oc-lnc",{months:{standalone:"geni\xe8r_febri\xe8r_mar\xe7_abril_mai_junh_julhet_agost_setembre_oct\xf2bre_novembre_decembre".split("_"),format:"de geni\xe8r_de febri\xe8r_de mar\xe7_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'oct\xf2bre_de novembre_de decembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._mar\xe7_abr._mai_junh_julh._ago._set._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"dimenge_diluns_dimars_dim\xe8cres_dij\xf2us_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dm._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dm_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:"[u\xe8i a] LT",nextDay:"[deman a] LT",nextWeek:"dddd [a] LT",lastDay:"[i\xe8r a] LT",lastWeek:"dddd [passat a] LT",sameElse:"L"},relativeTime:{future:"d'aqu\xed %s",past:"fa %s",s:"unas segondas",ss:"%d segondas",m:"una minuta",mm:"%d minutas",h:"una ora",hh:"%d oras",d:"un jorn",dd:"%d jorns",M:"un mes",MM:"%d meses",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|\xe8|a)/,ordinal:function(e,a){return e+("w"!==a&&"W"!==a?1===e?"r":2===e?"n":3===e?"r":4===e?"t":"\xe8":"a")},week:{dow:1,doy:4}}),{1:"\u0a67",2:"\u0a68",3:"\u0a69",4:"\u0a6a",5:"\u0a6b",6:"\u0a6c",7:"\u0a6d",8:"\u0a6e",9:"\u0a6f",0:"\u0a66"}),Qe={"\u0a67":"1","\u0a68":"2","\u0a69":"3","\u0a6a":"4","\u0a6b":"5","\u0a6c":"6","\u0a6d":"7","\u0a6e":"8","\u0a6f":"9","\u0a66":"0"},Ve=(e.defineLocale("pa-in",{months:"\u0a1c\u0a28\u0a35\u0a30\u0a40_\u0a2b\u0a3c\u0a30\u0a35\u0a30\u0a40_\u0a2e\u0a3e\u0a30\u0a1a_\u0a05\u0a2a\u0a4d\u0a30\u0a48\u0a32_\u0a2e\u0a08_\u0a1c\u0a42\u0a28_\u0a1c\u0a41\u0a32\u0a3e\u0a08_\u0a05\u0a17\u0a38\u0a24_\u0a38\u0a24\u0a70\u0a2c\u0a30_\u0a05\u0a15\u0a24\u0a42\u0a2c\u0a30_\u0a28\u0a35\u0a70\u0a2c\u0a30_\u0a26\u0a38\u0a70\u0a2c\u0a30".split("_"),monthsShort:"\u0a1c\u0a28\u0a35\u0a30\u0a40_\u0a2b\u0a3c\u0a30\u0a35\u0a30\u0a40_\u0a2e\u0a3e\u0a30\u0a1a_\u0a05\u0a2a\u0a4d\u0a30\u0a48\u0a32_\u0a2e\u0a08_\u0a1c\u0a42\u0a28_\u0a1c\u0a41\u0a32\u0a3e\u0a08_\u0a05\u0a17\u0a38\u0a24_\u0a38\u0a24\u0a70\u0a2c\u0a30_\u0a05\u0a15\u0a24\u0a42\u0a2c\u0a30_\u0a28\u0a35\u0a70\u0a2c\u0a30_\u0a26\u0a38\u0a70\u0a2c\u0a30".split("_"),weekdays:"\u0a10\u0a24\u0a35\u0a3e\u0a30_\u0a38\u0a4b\u0a2e\u0a35\u0a3e\u0a30_\u0a2e\u0a70\u0a17\u0a32\u0a35\u0a3e\u0a30_\u0a2c\u0a41\u0a27\u0a35\u0a3e\u0a30_\u0a35\u0a40\u0a30\u0a35\u0a3e\u0a30_\u0a38\u0a3c\u0a41\u0a71\u0a15\u0a30\u0a35\u0a3e\u0a30_\u0a38\u0a3c\u0a28\u0a40\u0a1a\u0a30\u0a35\u0a3e\u0a30".split("_"),weekdaysShort:"\u0a10\u0a24_\u0a38\u0a4b\u0a2e_\u0a2e\u0a70\u0a17\u0a32_\u0a2c\u0a41\u0a27_\u0a35\u0a40\u0a30_\u0a38\u0a3c\u0a41\u0a15\u0a30_\u0a38\u0a3c\u0a28\u0a40".split("_"),weekdaysMin:"\u0a10\u0a24_\u0a38\u0a4b\u0a2e_\u0a2e\u0a70\u0a17\u0a32_\u0a2c\u0a41\u0a27_\u0a35\u0a40\u0a30_\u0a38\u0a3c\u0a41\u0a15\u0a30_\u0a38\u0a3c\u0a28\u0a40".split("_"),longDateFormat:{LT:"A h:mm \u0a35\u0a1c\u0a47",LTS:"A h:mm:ss \u0a35\u0a1c\u0a47",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm \u0a35\u0a1c\u0a47",LLLL:"dddd, D MMMM YYYY, A h:mm \u0a35\u0a1c\u0a47"},calendar:{sameDay:"[\u0a05\u0a1c] LT",nextDay:"[\u0a15\u0a32] LT",nextWeek:"[\u0a05\u0a17\u0a32\u0a3e] dddd, LT",lastDay:"[\u0a15\u0a32] LT",lastWeek:"[\u0a2a\u0a3f\u0a1b\u0a32\u0a47] dddd, LT",sameElse:"L"},relativeTime:{future:"%s \u0a35\u0a3f\u0a71\u0a1a",past:"%s \u0a2a\u0a3f\u0a1b\u0a32\u0a47",s:"\u0a15\u0a41\u0a1d \u0a38\u0a15\u0a3f\u0a70\u0a1f",ss:"%d \u0a38\u0a15\u0a3f\u0a70\u0a1f",m:"\u0a07\u0a15 \u0a2e\u0a3f\u0a70\u0a1f",mm:"%d \u0a2e\u0a3f\u0a70\u0a1f",h:"\u0a07\u0a71\u0a15 \u0a18\u0a70\u0a1f\u0a3e",hh:"%d \u0a18\u0a70\u0a1f\u0a47",d:"\u0a07\u0a71\u0a15 \u0a26\u0a3f\u0a28",dd:"%d \u0a26\u0a3f\u0a28",M:"\u0a07\u0a71\u0a15 \u0a2e\u0a39\u0a40\u0a28\u0a3e",MM:"%d \u0a2e\u0a39\u0a40\u0a28\u0a47",y:"\u0a07\u0a71\u0a15 \u0a38\u0a3e\u0a32",yy:"%d \u0a38\u0a3e\u0a32"},preparse:function(e){return e.replace(/[\u0a67\u0a68\u0a69\u0a6a\u0a6b\u0a6c\u0a6d\u0a6e\u0a6f\u0a66]/g,function(e){return Qe[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return $e[e]})},meridiemParse:/\u0a30\u0a3e\u0a24|\u0a38\u0a35\u0a47\u0a30|\u0a26\u0a41\u0a2a\u0a39\u0a3f\u0a30|\u0a38\u0a3c\u0a3e\u0a2e/,meridiemHour:function(e,a){return 12===e&&(e=0),"\u0a30\u0a3e\u0a24"===a?e<4?e:e+12:"\u0a38\u0a35\u0a47\u0a30"===a?e:"\u0a26\u0a41\u0a2a\u0a39\u0a3f\u0a30"===a?10<=e?e:e+12:"\u0a38\u0a3c\u0a3e\u0a2e"===a?e+12:void 0},meridiem:function(e,a,_){return e<4?"\u0a30\u0a3e\u0a24":e<10?"\u0a38\u0a35\u0a47\u0a30":e<17?"\u0a26\u0a41\u0a2a\u0a39\u0a3f\u0a30":e<20?"\u0a38\u0a3c\u0a3e\u0a2e":"\u0a30\u0a3e\u0a24"},week:{dow:0,doy:6}}),"stycze\u0144_luty_marzec_kwiecie\u0144_maj_czerwiec_lipiec_sierpie\u0144_wrzesie\u0144_pa\u017adziernik_listopad_grudzie\u0144".split("_")),Ze="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_wrze\u015bnia_pa\u017adziernika_listopada_grudnia".split("_"),d=[/^sty/i,/^lut/i,/^mar/i,/^kwi/i,/^maj/i,/^cze/i,/^lip/i,/^sie/i,/^wrz/i,/^pa\u017a/i,/^lis/i,/^gru/i];function Xe(e){return e%10<5&&1<e%10&&~~(e/10)%10!=1}function b(e,a,_){var s=e+" ";switch(_){case"ss":return s+(Xe(e)?"sekundy":"sekund");case"m":return a?"minuta":"minut\u0119";case"mm":return s+(Xe(e)?"minuty":"minut");case"h":return a?"godzina":"godzin\u0119";case"hh":return s+(Xe(e)?"godziny":"godzin");case"ww":return s+(Xe(e)?"tygodnie":"tygodni");case"MM":return s+(Xe(e)?"miesi\u0105ce":"miesi\u0119cy");case"yy":return s+(Xe(e)?"lata":"lat")}}function S(e,a,_){return e+(20<=e%100||100<=e&&e%100==0?" de ":" ")+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",ww:"s\u0103pt\u0103m\xe2ni",MM:"luni",yy:"ani"}[_]}function v(e,a,_){return "m"===_?a?"\u043c\u0438\u043d\u0443\u0442\u0430":"\u043c\u0438\u043d\u0443\u0442\u0443":e+" "+(e=+e,a=(a={ss:a?"\u0441\u0435\u043a\u0443\u043d\u0434\u0430_\u0441\u0435\u043a\u0443\u043d\u0434\u044b_\u0441\u0435\u043a\u0443\u043d\u0434":"\u0441\u0435\u043a\u0443\u043d\u0434\u0443_\u0441\u0435\u043a\u0443\u043d\u0434\u044b_\u0441\u0435\u043a\u0443\u043d\u0434",mm:a?"\u043c\u0438\u043d\u0443\u0442\u0430_\u043c\u0438\u043d\u0443\u0442\u044b_\u043c\u0438\u043d\u0443\u0442":"\u043c\u0438\u043d\u0443\u0442\u0443_\u043c\u0438\u043d\u0443\u0442\u044b_\u043c\u0438\u043d\u0443\u0442",hh:"\u0447\u0430\u0441_\u0447\u0430\u0441\u0430_\u0447\u0430\u0441\u043e\u0432",dd:"\u0434\u0435\u043d\u044c_\u0434\u043d\u044f_\u0434\u043d\u0435\u0439",ww:"\u043d\u0435\u0434\u0435\u043b\u044f_\u043d\u0435\u0434\u0435\u043b\u0438_\u043d\u0435\u0434\u0435\u043b\u044c",MM:"\u043c\u0435\u0441\u044f\u0446_\u043c\u0435\u0441\u044f\u0446\u0430_\u043c\u0435\u0441\u044f\u0446\u0435\u0432",yy:"\u0433\u043e\u0434_\u0433\u043e\u0434\u0430_\u043b\u0435\u0442"}[_]).split("_"),e%10==1&&e%100!=11?a[0]:2<=e%10&&e%10<=4&&(e%100<10||20<=e%100)?a[1]:a[2])}e.defineLocale("pl",{months:function(e,a){return e?(/D MMMM/.test(a)?Ze:Ve)[e.month()]:Ve},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_pa\u017a_lis_gru".split("_"),monthsParse:d,longMonthsParse:d,shortMonthsParse:d,weekdays:"niedziela_poniedzia\u0142ek_wtorek_\u015broda_czwartek_pi\u0105tek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_\u015br_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_\u015ar_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dzi\u015b o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return "[W niedziel\u0119 o] LT";case 2:return "[We wtorek o] LT";case 3:return "[W \u015brod\u0119 o] LT";case 6:return "[W sobot\u0119 o] LT";default:return "[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return "[W zesz\u0142\u0105 niedziel\u0119 o] LT";case 3:return "[W zesz\u0142\u0105 \u015brod\u0119 o] LT";case 6:return "[W zesz\u0142\u0105 sobot\u0119 o] LT";default:return "[W zesz\u0142y] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:b,m:b,mm:b,h:b,hh:b,d:"1 dzie\u0144",dd:"%d dni",w:"tydzie\u0144",ww:b,M:"miesi\u0105c",MM:b,y:"rok",yy:b},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("pt-br",{months:"janeiro_fevereiro_mar\xe7o_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_ter\xe7a-feira_quarta-feira_quinta-feira_sexta-feira_s\xe1bado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_s\xe1b".split("_"),weekdaysMin:"do_2\xaa_3\xaa_4\xaa_5\xaa_6\xaa_s\xe1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [\xe0s] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [\xe0s] HH:mm"},calendar:{sameDay:"[Hoje \xe0s] LT",nextDay:"[Amanh\xe3 \xe0s] LT",nextWeek:"dddd [\xe0s] LT",lastDay:"[Ontem \xe0s] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[\xdaltimo] dddd [\xe0s] LT":"[\xdaltima] dddd [\xe0s] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"h\xe1 %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um m\xeas",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}\xba/,ordinal:"%d\xba",invalidDate:"Data inv\xe1lida"}),e.defineLocale("pt",{months:"janeiro_fevereiro_mar\xe7o_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Ter\xe7a-feira_Quarta-feira_Quinta-feira_Sexta-feira_S\xe1bado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_S\xe1b".split("_"),weekdaysMin:"Do_2\xaa_3\xaa_4\xaa_5\xaa_6\xaa_S\xe1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje \xe0s] LT",nextDay:"[Amanh\xe3 \xe0s] LT",nextWeek:"dddd [\xe0s] LT",lastDay:"[Ontem \xe0s] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[\xdaltimo] dddd [\xe0s] LT":"[\xdaltima] dddd [\xe0s] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"h\xe1 %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",w:"uma semana",ww:"%d semanas",M:"um m\xeas",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}\xba/,ordinal:"%d\xba",week:{dow:1,doy:4}}),e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminic\u0103_luni_mar\u021bi_miercuri_joi_vineri_s\xe2mb\u0103t\u0103".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_S\xe2m".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_S\xe2".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[m\xe2ine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s \xeen urm\u0103",s:"c\xe2teva secunde",ss:S,m:"un minut",mm:S,h:"o or\u0103",hh:S,d:"o zi",dd:S,w:"o s\u0103pt\u0103m\xe2n\u0103",ww:S,M:"o lun\u0103",MM:S,y:"un an",yy:S},week:{dow:1,doy:7}});m=[/^\u044f\u043d\u0432/i,/^\u0444\u0435\u0432/i,/^\u043c\u0430\u0440/i,/^\u0430\u043f\u0440/i,/^\u043c\u0430[\u0439\u044f]/i,/^\u0438\u044e\u043d/i,/^\u0438\u044e\u043b/i,/^\u0430\u0432\u0433/i,/^\u0441\u0435\u043d/i,/^\u043e\u043a\u0442/i,/^\u043d\u043e\u044f/i,/^\u0434\u0435\u043a/i],e.defineLocale("ru",{months:{format:"\u044f\u043d\u0432\u0430\u0440\u044f_\u0444\u0435\u0432\u0440\u0430\u043b\u044f_\u043c\u0430\u0440\u0442\u0430_\u0430\u043f\u0440\u0435\u043b\u044f_\u043c\u0430\u044f_\u0438\u044e\u043d\u044f_\u0438\u044e\u043b\u044f_\u0430\u0432\u0433\u0443\u0441\u0442\u0430_\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f_\u043e\u043a\u0442\u044f\u0431\u0440\u044f_\u043d\u043e\u044f\u0431\u0440\u044f_\u0434\u0435\u043a\u0430\u0431\u0440\u044f".split("_"),standalone:"\u044f\u043d\u0432\u0430\u0440\u044c_\u0444\u0435\u0432\u0440\u0430\u043b\u044c_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0435\u043b\u044c_\u043c\u0430\u0439_\u0438\u044e\u043d\u044c_\u0438\u044e\u043b\u044c_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c_\u043e\u043a\u0442\u044f\u0431\u0440\u044c_\u043d\u043e\u044f\u0431\u0440\u044c_\u0434\u0435\u043a\u0430\u0431\u0440\u044c".split("_")},monthsShort:{format:"\u044f\u043d\u0432._\u0444\u0435\u0432\u0440._\u043c\u0430\u0440._\u0430\u043f\u0440._\u043c\u0430\u044f_\u0438\u044e\u043d\u044f_\u0438\u044e\u043b\u044f_\u0430\u0432\u0433._\u0441\u0435\u043d\u0442._\u043e\u043a\u0442._\u043d\u043e\u044f\u0431._\u0434\u0435\u043a.".split("_"),standalone:"\u044f\u043d\u0432._\u0444\u0435\u0432\u0440._\u043c\u0430\u0440\u0442_\u0430\u043f\u0440._\u043c\u0430\u0439_\u0438\u044e\u043d\u044c_\u0438\u044e\u043b\u044c_\u0430\u0432\u0433._\u0441\u0435\u043d\u0442._\u043e\u043a\u0442._\u043d\u043e\u044f\u0431._\u0434\u0435\u043a.".split("_")},weekdays:{standalone:"\u0432\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435_\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a_\u0432\u0442\u043e\u0440\u043d\u0438\u043a_\u0441\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0435\u0440\u0433_\u043f\u044f\u0442\u043d\u0438\u0446\u0430_\u0441\u0443\u0431\u0431\u043e\u0442\u0430".split("_"),format:"\u0432\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435_\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a_\u0432\u0442\u043e\u0440\u043d\u0438\u043a_\u0441\u0440\u0435\u0434\u0443_\u0447\u0435\u0442\u0432\u0435\u0440\u0433_\u043f\u044f\u0442\u043d\u0438\u0446\u0443_\u0441\u0443\u0431\u0431\u043e\u0442\u0443".split("_"),isFormat:/\[ ?[\u0412\u0432] ?(?:\u043f\u0440\u043e\u0448\u043b\u0443\u044e|\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e|\u044d\u0442\u0443)? ?] ?dddd/},weekdaysShort:"\u0432\u0441_\u043f\u043d_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043f\u0442_\u0441\u0431".split("_"),weekdaysMin:"\u0432\u0441_\u043f\u043d_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043f\u0442_\u0441\u0431".split("_"),monthsParse:m,longMonthsParse:m,shortMonthsParse:m,monthsRegex:/^(\u044f\u043d\u0432\u0430\u0440[\u044c\u044f]|\u044f\u043d\u0432\.?|\u0444\u0435\u0432\u0440\u0430\u043b[\u044c\u044f]|\u0444\u0435\u0432\u0440?\.?|\u043c\u0430\u0440\u0442\u0430?|\u043c\u0430\u0440\.?|\u0430\u043f\u0440\u0435\u043b[\u044c\u044f]|\u0430\u043f\u0440\.?|\u043c\u0430[\u0439\u044f]|\u0438\u044e\u043d[\u044c\u044f]|\u0438\u044e\u043d\.?|\u0438\u044e\u043b[\u044c\u044f]|\u0438\u044e\u043b\.?|\u0430\u0432\u0433\u0443\u0441\u0442\u0430?|\u0430\u0432\u0433\.?|\u0441\u0435\u043d\u0442\u044f\u0431\u0440[\u044c\u044f]|\u0441\u0435\u043d\u0442?\.?|\u043e\u043a\u0442\u044f\u0431\u0440[\u044c\u044f]|\u043e\u043a\u0442\.?|\u043d\u043e\u044f\u0431\u0440[\u044c\u044f]|\u043d\u043e\u044f\u0431?\.?|\u0434\u0435\u043a\u0430\u0431\u0440[\u044c\u044f]|\u0434\u0435\u043a\.?)/i,monthsShortRegex:/^(\u044f\u043d\u0432\u0430\u0440[\u044c\u044f]|\u044f\u043d\u0432\.?|\u0444\u0435\u0432\u0440\u0430\u043b[\u044c\u044f]|\u0444\u0435\u0432\u0440?\.?|\u043c\u0430\u0440\u0442\u0430?|\u043c\u0430\u0440\.?|\u0430\u043f\u0440\u0435\u043b[\u044c\u044f]|\u0430\u043f\u0440\.?|\u043c\u0430[\u0439\u044f]|\u0438\u044e\u043d[\u044c\u044f]|\u0438\u044e\u043d\.?|\u0438\u044e\u043b[\u044c\u044f]|\u0438\u044e\u043b\.?|\u0430\u0432\u0433\u0443\u0441\u0442\u0430?|\u0430\u0432\u0433\.?|\u0441\u0435\u043d\u0442\u044f\u0431\u0440[\u044c\u044f]|\u0441\u0435\u043d\u0442?\.?|\u043e\u043a\u0442\u044f\u0431\u0440[\u044c\u044f]|\u043e\u043a\u0442\.?|\u043d\u043e\u044f\u0431\u0440[\u044c\u044f]|\u043d\u043e\u044f\u0431?\.?|\u0434\u0435\u043a\u0430\u0431\u0440[\u044c\u044f]|\u0434\u0435\u043a\.?)/i,monthsStrictRegex:/^(\u044f\u043d\u0432\u0430\u0440[\u044f\u044c]|\u0444\u0435\u0432\u0440\u0430\u043b[\u044f\u044c]|\u043c\u0430\u0440\u0442\u0430?|\u0430\u043f\u0440\u0435\u043b[\u044f\u044c]|\u043c\u0430[\u044f\u0439]|\u0438\u044e\u043d[\u044f\u044c]|\u0438\u044e\u043b[\u044f\u044c]|\u0430\u0432\u0433\u0443\u0441\u0442\u0430?|\u0441\u0435\u043d\u0442\u044f\u0431\u0440[\u044f\u044c]|\u043e\u043a\u0442\u044f\u0431\u0440[\u044f\u044c]|\u043d\u043e\u044f\u0431\u0440[\u044f\u044c]|\u0434\u0435\u043a\u0430\u0431\u0440[\u044f\u044c])/i,monthsShortStrictRegex:/^(\u044f\u043d\u0432\.|\u0444\u0435\u0432\u0440?\.|\u043c\u0430\u0440[\u0442.]|\u0430\u043f\u0440\.|\u043c\u0430[\u044f\u0439]|\u0438\u044e\u043d[\u044c\u044f.]|\u0438\u044e\u043b[\u044c\u044f.]|\u0430\u0432\u0433\.|\u0441\u0435\u043d\u0442?\.|\u043e\u043a\u0442\.|\u043d\u043e\u044f\u0431?\.|\u0434\u0435\u043a\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY \u0433.",LLL:"D MMMM YYYY \u0433., H:mm",LLLL:"dddd, D MMMM YYYY \u0433., H:mm"},calendar:{sameDay:"[\u0421\u0435\u0433\u043e\u0434\u043d\u044f, \u0432] LT",nextDay:"[\u0417\u0430\u0432\u0442\u0440\u0430, \u0432] LT",lastDay:"[\u0412\u0447\u0435\u0440\u0430, \u0432] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[\u0412\u043e] dddd, [\u0432] LT":"[\u0412] dddd, [\u0432] LT";switch(this.day()){case 0:return "[\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435] dddd, [\u0432] LT";case 1:case 2:case 4:return "[\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439] dddd, [\u0432] LT";case 3:case 5:case 6:return "[\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e] dddd, [\u0432] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[\u0412\u043e] dddd, [\u0432] LT":"[\u0412] dddd, [\u0432] LT";switch(this.day()){case 0:return "[\u0412 \u043f\u0440\u043e\u0448\u043b\u043e\u0435] dddd, [\u0432] LT";case 1:case 2:case 4:return "[\u0412 \u043f\u0440\u043e\u0448\u043b\u044b\u0439] dddd, [\u0432] LT";case 3:case 5:case 6:return "[\u0412 \u043f\u0440\u043e\u0448\u043b\u0443\u044e] dddd, [\u0432] LT"}},sameElse:"L"},relativeTime:{future:"\u0447\u0435\u0440\u0435\u0437 %s",past:"%s \u043d\u0430\u0437\u0430\u0434",s:"\u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u043a\u0443\u043d\u0434",ss:v,m:v,mm:v,h:"\u0447\u0430\u0441",hh:v,d:"\u0434\u0435\u043d\u044c",dd:v,w:"\u043d\u0435\u0434\u0435\u043b\u044f",ww:v,M:"\u043c\u0435\u0441\u044f\u0446",MM:v,y:"\u0433\u043e\u0434",yy:v},meridiemParse:/\u043d\u043e\u0447\u0438|\u0443\u0442\u0440\u0430|\u0434\u043d\u044f|\u0432\u0435\u0447\u0435\u0440\u0430/i,isPM:function(e){return /^(\u0434\u043d\u044f|\u0432\u0435\u0447\u0435\u0440\u0430)$/.test(e)},meridiem:function(e,a,_){return e<4?"\u043d\u043e\u0447\u0438":e<12?"\u0443\u0442\u0440\u0430":e<17?"\u0434\u043d\u044f":"\u0432\u0435\u0447\u0435\u0440\u0430"},dayOfMonthOrdinalParse:/\d{1,2}-(\u0439|\u0433\u043e|\u044f)/,ordinal:function(e,a){switch(a){case"M":case"d":case"DDD":return e+"-\u0439";case"D":return e+"-\u0433\u043e";case"w":case"W":return e+"-\u044f";default:return e}},week:{dow:1,doy:4}}),n=["\u062c\u0646\u0648\u0631\u064a","\u0641\u064a\u0628\u0631\u0648\u0631\u064a","\u0645\u0627\u0631\u0686","\u0627\u067e\u0631\u064a\u0644","\u0645\u0626\u064a","\u062c\u0648\u0646","\u062c\u0648\u0644\u0627\u0621\u0650","\u0622\u06af\u0633\u067d","\u0633\u064a\u067e\u067d\u0645\u0628\u0631","\u0622\u06aa\u067d\u0648\u0628\u0631","\u0646\u0648\u0645\u0628\u0631","\u068a\u0633\u0645\u0628\u0631"],r=["\u0622\u0686\u0631","\u0633\u0648\u0645\u0631","\u0627\u06b1\u0627\u0631\u0648","\u0627\u0631\u0628\u0639","\u062e\u0645\u064a\u0633","\u062c\u0645\u0639","\u0687\u0646\u0687\u0631"],e.defineLocale("sd",{months:n,monthsShort:n,weekdays:r,weekdaysShort:r,weekdaysMin:r,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd\u060c D MMMM YYYY HH:mm"},meridiemParse:/\u0635\u0628\u062d|\u0634\u0627\u0645/,isPM:function(e){return "\u0634\u0627\u0645"===e},meridiem:function(e,a,_){return e<12?"\u0635\u0628\u062d":"\u0634\u0627\u0645"},calendar:{sameDay:"[\u0627\u0684] LT",nextDay:"[\u0633\u0680\u0627\u06bb\u064a] LT",nextWeek:"dddd [\u0627\u06b3\u064a\u0646 \u0647\u0641\u062a\u064a \u062a\u064a] LT",lastDay:"[\u06aa\u0627\u0644\u0647\u0647] LT",lastWeek:"[\u06af\u0632\u0631\u064a\u0644 \u0647\u0641\u062a\u064a] dddd [\u062a\u064a] LT",sameElse:"L"},relativeTime:{future:"%s \u067e\u0648\u0621",past:"%s \u0627\u06b3",s:"\u0686\u0646\u062f \u0633\u064a\u06aa\u0646\u068a",ss:"%d \u0633\u064a\u06aa\u0646\u068a",m:"\u0647\u06aa \u0645\u0646\u067d",mm:"%d \u0645\u0646\u067d",h:"\u0647\u06aa \u06aa\u0644\u0627\u06aa",hh:"%d \u06aa\u0644\u0627\u06aa",d:"\u0647\u06aa \u068f\u064a\u0646\u0647\u0646",dd:"%d \u068f\u064a\u0646\u0647\u0646",M:"\u0647\u06aa \u0645\u0647\u064a\u0646\u0648",MM:"%d \u0645\u0647\u064a\u0646\u0627",y:"\u0647\u06aa \u0633\u0627\u0644",yy:"%d \u0633\u0627\u0644"},preparse:function(e){return e.replace(/\u060c/g,",")},postformat:function(e){return e.replace(/,/g,"\u060c")},week:{dow:1,doy:4}}),e.defineLocale("se",{months:"o\u0111\u0111ajagem\xe1nnu_guovvam\xe1nnu_njuk\u010dam\xe1nnu_cuo\u014bom\xe1nnu_miessem\xe1nnu_geassem\xe1nnu_suoidnem\xe1nnu_borgem\xe1nnu_\u010dak\u010dam\xe1nnu_golggotm\xe1nnu_sk\xe1bmam\xe1nnu_juovlam\xe1nnu".split("_"),monthsShort:"o\u0111\u0111j_guov_njuk_cuo_mies_geas_suoi_borg_\u010dak\u010d_golg_sk\xe1b_juov".split("_"),weekdays:"sotnabeaivi_vuoss\xe1rga_ma\u014b\u014beb\xe1rga_gaskavahkku_duorastat_bearjadat_l\xe1vvardat".split("_"),weekdaysShort:"sotn_vuos_ma\u014b_gask_duor_bear_l\xe1v".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s gea\u017ees",past:"ma\u014bit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta m\xe1nnu",MM:"%d m\xe1nut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("si",{months:"\u0da2\u0db1\u0dc0\u0dcf\u0dbb\u0dd2_\u0db4\u0dd9\u0db6\u0dbb\u0dc0\u0dcf\u0dbb\u0dd2_\u0db8\u0dcf\u0dbb\u0dca\u0dad\u0dd4_\u0d85\u0db4\u0dca\u200d\u0dbb\u0dda\u0dbd\u0dca_\u0db8\u0dd0\u0dba\u0dd2_\u0da2\u0dd6\u0db1\u0dd2_\u0da2\u0dd6\u0dbd\u0dd2_\u0d85\u0d9c\u0ddd\u0dc3\u0dca\u0dad\u0dd4_\u0dc3\u0dd0\u0db4\u0dca\u0dad\u0dd0\u0db8\u0dca\u0db6\u0dbb\u0dca_\u0d94\u0d9a\u0dca\u0dad\u0ddd\u0db6\u0dbb\u0dca_\u0db1\u0ddc\u0dc0\u0dd0\u0db8\u0dca\u0db6\u0dbb\u0dca_\u0daf\u0dd9\u0dc3\u0dd0\u0db8\u0dca\u0db6\u0dbb\u0dca".split("_"),monthsShort:"\u0da2\u0db1_\u0db4\u0dd9\u0db6_\u0db8\u0dcf\u0dbb\u0dca_\u0d85\u0db4\u0dca_\u0db8\u0dd0\u0dba\u0dd2_\u0da2\u0dd6\u0db1\u0dd2_\u0da2\u0dd6\u0dbd\u0dd2_\u0d85\u0d9c\u0ddd_\u0dc3\u0dd0\u0db4\u0dca_\u0d94\u0d9a\u0dca_\u0db1\u0ddc\u0dc0\u0dd0_\u0daf\u0dd9\u0dc3\u0dd0".split("_"),weekdays:"\u0d89\u0dbb\u0dd2\u0daf\u0dcf_\u0dc3\u0db3\u0dd4\u0daf\u0dcf_\u0d85\u0d9f\u0dc4\u0dbb\u0dd4\u0dc0\u0dcf\u0daf\u0dcf_\u0db6\u0daf\u0dcf\u0daf\u0dcf_\u0db6\u0dca\u200d\u0dbb\u0dc4\u0dc3\u0dca\u0db4\u0dad\u0dd2\u0db1\u0dca\u0daf\u0dcf_\u0dc3\u0dd2\u0d9a\u0dd4\u0dbb\u0dcf\u0daf\u0dcf_\u0dc3\u0dd9\u0db1\u0dc3\u0dd4\u0dbb\u0dcf\u0daf\u0dcf".split("_"),weekdaysShort:"\u0d89\u0dbb\u0dd2_\u0dc3\u0db3\u0dd4_\u0d85\u0d9f_\u0db6\u0daf\u0dcf_\u0db6\u0dca\u200d\u0dbb\u0dc4_\u0dc3\u0dd2\u0d9a\u0dd4_\u0dc3\u0dd9\u0db1".split("_"),weekdaysMin:"\u0d89_\u0dc3_\u0d85_\u0db6_\u0db6\u0dca\u200d\u0dbb_\u0dc3\u0dd2_\u0dc3\u0dd9".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [\u0dc0\u0dd0\u0db1\u0dd2] dddd, a h:mm:ss"},calendar:{sameDay:"[\u0d85\u0daf] LT[\u0da7]",nextDay:"[\u0dc4\u0dd9\u0da7] LT[\u0da7]",nextWeek:"dddd LT[\u0da7]",lastDay:"[\u0d8a\u0dba\u0dda] LT[\u0da7]",lastWeek:"[\u0db4\u0dc3\u0dd4\u0d9c\u0dd2\u0dba] dddd LT[\u0da7]",sameElse:"L"},relativeTime:{future:"%s\u0d9a\u0dd2\u0db1\u0dca",past:"%s\u0d9a\u0da7 \u0db4\u0dd9\u0dbb",s:"\u0dad\u0dad\u0dca\u0db4\u0dbb \u0d9a\u0dd2\u0dc4\u0dd2\u0db4\u0dba",ss:"\u0dad\u0dad\u0dca\u0db4\u0dbb %d",m:"\u0db8\u0dd2\u0db1\u0dd2\u0dad\u0dca\u0dad\u0dd4\u0dc0",mm:"\u0db8\u0dd2\u0db1\u0dd2\u0dad\u0dca\u0dad\u0dd4 %d",h:"\u0db4\u0dd0\u0dba",hh:"\u0db4\u0dd0\u0dba %d",d:"\u0daf\u0dd2\u0db1\u0dba",dd:"\u0daf\u0dd2\u0db1 %d",M:"\u0db8\u0dcf\u0dc3\u0dba",MM:"\u0db8\u0dcf\u0dc3 %d",y:"\u0dc0\u0dc3\u0dbb",yy:"\u0dc0\u0dc3\u0dbb %d"},dayOfMonthOrdinalParse:/\d{1,2} \u0dc0\u0dd0\u0db1\u0dd2/,ordinal:function(e){return e+" \u0dc0\u0dd0\u0db1\u0dd2"},meridiemParse:/\u0db4\u0dd9\u0dbb \u0dc0\u0dbb\u0dd4|\u0db4\u0dc3\u0dca \u0dc0\u0dbb\u0dd4|\u0db4\u0dd9.\u0dc0|\u0db4.\u0dc0./,isPM:function(e){return "\u0db4.\u0dc0."===e||"\u0db4\u0dc3\u0dca \u0dc0\u0dbb\u0dd4"===e},meridiem:function(e,a,_){return 11<e?_?"\u0db4.\u0dc0.":"\u0db4\u0dc3\u0dca \u0dc0\u0dbb\u0dd4":_?"\u0db4\u0dd9.\u0dc0.":"\u0db4\u0dd9\u0dbb \u0dc0\u0dbb\u0dd4"}}),d="janu\xe1r_febru\xe1r_marec_apr\xedl_m\xe1j_j\xfan_j\xfal_august_september_okt\xf3ber_november_december".split("_"),m="jan_feb_mar_apr_m\xe1j_j\xfan_j\xfal_aug_sep_okt_nov_dec".split("_");function ea(e){return 1<e&&e<5}function j(e,a,_,s){var d=e+" ";switch(_){case"s":return a||s?"p\xe1r sek\xfand":"p\xe1r sekundami";case"ss":return a||s?d+(ea(e)?"sekundy":"sek\xfand"):d+"sekundami";case"m":return a?"min\xfata":s?"min\xfatu":"min\xfatou";case"mm":return a||s?d+(ea(e)?"min\xfaty":"min\xfat"):d+"min\xfatami";case"h":return a?"hodina":s?"hodinu":"hodinou";case"hh":return a||s?d+(ea(e)?"hodiny":"hod\xedn"):d+"hodinami";case"d":return a||s?"de\u0148":"d\u0148om";case"dd":return a||s?d+(ea(e)?"dni":"dn\xed"):d+"d\u0148ami";case"M":return a||s?"mesiac":"mesiacom";case"MM":return a||s?d+(ea(e)?"mesiace":"mesiacov"):d+"mesiacmi";case"y":return a||s?"rok":"rokom";case"yy":return a||s?d+(ea(e)?"roky":"rokov"):d+"rokmi"}}function x(e,a,_,s){var d=e+" ";switch(_){case"s":return a||s?"nekaj sekund":"nekaj sekundami";case"ss":return d+=1===e?a?"sekundo":"sekundi":2===e?a||s?"sekundi":"sekundah":e<5?a||s?"sekunde":"sekundah":"sekund";case"m":return a?"ena minuta":"eno minuto";case"mm":return d+=1===e?a?"minuta":"minuto":2===e?a||s?"minuti":"minutama":e<5?a||s?"minute":"minutami":a||s?"minut":"minutami";case"h":return a?"ena ura":"eno uro";case"hh":return d+=1===e?a?"ura":"uro":2===e?a||s?"uri":"urama":e<5?a||s?"ure":"urami":a||s?"ur":"urami";case"d":return a||s?"en dan":"enim dnem";case"dd":return d+=1===e?a||s?"dan":"dnem":2===e?a||s?"dni":"dnevoma":a||s?"dni":"dnevi";case"M":return a||s?"en mesec":"enim mesecem";case"MM":return d+=1===e?a||s?"mesec":"mesecem":2===e?a||s?"meseca":"mesecema":e<5?a||s?"mesece":"meseci":a||s?"mesecev":"meseci";case"y":return a||s?"eno leto":"enim letom";case"yy":return d+=1===e?a||s?"leto":"letom":2===e?a||s?"leti":"letoma":e<5?a||s?"leta":"leti":a||s?"let":"leti"}}e.defineLocale("sk",{months:d,monthsShort:m,weekdays:"nede\u013ea_pondelok_utorok_streda_\u0161tvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_\u0161t_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_\u0161t_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return "[v nede\u013eu o] LT";case 1:case 2:return "[v] dddd [o] LT";case 3:return "[v stredu o] LT";case 4:return "[vo \u0161tvrtok o] LT";case 5:return "[v piatok o] LT";case 6:return "[v sobotu o] LT"}},lastDay:"[v\u010dera o] LT",lastWeek:function(){switch(this.day()){case 0:return "[minul\xfa nede\u013eu o] LT";case 1:case 2:return "[minul\xfd] dddd [o] LT";case 3:return "[minul\xfa stredu o] LT";case 4:case 5:return "[minul\xfd] dddd [o] LT";case 6:return "[minul\xfa sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:j,ss:j,m:j,mm:j,h:j,hh:j,d:j,dd:j,M:j,MM:j,y:j,yy:j},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_\u010detrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._\u010det._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_\u010de_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return "[v] [nedeljo] [ob] LT";case 3:return "[v] [sredo] [ob] LT";case 6:return "[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return "[v] dddd [ob] LT"}},lastDay:"[v\u010deraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return "[prej\u0161njo] [nedeljo] [ob] LT";case 3:return "[prej\u0161njo] [sredo] [ob] LT";case 6:return "[prej\u0161njo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return "[prej\u0161nji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"\u010dez %s",past:"pred %s",s:x,ss:x,m:x,mm:x,h:x,hh:x,d:x,dd:x,M:x,MM:x,y:x,yy:x},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_N\xebntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_N\xebn_Dhj".split("_"),weekdays:"E Diel_E H\xebn\xeb_E Mart\xeb_E M\xebrkur\xeb_E Enjte_E Premte_E Shtun\xeb".split("_"),weekdaysShort:"Die_H\xebn_Mar_M\xebr_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_M\xeb_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return "M"===e.charAt(0)},meridiem:function(e,a,_){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot n\xeb] LT",nextDay:"[Nes\xebr n\xeb] LT",nextWeek:"dddd [n\xeb] LT",lastDay:"[Dje n\xeb] LT",lastWeek:"dddd [e kaluar n\xeb] LT",sameElse:"L"},relativeTime:{future:"n\xeb %s",past:"%s m\xeb par\xeb",s:"disa sekonda",ss:"%d sekonda",m:"nj\xeb minut\xeb",mm:"%d minuta",h:"nj\xeb or\xeb",hh:"%d or\xeb",d:"nj\xeb dit\xeb",dd:"%d dit\xeb",M:"nj\xeb muaj",MM:"%d muaj",y:"nj\xeb vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});var P={words:{ss:["\u0441\u0435\u043a\u0443\u043d\u0434\u0430","\u0441\u0435\u043a\u0443\u043d\u0434\u0435","\u0441\u0435\u043a\u0443\u043d\u0434\u0438"],m:["\u0458\u0435\u0434\u0430\u043d \u043c\u0438\u043d\u0443\u0442","\u0458\u0435\u0434\u043d\u043e\u0433 \u043c\u0438\u043d\u0443\u0442\u0430"],mm:["\u043c\u0438\u043d\u0443\u0442","\u043c\u0438\u043d\u0443\u0442\u0430","\u043c\u0438\u043d\u0443\u0442\u0430"],h:["\u0458\u0435\u0434\u0430\u043d \u0441\u0430\u0442","\u0458\u0435\u0434\u043d\u043e\u0433 \u0441\u0430\u0442\u0430"],hh:["\u0441\u0430\u0442","\u0441\u0430\u0442\u0430","\u0441\u0430\u0442\u0438"],d:["\u0458\u0435\u0434\u0430\u043d \u0434\u0430\u043d","\u0458\u0435\u0434\u043d\u043e\u0433 \u0434\u0430\u043d\u0430"],dd:["\u0434\u0430\u043d","\u0434\u0430\u043d\u0430","\u0434\u0430\u043d\u0430"],M:["\u0458\u0435\u0434\u0430\u043d \u043c\u0435\u0441\u0435\u0446","\u0458\u0435\u0434\u043d\u043e\u0433 \u043c\u0435\u0441\u0435\u0446\u0430"],MM:["\u043c\u0435\u0441\u0435\u0446","\u043c\u0435\u0441\u0435\u0446\u0430","\u043c\u0435\u0441\u0435\u0446\u0438"],y:["\u0458\u0435\u0434\u043d\u0443 \u0433\u043e\u0434\u0438\u043d\u0443","\u0458\u0435\u0434\u043d\u0435 \u0433\u043e\u0434\u0438\u043d\u0435"],yy:["\u0433\u043e\u0434\u0438\u043d\u0443","\u0433\u043e\u0434\u0438\u043d\u0435","\u0433\u043e\u0434\u0438\u043d\u0430"]},correctGrammaticalCase:function(e,a){return 1<=e%10&&e%10<=4&&(e%100<10||20<=e%100)?e%10==1?a[0]:a[1]:a[2]},translate:function(e,a,_,s){var d=P.words[_];return 1===_.length?"y"===_&&a?"\u0458\u0435\u0434\u043d\u0430 \u0433\u043e\u0434\u0438\u043d\u0430":s||a?d[0]:d[1]:(s=P.correctGrammaticalCase(e,d),"yy"===_&&a&&"\u0433\u043e\u0434\u0438\u043d\u0443"===s?e+" \u0433\u043e\u0434\u0438\u043d\u0430":e+" "+s)}},W=(e.defineLocale("sr-cyrl",{months:"\u0458\u0430\u043d\u0443\u0430\u0440_\u0444\u0435\u0431\u0440\u0443\u0430\u0440_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0438\u043b_\u043c\u0430\u0458_\u0458\u0443\u043d_\u0458\u0443\u043b_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043f\u0442\u0435\u043c\u0431\u0430\u0440_\u043e\u043a\u0442\u043e\u0431\u0430\u0440_\u043d\u043e\u0432\u0435\u043c\u0431\u0430\u0440_\u0434\u0435\u0446\u0435\u043c\u0431\u0430\u0440".split("_"),monthsShort:"\u0458\u0430\u043d._\u0444\u0435\u0431._\u043c\u0430\u0440._\u0430\u043f\u0440._\u043c\u0430\u0458_\u0458\u0443\u043d_\u0458\u0443\u043b_\u0430\u0432\u0433._\u0441\u0435\u043f._\u043e\u043a\u0442._\u043d\u043e\u0432._\u0434\u0435\u0446.".split("_"),monthsParseExact:!0,weekdays:"\u043d\u0435\u0434\u0435\u0459\u0430_\u043f\u043e\u043d\u0435\u0434\u0435\u0459\u0430\u043a_\u0443\u0442\u043e\u0440\u0430\u043a_\u0441\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0440\u0442\u0430\u043a_\u043f\u0435\u0442\u0430\u043a_\u0441\u0443\u0431\u043e\u0442\u0430".split("_"),weekdaysShort:"\u043d\u0435\u0434._\u043f\u043e\u043d._\u0443\u0442\u043e._\u0441\u0440\u0435._\u0447\u0435\u0442._\u043f\u0435\u0442._\u0441\u0443\u0431.".split("_"),weekdaysMin:"\u043d\u0435_\u043f\u043e_\u0443\u0442_\u0441\u0440_\u0447\u0435_\u043f\u0435_\u0441\u0443".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[\u0434\u0430\u043d\u0430\u0441 \u0443] LT",nextDay:"[\u0441\u0443\u0442\u0440\u0430 \u0443] LT",nextWeek:function(){switch(this.day()){case 0:return "[\u0443] [\u043d\u0435\u0434\u0435\u0459\u0443] [\u0443] LT";case 3:return "[\u0443] [\u0441\u0440\u0435\u0434\u0443] [\u0443] LT";case 6:return "[\u0443] [\u0441\u0443\u0431\u043e\u0442\u0443] [\u0443] LT";case 1:case 2:case 4:case 5:return "[\u0443] dddd [\u0443] LT"}},lastDay:"[\u0458\u0443\u0447\u0435 \u0443] LT",lastWeek:function(){return ["[\u043f\u0440\u043e\u0448\u043b\u0435] [\u043d\u0435\u0434\u0435\u0459\u0435] [\u0443] LT","[\u043f\u0440\u043e\u0448\u043b\u043e\u0433] [\u043f\u043e\u043d\u0435\u0434\u0435\u0459\u043a\u0430] [\u0443] LT","[\u043f\u0440\u043e\u0448\u043b\u043e\u0433] [\u0443\u0442\u043e\u0440\u043a\u0430] [\u0443] LT","[\u043f\u0440\u043e\u0448\u043b\u0435] [\u0441\u0440\u0435\u0434\u0435] [\u0443] LT","[\u043f\u0440\u043e\u0448\u043b\u043e\u0433] [\u0447\u0435\u0442\u0432\u0440\u0442\u043a\u0430] [\u0443] LT","[\u043f\u0440\u043e\u0448\u043b\u043e\u0433] [\u043f\u0435\u0442\u043a\u0430] [\u0443] LT","[\u043f\u0440\u043e\u0448\u043b\u0435] [\u0441\u0443\u0431\u043e\u0442\u0435] [\u0443] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"\u0437\u0430 %s",past:"\u043f\u0440\u0435 %s",s:"\u043d\u0435\u043a\u043e\u043b\u0438\u043a\u043e \u0441\u0435\u043a\u0443\u043d\u0434\u0438",ss:P.translate,m:P.translate,mm:P.translate,h:P.translate,hh:P.translate,d:P.translate,dd:P.translate,M:P.translate,MM:P.translate,y:P.translate,yy:P.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),{words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],d:["jedan dan","jednog dana"],dd:["dan","dana","dana"],M:["jedan mesec","jednog meseca"],MM:["mesec","meseca","meseci"],y:["jednu godinu","jedne godine"],yy:["godinu","godine","godina"]},correctGrammaticalCase:function(e,a){return 1<=e%10&&e%10<=4&&(e%100<10||20<=e%100)?e%10==1?a[0]:a[1]:a[2]},translate:function(e,a,_,s){var d=W.words[_];return 1===_.length?"y"===_&&a?"jedna godina":s||a?d[0]:d[1]:(s=W.correctGrammaticalCase(e,d),"yy"===_&&a&&"godinu"===s?e+" godina":e+" "+s)}}),aa=(e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_\u010detvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._\u010det._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_\u010de_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return "[u] [nedelju] [u] LT";case 3:return "[u] [sredu] [u] LT";case 6:return "[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return "[u] dddd [u] LT"}},lastDay:"[ju\u010de u] LT",lastWeek:function(){return ["[pro\u0161le] [nedelje] [u] LT","[pro\u0161log] [ponedeljka] [u] LT","[pro\u0161log] [utorka] [u] LT","[pro\u0161le] [srede] [u] LT","[pro\u0161log] [\u010detvrtka] [u] LT","[pro\u0161log] [petka] [u] LT","[pro\u0161le] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:W.translate,m:W.translate,mm:W.translate,h:W.translate,hh:W.translate,d:W.translate,dd:W.translate,M:W.translate,MM:W.translate,y:W.translate,yy:W.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,a,_){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,a){return 12===e&&(e=0),"ekuseni"===a?e:"emini"===a?11<=e?e:e+12:"entsambama"===a||"ebusuku"===a?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}}),e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"s\xf6ndag_m\xe5ndag_tisdag_onsdag_torsdag_fredag_l\xf6rdag".split("_"),weekdaysShort:"s\xf6n_m\xe5n_tis_ons_tor_fre_l\xf6r".split("_"),weekdaysMin:"s\xf6_m\xe5_ti_on_to_fr_l\xf6".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Ig\xe5r] LT",nextWeek:"[P\xe5] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"f\xf6r %s sedan",s:"n\xe5gra sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en m\xe5nad",MM:"%d m\xe5nader",y:"ett \xe5r",yy:"%d \xe5r"},dayOfMonthOrdinalParse:/\d{1,2}(\:e|\:a)/,ordinal:function(e){var a=e%10;return e+(1!=~~(e%100/10)&&(1==a||2==a)?":a":":e")},week:{dow:1,doy:4}}),e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"hh:mm A",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"siku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}}),{1:"\u0be7",2:"\u0be8",3:"\u0be9",4:"\u0bea",5:"\u0beb",6:"\u0bec",7:"\u0bed",8:"\u0bee",9:"\u0bef",0:"\u0be6"}),_a={"\u0be7":"1","\u0be8":"2","\u0be9":"3","\u0bea":"4","\u0beb":"5","\u0bec":"6","\u0bed":"7","\u0bee":"8","\u0bef":"9","\u0be6":"0"},sa=(e.defineLocale("ta",{months:"\u0b9c\u0ba9\u0bb5\u0bb0\u0bbf_\u0baa\u0bbf\u0baa\u0bcd\u0bb0\u0bb5\u0bb0\u0bbf_\u0bae\u0bbe\u0bb0\u0bcd\u0b9a\u0bcd_\u0b8f\u0baa\u0bcd\u0bb0\u0bb2\u0bcd_\u0bae\u0bc7_\u0b9c\u0bc2\u0ba9\u0bcd_\u0b9c\u0bc2\u0bb2\u0bc8_\u0b86\u0b95\u0bb8\u0bcd\u0b9f\u0bcd_\u0b9a\u0bc6\u0baa\u0bcd\u0b9f\u0bc6\u0bae\u0bcd\u0baa\u0bb0\u0bcd_\u0b85\u0b95\u0bcd\u0b9f\u0bc7\u0bbe\u0baa\u0bb0\u0bcd_\u0ba8\u0bb5\u0bae\u0bcd\u0baa\u0bb0\u0bcd_\u0b9f\u0bbf\u0b9a\u0bae\u0bcd\u0baa\u0bb0\u0bcd".split("_"),monthsShort:"\u0b9c\u0ba9\u0bb5\u0bb0\u0bbf_\u0baa\u0bbf\u0baa\u0bcd\u0bb0\u0bb5\u0bb0\u0bbf_\u0bae\u0bbe\u0bb0\u0bcd\u0b9a\u0bcd_\u0b8f\u0baa\u0bcd\u0bb0\u0bb2\u0bcd_\u0bae\u0bc7_\u0b9c\u0bc2\u0ba9\u0bcd_\u0b9c\u0bc2\u0bb2\u0bc8_\u0b86\u0b95\u0bb8\u0bcd\u0b9f\u0bcd_\u0b9a\u0bc6\u0baa\u0bcd\u0b9f\u0bc6\u0bae\u0bcd\u0baa\u0bb0\u0bcd_\u0b85\u0b95\u0bcd\u0b9f\u0bc7\u0bbe\u0baa\u0bb0\u0bcd_\u0ba8\u0bb5\u0bae\u0bcd\u0baa\u0bb0\u0bcd_\u0b9f\u0bbf\u0b9a\u0bae\u0bcd\u0baa\u0bb0\u0bcd".split("_"),weekdays:"\u0b9e\u0bbe\u0baf\u0bbf\u0bb1\u0bcd\u0bb1\u0bc1\u0b95\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8_\u0ba4\u0bbf\u0b99\u0bcd\u0b95\u0b9f\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8_\u0b9a\u0bc6\u0bb5\u0bcd\u0bb5\u0bbe\u0baf\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8_\u0baa\u0bc1\u0ba4\u0ba9\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8_\u0bb5\u0bbf\u0baf\u0bbe\u0bb4\u0b95\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8_\u0bb5\u0bc6\u0bb3\u0bcd\u0bb3\u0bbf\u0b95\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8_\u0b9a\u0ba9\u0bbf\u0b95\u0bcd\u0b95\u0bbf\u0bb4\u0bae\u0bc8".split("_"),weekdaysShort:"\u0b9e\u0bbe\u0baf\u0bbf\u0bb1\u0bc1_\u0ba4\u0bbf\u0b99\u0bcd\u0b95\u0bb3\u0bcd_\u0b9a\u0bc6\u0bb5\u0bcd\u0bb5\u0bbe\u0baf\u0bcd_\u0baa\u0bc1\u0ba4\u0ba9\u0bcd_\u0bb5\u0bbf\u0baf\u0bbe\u0bb4\u0ba9\u0bcd_\u0bb5\u0bc6\u0bb3\u0bcd\u0bb3\u0bbf_\u0b9a\u0ba9\u0bbf".split("_"),weekdaysMin:"\u0b9e\u0bbe_\u0ba4\u0bbf_\u0b9a\u0bc6_\u0baa\u0bc1_\u0bb5\u0bbf_\u0bb5\u0bc6_\u0b9a".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[\u0b87\u0ba9\u0bcd\u0bb1\u0bc1] LT",nextDay:"[\u0ba8\u0bbe\u0bb3\u0bc8] LT",nextWeek:"dddd, LT",lastDay:"[\u0ba8\u0bc7\u0bb1\u0bcd\u0bb1\u0bc1] LT",lastWeek:"[\u0b95\u0b9f\u0ba8\u0bcd\u0ba4 \u0bb5\u0bbe\u0bb0\u0bae\u0bcd] dddd, LT",sameElse:"L"},relativeTime:{future:"%s \u0b87\u0bb2\u0bcd",past:"%s \u0bae\u0bc1\u0ba9\u0bcd",s:"\u0b92\u0bb0\u0bc1 \u0b9a\u0bbf\u0bb2 \u0bb5\u0bbf\u0ba8\u0bbe\u0b9f\u0bbf\u0b95\u0bb3\u0bcd",ss:"%d \u0bb5\u0bbf\u0ba8\u0bbe\u0b9f\u0bbf\u0b95\u0bb3\u0bcd",m:"\u0b92\u0bb0\u0bc1 \u0ba8\u0bbf\u0bae\u0bbf\u0b9f\u0bae\u0bcd",mm:"%d \u0ba8\u0bbf\u0bae\u0bbf\u0b9f\u0b99\u0bcd\u0b95\u0bb3\u0bcd",h:"\u0b92\u0bb0\u0bc1 \u0bae\u0ba3\u0bbf \u0ba8\u0bc7\u0bb0\u0bae\u0bcd",hh:"%d \u0bae\u0ba3\u0bbf \u0ba8\u0bc7\u0bb0\u0bae\u0bcd",d:"\u0b92\u0bb0\u0bc1 \u0ba8\u0bbe\u0bb3\u0bcd",dd:"%d \u0ba8\u0bbe\u0b9f\u0bcd\u0b95\u0bb3\u0bcd",M:"\u0b92\u0bb0\u0bc1 \u0bae\u0bbe\u0ba4\u0bae\u0bcd",MM:"%d \u0bae\u0bbe\u0ba4\u0b99\u0bcd\u0b95\u0bb3\u0bcd",y:"\u0b92\u0bb0\u0bc1 \u0bb5\u0bb0\u0bc1\u0b9f\u0bae\u0bcd",yy:"%d \u0b86\u0ba3\u0bcd\u0b9f\u0bc1\u0b95\u0bb3\u0bcd"},dayOfMonthOrdinalParse:/\d{1,2}\u0bb5\u0ba4\u0bc1/,ordinal:function(e){return e+"\u0bb5\u0ba4\u0bc1"},preparse:function(e){return e.replace(/[\u0be7\u0be8\u0be9\u0bea\u0beb\u0bec\u0bed\u0bee\u0bef\u0be6]/g,function(e){return _a[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return aa[e]})},meridiemParse:/\u0baf\u0bbe\u0bae\u0bae\u0bcd|\u0bb5\u0bc8\u0b95\u0bb1\u0bc8|\u0b95\u0bbe\u0bb2\u0bc8|\u0ba8\u0ba3\u0bcd\u0baa\u0b95\u0bb2\u0bcd|\u0b8e\u0bb1\u0bcd\u0baa\u0bbe\u0b9f\u0bc1|\u0bae\u0bbe\u0bb2\u0bc8/,meridiem:function(e,a,_){return e<2?" \u0baf\u0bbe\u0bae\u0bae\u0bcd":e<6?" \u0bb5\u0bc8\u0b95\u0bb1\u0bc8":e<10?" \u0b95\u0bbe\u0bb2\u0bc8":e<14?" \u0ba8\u0ba3\u0bcd\u0baa\u0b95\u0bb2\u0bcd":e<18?" \u0b8e\u0bb1\u0bcd\u0baa\u0bbe\u0b9f\u0bc1":e<22?" \u0bae\u0bbe\u0bb2\u0bc8":" \u0baf\u0bbe\u0bae\u0bae\u0bcd"},meridiemHour:function(e,a){return 12===e&&(e=0),"\u0baf\u0bbe\u0bae\u0bae\u0bcd"===a?e<2?e:e+12:"\u0bb5\u0bc8\u0b95\u0bb1\u0bc8"===a||"\u0b95\u0bbe\u0bb2\u0bc8"===a||"\u0ba8\u0ba3\u0bcd\u0baa\u0b95\u0bb2\u0bcd"===a&&10<=e?e:e+12},week:{dow:0,doy:6}}),e.defineLocale("te",{months:"\u0c1c\u0c28\u0c35\u0c30\u0c3f_\u0c2b\u0c3f\u0c2c\u0c4d\u0c30\u0c35\u0c30\u0c3f_\u0c2e\u0c3e\u0c30\u0c4d\u0c1a\u0c3f_\u0c0f\u0c2a\u0c4d\u0c30\u0c3f\u0c32\u0c4d_\u0c2e\u0c47_\u0c1c\u0c42\u0c28\u0c4d_\u0c1c\u0c41\u0c32\u0c48_\u0c06\u0c17\u0c38\u0c4d\u0c1f\u0c41_\u0c38\u0c46\u0c2a\u0c4d\u0c1f\u0c46\u0c02\u0c2c\u0c30\u0c4d_\u0c05\u0c15\u0c4d\u0c1f\u0c4b\u0c2c\u0c30\u0c4d_\u0c28\u0c35\u0c02\u0c2c\u0c30\u0c4d_\u0c21\u0c3f\u0c38\u0c46\u0c02\u0c2c\u0c30\u0c4d".split("_"),monthsShort:"\u0c1c\u0c28._\u0c2b\u0c3f\u0c2c\u0c4d\u0c30._\u0c2e\u0c3e\u0c30\u0c4d\u0c1a\u0c3f_\u0c0f\u0c2a\u0c4d\u0c30\u0c3f._\u0c2e\u0c47_\u0c1c\u0c42\u0c28\u0c4d_\u0c1c\u0c41\u0c32\u0c48_\u0c06\u0c17._\u0c38\u0c46\u0c2a\u0c4d._\u0c05\u0c15\u0c4d\u0c1f\u0c4b._\u0c28\u0c35._\u0c21\u0c3f\u0c38\u0c46.".split("_"),monthsParseExact:!0,weekdays:"\u0c06\u0c26\u0c3f\u0c35\u0c3e\u0c30\u0c02_\u0c38\u0c4b\u0c2e\u0c35\u0c3e\u0c30\u0c02_\u0c2e\u0c02\u0c17\u0c33\u0c35\u0c3e\u0c30\u0c02_\u0c2c\u0c41\u0c27\u0c35\u0c3e\u0c30\u0c02_\u0c17\u0c41\u0c30\u0c41\u0c35\u0c3e\u0c30\u0c02_\u0c36\u0c41\u0c15\u0c4d\u0c30\u0c35\u0c3e\u0c30\u0c02_\u0c36\u0c28\u0c3f\u0c35\u0c3e\u0c30\u0c02".split("_"),weekdaysShort:"\u0c06\u0c26\u0c3f_\u0c38\u0c4b\u0c2e_\u0c2e\u0c02\u0c17\u0c33_\u0c2c\u0c41\u0c27_\u0c17\u0c41\u0c30\u0c41_\u0c36\u0c41\u0c15\u0c4d\u0c30_\u0c36\u0c28\u0c3f".split("_"),weekdaysMin:"\u0c06_\u0c38\u0c4b_\u0c2e\u0c02_\u0c2c\u0c41_\u0c17\u0c41_\u0c36\u0c41_\u0c36".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[\u0c28\u0c47\u0c21\u0c41] LT",nextDay:"[\u0c30\u0c47\u0c2a\u0c41] LT",nextWeek:"dddd, LT",lastDay:"[\u0c28\u0c3f\u0c28\u0c4d\u0c28] LT",lastWeek:"[\u0c17\u0c24] dddd, LT",sameElse:"L"},relativeTime:{future:"%s \u0c32\u0c4b",past:"%s \u0c15\u0c4d\u0c30\u0c3f\u0c24\u0c02",s:"\u0c15\u0c4a\u0c28\u0c4d\u0c28\u0c3f \u0c15\u0c4d\u0c37\u0c23\u0c3e\u0c32\u0c41",ss:"%d \u0c38\u0c46\u0c15\u0c28\u0c4d\u0c32\u0c41",m:"\u0c12\u0c15 \u0c28\u0c3f\u0c2e\u0c3f\u0c37\u0c02",mm:"%d \u0c28\u0c3f\u0c2e\u0c3f\u0c37\u0c3e\u0c32\u0c41",h:"\u0c12\u0c15 \u0c17\u0c02\u0c1f",hh:"%d \u0c17\u0c02\u0c1f\u0c32\u0c41",d:"\u0c12\u0c15 \u0c30\u0c4b\u0c1c\u0c41",dd:"%d \u0c30\u0c4b\u0c1c\u0c41\u0c32\u0c41",M:"\u0c12\u0c15 \u0c28\u0c46\u0c32",MM:"%d \u0c28\u0c46\u0c32\u0c32\u0c41",y:"\u0c12\u0c15 \u0c38\u0c02\u0c35\u0c24\u0c4d\u0c38\u0c30\u0c02",yy:"%d \u0c38\u0c02\u0c35\u0c24\u0c4d\u0c38\u0c30\u0c3e\u0c32\u0c41"},dayOfMonthOrdinalParse:/\d{1,2}\u0c35/,ordinal:"%d\u0c35",meridiemParse:/\u0c30\u0c3e\u0c24\u0c4d\u0c30\u0c3f|\u0c09\u0c26\u0c2f\u0c02|\u0c2e\u0c27\u0c4d\u0c2f\u0c3e\u0c39\u0c4d\u0c28\u0c02|\u0c38\u0c3e\u0c2f\u0c02\u0c24\u0c4d\u0c30\u0c02/,meridiemHour:function(e,a){return 12===e&&(e=0),"\u0c30\u0c3e\u0c24\u0c4d\u0c30\u0c3f"===a?e<4?e:e+12:"\u0c09\u0c26\u0c2f\u0c02"===a?e:"\u0c2e\u0c27\u0c4d\u0c2f\u0c3e\u0c39\u0c4d\u0c28\u0c02"===a?10<=e?e:e+12:"\u0c38\u0c3e\u0c2f\u0c02\u0c24\u0c4d\u0c30\u0c02"===a?e+12:void 0},meridiem:function(e,a,_){return e<4?"\u0c30\u0c3e\u0c24\u0c4d\u0c30\u0c3f":e<10?"\u0c09\u0c26\u0c2f\u0c02":e<17?"\u0c2e\u0c27\u0c4d\u0c2f\u0c3e\u0c39\u0c4d\u0c28\u0c02":e<20?"\u0c38\u0c3e\u0c2f\u0c02\u0c24\u0c4d\u0c30\u0c02":"\u0c30\u0c3e\u0c24\u0c4d\u0c30\u0c3f"},week:{dow:0,doy:6}}),e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Ju\xf1u_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"segundu balun",ss:"segundu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var a=e%10;return e+(1==~~(e%100/10)?"th":1==a?"st":2==a?"nd":3==a?"rd":"th")},week:{dow:1,doy:4}}),{0:"-\u0443\u043c",1:"-\u0443\u043c",2:"-\u044e\u043c",3:"-\u044e\u043c",4:"-\u0443\u043c",5:"-\u0443\u043c",6:"-\u0443\u043c",7:"-\u0443\u043c",8:"-\u0443\u043c",9:"-\u0443\u043c",10:"-\u0443\u043c",12:"-\u0443\u043c",13:"-\u0443\u043c",20:"-\u0443\u043c",30:"-\u044e\u043c",40:"-\u0443\u043c",50:"-\u0443\u043c",60:"-\u0443\u043c",70:"-\u0443\u043c",80:"-\u0443\u043c",90:"-\u0443\u043c",100:"-\u0443\u043c"}),da=(e.defineLocale("tg",{months:{format:"\u044f\u043d\u0432\u0430\u0440\u0438_\u0444\u0435\u0432\u0440\u0430\u043b\u0438_\u043c\u0430\u0440\u0442\u0438_\u0430\u043f\u0440\u0435\u043b\u0438_\u043c\u0430\u0439\u0438_\u0438\u044e\u043d\u0438_\u0438\u044e\u043b\u0438_\u0430\u0432\u0433\u0443\u0441\u0442\u0438_\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u0438_\u043e\u043a\u0442\u044f\u0431\u0440\u0438_\u043d\u043e\u044f\u0431\u0440\u0438_\u0434\u0435\u043a\u0430\u0431\u0440\u0438".split("_"),standalone:"\u044f\u043d\u0432\u0430\u0440_\u0444\u0435\u0432\u0440\u0430\u043b_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0435\u043b_\u043c\u0430\u0439_\u0438\u044e\u043d_\u0438\u044e\u043b_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043d\u0442\u044f\u0431\u0440_\u043e\u043a\u0442\u044f\u0431\u0440_\u043d\u043e\u044f\u0431\u0440_\u0434\u0435\u043a\u0430\u0431\u0440".split("_")},monthsShort:"\u044f\u043d\u0432_\u0444\u0435\u0432_\u043c\u0430\u0440_\u0430\u043f\u0440_\u043c\u0430\u0439_\u0438\u044e\u043d_\u0438\u044e\u043b_\u0430\u0432\u0433_\u0441\u0435\u043d_\u043e\u043a\u0442_\u043d\u043e\u044f_\u0434\u0435\u043a".split("_"),weekdays:"\u044f\u043a\u0448\u0430\u043d\u0431\u0435_\u0434\u0443\u0448\u0430\u043d\u0431\u0435_\u0441\u0435\u0448\u0430\u043d\u0431\u0435_\u0447\u043e\u0440\u0448\u0430\u043d\u0431\u0435_\u043f\u0430\u043d\u04b7\u0448\u0430\u043d\u0431\u0435_\u04b7\u0443\u043c\u044a\u0430_\u0448\u0430\u043d\u0431\u0435".split("_"),weekdaysShort:"\u044f\u0448\u0431_\u0434\u0448\u0431_\u0441\u0448\u0431_\u0447\u0448\u0431_\u043f\u0448\u0431_\u04b7\u0443\u043c_\u0448\u043d\u0431".split("_"),weekdaysMin:"\u044f\u0448_\u0434\u0448_\u0441\u0448_\u0447\u0448_\u043f\u0448_\u04b7\u043c_\u0448\u0431".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[\u0418\u043c\u0440\u04ef\u0437 \u0441\u043e\u0430\u0442\u0438] LT",nextDay:"[\u0424\u0430\u0440\u0434\u043e \u0441\u043e\u0430\u0442\u0438] LT",lastDay:"[\u0414\u0438\u0440\u04ef\u0437 \u0441\u043e\u0430\u0442\u0438] LT",nextWeek:"dddd[\u0438] [\u04b3\u0430\u0444\u0442\u0430\u0438 \u043e\u044f\u043d\u0434\u0430 \u0441\u043e\u0430\u0442\u0438] LT",lastWeek:"dddd[\u0438] [\u04b3\u0430\u0444\u0442\u0430\u0438 \u0433\u0443\u0437\u0430\u0448\u0442\u0430 \u0441\u043e\u0430\u0442\u0438] LT",sameElse:"L"},relativeTime:{future:"\u0431\u0430\u044a\u0434\u0438 %s",past:"%s \u043f\u0435\u0448",s:"\u044f\u043a\u0447\u0430\u043d\u0434 \u0441\u043e\u043d\u0438\u044f",m:"\u044f\u043a \u0434\u0430\u049b\u0438\u049b\u0430",mm:"%d \u0434\u0430\u049b\u0438\u049b\u0430",h:"\u044f\u043a \u0441\u043e\u0430\u0442",hh:"%d \u0441\u043e\u0430\u0442",d:"\u044f\u043a \u0440\u04ef\u0437",dd:"%d \u0440\u04ef\u0437",M:"\u044f\u043a \u043c\u043e\u04b3",MM:"%d \u043c\u043e\u04b3",y:"\u044f\u043a \u0441\u043e\u043b",yy:"%d \u0441\u043e\u043b"},meridiemParse:/\u0448\u0430\u0431|\u0441\u0443\u0431\u04b3|\u0440\u04ef\u0437|\u0431\u0435\u0433\u043e\u04b3/,meridiemHour:function(e,a){return 12===e&&(e=0),"\u0448\u0430\u0431"===a?e<4?e:e+12:"\u0441\u0443\u0431\u04b3"===a?e:"\u0440\u04ef\u0437"===a?11<=e?e:e+12:"\u0431\u0435\u0433\u043e\u04b3"===a?e+12:void 0},meridiem:function(e,a,_){return e<4?"\u0448\u0430\u0431":e<11?"\u0441\u0443\u0431\u04b3":e<16?"\u0440\u04ef\u0437":e<19?"\u0431\u0435\u0433\u043e\u04b3":"\u0448\u0430\u0431"},dayOfMonthOrdinalParse:/\d{1,2}-(\u0443\u043c|\u044e\u043c)/,ordinal:function(e){return e+(sa[e]||sa[e%10]||sa[100<=e?100:null])},week:{dow:1,doy:7}}),e.defineLocale("th",{months:"\u0e21\u0e01\u0e23\u0e32\u0e04\u0e21_\u0e01\u0e38\u0e21\u0e20\u0e32\u0e1e\u0e31\u0e19\u0e18\u0e4c_\u0e21\u0e35\u0e19\u0e32\u0e04\u0e21_\u0e40\u0e21\u0e29\u0e32\u0e22\u0e19_\u0e1e\u0e24\u0e29\u0e20\u0e32\u0e04\u0e21_\u0e21\u0e34\u0e16\u0e38\u0e19\u0e32\u0e22\u0e19_\u0e01\u0e23\u0e01\u0e0e\u0e32\u0e04\u0e21_\u0e2a\u0e34\u0e07\u0e2b\u0e32\u0e04\u0e21_\u0e01\u0e31\u0e19\u0e22\u0e32\u0e22\u0e19_\u0e15\u0e38\u0e25\u0e32\u0e04\u0e21_\u0e1e\u0e24\u0e28\u0e08\u0e34\u0e01\u0e32\u0e22\u0e19_\u0e18\u0e31\u0e19\u0e27\u0e32\u0e04\u0e21".split("_"),monthsShort:"\u0e21.\u0e04._\u0e01.\u0e1e._\u0e21\u0e35.\u0e04._\u0e40\u0e21.\u0e22._\u0e1e.\u0e04._\u0e21\u0e34.\u0e22._\u0e01.\u0e04._\u0e2a.\u0e04._\u0e01.\u0e22._\u0e15.\u0e04._\u0e1e.\u0e22._\u0e18.\u0e04.".split("_"),monthsParseExact:!0,weekdays:"\u0e2d\u0e32\u0e17\u0e34\u0e15\u0e22\u0e4c_\u0e08\u0e31\u0e19\u0e17\u0e23\u0e4c_\u0e2d\u0e31\u0e07\u0e04\u0e32\u0e23_\u0e1e\u0e38\u0e18_\u0e1e\u0e24\u0e2b\u0e31\u0e2a\u0e1a\u0e14\u0e35_\u0e28\u0e38\u0e01\u0e23\u0e4c_\u0e40\u0e2a\u0e32\u0e23\u0e4c".split("_"),weekdaysShort:"\u0e2d\u0e32\u0e17\u0e34\u0e15\u0e22\u0e4c_\u0e08\u0e31\u0e19\u0e17\u0e23\u0e4c_\u0e2d\u0e31\u0e07\u0e04\u0e32\u0e23_\u0e1e\u0e38\u0e18_\u0e1e\u0e24\u0e2b\u0e31\u0e2a_\u0e28\u0e38\u0e01\u0e23\u0e4c_\u0e40\u0e2a\u0e32\u0e23\u0e4c".split("_"),weekdaysMin:"\u0e2d\u0e32._\u0e08._\u0e2d._\u0e1e._\u0e1e\u0e24._\u0e28._\u0e2a.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY \u0e40\u0e27\u0e25\u0e32 H:mm",LLLL:"\u0e27\u0e31\u0e19dddd\u0e17\u0e35\u0e48 D MMMM YYYY \u0e40\u0e27\u0e25\u0e32 H:mm"},meridiemParse:/\u0e01\u0e48\u0e2d\u0e19\u0e40\u0e17\u0e35\u0e48\u0e22\u0e07|\u0e2b\u0e25\u0e31\u0e07\u0e40\u0e17\u0e35\u0e48\u0e22\u0e07/,isPM:function(e){return "\u0e2b\u0e25\u0e31\u0e07\u0e40\u0e17\u0e35\u0e48\u0e22\u0e07"===e},meridiem:function(e,a,_){return e<12?"\u0e01\u0e48\u0e2d\u0e19\u0e40\u0e17\u0e35\u0e48\u0e22\u0e07":"\u0e2b\u0e25\u0e31\u0e07\u0e40\u0e17\u0e35\u0e48\u0e22\u0e07"},calendar:{sameDay:"[\u0e27\u0e31\u0e19\u0e19\u0e35\u0e49 \u0e40\u0e27\u0e25\u0e32] LT",nextDay:"[\u0e1e\u0e23\u0e38\u0e48\u0e07\u0e19\u0e35\u0e49 \u0e40\u0e27\u0e25\u0e32] LT",nextWeek:"dddd[\u0e2b\u0e19\u0e49\u0e32 \u0e40\u0e27\u0e25\u0e32] LT",lastDay:"[\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e27\u0e32\u0e19\u0e19\u0e35\u0e49 \u0e40\u0e27\u0e25\u0e32] LT",lastWeek:"[\u0e27\u0e31\u0e19]dddd[\u0e17\u0e35\u0e48\u0e41\u0e25\u0e49\u0e27 \u0e40\u0e27\u0e25\u0e32] LT",sameElse:"L"},relativeTime:{future:"\u0e2d\u0e35\u0e01 %s",past:"%s\u0e17\u0e35\u0e48\u0e41\u0e25\u0e49\u0e27",s:"\u0e44\u0e21\u0e48\u0e01\u0e35\u0e48\u0e27\u0e34\u0e19\u0e32\u0e17\u0e35",ss:"%d \u0e27\u0e34\u0e19\u0e32\u0e17\u0e35",m:"1 \u0e19\u0e32\u0e17\u0e35",mm:"%d \u0e19\u0e32\u0e17\u0e35",h:"1 \u0e0a\u0e31\u0e48\u0e27\u0e42\u0e21\u0e07",hh:"%d \u0e0a\u0e31\u0e48\u0e27\u0e42\u0e21\u0e07",d:"1 \u0e27\u0e31\u0e19",dd:"%d \u0e27\u0e31\u0e19",w:"1 \u0e2a\u0e31\u0e1b\u0e14\u0e32\u0e2b\u0e4c",ww:"%d \u0e2a\u0e31\u0e1b\u0e14\u0e32\u0e2b\u0e4c",M:"1 \u0e40\u0e14\u0e37\u0e2d\u0e19",MM:"%d \u0e40\u0e14\u0e37\u0e2d\u0e19",y:"1 \u0e1b\u0e35",yy:"%d \u0e1b\u0e35"}}),{1:"'inji",5:"'inji",8:"'inji",70:"'inji",80:"'inji",2:"'nji",7:"'nji",20:"'nji",50:"'nji",3:"'\xfcnji",4:"'\xfcnji",100:"'\xfcnji",6:"'njy",9:"'unjy",10:"'unjy",30:"'unjy",60:"'ynjy",90:"'ynjy"}),ta=(e.defineLocale("tk",{months:"\xddanwar_Fewral_Mart_Aprel_Ma\xfd_I\xfdun_I\xfdul_Awgust_Sent\xfdabr_Okt\xfdabr_No\xfdabr_Dekabr".split("_"),monthsShort:"\xddan_Few_Mar_Apr_Ma\xfd_I\xfdn_I\xfdl_Awg_Sen_Okt_No\xfd_Dek".split("_"),weekdays:"\xddek\u015fenbe_Du\u015fenbe_Si\u015fenbe_\xc7ar\u015fenbe_Pen\u015fenbe_Anna_\u015eenbe".split("_"),weekdaysShort:"\xddek_Du\u015f_Si\u015f_\xc7ar_Pen_Ann_\u015een".split("_"),weekdaysMin:"\xddk_D\u015f_S\u015f_\xc7r_Pn_An_\u015en".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bug\xfcn sagat] LT",nextDay:"[ertir sagat] LT",nextWeek:"[indiki] dddd [sagat] LT",lastDay:"[d\xfc\xfdn] LT",lastWeek:"[ge\xe7en] dddd [sagat] LT",sameElse:"L"},relativeTime:{future:"%s so\u0148",past:"%s \xf6\u0148",s:"birn\xe4\xe7e sekunt",m:"bir minut",mm:"%d minut",h:"bir sagat",hh:"%d sagat",d:"bir g\xfcn",dd:"%d g\xfcn",M:"bir a\xfd",MM:"%d a\xfd",y:"bir \xfdyl",yy:"%d \xfdyl"},ordinal:function(e,a){switch(a){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'unjy";var _=e%10;return e+(da[_]||da[e%100-_]||da[100<=e?100:null])}},week:{dow:1,doy:7}}),e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}}),"pagh_wa\u2019_cha\u2019_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_"));function na(e,a,_,s){var d=function(e){var a=Math.floor(e%1e3/100),_=Math.floor(e%100/10),e=e%10,s="";0<a&&(s+=ta[a]+"vatlh");0<_&&(s+=(""!==s?" ":"")+ta[_]+"maH");0<e&&(s+=(""!==s?" ":"")+ta[e]);return ""===s?"pagh":s}(e);switch(_){case"ss":return d+" lup";case"mm":return d+" tup";case"hh":return d+" rep";case"dd":return d+" jaj";case"MM":return d+" jar";case"yy":return d+" DIS"}}e.defineLocale("tlh",{months:"tera\u2019 jar wa\u2019_tera\u2019 jar cha\u2019_tera\u2019 jar wej_tera\u2019 jar loS_tera\u2019 jar vagh_tera\u2019 jar jav_tera\u2019 jar Soch_tera\u2019 jar chorgh_tera\u2019 jar Hut_tera\u2019 jar wa\u2019maH_tera\u2019 jar wa\u2019maH wa\u2019_tera\u2019 jar wa\u2019maH cha\u2019".split("_"),monthsShort:"jar wa\u2019_jar cha\u2019_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa\u2019maH_jar wa\u2019maH wa\u2019_jar wa\u2019maH cha\u2019".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa\u2019leS] LT",nextWeek:"LLL",lastDay:"[wa\u2019Hu\u2019] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var a=e;return a=-1!==e.indexOf("jaj")?a.slice(0,-3)+"leS":-1!==e.indexOf("jar")?a.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?a.slice(0,-3)+"nem":a+" pIq"},past:function(e){var a=e;return a=-1!==e.indexOf("jaj")?a.slice(0,-3)+"Hu\u2019":-1!==e.indexOf("jar")?a.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?a.slice(0,-3)+"ben":a+" ret"},s:"puS lup",ss:na,m:"wa\u2019 tup",mm:na,h:"wa\u2019 rep",hh:na,d:"wa\u2019 jaj",dd:na,M:"wa\u2019 jar",MM:na,y:"wa\u2019 DIS",yy:na},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});var ra={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'\xfcnc\xfc",4:"'\xfcnc\xfc",100:"'\xfcnc\xfc",6:"'nc\u0131",9:"'uncu",10:"'uncu",30:"'uncu",60:"'\u0131nc\u0131",90:"'\u0131nc\u0131"};function A(e,a,_,s){e={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n m\xedut","'iens m\xedut"],mm:[e+" m\xeduts",e+" m\xeduts"],h:["'n \xfeora","'iensa \xfeora"],hh:[e+" \xfeoras",e+" \xfeoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return s||a?e[_][0]:e[_][1]}function O(e,a,_){return "m"===_?a?"\u0445\u0432\u0438\u043b\u0438\u043d\u0430":"\u0445\u0432\u0438\u043b\u0438\u043d\u0443":"h"===_?a?"\u0433\u043e\u0434\u0438\u043d\u0430":"\u0433\u043e\u0434\u0438\u043d\u0443":e+" "+(e=+e,a=(a={ss:a?"\u0441\u0435\u043a\u0443\u043d\u0434\u0430_\u0441\u0435\u043a\u0443\u043d\u0434\u0438_\u0441\u0435\u043a\u0443\u043d\u0434":"\u0441\u0435\u043a\u0443\u043d\u0434\u0443_\u0441\u0435\u043a\u0443\u043d\u0434\u0438_\u0441\u0435\u043a\u0443\u043d\u0434",mm:a?"\u0445\u0432\u0438\u043b\u0438\u043d\u0430_\u0445\u0432\u0438\u043b\u0438\u043d\u0438_\u0445\u0432\u0438\u043b\u0438\u043d":"\u0445\u0432\u0438\u043b\u0438\u043d\u0443_\u0445\u0432\u0438\u043b\u0438\u043d\u0438_\u0445\u0432\u0438\u043b\u0438\u043d",hh:a?"\u0433\u043e\u0434\u0438\u043d\u0430_\u0433\u043e\u0434\u0438\u043d\u0438_\u0433\u043e\u0434\u0438\u043d":"\u0433\u043e\u0434\u0438\u043d\u0443_\u0433\u043e\u0434\u0438\u043d\u0438_\u0433\u043e\u0434\u0438\u043d",dd:"\u0434\u0435\u043d\u044c_\u0434\u043d\u0456_\u0434\u043d\u0456\u0432",MM:"\u043c\u0456\u0441\u044f\u0446\u044c_\u043c\u0456\u0441\u044f\u0446\u0456_\u043c\u0456\u0441\u044f\u0446\u0456\u0432",yy:"\u0440\u0456\u043a_\u0440\u043e\u043a\u0438_\u0440\u043e\u043a\u0456\u0432"}[_]).split("_"),e%10==1&&e%100!=11?a[0]:2<=e%10&&e%10<=4&&(e%100<10||20<=e%100)?a[1]:a[2])}function ia(e){return function(){return e+"\u043e"+(11===this.hours()?"\u0431":"")+"] LT"}}e.defineLocale("tr",{months:"Ocak_\u015eubat_Mart_Nisan_May\u0131s_Haziran_Temmuz_A\u011fustos_Eyl\xfcl_Ekim_Kas\u0131m_Aral\u0131k".split("_"),monthsShort:"Oca_\u015eub_Mar_Nis_May_Haz_Tem_A\u011fu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Sal\u0131_\xc7ar\u015famba_Per\u015fembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pzt_Sal_\xc7ar_Per_Cum_Cmt".split("_"),weekdaysMin:"Pz_Pt_Sa_\xc7a_Pe_Cu_Ct".split("_"),meridiem:function(e,a,_){return e<12?_?"\xf6\xf6":"\xd6\xd6":_?"\xf6s":"\xd6S"},meridiemParse:/\xf6\xf6|\xd6\xd6|\xf6s|\xd6S/,isPM:function(e){return "\xf6s"===e||"\xd6S"===e},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bug\xfcn saat] LT",nextDay:"[yar\u0131n saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[d\xfcn] LT",lastWeek:"[ge\xe7en] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s \xf6nce",s:"birka\xe7 saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir g\xfcn",dd:"%d g\xfcn",w:"bir hafta",ww:"%d hafta",M:"bir ay",MM:"%d ay",y:"bir y\u0131l",yy:"%d y\u0131l"},ordinal:function(e,a){switch(a){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'\u0131nc\u0131";var _=e%10;return e+(ra[_]||ra[e%100-_]||ra[100<=e?100:null])}},week:{dow:1,doy:7}}),e.defineLocale("tzl",{months:"Januar_Fevraglh_Mar\xe7_Avr\xefu_Mai_G\xfcn_Julia_Guscht_Setemvar_Listop\xe4ts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_G\xfcn_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"S\xfaladi_L\xfane\xe7i_Maitzi_M\xe1rcuri_Xh\xfaadi_Vi\xe9ner\xe7i_S\xe1turi".split("_"),weekdaysShort:"S\xfal_L\xfan_Mai_M\xe1r_Xh\xfa_Vi\xe9_S\xe1t".split("_"),weekdaysMin:"S\xfa_L\xfa_Ma_M\xe1_Xh_Vi_S\xe1".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return "d'o"===e.toLowerCase()},meridiem:function(e,a,_){return 11<e?_?"d'o":"D'O":_?"d'a":"D'A"},calendar:{sameDay:"[oxhi \xe0] LT",nextDay:"[dem\xe0 \xe0] LT",nextWeek:"dddd [\xe0] LT",lastDay:"[ieiri \xe0] LT",lastWeek:"[s\xfcr el] dddd [lasteu \xe0] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:A,ss:A,m:A,mm:A,h:A,hh:A,d:A,dd:A,M:A,MM:A,y:A,yy:A},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),e.defineLocale("tzm-latn",{months:"innayr_br\u02e4ayr\u02e4_mar\u02e4s\u02e4_ibrir_mayyw_ywnyw_ywlywz_\u0263w\u0161t_\u0161wtanbir_kt\u02e4wbr\u02e4_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_br\u02e4ayr\u02e4_mar\u02e4s\u02e4_ibrir_mayyw_ywnyw_ywlywz_\u0263w\u0161t_\u0161wtanbir_kt\u02e4wbr\u02e4_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asi\u1e0dyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asi\u1e0dyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asi\u1e0dyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minu\u1e0d",mm:"%d minu\u1e0d",h:"sa\u025ba",hh:"%d tassa\u025bin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}}),e.defineLocale("tzm",{months:"\u2d49\u2d4f\u2d4f\u2d30\u2d62\u2d54_\u2d31\u2d55\u2d30\u2d62\u2d55_\u2d4e\u2d30\u2d55\u2d5a_\u2d49\u2d31\u2d54\u2d49\u2d54_\u2d4e\u2d30\u2d62\u2d62\u2d53_\u2d62\u2d53\u2d4f\u2d62\u2d53_\u2d62\u2d53\u2d4d\u2d62\u2d53\u2d63_\u2d56\u2d53\u2d5b\u2d5c_\u2d5b\u2d53\u2d5c\u2d30\u2d4f\u2d31\u2d49\u2d54_\u2d3d\u2d5f\u2d53\u2d31\u2d55_\u2d4f\u2d53\u2d61\u2d30\u2d4f\u2d31\u2d49\u2d54_\u2d37\u2d53\u2d4a\u2d4f\u2d31\u2d49\u2d54".split("_"),monthsShort:"\u2d49\u2d4f\u2d4f\u2d30\u2d62\u2d54_\u2d31\u2d55\u2d30\u2d62\u2d55_\u2d4e\u2d30\u2d55\u2d5a_\u2d49\u2d31\u2d54\u2d49\u2d54_\u2d4e\u2d30\u2d62\u2d62\u2d53_\u2d62\u2d53\u2d4f\u2d62\u2d53_\u2d62\u2d53\u2d4d\u2d62\u2d53\u2d63_\u2d56\u2d53\u2d5b\u2d5c_\u2d5b\u2d53\u2d5c\u2d30\u2d4f\u2d31\u2d49\u2d54_\u2d3d\u2d5f\u2d53\u2d31\u2d55_\u2d4f\u2d53\u2d61\u2d30\u2d4f\u2d31\u2d49\u2d54_\u2d37\u2d53\u2d4a\u2d4f\u2d31\u2d49\u2d54".split("_"),weekdays:"\u2d30\u2d59\u2d30\u2d4e\u2d30\u2d59_\u2d30\u2d62\u2d4f\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d4f\u2d30\u2d59_\u2d30\u2d3d\u2d54\u2d30\u2d59_\u2d30\u2d3d\u2d61\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d4e\u2d61\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d39\u2d62\u2d30\u2d59".split("_"),weekdaysShort:"\u2d30\u2d59\u2d30\u2d4e\u2d30\u2d59_\u2d30\u2d62\u2d4f\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d4f\u2d30\u2d59_\u2d30\u2d3d\u2d54\u2d30\u2d59_\u2d30\u2d3d\u2d61\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d4e\u2d61\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d39\u2d62\u2d30\u2d59".split("_"),weekdaysMin:"\u2d30\u2d59\u2d30\u2d4e\u2d30\u2d59_\u2d30\u2d62\u2d4f\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d4f\u2d30\u2d59_\u2d30\u2d3d\u2d54\u2d30\u2d59_\u2d30\u2d3d\u2d61\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d4e\u2d61\u2d30\u2d59_\u2d30\u2d59\u2d49\u2d39\u2d62\u2d30\u2d59".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[\u2d30\u2d59\u2d37\u2d45 \u2d34] LT",nextDay:"[\u2d30\u2d59\u2d3d\u2d30 \u2d34] LT",nextWeek:"dddd [\u2d34] LT",lastDay:"[\u2d30\u2d5a\u2d30\u2d4f\u2d5c \u2d34] LT",lastWeek:"dddd [\u2d34] LT",sameElse:"L"},relativeTime:{future:"\u2d37\u2d30\u2d37\u2d45 \u2d59 \u2d62\u2d30\u2d4f %s",past:"\u2d62\u2d30\u2d4f %s",s:"\u2d49\u2d4e\u2d49\u2d3d",ss:"%d \u2d49\u2d4e\u2d49\u2d3d",m:"\u2d4e\u2d49\u2d4f\u2d53\u2d3a",mm:"%d \u2d4e\u2d49\u2d4f\u2d53\u2d3a",h:"\u2d59\u2d30\u2d44\u2d30",hh:"%d \u2d5c\u2d30\u2d59\u2d59\u2d30\u2d44\u2d49\u2d4f",d:"\u2d30\u2d59\u2d59",dd:"%d o\u2d59\u2d59\u2d30\u2d4f",M:"\u2d30\u2d62o\u2d53\u2d54",MM:"%d \u2d49\u2d62\u2d62\u2d49\u2d54\u2d4f",y:"\u2d30\u2d59\u2d33\u2d30\u2d59",yy:"%d \u2d49\u2d59\u2d33\u2d30\u2d59\u2d4f"},week:{dow:6,doy:12}}),e.defineLocale("ug-cn",{months:"\u064a\u0627\u0646\u06cb\u0627\u0631_\u0641\u06d0\u06cb\u0631\u0627\u0644_\u0645\u0627\u0631\u062a_\u0626\u0627\u067e\u0631\u06d0\u0644_\u0645\u0627\u064a_\u0626\u0649\u064a\u06c7\u0646_\u0626\u0649\u064a\u06c7\u0644_\u0626\u0627\u06cb\u063a\u06c7\u0633\u062a_\u0633\u06d0\u0646\u062a\u06d5\u0628\u0649\u0631_\u0626\u06c6\u0643\u062a\u06d5\u0628\u0649\u0631_\u0646\u0648\u064a\u0627\u0628\u0649\u0631_\u062f\u06d0\u0643\u0627\u0628\u0649\u0631".split("_"),monthsShort:"\u064a\u0627\u0646\u06cb\u0627\u0631_\u0641\u06d0\u06cb\u0631\u0627\u0644_\u0645\u0627\u0631\u062a_\u0626\u0627\u067e\u0631\u06d0\u0644_\u0645\u0627\u064a_\u0626\u0649\u064a\u06c7\u0646_\u0626\u0649\u064a\u06c7\u0644_\u0626\u0627\u06cb\u063a\u06c7\u0633\u062a_\u0633\u06d0\u0646\u062a\u06d5\u0628\u0649\u0631_\u0626\u06c6\u0643\u062a\u06d5\u0628\u0649\u0631_\u0646\u0648\u064a\u0627\u0628\u0649\u0631_\u062f\u06d0\u0643\u0627\u0628\u0649\u0631".split("_"),weekdays:"\u064a\u06d5\u0643\u0634\u06d5\u0646\u0628\u06d5_\u062f\u06c8\u0634\u06d5\u0646\u0628\u06d5_\u0633\u06d5\u064a\u0634\u06d5\u0646\u0628\u06d5_\u0686\u0627\u0631\u0634\u06d5\u0646\u0628\u06d5_\u067e\u06d5\u064a\u0634\u06d5\u0646\u0628\u06d5_\u062c\u06c8\u0645\u06d5_\u0634\u06d5\u0646\u0628\u06d5".split("_"),weekdaysShort:"\u064a\u06d5_\u062f\u06c8_\u0633\u06d5_\u0686\u0627_\u067e\u06d5_\u062c\u06c8_\u0634\u06d5".split("_"),weekdaysMin:"\u064a\u06d5_\u062f\u06c8_\u0633\u06d5_\u0686\u0627_\u067e\u06d5_\u062c\u06c8_\u0634\u06d5".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-\u064a\u0649\u0644\u0649M-\u0626\u0627\u064a\u0646\u0649\u06adD-\u0643\u06c8\u0646\u0649",LLL:"YYYY-\u064a\u0649\u0644\u0649M-\u0626\u0627\u064a\u0646\u0649\u06adD-\u0643\u06c8\u0646\u0649\u060c HH:mm",LLLL:"dddd\u060c YYYY-\u064a\u0649\u0644\u0649M-\u0626\u0627\u064a\u0646\u0649\u06adD-\u0643\u06c8\u0646\u0649\u060c HH:mm"},meridiemParse:/\u064a\u06d0\u0631\u0649\u0645 \u0643\u06d0\u0686\u06d5|\u0633\u06d5\u06be\u06d5\u0631|\u0686\u06c8\u0634\u062a\u0649\u0646 \u0628\u06c7\u0631\u06c7\u0646|\u0686\u06c8\u0634|\u0686\u06c8\u0634\u062a\u0649\u0646 \u0643\u06d0\u064a\u0649\u0646|\u0643\u06d5\u0686/,meridiemHour:function(e,a){return 12===e&&(e=0),"\u064a\u06d0\u0631\u0649\u0645 \u0643\u06d0\u0686\u06d5"===a||"\u0633\u06d5\u06be\u06d5\u0631"===a||"\u0686\u06c8\u0634\u062a\u0649\u0646 \u0628\u06c7\u0631\u06c7\u0646"===a||"\u0686\u06c8\u0634\u062a\u0649\u0646 \u0643\u06d0\u064a\u0649\u0646"!==a&&"\u0643\u06d5\u0686"!==a&&11<=e?e:e+12},meridiem:function(e,a,_){e=100*e+a;return e<600?"\u064a\u06d0\u0631\u0649\u0645 \u0643\u06d0\u0686\u06d5":e<900?"\u0633\u06d5\u06be\u06d5\u0631":e<1130?"\u0686\u06c8\u0634\u062a\u0649\u0646 \u0628\u06c7\u0631\u06c7\u0646":e<1230?"\u0686\u06c8\u0634":e<1800?"\u0686\u06c8\u0634\u062a\u0649\u0646 \u0643\u06d0\u064a\u0649\u0646":"\u0643\u06d5\u0686"},calendar:{sameDay:"[\u0628\u06c8\u06af\u06c8\u0646 \u0633\u0627\u0626\u06d5\u062a] LT",nextDay:"[\u0626\u06d5\u062a\u06d5 \u0633\u0627\u0626\u06d5\u062a] LT",nextWeek:"[\u0643\u06d0\u0644\u06d5\u0631\u0643\u0649] dddd [\u0633\u0627\u0626\u06d5\u062a] LT",lastDay:"[\u062a\u06c6\u0646\u06c8\u06af\u06c8\u0646] LT",lastWeek:"[\u0626\u0627\u0644\u062f\u0649\u0646\u0642\u0649] dddd [\u0633\u0627\u0626\u06d5\u062a] LT",sameElse:"L"},relativeTime:{future:"%s \u0643\u06d0\u064a\u0649\u0646",past:"%s \u0628\u06c7\u0631\u06c7\u0646",s:"\u0646\u06d5\u0686\u0686\u06d5 \u0633\u06d0\u0643\u0648\u0646\u062a",ss:"%d \u0633\u06d0\u0643\u0648\u0646\u062a",m:"\u0628\u0649\u0631 \u0645\u0649\u0646\u06c7\u062a",mm:"%d \u0645\u0649\u0646\u06c7\u062a",h:"\u0628\u0649\u0631 \u0633\u0627\u0626\u06d5\u062a",hh:"%d \u0633\u0627\u0626\u06d5\u062a",d:"\u0628\u0649\u0631 \u0643\u06c8\u0646",dd:"%d \u0643\u06c8\u0646",M:"\u0628\u0649\u0631 \u0626\u0627\u064a",MM:"%d \u0626\u0627\u064a",y:"\u0628\u0649\u0631 \u064a\u0649\u0644",yy:"%d \u064a\u0649\u0644"},dayOfMonthOrdinalParse:/\d{1,2}(-\u0643\u06c8\u0646\u0649|-\u0626\u0627\u064a|-\u06be\u06d5\u067e\u062a\u06d5)/,ordinal:function(e,a){switch(a){case"d":case"D":case"DDD":return e+"-\u0643\u06c8\u0646\u0649";case"w":case"W":return e+"-\u06be\u06d5\u067e\u062a\u06d5";default:return e}},preparse:function(e){return e.replace(/\u060c/g,",")},postformat:function(e){return e.replace(/,/g,"\u060c")},week:{dow:1,doy:7}}),e.defineLocale("uk",{months:{format:"\u0441\u0456\u0447\u043d\u044f_\u043b\u044e\u0442\u043e\u0433\u043e_\u0431\u0435\u0440\u0435\u0437\u043d\u044f_\u043a\u0432\u0456\u0442\u043d\u044f_\u0442\u0440\u0430\u0432\u043d\u044f_\u0447\u0435\u0440\u0432\u043d\u044f_\u043b\u0438\u043f\u043d\u044f_\u0441\u0435\u0440\u043f\u043d\u044f_\u0432\u0435\u0440\u0435\u0441\u043d\u044f_\u0436\u043e\u0432\u0442\u043d\u044f_\u043b\u0438\u0441\u0442\u043e\u043f\u0430\u0434\u0430_\u0433\u0440\u0443\u0434\u043d\u044f".split("_"),standalone:"\u0441\u0456\u0447\u0435\u043d\u044c_\u043b\u044e\u0442\u0438\u0439_\u0431\u0435\u0440\u0435\u0437\u0435\u043d\u044c_\u043a\u0432\u0456\u0442\u0435\u043d\u044c_\u0442\u0440\u0430\u0432\u0435\u043d\u044c_\u0447\u0435\u0440\u0432\u0435\u043d\u044c_\u043b\u0438\u043f\u0435\u043d\u044c_\u0441\u0435\u0440\u043f\u0435\u043d\u044c_\u0432\u0435\u0440\u0435\u0441\u0435\u043d\u044c_\u0436\u043e\u0432\u0442\u0435\u043d\u044c_\u043b\u0438\u0441\u0442\u043e\u043f\u0430\u0434_\u0433\u0440\u0443\u0434\u0435\u043d\u044c".split("_")},monthsShort:"\u0441\u0456\u0447_\u043b\u044e\u0442_\u0431\u0435\u0440_\u043a\u0432\u0456\u0442_\u0442\u0440\u0430\u0432_\u0447\u0435\u0440\u0432_\u043b\u0438\u043f_\u0441\u0435\u0440\u043f_\u0432\u0435\u0440_\u0436\u043e\u0432\u0442_\u043b\u0438\u0441\u0442_\u0433\u0440\u0443\u0434".split("_"),weekdays:function(e,a){var _={nominative:"\u043d\u0435\u0434\u0456\u043b\u044f_\u043f\u043e\u043d\u0435\u0434\u0456\u043b\u043e\u043a_\u0432\u0456\u0432\u0442\u043e\u0440\u043e\u043a_\u0441\u0435\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0435\u0440_\u043f\u2019\u044f\u0442\u043d\u0438\u0446\u044f_\u0441\u0443\u0431\u043e\u0442\u0430".split("_"),accusative:"\u043d\u0435\u0434\u0456\u043b\u044e_\u043f\u043e\u043d\u0435\u0434\u0456\u043b\u043e\u043a_\u0432\u0456\u0432\u0442\u043e\u0440\u043e\u043a_\u0441\u0435\u0440\u0435\u0434\u0443_\u0447\u0435\u0442\u0432\u0435\u0440_\u043f\u2019\u044f\u0442\u043d\u0438\u0446\u044e_\u0441\u0443\u0431\u043e\u0442\u0443".split("_"),genitive:"\u043d\u0435\u0434\u0456\u043b\u0456_\u043f\u043e\u043d\u0435\u0434\u0456\u043b\u043a\u0430_\u0432\u0456\u0432\u0442\u043e\u0440\u043a\u0430_\u0441\u0435\u0440\u0435\u0434\u0438_\u0447\u0435\u0442\u0432\u0435\u0440\u0433\u0430_\u043f\u2019\u044f\u0442\u043d\u0438\u0446\u0456_\u0441\u0443\u0431\u043e\u0442\u0438".split("_")};return !0===e?_.nominative.slice(1,7).concat(_.nominative.slice(0,1)):e?_[/(\[[\u0412\u0432\u0423\u0443]\]) ?dddd/.test(a)?"accusative":/\[?(?:\u043c\u0438\u043d\u0443\u043b\u043e\u0457|\u043d\u0430\u0441\u0442\u0443\u043f\u043d\u043e\u0457)? ?\] ?dddd/.test(a)?"genitive":"nominative"][e.day()]:_.nominative},weekdaysShort:"\u043d\u0434_\u043f\u043d_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043f\u0442_\u0441\u0431".split("_"),weekdaysMin:"\u043d\u0434_\u043f\u043d_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043f\u0442_\u0441\u0431".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY \u0440.",LLL:"D MMMM YYYY \u0440., HH:mm",LLLL:"dddd, D MMMM YYYY \u0440., HH:mm"},calendar:{sameDay:ia("[\u0421\u044c\u043e\u0433\u043e\u0434\u043d\u0456 "),nextDay:ia("[\u0417\u0430\u0432\u0442\u0440\u0430 "),lastDay:ia("[\u0412\u0447\u043e\u0440\u0430 "),nextWeek:ia("[\u0423] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return ia("[\u041c\u0438\u043d\u0443\u043b\u043e\u0457] dddd [").call(this);case 1:case 2:case 4:return ia("[\u041c\u0438\u043d\u0443\u043b\u043e\u0433\u043e] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"\u0437\u0430 %s",past:"%s \u0442\u043e\u043c\u0443",s:"\u0434\u0435\u043a\u0456\u043b\u044c\u043a\u0430 \u0441\u0435\u043a\u0443\u043d\u0434",ss:O,m:O,mm:O,h:"\u0433\u043e\u0434\u0438\u043d\u0443",hh:O,d:"\u0434\u0435\u043d\u044c",dd:O,M:"\u043c\u0456\u0441\u044f\u0446\u044c",MM:O,y:"\u0440\u0456\u043a",yy:O},meridiemParse:/\u043d\u043e\u0447\u0456|\u0440\u0430\u043d\u043a\u0443|\u0434\u043d\u044f|\u0432\u0435\u0447\u043e\u0440\u0430/,isPM:function(e){return /^(\u0434\u043d\u044f|\u0432\u0435\u0447\u043e\u0440\u0430)$/.test(e)},meridiem:function(e,a,_){return e<4?"\u043d\u043e\u0447\u0456":e<12?"\u0440\u0430\u043d\u043a\u0443":e<17?"\u0434\u043d\u044f":"\u0432\u0435\u0447\u043e\u0440\u0430"},dayOfMonthOrdinalParse:/\d{1,2}-(\u0439|\u0433\u043e)/,ordinal:function(e,a){switch(a){case"M":case"d":case"DDD":case"w":case"W":return e+"-\u0439";case"D":return e+"-\u0433\u043e";default:return e}},week:{dow:1,doy:7}});n=["\u062c\u0646\u0648\u0631\u06cc","\u0641\u0631\u0648\u0631\u06cc","\u0645\u0627\u0631\u0686","\u0627\u067e\u0631\u06cc\u0644","\u0645\u0626\u06cc","\u062c\u0648\u0646","\u062c\u0648\u0644\u0627\u0626\u06cc","\u0627\u06af\u0633\u062a","\u0633\u062a\u0645\u0628\u0631","\u0627\u06a9\u062a\u0648\u0628\u0631","\u0646\u0648\u0645\u0628\u0631","\u062f\u0633\u0645\u0628\u0631"],r=["\u0627\u062a\u0648\u0627\u0631","\u067e\u06cc\u0631","\u0645\u0646\u06af\u0644","\u0628\u062f\u06be","\u062c\u0645\u0639\u0631\u0627\u062a","\u062c\u0645\u0639\u06c1","\u06c1\u0641\u062a\u06c1"];return e.defineLocale("ur",{months:n,monthsShort:n,weekdays:r,weekdaysShort:r,weekdaysMin:r,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd\u060c D MMMM YYYY HH:mm"},meridiemParse:/\u0635\u0628\u062d|\u0634\u0627\u0645/,isPM:function(e){return "\u0634\u0627\u0645"===e},meridiem:function(e,a,_){return e<12?"\u0635\u0628\u062d":"\u0634\u0627\u0645"},calendar:{sameDay:"[\u0622\u062c \u0628\u0648\u0642\u062a] LT",nextDay:"[\u06a9\u0644 \u0628\u0648\u0642\u062a] LT",nextWeek:"dddd [\u0628\u0648\u0642\u062a] LT",lastDay:"[\u06af\u0630\u0634\u062a\u06c1 \u0631\u0648\u0632 \u0628\u0648\u0642\u062a] LT",lastWeek:"[\u06af\u0630\u0634\u062a\u06c1] dddd [\u0628\u0648\u0642\u062a] LT",sameElse:"L"},relativeTime:{future:"%s \u0628\u0639\u062f",past:"%s \u0642\u0628\u0644",s:"\u0686\u0646\u062f \u0633\u06cc\u06a9\u0646\u0688",ss:"%d \u0633\u06cc\u06a9\u0646\u0688",m:"\u0627\u06cc\u06a9 \u0645\u0646\u0679",mm:"%d \u0645\u0646\u0679",h:"\u0627\u06cc\u06a9 \u06af\u06be\u0646\u0679\u06c1",hh:"%d \u06af\u06be\u0646\u0679\u06d2",d:"\u0627\u06cc\u06a9 \u062f\u0646",dd:"%d \u062f\u0646",M:"\u0627\u06cc\u06a9 \u0645\u0627\u06c1",MM:"%d \u0645\u0627\u06c1",y:"\u0627\u06cc\u06a9 \u0633\u0627\u0644",yy:"%d \u0633\u0627\u0644"},preparse:function(e){return e.replace(/\u060c/g,",")},postformat:function(e){return e.replace(/,/g,"\u060c")},week:{dow:1,doy:4}}),e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}}),e.defineLocale("uz",{months:"\u044f\u043d\u0432\u0430\u0440_\u0444\u0435\u0432\u0440\u0430\u043b_\u043c\u0430\u0440\u0442_\u0430\u043f\u0440\u0435\u043b_\u043c\u0430\u0439_\u0438\u044e\u043d_\u0438\u044e\u043b_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043d\u0442\u044f\u0431\u0440_\u043e\u043a\u0442\u044f\u0431\u0440_\u043d\u043e\u044f\u0431\u0440_\u0434\u0435\u043a\u0430\u0431\u0440".split("_"),monthsShort:"\u044f\u043d\u0432_\u0444\u0435\u0432_\u043c\u0430\u0440_\u0430\u043f\u0440_\u043c\u0430\u0439_\u0438\u044e\u043d_\u0438\u044e\u043b_\u0430\u0432\u0433_\u0441\u0435\u043d_\u043e\u043a\u0442_\u043d\u043e\u044f_\u0434\u0435\u043a".split("_"),weekdays:"\u042f\u043a\u0448\u0430\u043d\u0431\u0430_\u0414\u0443\u0448\u0430\u043d\u0431\u0430_\u0421\u0435\u0448\u0430\u043d\u0431\u0430_\u0427\u043e\u0440\u0448\u0430\u043d\u0431\u0430_\u041f\u0430\u0439\u0448\u0430\u043d\u0431\u0430_\u0416\u0443\u043c\u0430_\u0428\u0430\u043d\u0431\u0430".split("_"),weekdaysShort:"\u042f\u043a\u0448_\u0414\u0443\u0448_\u0421\u0435\u0448_\u0427\u043e\u0440_\u041f\u0430\u0439_\u0416\u0443\u043c_\u0428\u0430\u043d".split("_"),weekdaysMin:"\u042f\u043a_\u0414\u0443_\u0421\u0435_\u0427\u043e_\u041f\u0430_\u0416\u0443_\u0428\u0430".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[\u0411\u0443\u0433\u0443\u043d \u0441\u043e\u0430\u0442] LT [\u0434\u0430]",nextDay:"[\u042d\u0440\u0442\u0430\u0433\u0430] LT [\u0434\u0430]",nextWeek:"dddd [\u043a\u0443\u043d\u0438 \u0441\u043e\u0430\u0442] LT [\u0434\u0430]",lastDay:"[\u041a\u0435\u0447\u0430 \u0441\u043e\u0430\u0442] LT [\u0434\u0430]",lastWeek:"[\u0423\u0442\u0433\u0430\u043d] dddd [\u043a\u0443\u043d\u0438 \u0441\u043e\u0430\u0442] LT [\u0434\u0430]",sameElse:"L"},relativeTime:{future:"\u042f\u043a\u0438\u043d %s \u0438\u0447\u0438\u0434\u0430",past:"\u0411\u0438\u0440 \u043d\u0435\u0447\u0430 %s \u043e\u043b\u0434\u0438\u043d",s:"\u0444\u0443\u0440\u0441\u0430\u0442",ss:"%d \u0444\u0443\u0440\u0441\u0430\u0442",m:"\u0431\u0438\u0440 \u0434\u0430\u043a\u0438\u043a\u0430",mm:"%d \u0434\u0430\u043a\u0438\u043a\u0430",h:"\u0431\u0438\u0440 \u0441\u043e\u0430\u0442",hh:"%d \u0441\u043e\u0430\u0442",d:"\u0431\u0438\u0440 \u043a\u0443\u043d",dd:"%d \u043a\u0443\u043d",M:"\u0431\u0438\u0440 \u043e\u0439",MM:"%d \u043e\u0439",y:"\u0431\u0438\u0440 \u0439\u0438\u043b",yy:"%d \u0439\u0438\u043b"},week:{dow:1,doy:7}}),e.defineLocale("vi",{months:"th\xe1ng 1_th\xe1ng 2_th\xe1ng 3_th\xe1ng 4_th\xe1ng 5_th\xe1ng 6_th\xe1ng 7_th\xe1ng 8_th\xe1ng 9_th\xe1ng 10_th\xe1ng 11_th\xe1ng 12".split("_"),monthsShort:"Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"),monthsParseExact:!0,weekdays:"ch\u1ee7 nh\u1eadt_th\u1ee9 hai_th\u1ee9 ba_th\u1ee9 t\u01b0_th\u1ee9 n\u0103m_th\u1ee9 s\xe1u_th\u1ee9 b\u1ea3y".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return /^ch$/i.test(e)},meridiem:function(e,a,_){return e<12?_?"sa":"SA":_?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [n\u0103m] YYYY",LLL:"D MMMM [n\u0103m] YYYY HH:mm",LLLL:"dddd, D MMMM [n\u0103m] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[H\xf4m nay l\xfac] LT",nextDay:"[Ng\xe0y mai l\xfac] LT",nextWeek:"dddd [tu\u1ea7n t\u1edbi l\xfac] LT",lastDay:"[H\xf4m qua l\xfac] LT",lastWeek:"dddd [tu\u1ea7n tr\u01b0\u1edbc l\xfac] LT",sameElse:"L"},relativeTime:{future:"%s t\u1edbi",past:"%s tr\u01b0\u1edbc",s:"v\xe0i gi\xe2y",ss:"%d gi\xe2y",m:"m\u1ed9t ph\xfat",mm:"%d ph\xfat",h:"m\u1ed9t gi\u1edd",hh:"%d gi\u1edd",d:"m\u1ed9t ng\xe0y",dd:"%d ng\xe0y",w:"m\u1ed9t tu\u1ea7n",ww:"%d tu\u1ea7n",M:"m\u1ed9t th\xe1ng",MM:"%d th\xe1ng",y:"m\u1ed9t n\u0103m",yy:"%d n\u0103m"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}}),e.defineLocale("x-pseudo",{months:"J~\xe1\xf1\xfa\xe1~r\xfd_F~\xe9br\xfa~\xe1r\xfd_~M\xe1rc~h_\xc1p~r\xedl_~M\xe1\xfd_~J\xfa\xf1\xe9~_J\xfal~\xfd_\xc1\xfa~g\xfast~_S\xe9p~t\xe9mb~\xe9r_\xd3~ct\xf3b~\xe9r_\xd1~\xf3v\xe9m~b\xe9r_~D\xe9c\xe9~mb\xe9r".split("_"),monthsShort:"J~\xe1\xf1_~F\xe9b_~M\xe1r_~\xc1pr_~M\xe1\xfd_~J\xfa\xf1_~J\xfal_~\xc1\xfag_~S\xe9p_~\xd3ct_~\xd1\xf3v_~D\xe9c".split("_"),monthsParseExact:!0,weekdays:"S~\xfa\xf1d\xe1~\xfd_M\xf3~\xf1d\xe1\xfd~_T\xfa\xe9~sd\xe1\xfd~_W\xe9d~\xf1\xe9sd~\xe1\xfd_T~h\xfars~d\xe1\xfd_~Fr\xedd~\xe1\xfd_S~\xe1t\xfar~d\xe1\xfd".split("_"),weekdaysShort:"S~\xfa\xf1_~M\xf3\xf1_~T\xfa\xe9_~W\xe9d_~Th\xfa_~Fr\xed_~S\xe1t".split("_"),weekdaysMin:"S~\xfa_M\xf3~_T\xfa_~W\xe9_T~h_Fr~_S\xe1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~\xf3d\xe1~\xfd \xe1t] LT",nextDay:"[T~\xf3m\xf3~rr\xf3~w \xe1t] LT",nextWeek:"dddd [\xe1t] LT",lastDay:"[\xdd~\xe9st~\xe9rd\xe1~\xfd \xe1t] LT",lastWeek:"[L~\xe1st] dddd [\xe1t] LT",sameElse:"L"},relativeTime:{future:"\xed~\xf1 %s",past:"%s \xe1~g\xf3",s:"\xe1 ~f\xe9w ~s\xe9c\xf3~\xf1ds",ss:"%d s~\xe9c\xf3\xf1~ds",m:"\xe1 ~m\xed\xf1~\xfat\xe9",mm:"%d m~\xed\xf1\xfa~t\xe9s",h:"\xe1~\xf1 h\xf3~\xfar",hh:"%d h~\xf3\xfars",d:"\xe1 ~d\xe1\xfd",dd:"%d d~\xe1\xfds",M:"\xe1 ~m\xf3\xf1~th",MM:"%d m~\xf3\xf1t~hs",y:"\xe1 ~\xfd\xe9\xe1r",yy:"%d \xfd~\xe9\xe1rs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var a=e%10;return e+(1==~~(e%100/10)?"th":1==a?"st":2==a?"nd":3==a?"rd":"th")},week:{dow:1,doy:4}}),e.defineLocale("yo",{months:"S\u1eb9\u0301r\u1eb9\u0301_E\u0300re\u0300le\u0300_\u1eb8r\u1eb9\u0300na\u0300_I\u0300gbe\u0301_E\u0300bibi_O\u0300ku\u0300du_Ag\u1eb9mo_O\u0300gu\u0301n_Owewe_\u1ecc\u0300wa\u0300ra\u0300_Be\u0301lu\u0301_\u1ecc\u0300p\u1eb9\u0300\u0300".split("_"),monthsShort:"S\u1eb9\u0301r_E\u0300rl_\u1eb8rn_I\u0300gb_E\u0300bi_O\u0300ku\u0300_Ag\u1eb9_O\u0300gu\u0301_Owe_\u1ecc\u0300wa\u0300_Be\u0301l_\u1ecc\u0300p\u1eb9\u0300\u0300".split("_"),weekdays:"A\u0300i\u0300ku\u0301_Aje\u0301_I\u0300s\u1eb9\u0301gun_\u1eccj\u1ecd\u0301ru\u0301_\u1eccj\u1ecd\u0301b\u1ecd_\u1eb8ti\u0300_A\u0300ba\u0301m\u1eb9\u0301ta".split("_"),weekdaysShort:"A\u0300i\u0300k_Aje\u0301_I\u0300s\u1eb9\u0301_\u1eccjr_\u1eccjb_\u1eb8ti\u0300_A\u0300ba\u0301".split("_"),weekdaysMin:"A\u0300i\u0300_Aj_I\u0300s_\u1eccr_\u1eccb_\u1eb8t_A\u0300b".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[O\u0300ni\u0300 ni] LT",nextDay:"[\u1ecc\u0300la ni] LT",nextWeek:"dddd [\u1eccs\u1eb9\u0300 to\u0301n'b\u1ecd] [ni] LT",lastDay:"[A\u0300na ni] LT",lastWeek:"dddd [\u1eccs\u1eb9\u0300 to\u0301l\u1ecd\u0301] [ni] LT",sameElse:"L"},relativeTime:{future:"ni\u0301 %s",past:"%s k\u1ecdja\u0301",s:"i\u0300s\u1eb9ju\u0301 aaya\u0301 die",ss:"aaya\u0301 %d",m:"i\u0300s\u1eb9ju\u0301 kan",mm:"i\u0300s\u1eb9ju\u0301 %d",h:"wa\u0301kati kan",hh:"wa\u0301kati %d",d:"\u1ecdj\u1ecd\u0301 kan",dd:"\u1ecdj\u1ecd\u0301 %d",M:"osu\u0300 kan",MM:"osu\u0300 %d",y:"\u1ecddu\u0301n kan",yy:"\u1ecddu\u0301n %d"},dayOfMonthOrdinalParse:/\u1ecdj\u1ecd\u0301\s\d{1,2}/,ordinal:"\u1ecdj\u1ecd\u0301 %d",week:{dow:1,doy:4}}),e.defineLocale("zh-cn",{months:"\u4e00\u6708_\u4e8c\u6708_\u4e09\u6708_\u56db\u6708_\u4e94\u6708_\u516d\u6708_\u4e03\u6708_\u516b\u6708_\u4e5d\u6708_\u5341\u6708_\u5341\u4e00\u6708_\u5341\u4e8c\u6708".split("_"),monthsShort:"1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708".split("_"),weekdays:"\u661f\u671f\u65e5_\u661f\u671f\u4e00_\u661f\u671f\u4e8c_\u661f\u671f\u4e09_\u661f\u671f\u56db_\u661f\u671f\u4e94_\u661f\u671f\u516d".split("_"),weekdaysShort:"\u5468\u65e5_\u5468\u4e00_\u5468\u4e8c_\u5468\u4e09_\u5468\u56db_\u5468\u4e94_\u5468\u516d".split("_"),weekdaysMin:"\u65e5_\u4e00_\u4e8c_\u4e09_\u56db_\u4e94_\u516d".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY\u5e74M\u6708D\u65e5",LLL:"YYYY\u5e74M\u6708D\u65e5Ah\u70b9mm\u5206",LLLL:"YYYY\u5e74M\u6708D\u65e5ddddAh\u70b9mm\u5206",l:"YYYY/M/D",ll:"YYYY\u5e74M\u6708D\u65e5",lll:"YYYY\u5e74M\u6708D\u65e5 HH:mm",llll:"YYYY\u5e74M\u6708D\u65e5dddd HH:mm"},meridiemParse:/\u51cc\u6668|\u65e9\u4e0a|\u4e0a\u5348|\u4e2d\u5348|\u4e0b\u5348|\u665a\u4e0a/,meridiemHour:function(e,a){return 12===e&&(e=0),"\u51cc\u6668"===a||"\u65e9\u4e0a"===a||"\u4e0a\u5348"===a||"\u4e0b\u5348"!==a&&"\u665a\u4e0a"!==a&&11<=e?e:e+12},meridiem:function(e,a,_){e=100*e+a;return e<600?"\u51cc\u6668":e<900?"\u65e9\u4e0a":e<1130?"\u4e0a\u5348":e<1230?"\u4e2d\u5348":e<1800?"\u4e0b\u5348":"\u665a\u4e0a"},calendar:{sameDay:"[\u4eca\u5929]LT",nextDay:"[\u660e\u5929]LT",nextWeek:function(e){return e.week()!==this.week()?"[\u4e0b]dddLT":"[\u672c]dddLT"},lastDay:"[\u6628\u5929]LT",lastWeek:function(e){return this.week()!==e.week()?"[\u4e0a]dddLT":"[\u672c]dddLT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(\u65e5|\u6708|\u5468)/,ordinal:function(e,a){switch(a){case"d":case"D":case"DDD":return e+"\u65e5";case"M":return e+"\u6708";case"w":case"W":return e+"\u5468";default:return e}},relativeTime:{future:"%s\u540e",past:"%s\u524d",s:"\u51e0\u79d2",ss:"%d \u79d2",m:"1 \u5206\u949f",mm:"%d \u5206\u949f",h:"1 \u5c0f\u65f6",hh:"%d \u5c0f\u65f6",d:"1 \u5929",dd:"%d \u5929",w:"1 \u5468",ww:"%d \u5468",M:"1 \u4e2a\u6708",MM:"%d \u4e2a\u6708",y:"1 \u5e74",yy:"%d \u5e74"},week:{dow:1,doy:4}}),e.defineLocale("zh-hk",{months:"\u4e00\u6708_\u4e8c\u6708_\u4e09\u6708_\u56db\u6708_\u4e94\u6708_\u516d\u6708_\u4e03\u6708_\u516b\u6708_\u4e5d\u6708_\u5341\u6708_\u5341\u4e00\u6708_\u5341\u4e8c\u6708".split("_"),monthsShort:"1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708".split("_"),weekdays:"\u661f\u671f\u65e5_\u661f\u671f\u4e00_\u661f\u671f\u4e8c_\u661f\u671f\u4e09_\u661f\u671f\u56db_\u661f\u671f\u4e94_\u661f\u671f\u516d".split("_"),weekdaysShort:"\u9031\u65e5_\u9031\u4e00_\u9031\u4e8c_\u9031\u4e09_\u9031\u56db_\u9031\u4e94_\u9031\u516d".split("_"),weekdaysMin:"\u65e5_\u4e00_\u4e8c_\u4e09_\u56db_\u4e94_\u516d".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY\u5e74M\u6708D\u65e5",LLL:"YYYY\u5e74M\u6708D\u65e5 HH:mm",LLLL:"YYYY\u5e74M\u6708D\u65e5dddd HH:mm",l:"YYYY/M/D",ll:"YYYY\u5e74M\u6708D\u65e5",lll:"YYYY\u5e74M\u6708D\u65e5 HH:mm",llll:"YYYY\u5e74M\u6708D\u65e5dddd HH:mm"},meridiemParse:/\u51cc\u6668|\u65e9\u4e0a|\u4e0a\u5348|\u4e2d\u5348|\u4e0b\u5348|\u665a\u4e0a/,meridiemHour:function(e,a){return 12===e&&(e=0),"\u51cc\u6668"===a||"\u65e9\u4e0a"===a||"\u4e0a\u5348"===a?e:"\u4e2d\u5348"===a?11<=e?e:e+12:"\u4e0b\u5348"===a||"\u665a\u4e0a"===a?e+12:void 0},meridiem:function(e,a,_){e=100*e+a;return e<600?"\u51cc\u6668":e<900?"\u65e9\u4e0a":e<1200?"\u4e0a\u5348":1200===e?"\u4e2d\u5348":e<1800?"\u4e0b\u5348":"\u665a\u4e0a"},calendar:{sameDay:"[\u4eca\u5929]LT",nextDay:"[\u660e\u5929]LT",nextWeek:"[\u4e0b]ddddLT",lastDay:"[\u6628\u5929]LT",lastWeek:"[\u4e0a]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(\u65e5|\u6708|\u9031)/,ordinal:function(e,a){switch(a){case"d":case"D":case"DDD":return e+"\u65e5";case"M":return e+"\u6708";case"w":case"W":return e+"\u9031";default:return e}},relativeTime:{future:"%s\u5f8c",past:"%s\u524d",s:"\u5e7e\u79d2",ss:"%d \u79d2",m:"1 \u5206\u9418",mm:"%d \u5206\u9418",h:"1 \u5c0f\u6642",hh:"%d \u5c0f\u6642",d:"1 \u5929",dd:"%d \u5929",M:"1 \u500b\u6708",MM:"%d \u500b\u6708",y:"1 \u5e74",yy:"%d \u5e74"}}),e.defineLocale("zh-mo",{months:"\u4e00\u6708_\u4e8c\u6708_\u4e09\u6708_\u56db\u6708_\u4e94\u6708_\u516d\u6708_\u4e03\u6708_\u516b\u6708_\u4e5d\u6708_\u5341\u6708_\u5341\u4e00\u6708_\u5341\u4e8c\u6708".split("_"),monthsShort:"1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708".split("_"),weekdays:"\u661f\u671f\u65e5_\u661f\u671f\u4e00_\u661f\u671f\u4e8c_\u661f\u671f\u4e09_\u661f\u671f\u56db_\u661f\u671f\u4e94_\u661f\u671f\u516d".split("_"),weekdaysShort:"\u9031\u65e5_\u9031\u4e00_\u9031\u4e8c_\u9031\u4e09_\u9031\u56db_\u9031\u4e94_\u9031\u516d".split("_"),weekdaysMin:"\u65e5_\u4e00_\u4e8c_\u4e09_\u56db_\u4e94_\u516d".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"YYYY\u5e74M\u6708D\u65e5",LLL:"YYYY\u5e74M\u6708D\u65e5 HH:mm",LLLL:"YYYY\u5e74M\u6708D\u65e5dddd HH:mm",l:"D/M/YYYY",ll:"YYYY\u5e74M\u6708D\u65e5",lll:"YYYY\u5e74M\u6708D\u65e5 HH:mm",llll:"YYYY\u5e74M\u6708D\u65e5dddd HH:mm"},meridiemParse:/\u51cc\u6668|\u65e9\u4e0a|\u4e0a\u5348|\u4e2d\u5348|\u4e0b\u5348|\u665a\u4e0a/,meridiemHour:function(e,a){return 12===e&&(e=0),"\u51cc\u6668"===a||"\u65e9\u4e0a"===a||"\u4e0a\u5348"===a?e:"\u4e2d\u5348"===a?11<=e?e:e+12:"\u4e0b\u5348"===a||"\u665a\u4e0a"===a?e+12:void 0},meridiem:function(e,a,_){e=100*e+a;return e<600?"\u51cc\u6668":e<900?"\u65e9\u4e0a":e<1130?"\u4e0a\u5348":e<1230?"\u4e2d\u5348":e<1800?"\u4e0b\u5348":"\u665a\u4e0a"},calendar:{sameDay:"[\u4eca\u5929] LT",nextDay:"[\u660e\u5929] LT",nextWeek:"[\u4e0b]dddd LT",lastDay:"[\u6628\u5929] LT",lastWeek:"[\u4e0a]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(\u65e5|\u6708|\u9031)/,ordinal:function(e,a){switch(a){case"d":case"D":case"DDD":return e+"\u65e5";case"M":return e+"\u6708";case"w":case"W":return e+"\u9031";default:return e}},relativeTime:{future:"%s\u5167",past:"%s\u524d",s:"\u5e7e\u79d2",ss:"%d \u79d2",m:"1 \u5206\u9418",mm:"%d \u5206\u9418",h:"1 \u5c0f\u6642",hh:"%d \u5c0f\u6642",d:"1 \u5929",dd:"%d \u5929",M:"1 \u500b\u6708",MM:"%d \u500b\u6708",y:"1 \u5e74",yy:"%d \u5e74"}}),e.defineLocale("zh-tw",{months:"\u4e00\u6708_\u4e8c\u6708_\u4e09\u6708_\u56db\u6708_\u4e94\u6708_\u516d\u6708_\u4e03\u6708_\u516b\u6708_\u4e5d\u6708_\u5341\u6708_\u5341\u4e00\u6708_\u5341\u4e8c\u6708".split("_"),monthsShort:"1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708".split("_"),weekdays:"\u661f\u671f\u65e5_\u661f\u671f\u4e00_\u661f\u671f\u4e8c_\u661f\u671f\u4e09_\u661f\u671f\u56db_\u661f\u671f\u4e94_\u661f\u671f\u516d".split("_"),weekdaysShort:"\u9031\u65e5_\u9031\u4e00_\u9031\u4e8c_\u9031\u4e09_\u9031\u56db_\u9031\u4e94_\u9031\u516d".split("_"),weekdaysMin:"\u65e5_\u4e00_\u4e8c_\u4e09_\u56db_\u4e94_\u516d".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY\u5e74M\u6708D\u65e5",LLL:"YYYY\u5e74M\u6708D\u65e5 HH:mm",LLLL:"YYYY\u5e74M\u6708D\u65e5dddd HH:mm",l:"YYYY/M/D",ll:"YYYY\u5e74M\u6708D\u65e5",lll:"YYYY\u5e74M\u6708D\u65e5 HH:mm",llll:"YYYY\u5e74M\u6708D\u65e5dddd HH:mm"},meridiemParse:/\u51cc\u6668|\u65e9\u4e0a|\u4e0a\u5348|\u4e2d\u5348|\u4e0b\u5348|\u665a\u4e0a/,meridiemHour:function(e,a){return 12===e&&(e=0),"\u51cc\u6668"===a||"\u65e9\u4e0a"===a||"\u4e0a\u5348"===a?e:"\u4e2d\u5348"===a?11<=e?e:e+12:"\u4e0b\u5348"===a||"\u665a\u4e0a"===a?e+12:void 0},meridiem:function(e,a,_){e=100*e+a;return e<600?"\u51cc\u6668":e<900?"\u65e9\u4e0a":e<1130?"\u4e0a\u5348":e<1230?"\u4e2d\u5348":e<1800?"\u4e0b\u5348":"\u665a\u4e0a"},calendar:{sameDay:"[\u4eca\u5929] LT",nextDay:"[\u660e\u5929] LT",nextWeek:"[\u4e0b]dddd LT",lastDay:"[\u6628\u5929] LT",lastWeek:"[\u4e0a]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(\u65e5|\u6708|\u9031)/,ordinal:function(e,a){switch(a){case"d":case"D":case"DDD":return e+"\u65e5";case"M":return e+"\u6708";case"w":case"W":return e+"\u9031";default:return e}},relativeTime:{future:"%s\u5f8c",past:"%s\u524d",s:"\u5e7e\u79d2",ss:"%d \u79d2",m:"1 \u5206\u9418",mm:"%d \u5206\u9418",h:"1 \u5c0f\u6642",hh:"%d \u5c0f\u6642",d:"1 \u5929",dd:"%d \u5929",M:"1 \u500b\u6708",MM:"%d \u500b\u6708",y:"1 \u5e74",yy:"%d \u5e74"}}),e.locale("en"),e});
		
	} ());

	const setLocale = () => {
	  const currentLang = document.documentElement.lang;
	  const availableLocales = moment.locales();
	  if (availableLocales.includes(currentLang)) {
	    moment.locale(currentLang);
	  } else {
	    moment.locale('en');
	  }
	};
	setLocale();
	if (mpaData$1 && mpaData$1.settings && typeof mpaData$1.settings.start_of_week !== 'undefined') {
	  moment.updateLocale(document.documentElement.lang.slice(0, 2), {
	    week: {
	      dow: mpaData$1.settings.start_of_week
	    }
	  });
	}
	const php_to_moment_format = phpFormat => {
	  const formatMapping = {
	    'F': 'MMMM',
	    // Full month name
	    'j': 'D',
	    // Day of the month without leading zeros
	    'Y': 'YYYY',
	    // Full year
	    'g': 'h',
	    // 12-hour format without leading zeros
	    'i': 'mm',
	    // Minutes
	    'A': 'A' // Uppercase Ante meridiem and Post meridiem
	  };

	  return phpFormat.split('').map(character => formatMapping[character] || character).join('');
	};

	const localTranslate = (text, domain = '') => text;
	const localTranslateWithContext = (text, context, domain = '') => text;
	const localSprintf = (format, ...args) => {
	  let argIndex = 0;
	  return format.replace(/%([sdf])/g, (match, specifier) => {
	    if (argIndex >= args.length) return match;
	    let value = args[argIndex++];
	    switch (specifier) {
	      case 's':
	        return String(value);
	      case 'd':
	        return parseInt(value, 10);
	      case 'f':
	        return parseFloat(value);
	      default:
	        return match;
	    }
	  });
	};
	const __ = typeof wp !== 'undefined' && wp.i18n && wp.i18n.__ ? wp.i18n.__ : localTranslate;
	typeof wp !== 'undefined' && wp.i18n && wp.i18n._x ? wp.i18n._x : localTranslateWithContext;
	typeof wp !== 'undefined' && wp.i18n && wp.i18n.sprintf ? wp.i18n.sprintf : localSprintf;

	const getPossibleAggregateOptions = (dateStart, dateEnd) => {
	  const startDate = moment(dateStart);
	  const endDate = moment(dateEnd);
	  const daysDifference = endDate.diff(startDate, 'days');
	  const options = [];
	  if (daysDifference > moment(startDate).add(1, 'year').diff(startDate, 'days')) {
	    options.push(__('By year', 'motopress-appointment'));
	  }
	  if (daysDifference > moment(startDate).add(3, 'months').diff(startDate, 'days')) {
	    options.push(__('By quarter', 'motopress-appointment'));
	  }
	  if (daysDifference > moment(startDate).add(1, 'month').diff(startDate, 'days')) {
	    options.push(__('By month', 'motopress-appointment'));
	  }
	  if (daysDifference > moment(startDate).add(1, 'week').diff(startDate, 'days')) {
	    options.push(__('By week', 'motopress-appointment'));
	  }
	  if (daysDifference >= 1) {
	    options.push(__('By day', 'motopress-appointment'));
	  }
	  if (daysDifference === 0) {
	    options.push(__('By hour', 'motopress-appointment'));
	  }
	  return options;
	};

	const {
	  ButtonGroup,
	  Button,
	  Popover
	} = wp.components;
	const presets = [{
	  label: __('Today', 'motopress-appointment'),
	  range: [moment().startOf('day'), moment().endOf('day')]
	}, {
	  label: __('Yesterday', 'motopress-appointment'),
	  range: [moment().subtract(1, 'days').startOf('day'), moment().subtract(1, 'days').endOf('day')]
	}, {
	  label: __('Last week', 'motopress-appointment'),
	  range: [moment().subtract(1, 'week').startOf('week'), moment().subtract(1, 'week').endOf('week')]
	}, {
	  label: __('Last month', 'motopress-appointment'),
	  range: [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
	}, {
	  label: __('Last quarter', 'motopress-appointment'),
	  range: [moment().subtract(1, 'quarter').startOf('quarter'), moment().subtract(1, 'quarter').endOf('quarter')]
	}, {
	  label: __('This Year', 'motopress-appointment'),
	  range: [moment().startOf('year'), moment().endOf('day')]
	}];
	const DateRangeSelect = ({
	  urlFiltersStore,
	  showDatePicker,
	  setShowDatePicker
	}) => {
	  const [startDate, setStartDate] = e$1.useState(new Date(urlFiltersStore.getDateStart()));
	  const [endDate, setEndDate] = e$1.useState(new Date(urlFiltersStore.getDateEnd()));
	  const [selectedButton, setSelectedButton] = e$1.useState(null);
	  const customRangeButtonRef = e$1.useRef(null);
	  const indicateSelectedDateRangeButton = () => {
	    const start = moment(urlFiltersStore.getDateStart()).format('YYYY-MM-DD');
	    const end = moment(urlFiltersStore.getDateEnd()).format('YYYY-MM-DD');
	    const matchedPreset = presets.find(preset => {
	      const presetStart = preset.range[0].format('YYYY-MM-DD');
	      const presetEnd = preset.range[1].format('YYYY-MM-DD');
	      return start === presetStart && end === presetEnd;
	    });
	    if (matchedPreset) {
	      setSelectedButton(matchedPreset.label);
	    } else {
	      setSelectedButton(__('Custom range', 'motopress-appointment'));
	    }
	  };
	  const resetAggregateBy = (start, end) => {
	    const aggregateByPossibleValues = getPossibleAggregateOptions(start, end);
	    const currentAggregateBy = urlFiltersStore.getAggregateBy();
	    if (!aggregateByPossibleValues.includes(currentAggregateBy)) {
	      const aggregateBy = aggregateByPossibleValues.shift();
	      urlFiltersStore.setAggregateBy(aggregateBy);
	    }
	  };
	  const setDateForStore = (start, end) => {
	    if (start) {
	      urlFiltersStore.setDateStart(start);
	    }
	    if (end) {
	      urlFiltersStore.setDateEnd(end);
	      resetAggregateBy(start, end);
	      urlFiltersStore.updateHistory();
	    }
	  };
	  const handleRangeChange = dates => {
	    const [start, end] = dates;
	    setStartDate(start);
	    setEndDate(end);
	    setDateForStore(start, end);
	  };
	  e$1.useEffect(() => {
	    indicateSelectedDateRangeButton();
	  }, [urlFiltersStore.getDateStart(), urlFiltersStore.getDateEnd()]);
	  return wp.element.createElement("div", null, wp.element.createElement(ButtonGroup, null, presets.map((preset, index) => wp.element.createElement(Button, {
	    key: index,
	    isSecondary: selectedButton !== preset.label,
	    isPrimary: selectedButton === preset.label,
	    onClick: () => {
	      handleRangeChange(preset.range.map(date => new Date(date)));
	    }
	  }, preset.label)), wp.element.createElement(Button, {
	    ref: customRangeButtonRef,
	    isSecondary: selectedButton !== __('Custom range', 'motopress-appointment'),
	    isPrimary: selectedButton === __('Custom range', 'motopress-appointment'),
	    onClick: () => {
	      setSelectedButton(__('Custom range', 'motopress-appointment'));
	      setShowDatePicker(true);
	    }
	  }, __('Custom range', 'motopress-appointment'))), showDatePicker && wp.element.createElement(Popover, {
	    className: "mpa-select-date-range-popover",
	    anchor: customRangeButtonRef.current,
	    onFocusOutside: () => setShowDatePicker(false)
	  }, wp.element.createElement(er, {
	    selected: startDate,
	    onChange: handleRangeChange,
	    startDate: startDate,
	    endDate: endDate,
	    selectsRange: true,
	    inline: true,
	    calendarStartDay: moment().startOf('week').day(),
	    monthsShown: 2,
	    showPreviousMonths: true
	  })));
	};

	var global$1 = (typeof global !== "undefined" ? global :
	  typeof self !== "undefined" ? self :
	  typeof window !== "undefined" ? window : {});

	function die(error) {
	  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }
	  throw new Error(typeof error === "number" ? "[MobX] minified error nr: " + error + (args.length ? " " + args.map(String).join(",") : "") + ". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts" : "[MobX] " + error);
	}

	var mockGlobal = {};
	function getGlobal() {
	  if (typeof globalThis !== "undefined") {
	    return globalThis;
	  }
	  if (typeof window !== "undefined") {
	    return window;
	  }
	  if (typeof global$1 !== "undefined") {
	    return global$1;
	  }
	  if (typeof self !== "undefined") {
	    return self;
	  }
	  return mockGlobal;
	}

	// We shorten anything used > 5 times
	var assign$1 = Object.assign;
	var getDescriptor = Object.getOwnPropertyDescriptor;
	var defineProperty = Object.defineProperty;
	var objectPrototype = Object.prototype;
	var EMPTY_ARRAY = [];
	Object.freeze(EMPTY_ARRAY);
	var EMPTY_OBJECT = {};
	Object.freeze(EMPTY_OBJECT);
	var hasProxy = typeof Proxy !== "undefined";
	var plainObjectString = /*#__PURE__*/Object.toString();
	function assertProxies() {
	  if (!hasProxy) {
	    die("Proxy not available");
	  }
	}
	/**
	 * Makes sure that the provided function is invoked at most once.
	 */
	function once(func) {
	  var invoked = false;
	  return function () {
	    if (invoked) {
	      return;
	    }
	    invoked = true;
	    return func.apply(this, arguments);
	  };
	}
	var noop$2 = function noop() {};
	function isFunction$1(fn) {
	  return typeof fn === "function";
	}
	function isStringish(value) {
	  var t = typeof value;
	  switch (t) {
	    case "string":
	    case "symbol":
	    case "number":
	      return true;
	  }
	  return false;
	}
	function isObject$1(value) {
	  return value !== null && typeof value === "object";
	}
	function isPlainObject(value) {
	  if (!isObject$1(value)) {
	    return false;
	  }
	  var proto = Object.getPrototypeOf(value);
	  if (proto == null) {
	    return true;
	  }
	  var protoConstructor = Object.hasOwnProperty.call(proto, "constructor") && proto.constructor;
	  return typeof protoConstructor === "function" && protoConstructor.toString() === plainObjectString;
	}
	// https://stackoverflow.com/a/37865170
	function isGenerator(obj) {
	  var constructor = obj == null ? void 0 : obj.constructor;
	  if (!constructor) {
	    return false;
	  }
	  if ("GeneratorFunction" === constructor.name || "GeneratorFunction" === constructor.displayName) {
	    return true;
	  }
	  return false;
	}
	function addHiddenProp(object, propName, value) {
	  defineProperty(object, propName, {
	    enumerable: false,
	    writable: true,
	    configurable: true,
	    value: value
	  });
	}
	function addHiddenFinalProp(object, propName, value) {
	  defineProperty(object, propName, {
	    enumerable: false,
	    writable: false,
	    configurable: true,
	    value: value
	  });
	}
	function createInstanceofPredicate(name, theClass) {
	  var propName = "isMobX" + name;
	  theClass.prototype[propName] = true;
	  return function (x) {
	    return isObject$1(x) && x[propName] === true;
	  };
	}
	function isES6Map(thing) {
	  return thing instanceof Map;
	}
	function isES6Set(thing) {
	  return thing instanceof Set;
	}
	var hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== "undefined";
	/**
	 * Returns the following: own enumerable keys and symbols.
	 */
	function getPlainObjectKeys(object) {
	  var keys = Object.keys(object);
	  // Not supported in IE, so there are not going to be symbol props anyway...
	  if (!hasGetOwnPropertySymbols) {
	    return keys;
	  }
	  var symbols = Object.getOwnPropertySymbols(object);
	  if (!symbols.length) {
	    return keys;
	  }
	  return [].concat(keys, symbols.filter(function (s) {
	    return objectPrototype.propertyIsEnumerable.call(object, s);
	  }));
	}
	// From Immer utils
	// Returns all own keys, including non-enumerable and symbolic
	var ownKeys$2 = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : hasGetOwnPropertySymbols ? function (obj) {
	  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));
	} : /* istanbul ignore next */Object.getOwnPropertyNames;
	function toPrimitive(value) {
	  return value === null ? null : typeof value === "object" ? "" + value : value;
	}
	function hasProp(target, prop) {
	  return objectPrototype.hasOwnProperty.call(target, prop);
	}
	// From Immer utils
	var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(target) {
	  // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274
	  var res = {};
	  // Note: without polyfill for ownKeys, symbols won't be picked up
	  ownKeys$2(target).forEach(function (key) {
	    res[key] = getDescriptor(target, key);
	  });
	  return res;
	};

	function _defineProperties$1(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
	  }
	}
	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties$1(Constructor, staticProps);
	  Object.defineProperty(Constructor, "prototype", {
	    writable: false
	  });
	  return Constructor;
	}
	function _extends$1() {
	  _extends$1 = Object.assign ? Object.assign.bind() : function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];
	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }
	    return target;
	  };
	  return _extends$1.apply(this, arguments);
	}
	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  _setPrototypeOf(subClass, superClass);
	}
	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };
	  return _setPrototypeOf(o, p);
	}
	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	  return self;
	}
	function _unsupportedIterableToArray(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}
	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;
	  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
	  return arr2;
	}
	function _createForOfIteratorHelperLoose(o, allowArrayLike) {
	  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
	  if (it) return (it = it.call(o)).next.bind(it);
	  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
	    if (it) o = it;
	    var i = 0;
	    return function () {
	      if (i >= o.length) return {
	        done: true
	      };
	      return {
	        done: false,
	        value: o[i++]
	      };
	    };
	  }
	  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}
	function _toPrimitive(input, hint) {
	  if (typeof input !== "object" || input === null) return input;
	  var prim = input[Symbol.toPrimitive];
	  if (prim !== undefined) {
	    var res = prim.call(input, hint || "default");
	    if (typeof res !== "object") return res;
	    throw new TypeError("@@toPrimitive must return a primitive value.");
	  }
	  return (hint === "string" ? String : Number)(input);
	}
	function _toPropertyKey(arg) {
	  var key = _toPrimitive(arg, "string");
	  return typeof key === "symbol" ? key : String(key);
	}

	var storedAnnotationsSymbol = /*#__PURE__*/Symbol("mobx-stored-annotations");
	/**
	 * Creates a function that acts as
	 * - decorator
	 * - annotation object
	 */
	function createDecoratorAnnotation(annotation) {
	  function decorator(target, property) {
	    storeAnnotation(target, property, annotation);
	  }
	  return Object.assign(decorator, annotation);
	}
	/**
	 * Stores annotation to prototype,
	 * so it can be inspected later by `makeObservable` called from constructor
	 */
	function storeAnnotation(prototype, key, annotation) {
	  if (!hasProp(prototype, storedAnnotationsSymbol)) {
	    addHiddenProp(prototype, storedAnnotationsSymbol, _extends$1({}, prototype[storedAnnotationsSymbol]));
	  }
	  // Ignore override
	  if (!isOverride(annotation)) {
	    prototype[storedAnnotationsSymbol][key] = annotation;
	  }
	}
	/**
	 * Collects annotations from prototypes and stores them on target (instance)
	 */
	function collectStoredAnnotations(target) {
	  if (!hasProp(target, storedAnnotationsSymbol)) {
	    // We need a copy as we will remove annotation from the list once it's applied.
	    addHiddenProp(target, storedAnnotationsSymbol, _extends$1({}, target[storedAnnotationsSymbol]));
	  }
	  return target[storedAnnotationsSymbol];
	}

	var $mobx = /*#__PURE__*/Symbol("mobx administration");
	var Atom = /*#__PURE__*/function () {
	  // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed

	  /**
	   * Create a new atom. For debugging purposes it is recommended to give it a name.
	   * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
	   */
	  function Atom(name_) {
	    if (name_ === void 0) {
	      name_ = "Atom";
	    }
	    this.name_ = void 0;
	    this.isPendingUnobservation_ = false;
	    this.isBeingObserved_ = false;
	    this.observers_ = new Set();
	    this.diffValue_ = 0;
	    this.lastAccessedBy_ = 0;
	    this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;
	    this.onBOL = void 0;
	    this.onBUOL = void 0;
	    this.name_ = name_;
	  }
	  // onBecomeObservedListeners
	  var _proto = Atom.prototype;
	  _proto.onBO = function onBO() {
	    if (this.onBOL) {
	      this.onBOL.forEach(function (listener) {
	        return listener();
	      });
	    }
	  };
	  _proto.onBUO = function onBUO() {
	    if (this.onBUOL) {
	      this.onBUOL.forEach(function (listener) {
	        return listener();
	      });
	    }
	  }
	  /**
	   * Invoke this method to notify mobx that your atom has been used somehow.
	   * Returns true if there is currently a reactive context.
	   */;
	  _proto.reportObserved = function reportObserved$1() {
	    return reportObserved(this);
	  }
	  /**
	   * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.
	   */;
	  _proto.reportChanged = function reportChanged() {
	    startBatch();
	    propagateChanged(this);
	    // We could update state version only at the end of batch,
	    // but we would still have to switch some global flag here to signal a change.
	    globalState.stateVersion = globalState.stateVersion < Number.MAX_SAFE_INTEGER ? globalState.stateVersion + 1 : Number.MIN_SAFE_INTEGER;
	    endBatch();
	  };
	  _proto.toString = function toString() {
	    return this.name_;
	  };
	  return Atom;
	}();
	var isAtom = /*#__PURE__*/createInstanceofPredicate("Atom", Atom);
	function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
	  if (onBecomeObservedHandler === void 0) {
	    onBecomeObservedHandler = noop$2;
	  }
	  if (onBecomeUnobservedHandler === void 0) {
	    onBecomeUnobservedHandler = noop$2;
	  }
	  var atom = new Atom(name);
	  // default `noop` listener will not initialize the hook Set
	  if (onBecomeObservedHandler !== noop$2) {
	    onBecomeObserved(atom, onBecomeObservedHandler);
	  }
	  if (onBecomeUnobservedHandler !== noop$2) {
	    onBecomeUnobserved(atom, onBecomeUnobservedHandler);
	  }
	  return atom;
	}

	function identityComparer(a, b) {
	  return a === b;
	}
	function structuralComparer(a, b) {
	  return deepEqual(a, b);
	}
	function shallowComparer(a, b) {
	  return deepEqual(a, b, 1);
	}
	function defaultComparer(a, b) {
	  if (Object.is) {
	    return Object.is(a, b);
	  }
	  return a === b ? a !== 0 || 1 / a === 1 / b : a !== a && b !== b;
	}
	var comparer = {
	  identity: identityComparer,
	  structural: structuralComparer,
	  "default": defaultComparer,
	  shallow: shallowComparer
	};

	function deepEnhancer(v, _, name) {
	  // it is an observable already, done
	  if (isObservable(v)) {
	    return v;
	  }
	  // something that can be converted and mutated?
	  if (Array.isArray(v)) {
	    return observable.array(v, {
	      name: name
	    });
	  }
	  if (isPlainObject(v)) {
	    return observable.object(v, undefined, {
	      name: name
	    });
	  }
	  if (isES6Map(v)) {
	    return observable.map(v, {
	      name: name
	    });
	  }
	  if (isES6Set(v)) {
	    return observable.set(v, {
	      name: name
	    });
	  }
	  if (typeof v === "function" && !isAction(v) && !isFlow(v)) {
	    if (isGenerator(v)) {
	      return flow(v);
	    } else {
	      return autoAction(name, v);
	    }
	  }
	  return v;
	}
	function shallowEnhancer(v, _, name) {
	  if (v === undefined || v === null) {
	    return v;
	  }
	  if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v)) {
	    return v;
	  }
	  if (Array.isArray(v)) {
	    return observable.array(v, {
	      name: name,
	      deep: false
	    });
	  }
	  if (isPlainObject(v)) {
	    return observable.object(v, undefined, {
	      name: name,
	      deep: false
	    });
	  }
	  if (isES6Map(v)) {
	    return observable.map(v, {
	      name: name,
	      deep: false
	    });
	  }
	  if (isES6Set(v)) {
	    return observable.set(v, {
	      name: name,
	      deep: false
	    });
	  }
	}
	function referenceEnhancer(newValue) {
	  // never turn into an observable
	  return newValue;
	}
	function refStructEnhancer(v, oldValue) {
	  if (deepEqual(v, oldValue)) {
	    return oldValue;
	  }
	  return v;
	}

	var OVERRIDE = "override";
	function isOverride(annotation) {
	  return annotation.annotationType_ === OVERRIDE;
	}

	function createActionAnnotation(name, options) {
	  return {
	    annotationType_: name,
	    options_: options,
	    make_: make_$1,
	    extend_: extend_$1
	  };
	}
	function make_$1(adm, key, descriptor, source) {
	  var _this$options_;
	  // bound
	  if ((_this$options_ = this.options_) != null && _this$options_.bound) {
	    return this.extend_(adm, key, descriptor, false) === null ? 0 /* Cancel */ : 1 /* Break */;
	  }
	  // own
	  if (source === adm.target_) {
	    return this.extend_(adm, key, descriptor, false) === null ? 0 /* Cancel */ : 2 /* Continue */;
	  }
	  // prototype
	  if (isAction(descriptor.value)) {
	    // A prototype could have been annotated already by other constructor,
	    // rest of the proto chain must be annotated already
	    return 1 /* Break */;
	  }

	  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);
	  defineProperty(source, key, actionDescriptor);
	  return 2 /* Continue */;
	}

	function extend_$1(adm, key, descriptor, proxyTrap) {
	  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);
	  return adm.defineProperty_(key, actionDescriptor, proxyTrap);
	}
	function assertActionDescriptor(adm, _ref, key, _ref2) {
	  _ref.annotationType_;
	  _ref2.value;
	}
	function createActionDescriptor(adm, annotation, key, descriptor,
	// provides ability to disable safeDescriptors for prototypes
	safeDescriptors) {
	  var _annotation$options_, _annotation$options_$, _annotation$options_2, _annotation$options_$2, _annotation$options_3, _annotation$options_4, _adm$proxy_2;
	  if (safeDescriptors === void 0) {
	    safeDescriptors = globalState.safeDescriptors;
	  }
	  assertActionDescriptor(adm, annotation, key, descriptor);
	  var value = descriptor.value;
	  if ((_annotation$options_ = annotation.options_) != null && _annotation$options_.bound) {
	    var _adm$proxy_;
	    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
	  }
	  return {
	    value: createAction((_annotation$options_$ = (_annotation$options_2 = annotation.options_) == null ? void 0 : _annotation$options_2.name) != null ? _annotation$options_$ : key.toString(), value, (_annotation$options_$2 = (_annotation$options_3 = annotation.options_) == null ? void 0 : _annotation$options_3.autoAction) != null ? _annotation$options_$2 : false,
	    // https://github.com/mobxjs/mobx/discussions/3140
	    (_annotation$options_4 = annotation.options_) != null && _annotation$options_4.bound ? (_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_ : undefined),
	    // Non-configurable for classes
	    // prevents accidental field redefinition in subclass
	    configurable: safeDescriptors ? adm.isPlainObject_ : true,
	    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058
	    enumerable: false,
	    // Non-obsevable, therefore non-writable
	    // Also prevents rewriting in subclass constructor
	    writable: safeDescriptors ? false : true
	  };
	}

	function createFlowAnnotation(name, options) {
	  return {
	    annotationType_: name,
	    options_: options,
	    make_: make_$2,
	    extend_: extend_$2
	  };
	}
	function make_$2(adm, key, descriptor, source) {
	  var _this$options_;
	  // own
	  if (source === adm.target_) {
	    return this.extend_(adm, key, descriptor, false) === null ? 0 /* Cancel */ : 2 /* Continue */;
	  }
	  // prototype
	  // bound - must annotate protos to support super.flow()
	  if ((_this$options_ = this.options_) != null && _this$options_.bound && (!hasProp(adm.target_, key) || !isFlow(adm.target_[key]))) {
	    if (this.extend_(adm, key, descriptor, false) === null) {
	      return 0 /* Cancel */;
	    }
	  }

	  if (isFlow(descriptor.value)) {
	    // A prototype could have been annotated already by other constructor,
	    // rest of the proto chain must be annotated already
	    return 1 /* Break */;
	  }

	  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false);
	  defineProperty(source, key, flowDescriptor);
	  return 2 /* Continue */;
	}

	function extend_$2(adm, key, descriptor, proxyTrap) {
	  var _this$options_2;
	  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.bound);
	  return adm.defineProperty_(key, flowDescriptor, proxyTrap);
	}
	function assertFlowDescriptor(adm, _ref, key, _ref2) {
	  _ref.annotationType_;
	  _ref2.value;
	}
	function createFlowDescriptor(adm, annotation, key, descriptor, bound,
	// provides ability to disable safeDescriptors for prototypes
	safeDescriptors) {
	  if (safeDescriptors === void 0) {
	    safeDescriptors = globalState.safeDescriptors;
	  }
	  assertFlowDescriptor(adm, annotation, key, descriptor);
	  var value = descriptor.value;
	  // In case of flow.bound, the descriptor can be from already annotated prototype
	  if (!isFlow(value)) {
	    value = flow(value);
	  }
	  if (bound) {
	    var _adm$proxy_;
	    // We do not keep original function around, so we bind the existing flow
	    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
	    // This is normally set by `flow`, but `bind` returns new function...
	    value.isMobXFlow = true;
	  }
	  return {
	    value: value,
	    // Non-configurable for classes
	    // prevents accidental field redefinition in subclass
	    configurable: safeDescriptors ? adm.isPlainObject_ : true,
	    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058
	    enumerable: false,
	    // Non-obsevable, therefore non-writable
	    // Also prevents rewriting in subclass constructor
	    writable: safeDescriptors ? false : true
	  };
	}

	function createComputedAnnotation(name, options) {
	  return {
	    annotationType_: name,
	    options_: options,
	    make_: make_$3,
	    extend_: extend_$3
	  };
	}
	function make_$3(adm, key, descriptor) {
	  return this.extend_(adm, key, descriptor, false) === null ? 0 /* Cancel */ : 1 /* Break */;
	}

	function extend_$3(adm, key, descriptor, proxyTrap) {
	  assertComputedDescriptor(adm, this, key, descriptor);
	  return adm.defineComputedProperty_(key, _extends$1({}, this.options_, {
	    get: descriptor.get,
	    set: descriptor.set
	  }), proxyTrap);
	}
	function assertComputedDescriptor(adm, _ref, key, _ref2) {
	  _ref.annotationType_;
	  _ref2.get;
	}

	function createObservableAnnotation(name, options) {
	  return {
	    annotationType_: name,
	    options_: options,
	    make_: make_$4,
	    extend_: extend_$4
	  };
	}
	function make_$4(adm, key, descriptor) {
	  return this.extend_(adm, key, descriptor, false) === null ? 0 /* Cancel */ : 1 /* Break */;
	}

	function extend_$4(adm, key, descriptor, proxyTrap) {
	  var _this$options_$enhanc, _this$options_;
	  assertObservableDescriptor(adm, this);
	  return adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc = (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null ? _this$options_$enhanc : deepEnhancer, proxyTrap);
	}
	function assertObservableDescriptor(adm, _ref, key, descriptor) {
	  _ref.annotationType_;
	}

	var AUTO = "true";
	var autoAnnotation = /*#__PURE__*/createAutoAnnotation();
	function createAutoAnnotation(options) {
	  return {
	    annotationType_: AUTO,
	    options_: options,
	    make_: make_$5,
	    extend_: extend_$5
	  };
	}
	function make_$5(adm, key, descriptor, source) {
	  var _this$options_3, _this$options_4;
	  // getter -> computed
	  if (descriptor.get) {
	    return computed.make_(adm, key, descriptor, source);
	  }
	  // lone setter -> action setter
	  if (descriptor.set) {
	    // TODO make action applicable to setter and delegate to action.make_
	    var set = createAction(key.toString(), descriptor.set);
	    // own
	    if (source === adm.target_) {
	      return adm.defineProperty_(key, {
	        configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
	        set: set
	      }) === null ? 0 /* Cancel */ : 2 /* Continue */;
	    }
	    // proto
	    defineProperty(source, key, {
	      configurable: true,
	      set: set
	    });
	    return 2 /* Continue */;
	  }
	  // function on proto -> autoAction/flow
	  if (source !== adm.target_ && typeof descriptor.value === "function") {
	    var _this$options_2;
	    if (isGenerator(descriptor.value)) {
	      var _this$options_;
	      var flowAnnotation = (_this$options_ = this.options_) != null && _this$options_.autoBind ? flow.bound : flow;
	      return flowAnnotation.make_(adm, key, descriptor, source);
	    }
	    var actionAnnotation = (_this$options_2 = this.options_) != null && _this$options_2.autoBind ? autoAction.bound : autoAction;
	    return actionAnnotation.make_(adm, key, descriptor, source);
	  }
	  // other -> observable
	  // Copy props from proto as well, see test:
	  // "decorate should work with Object.create"
	  var observableAnnotation = ((_this$options_3 = this.options_) == null ? void 0 : _this$options_3.deep) === false ? observable.ref : observable;
	  // if function respect autoBind option
	  if (typeof descriptor.value === "function" && (_this$options_4 = this.options_) != null && _this$options_4.autoBind) {
	    var _adm$proxy_;
	    descriptor.value = descriptor.value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
	  }
	  return observableAnnotation.make_(adm, key, descriptor, source);
	}
	function extend_$5(adm, key, descriptor, proxyTrap) {
	  var _this$options_5, _this$options_6;
	  // getter -> computed
	  if (descriptor.get) {
	    return computed.extend_(adm, key, descriptor, proxyTrap);
	  }
	  // lone setter -> action setter
	  if (descriptor.set) {
	    // TODO make action applicable to setter and delegate to action.extend_
	    return adm.defineProperty_(key, {
	      configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
	      set: createAction(key.toString(), descriptor.set)
	    }, proxyTrap);
	  }
	  // other -> observable
	  // if function respect autoBind option
	  if (typeof descriptor.value === "function" && (_this$options_5 = this.options_) != null && _this$options_5.autoBind) {
	    var _adm$proxy_2;
	    descriptor.value = descriptor.value.bind((_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_);
	  }
	  var observableAnnotation = ((_this$options_6 = this.options_) == null ? void 0 : _this$options_6.deep) === false ? observable.ref : observable;
	  return observableAnnotation.extend_(adm, key, descriptor, proxyTrap);
	}

	var OBSERVABLE = "observable";
	var OBSERVABLE_REF = "observable.ref";
	var OBSERVABLE_SHALLOW = "observable.shallow";
	var OBSERVABLE_STRUCT = "observable.struct";
	// Predefined bags of create observable options, to avoid allocating temporarily option objects
	// in the majority of cases
	var defaultCreateObservableOptions = {
	  deep: true,
	  name: undefined,
	  defaultDecorator: undefined,
	  proxy: true
	};
	Object.freeze(defaultCreateObservableOptions);
	function asCreateObservableOptions(thing) {
	  return thing || defaultCreateObservableOptions;
	}
	var observableAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE);
	var observableRefAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_REF, {
	  enhancer: referenceEnhancer
	});
	var observableShallowAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_SHALLOW, {
	  enhancer: shallowEnhancer
	});
	var observableStructAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_STRUCT, {
	  enhancer: refStructEnhancer
	});
	var observableDecoratorAnnotation = /*#__PURE__*/createDecoratorAnnotation(observableAnnotation);
	function getEnhancerFromOptions(options) {
	  return options.deep === true ? deepEnhancer : options.deep === false ? referenceEnhancer : getEnhancerFromAnnotation(options.defaultDecorator);
	}
	function getAnnotationFromOptions(options) {
	  var _options$defaultDecor;
	  return options ? (_options$defaultDecor = options.defaultDecorator) != null ? _options$defaultDecor : createAutoAnnotation(options) : undefined;
	}
	function getEnhancerFromAnnotation(annotation) {
	  var _annotation$options_$, _annotation$options_;
	  return !annotation ? deepEnhancer : (_annotation$options_$ = (_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.enhancer) != null ? _annotation$options_$ : deepEnhancer;
	}
	/**
	 * Turns an object, array or function into a reactive structure.
	 * @param v the value which should become observable.
	 */
	function createObservable(v, arg2, arg3) {
	  // @observable someProp;
	  if (isStringish(arg2)) {
	    storeAnnotation(v, arg2, observableAnnotation);
	    return;
	  }
	  // already observable - ignore
	  if (isObservable(v)) {
	    return v;
	  }
	  // plain object
	  if (isPlainObject(v)) {
	    return observable.object(v, arg2, arg3);
	  }
	  // Array
	  if (Array.isArray(v)) {
	    return observable.array(v, arg2);
	  }
	  // Map
	  if (isES6Map(v)) {
	    return observable.map(v, arg2);
	  }
	  // Set
	  if (isES6Set(v)) {
	    return observable.set(v, arg2);
	  }
	  // other object - ignore
	  if (typeof v === "object" && v !== null) {
	    return v;
	  }
	  // anything else
	  return observable.box(v, arg2);
	}
	assign$1(createObservable, observableDecoratorAnnotation);
	var observableFactories = {
	  box: function box(value, options) {
	    var o = asCreateObservableOptions(options);
	    return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);
	  },
	  array: function array(initialValues, options) {
	    var o = asCreateObservableOptions(options);
	    return (globalState.useProxies === false || o.proxy === false ? createLegacyArray : createObservableArray)(initialValues, getEnhancerFromOptions(o), o.name);
	  },
	  map: function map(initialValues, options) {
	    var o = asCreateObservableOptions(options);
	    return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);
	  },
	  set: function set(initialValues, options) {
	    var o = asCreateObservableOptions(options);
	    return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);
	  },
	  object: function object(props, decorators, options) {
	    return extendObservable(globalState.useProxies === false || (options == null ? void 0 : options.proxy) === false ? asObservableObject({}, options) : asDynamicObservableObject({}, options), props, decorators);
	  },
	  ref: /*#__PURE__*/createDecoratorAnnotation(observableRefAnnotation),
	  shallow: /*#__PURE__*/createDecoratorAnnotation(observableShallowAnnotation),
	  deep: observableDecoratorAnnotation,
	  struct: /*#__PURE__*/createDecoratorAnnotation(observableStructAnnotation)
	};
	// eslint-disable-next-line
	var observable = /*#__PURE__*/assign$1(createObservable, observableFactories);

	var COMPUTED = "computed";
	var COMPUTED_STRUCT = "computed.struct";
	var computedAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED);
	var computedStructAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED_STRUCT, {
	  equals: comparer.structural
	});
	/**
	 * Decorator for class properties: @computed get value() { return expr; }.
	 * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;
	 */
	var computed = function computed(arg1, arg2) {
	  if (isStringish(arg2)) {
	    // @computed
	    return storeAnnotation(arg1, arg2, computedAnnotation);
	  }
	  if (isPlainObject(arg1)) {
	    // @computed({ options })
	    return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));
	  }
	  var opts = isPlainObject(arg2) ? arg2 : {};
	  opts.get = arg1;
	  opts.name || (opts.name = arg1.name || ""); /* for generated name */
	  return new ComputedValue(opts);
	};
	Object.assign(computed, computedAnnotation);
	computed.struct = /*#__PURE__*/createDecoratorAnnotation(computedStructAnnotation);

	var _getDescriptor$config, _getDescriptor;
	// we don't use globalState for these in order to avoid possible issues with multiple
	// mobx versions
	var currentActionId = 0;
	var nextActionId = 1;
	var isFunctionNameConfigurable = (_getDescriptor$config = (_getDescriptor = /*#__PURE__*/getDescriptor(function () {}, "name")) == null ? void 0 : _getDescriptor.configurable) != null ? _getDescriptor$config : false;
	// we can safely recycle this object
	var tmpNameDescriptor = {
	  value: "action",
	  configurable: true,
	  writable: false,
	  enumerable: false
	};
	function createAction(actionName, fn, autoAction, ref) {
	  if (autoAction === void 0) {
	    autoAction = false;
	  }
	  function res() {
	    return executeAction(actionName, autoAction, fn, ref || this, arguments);
	  }
	  res.isMobxAction = true;
	  if (isFunctionNameConfigurable) {
	    tmpNameDescriptor.value = actionName;
	    defineProperty(res, "name", tmpNameDescriptor);
	  }
	  return res;
	}
	function executeAction(actionName, canRunAsDerivation, fn, scope, args) {
	  var runInfo = _startAction(actionName, canRunAsDerivation);
	  try {
	    return fn.apply(scope, args);
	  } catch (err) {
	    runInfo.error_ = err;
	    throw err;
	  } finally {
	    _endAction(runInfo);
	  }
	}
	function _startAction(actionName, canRunAsDerivation,
	// true for autoAction
	scope, args) {
	  var notifySpy_ = "production" !== "production"  ;
	  var startTime_ = 0;
	  var prevDerivation_ = globalState.trackingDerivation;
	  var runAsAction = !canRunAsDerivation || !prevDerivation_;
	  startBatch();
	  var prevAllowStateChanges_ = globalState.allowStateChanges; // by default preserve previous allow
	  if (runAsAction) {
	    untrackedStart();
	    prevAllowStateChanges_ = allowStateChangesStart(true);
	  }
	  var prevAllowStateReads_ = allowStateReadsStart(true);
	  var runInfo = {
	    runAsAction_: runAsAction,
	    prevDerivation_: prevDerivation_,
	    prevAllowStateChanges_: prevAllowStateChanges_,
	    prevAllowStateReads_: prevAllowStateReads_,
	    notifySpy_: notifySpy_,
	    startTime_: startTime_,
	    actionId_: nextActionId++,
	    parentActionId_: currentActionId
	  };
	  currentActionId = runInfo.actionId_;
	  return runInfo;
	}
	function _endAction(runInfo) {
	  if (currentActionId !== runInfo.actionId_) {
	    die(30);
	  }
	  currentActionId = runInfo.parentActionId_;
	  if (runInfo.error_ !== undefined) {
	    globalState.suppressReactionErrors = true;
	  }
	  allowStateChangesEnd(runInfo.prevAllowStateChanges_);
	  allowStateReadsEnd(runInfo.prevAllowStateReads_);
	  endBatch();
	  if (runInfo.runAsAction_) {
	    untrackedEnd(runInfo.prevDerivation_);
	  }
	  globalState.suppressReactionErrors = false;
	}
	function allowStateChanges(allowStateChanges, func) {
	  var prev = allowStateChangesStart(allowStateChanges);
	  try {
	    return func();
	  } finally {
	    allowStateChangesEnd(prev);
	  }
	}
	function allowStateChangesStart(allowStateChanges) {
	  var prev = globalState.allowStateChanges;
	  globalState.allowStateChanges = allowStateChanges;
	  return prev;
	}
	function allowStateChangesEnd(prev) {
	  globalState.allowStateChanges = prev;
	}

	var _Symbol$toPrimitive;
	_Symbol$toPrimitive = Symbol.toPrimitive;
	var ObservableValue = /*#__PURE__*/function (_Atom) {
	  _inheritsLoose(ObservableValue, _Atom);
	  function ObservableValue(value, enhancer, name_, notifySpy, equals) {
	    var _this;
	    if (name_ === void 0) {
	      name_ = "ObservableValue";
	    }
	    if (equals === void 0) {
	      equals = comparer["default"];
	    }
	    _this = _Atom.call(this, name_) || this;
	    _this.enhancer = void 0;
	    _this.name_ = void 0;
	    _this.equals = void 0;
	    _this.hasUnreportedChange_ = false;
	    _this.interceptors_ = void 0;
	    _this.changeListeners_ = void 0;
	    _this.value_ = void 0;
	    _this.dehancer = void 0;
	    _this.enhancer = enhancer;
	    _this.name_ = name_;
	    _this.equals = equals;
	    _this.value_ = enhancer(value, undefined, name_);
	    return _this;
	  }
	  var _proto = ObservableValue.prototype;
	  _proto.dehanceValue = function dehanceValue(value) {
	    if (this.dehancer !== undefined) {
	      return this.dehancer(value);
	    }
	    return value;
	  };
	  _proto.set = function set(newValue) {
	    this.value_;
	    newValue = this.prepareNewValue_(newValue);
	    if (newValue !== globalState.UNCHANGED) {
	      this.setNewValue_(newValue);
	    }
	  };
	  _proto.prepareNewValue_ = function prepareNewValue_(newValue) {
	    if (hasInterceptors(this)) {
	      var change = interceptChange(this, {
	        object: this,
	        type: UPDATE,
	        newValue: newValue
	      });
	      if (!change) {
	        return globalState.UNCHANGED;
	      }
	      newValue = change.newValue;
	    }
	    // apply modifier
	    newValue = this.enhancer(newValue, this.value_, this.name_);
	    return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;
	  };
	  _proto.setNewValue_ = function setNewValue_(newValue) {
	    var oldValue = this.value_;
	    this.value_ = newValue;
	    this.reportChanged();
	    if (hasListeners(this)) {
	      notifyListeners(this, {
	        type: UPDATE,
	        object: this,
	        newValue: newValue,
	        oldValue: oldValue
	      });
	    }
	  };
	  _proto.get = function get() {
	    this.reportObserved();
	    return this.dehanceValue(this.value_);
	  };
	  _proto.intercept_ = function intercept_(handler) {
	    return registerInterceptor(this, handler);
	  };
	  _proto.observe_ = function observe_(listener, fireImmediately) {
	    if (fireImmediately) {
	      listener({
	        observableKind: "value",
	        debugObjectName: this.name_,
	        object: this,
	        type: UPDATE,
	        newValue: this.value_,
	        oldValue: undefined
	      });
	    }
	    return registerListener(this, listener);
	  };
	  _proto.raw = function raw() {
	    // used by MST ot get undehanced value
	    return this.value_;
	  };
	  _proto.toJSON = function toJSON() {
	    return this.get();
	  };
	  _proto.toString = function toString() {
	    return this.name_ + "[" + this.value_ + "]";
	  };
	  _proto.valueOf = function valueOf() {
	    return toPrimitive(this.get());
	  };
	  _proto[_Symbol$toPrimitive] = function () {
	    return this.valueOf();
	  };
	  return ObservableValue;
	}(Atom);
	var isObservableValue = /*#__PURE__*/createInstanceofPredicate("ObservableValue", ObservableValue);

	var _Symbol$toPrimitive$1;
	/**
	 * A node in the state dependency root that observes other nodes, and can be observed itself.
	 *
	 * ComputedValue will remember the result of the computation for the duration of the batch, or
	 * while being observed.
	 *
	 * During this time it will recompute only when one of its direct dependencies changed,
	 * but only when it is being accessed with `ComputedValue.get()`.
	 *
	 * Implementation description:
	 * 1. First time it's being accessed it will compute and remember result
	 *    give back remembered result until 2. happens
	 * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.
	 * 3. When it's being accessed, recompute if any shallow dependency changed.
	 *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.
	 *    go to step 2. either way
	 *
	 * If at any point it's outside batch and it isn't observed: reset everything and go to 1.
	 */
	_Symbol$toPrimitive$1 = Symbol.toPrimitive;
	var ComputedValue = /*#__PURE__*/function () {
	  // nodes we are looking at. Our value depends on these nodes
	  // during tracking it's an array with new observed observers

	  // to check for cycles

	  // N.B: unminified as it is used by MST

	  /**
	   * Create a new computed value based on a function expression.
	   *
	   * The `name` property is for debug purposes only.
	   *
	   * The `equals` property specifies the comparer function to use to determine if a newly produced
	   * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`
	   * compares based on identity comparison (===), and `structuralComparer` deeply compares the structure.
	   * Structural comparison can be convenient if you always produce a new aggregated object and
	   * don't want to notify observers if it is structurally the same.
	   * This is useful for working with vectors, mouse coordinates etc.
	   */
	  function ComputedValue(options) {
	    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
	    this.observing_ = [];
	    this.newObserving_ = null;
	    this.isBeingObserved_ = false;
	    this.isPendingUnobservation_ = false;
	    this.observers_ = new Set();
	    this.diffValue_ = 0;
	    this.runId_ = 0;
	    this.lastAccessedBy_ = 0;
	    this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
	    this.unboundDepsCount_ = 0;
	    this.value_ = new CaughtException(null);
	    this.name_ = void 0;
	    this.triggeredBy_ = void 0;
	    this.isComputing_ = false;
	    this.isRunningSetter_ = false;
	    this.derivation = void 0;
	    this.setter_ = void 0;
	    this.isTracing_ = TraceMode.NONE;
	    this.scope_ = void 0;
	    this.equals_ = void 0;
	    this.requiresReaction_ = void 0;
	    this.keepAlive_ = void 0;
	    this.onBOL = void 0;
	    this.onBUOL = void 0;
	    if (!options.get) {
	      die(31);
	    }
	    this.derivation = options.get;
	    this.name_ = options.name || ("ComputedValue");
	    if (options.set) {
	      this.setter_ = createAction("ComputedValue-setter", options.set);
	    }
	    this.equals_ = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer["default"]);
	    this.scope_ = options.context;
	    this.requiresReaction_ = options.requiresReaction;
	    this.keepAlive_ = !!options.keepAlive;
	  }
	  var _proto = ComputedValue.prototype;
	  _proto.onBecomeStale_ = function onBecomeStale_() {
	    propagateMaybeChanged(this);
	  };
	  _proto.onBO = function onBO() {
	    if (this.onBOL) {
	      this.onBOL.forEach(function (listener) {
	        return listener();
	      });
	    }
	  };
	  _proto.onBUO = function onBUO() {
	    if (this.onBUOL) {
	      this.onBUOL.forEach(function (listener) {
	        return listener();
	      });
	    }
	  }
	  /**
	   * Returns the current value of this computed value.
	   * Will evaluate its computation first if needed.
	   */;
	  _proto.get = function get() {
	    if (this.isComputing_) {
	      die(32, this.name_, this.derivation);
	    }
	    if (globalState.inBatch === 0 &&
	    // !globalState.trackingDerivatpion &&
	    this.observers_.size === 0 && !this.keepAlive_) {
	      if (shouldCompute(this)) {
	        this.warnAboutUntrackedRead_();
	        startBatch(); // See perf test 'computed memoization'
	        this.value_ = this.computeValue_(false);
	        endBatch();
	      }
	    } else {
	      reportObserved(this);
	      if (shouldCompute(this)) {
	        var prevTrackingContext = globalState.trackingContext;
	        if (this.keepAlive_ && !prevTrackingContext) {
	          globalState.trackingContext = this;
	        }
	        if (this.trackAndCompute()) {
	          propagateChangeConfirmed(this);
	        }
	        globalState.trackingContext = prevTrackingContext;
	      }
	    }
	    var result = this.value_;
	    if (isCaughtException(result)) {
	      throw result.cause;
	    }
	    return result;
	  };
	  _proto.set = function set(value) {
	    if (this.setter_) {
	      if (this.isRunningSetter_) {
	        die(33, this.name_);
	      }
	      this.isRunningSetter_ = true;
	      try {
	        this.setter_.call(this.scope_, value);
	      } finally {
	        this.isRunningSetter_ = false;
	      }
	    } else {
	      die(34, this.name_);
	    }
	  };
	  _proto.trackAndCompute = function trackAndCompute() {
	    // N.B: unminified as it is used by MST
	    var oldValue = this.value_;
	    var wasSuspended = /* see #1208 */this.dependenciesState_ === IDerivationState_.NOT_TRACKING_;
	    var newValue = this.computeValue_(true);
	    var changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals_(oldValue, newValue);
	    if (changed) {
	      this.value_ = newValue;
	    }
	    return changed;
	  };
	  _proto.computeValue_ = function computeValue_(track) {
	    this.isComputing_ = true;
	    // don't allow state changes during computation
	    var prev = allowStateChangesStart(false);
	    var res;
	    if (track) {
	      res = trackDerivedFunction(this, this.derivation, this.scope_);
	    } else {
	      if (globalState.disableErrorBoundaries === true) {
	        res = this.derivation.call(this.scope_);
	      } else {
	        try {
	          res = this.derivation.call(this.scope_);
	        } catch (e) {
	          res = new CaughtException(e);
	        }
	      }
	    }
	    allowStateChangesEnd(prev);
	    this.isComputing_ = false;
	    return res;
	  };
	  _proto.suspend_ = function suspend_() {
	    if (!this.keepAlive_) {
	      clearObserving(this);
	      this.value_ = undefined; // don't hold on to computed value!
	    }
	  };
	  _proto.observe_ = function observe_(listener, fireImmediately) {
	    var _this = this;
	    var firstTime = true;
	    var prevValue = undefined;
	    return autorun(function () {
	      // TODO: why is this in a different place than the spyReport() function? in all other observables it's called in the same place
	      var newValue = _this.get();
	      if (!firstTime || fireImmediately) {
	        var prevU = untrackedStart();
	        listener({
	          observableKind: "computed",
	          debugObjectName: _this.name_,
	          type: UPDATE,
	          object: _this,
	          newValue: newValue,
	          oldValue: prevValue
	        });
	        untrackedEnd(prevU);
	      }
	      firstTime = false;
	      prevValue = newValue;
	    });
	  };
	  _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {
	    {
	      return;
	    }
	  };
	  _proto.toString = function toString() {
	    return this.name_ + "[" + this.derivation.toString() + "]";
	  };
	  _proto.valueOf = function valueOf() {
	    return toPrimitive(this.get());
	  };
	  _proto[_Symbol$toPrimitive$1] = function () {
	    return this.valueOf();
	  };
	  return ComputedValue;
	}();
	var isComputedValue = /*#__PURE__*/createInstanceofPredicate("ComputedValue", ComputedValue);

	var IDerivationState_;
	(function (IDerivationState_) {
	  // before being run or (outside batch and not being observed)
	  // at this point derivation is not holding any data about dependency tree
	  IDerivationState_[IDerivationState_["NOT_TRACKING_"] = -1] = "NOT_TRACKING_";
	  // no shallow dependency changed since last computation
	  // won't recalculate derivation
	  // this is what makes mobx fast
	  IDerivationState_[IDerivationState_["UP_TO_DATE_"] = 0] = "UP_TO_DATE_";
	  // some deep dependency changed, but don't know if shallow dependency changed
	  // will require to check first if UP_TO_DATE or POSSIBLY_STALE
	  // currently only ComputedValue will propagate POSSIBLY_STALE
	  //
	  // having this state is second big optimization:
	  // don't have to recompute on every dependency change, but only when it's needed
	  IDerivationState_[IDerivationState_["POSSIBLY_STALE_"] = 1] = "POSSIBLY_STALE_";
	  // A shallow dependency has changed since last computation and the derivation
	  // will need to recompute when it's needed next.
	  IDerivationState_[IDerivationState_["STALE_"] = 2] = "STALE_";
	})(IDerivationState_ || (IDerivationState_ = {}));
	var TraceMode;
	(function (TraceMode) {
	  TraceMode[TraceMode["NONE"] = 0] = "NONE";
	  TraceMode[TraceMode["LOG"] = 1] = "LOG";
	  TraceMode[TraceMode["BREAK"] = 2] = "BREAK";
	})(TraceMode || (TraceMode = {}));
	var CaughtException = function CaughtException(cause) {
	  this.cause = void 0;
	  this.cause = cause;
	  // Empty
	};

	function isCaughtException(e) {
	  return e instanceof CaughtException;
	}
	/**
	 * Finds out whether any dependency of the derivation has actually changed.
	 * If dependenciesState is 1 then it will recalculate dependencies,
	 * if any dependency changed it will propagate it by changing dependenciesState to 2.
	 *
	 * By iterating over the dependencies in the same order that they were reported and
	 * stopping on the first change, all the recalculations are only called for ComputedValues
	 * that will be tracked by derivation. That is because we assume that if the first x
	 * dependencies of the derivation doesn't change then the derivation should run the same way
	 * up until accessing x-th dependency.
	 */
	function shouldCompute(derivation) {
	  switch (derivation.dependenciesState_) {
	    case IDerivationState_.UP_TO_DATE_:
	      return false;
	    case IDerivationState_.NOT_TRACKING_:
	    case IDerivationState_.STALE_:
	      return true;
	    case IDerivationState_.POSSIBLY_STALE_:
	      {
	        // state propagation can occur outside of action/reactive context #2195
	        var prevAllowStateReads = allowStateReadsStart(true);
	        var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.
	        var obs = derivation.observing_,
	          l = obs.length;
	        for (var i = 0; i < l; i++) {
	          var obj = obs[i];
	          if (isComputedValue(obj)) {
	            if (globalState.disableErrorBoundaries) {
	              obj.get();
	            } else {
	              try {
	                obj.get();
	              } catch (e) {
	                // we are not interested in the value *or* exception at this moment, but if there is one, notify all
	                untrackedEnd(prevUntracked);
	                allowStateReadsEnd(prevAllowStateReads);
	                return true;
	              }
	            }
	            // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.
	            // and `derivation` is an observer of `obj`
	            // invariantShouldCompute(derivation)
	            if (derivation.dependenciesState_ === IDerivationState_.STALE_) {
	              untrackedEnd(prevUntracked);
	              allowStateReadsEnd(prevAllowStateReads);
	              return true;
	            }
	          }
	        }
	        changeDependenciesStateTo0(derivation);
	        untrackedEnd(prevUntracked);
	        allowStateReadsEnd(prevAllowStateReads);
	        return false;
	      }
	  }
	}

	function checkIfStateModificationsAreAllowed(atom) {
	  {
	    return;
	  }
	}
	/**
	 * Executes the provided function `f` and tracks which observables are being accessed.
	 * The tracking information is stored on the `derivation` object and the derivation is registered
	 * as observer of any of the accessed observables.
	 */
	function trackDerivedFunction(derivation, f, context) {
	  var prevAllowStateReads = allowStateReadsStart(true);
	  // pre allocate array allocation + room for variation in deps
	  // array will be trimmed by bindDependencies
	  changeDependenciesStateTo0(derivation);
	  derivation.newObserving_ = new Array(derivation.observing_.length + 100);
	  derivation.unboundDepsCount_ = 0;
	  derivation.runId_ = ++globalState.runId;
	  var prevTracking = globalState.trackingDerivation;
	  globalState.trackingDerivation = derivation;
	  globalState.inBatch++;
	  var result;
	  if (globalState.disableErrorBoundaries === true) {
	    result = f.call(context);
	  } else {
	    try {
	      result = f.call(context);
	    } catch (e) {
	      result = new CaughtException(e);
	    }
	  }
	  globalState.inBatch--;
	  globalState.trackingDerivation = prevTracking;
	  bindDependencies(derivation);
	  allowStateReadsEnd(prevAllowStateReads);
	  return result;
	}
	/**
	 * diffs newObserving with observing.
	 * update observing to be newObserving with unique observables
	 * notify observers that become observed/unobserved
	 */
	function bindDependencies(derivation) {
	  // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");
	  var prevObserving = derivation.observing_;
	  var observing = derivation.observing_ = derivation.newObserving_;
	  var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_;
	  // Go through all new observables and check diffValue: (this list can contain duplicates):
	  //   0: first occurrence, change to 1 and keep it
	  //   1: extra occurrence, drop it
	  var i0 = 0,
	    l = derivation.unboundDepsCount_;
	  for (var i = 0; i < l; i++) {
	    var dep = observing[i];
	    if (dep.diffValue_ === 0) {
	      dep.diffValue_ = 1;
	      if (i0 !== i) {
	        observing[i0] = dep;
	      }
	      i0++;
	    }
	    // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,
	    // not hitting the condition
	    if (dep.dependenciesState_ > lowestNewObservingDerivationState) {
	      lowestNewObservingDerivationState = dep.dependenciesState_;
	    }
	  }
	  observing.length = i0;
	  derivation.newObserving_ = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)
	  // Go through all old observables and check diffValue: (it is unique after last bindDependencies)
	  //   0: it's not in new observables, unobserve it
	  //   1: it keeps being observed, don't want to notify it. change to 0
	  l = prevObserving.length;
	  while (l--) {
	    var _dep = prevObserving[l];
	    if (_dep.diffValue_ === 0) {
	      removeObserver(_dep, derivation);
	    }
	    _dep.diffValue_ = 0;
	  }
	  // Go through all new observables and check diffValue: (now it should be unique)
	  //   0: it was set to 0 in last loop. don't need to do anything.
	  //   1: it wasn't observed, let's observe it. set back to 0
	  while (i0--) {
	    var _dep2 = observing[i0];
	    if (_dep2.diffValue_ === 1) {
	      _dep2.diffValue_ = 0;
	      addObserver(_dep2, derivation);
	    }
	  }
	  // Some new observed derivations may become stale during this derivation computation
	  // so they have had no chance to propagate staleness (#916)
	  if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {
	    derivation.dependenciesState_ = lowestNewObservingDerivationState;
	    derivation.onBecomeStale_();
	  }
	}
	function clearObserving(derivation) {
	  // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");
	  var obs = derivation.observing_;
	  derivation.observing_ = [];
	  var i = obs.length;
	  while (i--) {
	    removeObserver(obs[i], derivation);
	  }
	  derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
	}
	function untracked(action) {
	  var prev = untrackedStart();
	  try {
	    return action();
	  } finally {
	    untrackedEnd(prev);
	  }
	}
	function untrackedStart() {
	  var prev = globalState.trackingDerivation;
	  globalState.trackingDerivation = null;
	  return prev;
	}
	function untrackedEnd(prev) {
	  globalState.trackingDerivation = prev;
	}
	function allowStateReadsStart(allowStateReads) {
	  var prev = globalState.allowStateReads;
	  globalState.allowStateReads = allowStateReads;
	  return prev;
	}
	function allowStateReadsEnd(prev) {
	  globalState.allowStateReads = prev;
	}
	/**
	 * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0
	 *
	 */
	function changeDependenciesStateTo0(derivation) {
	  if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
	    return;
	  }
	  derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;
	  var obs = derivation.observing_;
	  var i = obs.length;
	  while (i--) {
	    obs[i].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
	  }
	}
	var MobXGlobals = function MobXGlobals() {
	  this.version = 6;
	  this.UNCHANGED = {};
	  this.trackingDerivation = null;
	  this.trackingContext = null;
	  this.runId = 0;
	  this.mobxGuid = 0;
	  this.inBatch = 0;
	  this.pendingUnobservations = [];
	  this.pendingReactions = [];
	  this.isRunningReactions = false;
	  this.allowStateChanges = false;
	  this.allowStateReads = true;
	  this.enforceActions = true;
	  this.spyListeners = [];
	  this.globalReactionErrorHandlers = [];
	  this.computedRequiresReaction = false;
	  this.reactionRequiresObservable = false;
	  this.observableRequiresReaction = false;
	  this.disableErrorBoundaries = false;
	  this.suppressReactionErrors = false;
	  this.useProxies = true;
	  this.verifyProxies = false;
	  this.safeDescriptors = true;
	  this.stateVersion = Number.MIN_SAFE_INTEGER;
	};
	var canMergeGlobalState = true;
	var isolateCalled = false;
	var globalState = /*#__PURE__*/function () {
	  var global = /*#__PURE__*/getGlobal();
	  if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals) {
	    canMergeGlobalState = false;
	  }
	  if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version) {
	    canMergeGlobalState = false;
	  }
	  if (!canMergeGlobalState) {
	    // Because this is a IIFE we need to let isolateCalled a chance to change
	    // so we run it after the event loop completed at least 1 iteration
	    setTimeout(function () {
	      if (!isolateCalled) {
	        die(35);
	      }
	    }, 1);
	    return new MobXGlobals();
	  } else if (global.__mobxGlobals) {
	    global.__mobxInstanceCount += 1;
	    if (!global.__mobxGlobals.UNCHANGED) {
	      global.__mobxGlobals.UNCHANGED = {};
	    } // make merge backward compatible
	    return global.__mobxGlobals;
	  } else {
	    global.__mobxInstanceCount = 1;
	    return global.__mobxGlobals = /*#__PURE__*/new MobXGlobals();
	  }
	}();
	function isolateGlobalState() {
	  if (globalState.pendingReactions.length || globalState.inBatch || globalState.isRunningReactions) {
	    die(36);
	  }
	  isolateCalled = true;
	  if (canMergeGlobalState) {
	    var global = getGlobal();
	    if (--global.__mobxInstanceCount === 0) {
	      global.__mobxGlobals = undefined;
	    }
	    globalState = new MobXGlobals();
	  }
	}
	// function invariantObservers(observable: IObservable) {
	//     const list = observable.observers
	//     const map = observable.observersIndexes
	//     const l = list.length
	//     for (let i = 0; i < l; i++) {
	//         const id = list[i].__mapid
	//         if (i) {
	//             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance
	//         } else {
	//             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn't be held in map.") // for performance
	//         }
	//     }
	//     invariant(
	//         list.length === 0 || Object.keys(map).length === list.length - 1,
	//         "INTERNAL ERROR there is no junk in map"
	//     )
	// }
	function addObserver(observable, node) {
	  // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");
	  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");
	  // invariantObservers(observable);
	  observable.observers_.add(node);
	  if (observable.lowestObserverState_ > node.dependenciesState_) {
	    observable.lowestObserverState_ = node.dependenciesState_;
	  }
	  // invariantObservers(observable);
	  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn't add node");
	}

	function removeObserver(observable, node) {
	  // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");
	  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");
	  // invariantObservers(observable);
	  observable.observers_["delete"](node);
	  if (observable.observers_.size === 0) {
	    // deleting last observer
	    queueForUnobservation(observable);
	  }
	  // invariantObservers(observable);
	  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");
	}

	function queueForUnobservation(observable) {
	  if (observable.isPendingUnobservation_ === false) {
	    // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");
	    observable.isPendingUnobservation_ = true;
	    globalState.pendingUnobservations.push(observable);
	  }
	}
	/**
	 * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.
	 * During a batch `onBecomeUnobserved` will be called at most once per observable.
	 * Avoids unnecessary recalculations.
	 */
	function startBatch() {
	  globalState.inBatch++;
	}
	function endBatch() {
	  if (--globalState.inBatch === 0) {
	    runReactions();
	    // the batch is actually about to finish, all unobserving should happen here.
	    var list = globalState.pendingUnobservations;
	    for (var i = 0; i < list.length; i++) {
	      var observable = list[i];
	      observable.isPendingUnobservation_ = false;
	      if (observable.observers_.size === 0) {
	        if (observable.isBeingObserved_) {
	          // if this observable had reactive observers, trigger the hooks
	          observable.isBeingObserved_ = false;
	          observable.onBUO();
	        }
	        if (observable instanceof ComputedValue) {
	          // computed values are automatically teared down when the last observer leaves
	          // this process happens recursively, this computed might be the last observabe of another, etc..
	          observable.suspend_();
	        }
	      }
	    }
	    globalState.pendingUnobservations = [];
	  }
	}
	function reportObserved(observable) {
	  var derivation = globalState.trackingDerivation;
	  if (derivation !== null) {
	    /**
	     * Simple optimization, give each derivation run an unique id (runId)
	     * Check if last time this observable was accessed the same runId is used
	     * if this is the case, the relation is already known
	     */
	    if (derivation.runId_ !== observable.lastAccessedBy_) {
	      observable.lastAccessedBy_ = derivation.runId_;
	      // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...
	      derivation.newObserving_[derivation.unboundDepsCount_++] = observable;
	      if (!observable.isBeingObserved_ && globalState.trackingContext) {
	        observable.isBeingObserved_ = true;
	        observable.onBO();
	      }
	    }
	    return observable.isBeingObserved_;
	  } else if (observable.observers_.size === 0 && globalState.inBatch > 0) {
	    queueForUnobservation(observable);
	  }
	  return false;
	}
	// function invariantLOS(observable: IObservable, msg: string) {
	//     // it's expensive so better not run it in produciton. but temporarily helpful for testing
	//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)
	//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`
	//     throw new Error(
	//         "lowestObserverState is wrong for " +
	//             msg +
	//             " because " +
	//             min +
	//             " < " +
	//             observable.lowestObserverState
	//     )
	// }
	/**
	 * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly
	 * It will propagate changes to observers from previous run
	 * It's hard or maybe impossible (with reasonable perf) to get it right with current approach
	 * Hopefully self reruning autoruns aren't a feature people should depend on
	 * Also most basic use cases should be ok
	 */
	// Called by Atom when its value changes
	function propagateChanged(observable) {
	  // invariantLOS(observable, "changed start");
	  if (observable.lowestObserverState_ === IDerivationState_.STALE_) {
	    return;
	  }
	  observable.lowestObserverState_ = IDerivationState_.STALE_;
	  // Ideally we use for..of here, but the downcompiled version is really slow...
	  observable.observers_.forEach(function (d) {
	    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
	      d.onBecomeStale_();
	    }
	    d.dependenciesState_ = IDerivationState_.STALE_;
	  });
	  // invariantLOS(observable, "changed end");
	}
	// Called by ComputedValue when it recalculate and its value changed
	function propagateChangeConfirmed(observable) {
	  // invariantLOS(observable, "confirmed start");
	  if (observable.lowestObserverState_ === IDerivationState_.STALE_) {
	    return;
	  }
	  observable.lowestObserverState_ = IDerivationState_.STALE_;
	  observable.observers_.forEach(function (d) {
	    if (d.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {
	      d.dependenciesState_ = IDerivationState_.STALE_;
	    } else if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_ // this happens during computing of `d`, just keep lowestObserverState up to date.
	    ) {
	      observable.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
	    }
	  });
	  // invariantLOS(observable, "confirmed end");
	}
	// Used by computed when its dependency changed, but we don't wan't to immediately recompute.
	function propagateMaybeChanged(observable) {
	  // invariantLOS(observable, "maybe start");
	  if (observable.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) {
	    return;
	  }
	  observable.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;
	  observable.observers_.forEach(function (d) {
	    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
	      d.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;
	      d.onBecomeStale_();
	    }
	  });
	  // invariantLOS(observable, "maybe end");
	}

	var Reaction = /*#__PURE__*/function () {
	  // nodes we are looking at. Our value depends on these nodes

	  function Reaction(name_, onInvalidate_, errorHandler_, requiresObservable_) {
	    if (name_ === void 0) {
	      name_ = "Reaction";
	    }
	    this.name_ = void 0;
	    this.onInvalidate_ = void 0;
	    this.errorHandler_ = void 0;
	    this.requiresObservable_ = void 0;
	    this.observing_ = [];
	    this.newObserving_ = [];
	    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
	    this.diffValue_ = 0;
	    this.runId_ = 0;
	    this.unboundDepsCount_ = 0;
	    this.isDisposed_ = false;
	    this.isScheduled_ = false;
	    this.isTrackPending_ = false;
	    this.isRunning_ = false;
	    this.isTracing_ = TraceMode.NONE;
	    this.name_ = name_;
	    this.onInvalidate_ = onInvalidate_;
	    this.errorHandler_ = errorHandler_;
	    this.requiresObservable_ = requiresObservable_;
	  }
	  var _proto = Reaction.prototype;
	  _proto.onBecomeStale_ = function onBecomeStale_() {
	    this.schedule_();
	  };
	  _proto.schedule_ = function schedule_() {
	    if (!this.isScheduled_) {
	      this.isScheduled_ = true;
	      globalState.pendingReactions.push(this);
	      runReactions();
	    }
	  };
	  _proto.isScheduled = function isScheduled() {
	    return this.isScheduled_;
	  }
	  /**
	   * internal, use schedule() if you intend to kick off a reaction
	   */;
	  _proto.runReaction_ = function runReaction_() {
	    if (!this.isDisposed_) {
	      startBatch();
	      this.isScheduled_ = false;
	      var prev = globalState.trackingContext;
	      globalState.trackingContext = this;
	      if (shouldCompute(this)) {
	        this.isTrackPending_ = true;
	        try {
	          this.onInvalidate_();
	          if ("production" !== "production" && this.isTrackPending_ && isSpyEnabled()) ;
	        } catch (e) {
	          this.reportExceptionInDerivation_(e);
	        }
	      }
	      globalState.trackingContext = prev;
	      endBatch();
	    }
	  };
	  _proto.track = function track(fn) {
	    if (this.isDisposed_) {
	      return;
	      // console.warn("Reaction already disposed") // Note: Not a warning / error in mobx 4 either
	    }

	    startBatch();
	    this.isRunning_ = true;
	    var prevReaction = globalState.trackingContext; // reactions could create reactions...
	    globalState.trackingContext = this;
	    var result = trackDerivedFunction(this, fn, undefined);
	    globalState.trackingContext = prevReaction;
	    this.isRunning_ = false;
	    this.isTrackPending_ = false;
	    if (this.isDisposed_) {
	      // disposed during last run. Clean up everything that was bound after the dispose call.
	      clearObserving(this);
	    }
	    if (isCaughtException(result)) {
	      this.reportExceptionInDerivation_(result.cause);
	    }
	    endBatch();
	  };
	  _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {
	    var _this = this;
	    if (this.errorHandler_) {
	      this.errorHandler_(error, this);
	      return;
	    }
	    if (globalState.disableErrorBoundaries) {
	      throw error;
	    }
	    var message = "[mobx] uncaught error in '" + this + "'";
	    if (!globalState.suppressReactionErrors) {
	      console.error(message, error);
	      /** If debugging brought you here, please, read the above message :-). Tnx! */
	    } // prettier-ignore
	    globalState.globalReactionErrorHandlers.forEach(function (f) {
	      return f(error, _this);
	    });
	  };
	  _proto.dispose = function dispose() {
	    if (!this.isDisposed_) {
	      this.isDisposed_ = true;
	      if (!this.isRunning_) {
	        // if disposed while running, clean up later. Maybe not optimal, but rare case
	        startBatch();
	        clearObserving(this);
	        endBatch();
	      }
	    }
	  };
	  _proto.getDisposer_ = function getDisposer_() {
	    var r = this.dispose.bind(this);
	    r[$mobx] = this;
	    return r;
	  };
	  _proto.toString = function toString() {
	    return "Reaction[" + this.name_ + "]";
	  };
	  _proto.trace = function trace$1(enterBreakPoint) {
	    if (enterBreakPoint === void 0) {
	      enterBreakPoint = false;
	    }
	    trace(this, enterBreakPoint);
	  };
	  return Reaction;
	}();
	/**
	 * Magic number alert!
	 * Defines within how many times a reaction is allowed to re-trigger itself
	 * until it is assumed that this is gonna be a never ending loop...
	 */
	var MAX_REACTION_ITERATIONS = 100;
	var reactionScheduler = function reactionScheduler(f) {
	  return f();
	};
	function runReactions() {
	  // Trampolining, if runReactions are already running, new reactions will be picked up
	  if (globalState.inBatch > 0 || globalState.isRunningReactions) {
	    return;
	  }
	  reactionScheduler(runReactionsHelper);
	}
	function runReactionsHelper() {
	  globalState.isRunningReactions = true;
	  var allReactions = globalState.pendingReactions;
	  var iterations = 0;
	  // While running reactions, new reactions might be triggered.
	  // Hence we work with two variables and check whether
	  // we converge to no remaining reactions after a while.
	  while (allReactions.length > 0) {
	    if (++iterations === MAX_REACTION_ITERATIONS) {
	      console.error("[mobx] cycle in reaction: " + allReactions[0]);
	      allReactions.splice(0); // clear reactions
	    }

	    var remainingReactions = allReactions.splice(0);
	    for (var i = 0, l = remainingReactions.length; i < l; i++) {
	      remainingReactions[i].runReaction_();
	    }
	  }
	  globalState.isRunningReactions = false;
	}
	var isReaction = /*#__PURE__*/createInstanceofPredicate("Reaction", Reaction);
	function setReactionScheduler(fn) {
	  var baseScheduler = reactionScheduler;
	  reactionScheduler = function reactionScheduler(f) {
	    return fn(function () {
	      return baseScheduler(f);
	    });
	  };
	}

	function isSpyEnabled() {
	  return "production" !== "production" ;
	}
	function spyReport(event) {
	  {
	    return;
	  } // dead code elimination can do the rest
	}
	function spyReportStart(event) {
	  {
	    return;
	  }
	}
	function spyReportEnd(change) {
	  {
	    return;
	  }
	}
	function spy(listener) {
	  {
	    console.warn("[mobx.spy] Is a no-op in production builds");
	    return function () {};
	  }
	}

	var ACTION = "action";
	var ACTION_BOUND = "action.bound";
	var AUTOACTION = "autoAction";
	var AUTOACTION_BOUND = "autoAction.bound";
	var DEFAULT_ACTION_NAME = "<unnamed action>";
	var actionAnnotation = /*#__PURE__*/createActionAnnotation(ACTION);
	var actionBoundAnnotation = /*#__PURE__*/createActionAnnotation(ACTION_BOUND, {
	  bound: true
	});
	var autoActionAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION, {
	  autoAction: true
	});
	var autoActionBoundAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION_BOUND, {
	  autoAction: true,
	  bound: true
	});
	function createActionFactory(autoAction) {
	  var res = function action(arg1, arg2) {
	    // action(fn() {})
	    if (isFunction$1(arg1)) {
	      return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction);
	    }
	    // action("name", fn() {})
	    if (isFunction$1(arg2)) {
	      return createAction(arg1, arg2, autoAction);
	    }
	    // @action
	    if (isStringish(arg2)) {
	      return storeAnnotation(arg1, arg2, autoAction ? autoActionAnnotation : actionAnnotation);
	    }
	    // action("name") & @action("name")
	    if (isStringish(arg1)) {
	      return createDecoratorAnnotation(createActionAnnotation(autoAction ? AUTOACTION : ACTION, {
	        name: arg1,
	        autoAction: autoAction
	      }));
	    }
	  };
	  return res;
	}
	var action = /*#__PURE__*/createActionFactory(false);
	Object.assign(action, actionAnnotation);
	var autoAction = /*#__PURE__*/createActionFactory(true);
	Object.assign(autoAction, autoActionAnnotation);
	action.bound = /*#__PURE__*/createDecoratorAnnotation(actionBoundAnnotation);
	autoAction.bound = /*#__PURE__*/createDecoratorAnnotation(autoActionBoundAnnotation);
	function runInAction(fn) {
	  return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, undefined);
	}
	function isAction(thing) {
	  return isFunction$1(thing) && thing.isMobxAction === true;
	}

	/**
	 * Creates a named reactive view and keeps it alive, so that the view is always
	 * updated if one of the dependencies changes, even when the view is not further used by something else.
	 * @param view The reactive view
	 * @returns disposer function, which can be used to stop the view from being updated in the future.
	 */
	function autorun(view, opts) {
	  var _opts$name, _opts;
	  if (opts === void 0) {
	    opts = EMPTY_OBJECT;
	  }
	  var name = (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null ? _opts$name : "Autorun";
	  var runSync = !opts.scheduler && !opts.delay;
	  var reaction;
	  if (runSync) {
	    // normal autorun
	    reaction = new Reaction(name, function () {
	      this.track(reactionRunner);
	    }, opts.onError, opts.requiresObservable);
	  } else {
	    var scheduler = createSchedulerFromOptions(opts);
	    // debounced autorun
	    var isScheduled = false;
	    reaction = new Reaction(name, function () {
	      if (!isScheduled) {
	        isScheduled = true;
	        scheduler(function () {
	          isScheduled = false;
	          if (!reaction.isDisposed_) {
	            reaction.track(reactionRunner);
	          }
	        });
	      }
	    }, opts.onError, opts.requiresObservable);
	  }
	  function reactionRunner() {
	    view(reaction);
	  }
	  reaction.schedule_();
	  return reaction.getDisposer_();
	}
	var run = function run(f) {
	  return f();
	};
	function createSchedulerFromOptions(opts) {
	  return opts.scheduler ? opts.scheduler : opts.delay ? function (f) {
	    return setTimeout(f, opts.delay);
	  } : run;
	}

	var ON_BECOME_OBSERVED = "onBO";
	var ON_BECOME_UNOBSERVED = "onBUO";
	function onBecomeObserved(thing, arg2, arg3) {
	  return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);
	}
	function onBecomeUnobserved(thing, arg2, arg3) {
	  return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);
	}
	function interceptHook(hook, thing, arg2, arg3) {
	  var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);
	  var cb = isFunction$1(arg3) ? arg3 : arg2;
	  var listenersKey = hook + "L";
	  if (atom[listenersKey]) {
	    atom[listenersKey].add(cb);
	  } else {
	    atom[listenersKey] = new Set([cb]);
	  }
	  return function () {
	    var hookListeners = atom[listenersKey];
	    if (hookListeners) {
	      hookListeners["delete"](cb);
	      if (hookListeners.size === 0) {
	        delete atom[listenersKey];
	      }
	    }
	  };
	}

	var NEVER = "never";
	var ALWAYS = "always";
	var OBSERVED = "observed";
	// const IF_AVAILABLE = "ifavailable"
	function configure(options) {
	  if (options.isolateGlobalState === true) {
	    isolateGlobalState();
	  }
	  var useProxies = options.useProxies,
	    enforceActions = options.enforceActions;
	  if (useProxies !== undefined) {
	    globalState.useProxies = useProxies === ALWAYS ? true : useProxies === NEVER ? false : typeof Proxy !== "undefined";
	  }
	  if (useProxies === "ifavailable") {
	    globalState.verifyProxies = true;
	  }
	  if (enforceActions !== undefined) {
	    var ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED;
	    globalState.enforceActions = ea;
	    globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true;
	  }
	  ["computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "disableErrorBoundaries", "safeDescriptors"].forEach(function (key) {
	    if (key in options) {
	      globalState[key] = !!options[key];
	    }
	  });
	  globalState.allowStateReads = !globalState.observableRequiresReaction;
	  if (options.reactionScheduler) {
	    setReactionScheduler(options.reactionScheduler);
	  }
	}

	function extendObservable(target, properties, annotations, options) {
	  // Pull descriptors first, so we don't have to deal with props added by administration ($mobx)
	  var descriptors = getOwnPropertyDescriptors(properties);
	  var adm = asObservableObject(target, options)[$mobx];
	  startBatch();
	  try {
	    ownKeys$2(descriptors).forEach(function (key) {
	      adm.extend_(key, descriptors[key],
	      // must pass "undefined" for { key: undefined }
	      !annotations ? true : key in annotations ? annotations[key] : true);
	    });
	  } finally {
	    endBatch();
	  }
	  return target;
	}

	function getDependencyTree(thing, property) {
	  return nodeToDependencyTree(getAtom(thing, property));
	}
	function nodeToDependencyTree(node) {
	  var result = {
	    name: node.name_
	  };
	  if (node.observing_ && node.observing_.length > 0) {
	    result.dependencies = unique(node.observing_).map(nodeToDependencyTree);
	  }
	  return result;
	}
	function unique(list) {
	  return Array.from(new Set(list));
	}

	var generatorId = 0;
	function FlowCancellationError() {
	  this.message = "FLOW_CANCELLED";
	}
	FlowCancellationError.prototype = /*#__PURE__*/Object.create(Error.prototype);
	var flowAnnotation = /*#__PURE__*/createFlowAnnotation("flow");
	var flowBoundAnnotation = /*#__PURE__*/createFlowAnnotation("flow.bound", {
	  bound: true
	});
	var flow = /*#__PURE__*/Object.assign(function flow(arg1, arg2) {
	  // @flow
	  if (isStringish(arg2)) {
	    return storeAnnotation(arg1, arg2, flowAnnotation);
	  }
	  var generator = arg1;
	  var name = generator.name || "<unnamed flow>";
	  // Implementation based on https://github.com/tj/co/blob/master/index.js
	  var res = function res() {
	    var ctx = this;
	    var args = arguments;
	    var runId = ++generatorId;
	    var gen = action(name + " - runid: " + runId + " - init", generator).apply(ctx, args);
	    var rejector;
	    var pendingPromise = undefined;
	    var promise = new Promise(function (resolve, reject) {
	      var stepId = 0;
	      rejector = reject;
	      function onFulfilled(res) {
	        pendingPromise = undefined;
	        var ret;
	        try {
	          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res);
	        } catch (e) {
	          return reject(e);
	        }
	        next(ret);
	      }
	      function onRejected(err) {
	        pendingPromise = undefined;
	        var ret;
	        try {
	          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen["throw"]).call(gen, err);
	        } catch (e) {
	          return reject(e);
	        }
	        next(ret);
	      }
	      function next(ret) {
	        if (isFunction$1(ret == null ? void 0 : ret.then)) {
	          // an async iterator
	          ret.then(next, reject);
	          return;
	        }
	        if (ret.done) {
	          return resolve(ret.value);
	        }
	        pendingPromise = Promise.resolve(ret.value);
	        return pendingPromise.then(onFulfilled, onRejected);
	      }
	      onFulfilled(undefined); // kick off the process
	    });

	    promise.cancel = action(name + " - runid: " + runId + " - cancel", function () {
	      try {
	        if (pendingPromise) {
	          cancelPromise(pendingPromise);
	        }
	        // Finally block can return (or yield) stuff..
	        var _res = gen["return"](undefined);
	        // eat anything that promise would do, it's cancelled!
	        var yieldedPromise = Promise.resolve(_res.value);
	        yieldedPromise.then(noop$2, noop$2);
	        cancelPromise(yieldedPromise); // maybe it can be cancelled :)
	        // reject our original promise
	        rejector(new FlowCancellationError());
	      } catch (e) {
	        rejector(e); // there could be a throwing finally block
	      }
	    });

	    return promise;
	  };
	  res.isMobXFlow = true;
	  return res;
	}, flowAnnotation);
	flow.bound = /*#__PURE__*/createDecoratorAnnotation(flowBoundAnnotation);
	function cancelPromise(promise) {
	  if (isFunction$1(promise.cancel)) {
	    promise.cancel();
	  }
	}

	function isFlow(fn) {
	  return (fn == null ? void 0 : fn.isMobXFlow) === true;
	}

	function _isObservable(value, property) {
	  if (!value) {
	    return false;
	  }
	  if (property !== undefined) {
	    if (isObservableObject(value)) {
	      return value[$mobx].values_.has(property);
	    }
	    return false;
	  }
	  // For first check, see #701
	  return isObservableObject(value) || !!value[$mobx] || isAtom(value) || isReaction(value) || isComputedValue(value);
	}
	function isObservable(value) {
	  return _isObservable(value);
	}
	function apiOwnKeys(obj) {
	  if (isObservableObject(obj)) {
	    return obj[$mobx].ownKeys_();
	  }
	  die(38);
	}

	function cache(map, key, value) {
	  map.set(key, value);
	  return value;
	}
	function toJSHelper(source, __alreadySeen) {
	  if (source == null || typeof source !== "object" || source instanceof Date || !isObservable(source)) {
	    return source;
	  }
	  if (isObservableValue(source) || isComputedValue(source)) {
	    return toJSHelper(source.get(), __alreadySeen);
	  }
	  if (__alreadySeen.has(source)) {
	    return __alreadySeen.get(source);
	  }
	  if (isObservableArray(source)) {
	    var res = cache(__alreadySeen, source, new Array(source.length));
	    source.forEach(function (value, idx) {
	      res[idx] = toJSHelper(value, __alreadySeen);
	    });
	    return res;
	  }
	  if (isObservableSet(source)) {
	    var _res = cache(__alreadySeen, source, new Set());
	    source.forEach(function (value) {
	      _res.add(toJSHelper(value, __alreadySeen));
	    });
	    return _res;
	  }
	  if (isObservableMap(source)) {
	    var _res2 = cache(__alreadySeen, source, new Map());
	    source.forEach(function (value, key) {
	      _res2.set(key, toJSHelper(value, __alreadySeen));
	    });
	    return _res2;
	  } else {
	    // must be observable object
	    var _res3 = cache(__alreadySeen, source, {});
	    apiOwnKeys(source).forEach(function (key) {
	      if (objectPrototype.propertyIsEnumerable.call(source, key)) {
	        _res3[key] = toJSHelper(source[key], __alreadySeen);
	      }
	    });
	    return _res3;
	  }
	}
	/**
	 * Recursively converts an observable to it's non-observable native counterpart.
	 * It does NOT recurse into non-observables, these are left as they are, even if they contain observables.
	 * Computed and other non-enumerable properties are completely ignored.
	 * Complex scenarios require custom solution, eg implementing `toJSON` or using `serializr` lib.
	 */
	function toJS(source, options) {
	  return toJSHelper(source, new Map());
	}

	function trace() {
	  {
	    die("trace() is not available in production builds");
	  }
	  var enterBreakPoint = false;
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }
	  if (typeof args[args.length - 1] === "boolean") {
	    enterBreakPoint = args.pop();
	  }
	  var derivation = getAtomFromArgs(args);
	  if (!derivation) {
	    return die("'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
	  }
	  if (derivation.isTracing_ === TraceMode.NONE) {
	    console.log("[mobx.trace] '" + derivation.name_ + "' tracing enabled");
	  }
	  derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
	}
	function getAtomFromArgs(args) {
	  switch (args.length) {
	    case 0:
	      return globalState.trackingDerivation;
	    case 1:
	      return getAtom(args[0]);
	    case 2:
	      return getAtom(args[0], args[1]);
	  }
	}

	/**
	 * During a transaction no views are updated until the end of the transaction.
	 * The transaction will be run synchronously nonetheless.
	 *
	 * @param action a function that updates some reactive state
	 * @returns any value that was returned by the 'action' parameter.
	 */
	function transaction(action, thisArg) {
	  if (thisArg === void 0) {
	    thisArg = undefined;
	  }
	  startBatch();
	  try {
	    return action.apply(thisArg);
	  } finally {
	    endBatch();
	  }
	}

	function getAdm(target) {
	  return target[$mobx];
	}
	// Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,
	// and skip either the internal values map, or the base object with its property descriptors!
	var objectProxyTraps = {
	  has: function has(target, name) {
	    return getAdm(target).has_(name);
	  },
	  get: function get(target, name) {
	    return getAdm(target).get_(name);
	  },
	  set: function set(target, name, value) {
	    var _getAdm$set_;
	    if (!isStringish(name)) {
	      return false;
	    }
	    // null (intercepted) -> true (success)
	    return (_getAdm$set_ = getAdm(target).set_(name, value, true)) != null ? _getAdm$set_ : true;
	  },
	  deleteProperty: function deleteProperty(target, name) {
	    var _getAdm$delete_;
	    if (!isStringish(name)) {
	      return false;
	    }
	    // null (intercepted) -> true (success)
	    return (_getAdm$delete_ = getAdm(target).delete_(name, true)) != null ? _getAdm$delete_ : true;
	  },
	  defineProperty: function defineProperty(target, name, descriptor) {
	    var _getAdm$definePropert;
	    // null (intercepted) -> true (success)
	    return (_getAdm$definePropert = getAdm(target).defineProperty_(name, descriptor)) != null ? _getAdm$definePropert : true;
	  },
	  ownKeys: function ownKeys(target) {
	    return getAdm(target).ownKeys_();
	  },
	  preventExtensions: function preventExtensions(target) {
	    die(13);
	  }
	};
	function asDynamicObservableObject(target, options) {
	  var _target$$mobx, _target$$mobx$proxy_;
	  assertProxies();
	  target = asObservableObject(target, options);
	  return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null ? _target$$mobx$proxy_ : _target$$mobx.proxy_ = new Proxy(target, objectProxyTraps);
	}

	function hasInterceptors(interceptable) {
	  return interceptable.interceptors_ !== undefined && interceptable.interceptors_.length > 0;
	}
	function registerInterceptor(interceptable, handler) {
	  var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);
	  interceptors.push(handler);
	  return once(function () {
	    var idx = interceptors.indexOf(handler);
	    if (idx !== -1) {
	      interceptors.splice(idx, 1);
	    }
	  });
	}
	function interceptChange(interceptable, change) {
	  var prevU = untrackedStart();
	  try {
	    // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950
	    var interceptors = [].concat(interceptable.interceptors_ || []);
	    for (var i = 0, l = interceptors.length; i < l; i++) {
	      change = interceptors[i](change);
	      if (change && !change.type) {
	        die(14);
	      }
	      if (!change) {
	        break;
	      }
	    }
	    return change;
	  } finally {
	    untrackedEnd(prevU);
	  }
	}

	function hasListeners(listenable) {
	  return listenable.changeListeners_ !== undefined && listenable.changeListeners_.length > 0;
	}
	function registerListener(listenable, handler) {
	  var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);
	  listeners.push(handler);
	  return once(function () {
	    var idx = listeners.indexOf(handler);
	    if (idx !== -1) {
	      listeners.splice(idx, 1);
	    }
	  });
	}
	function notifyListeners(listenable, change) {
	  var prevU = untrackedStart();
	  var listeners = listenable.changeListeners_;
	  if (!listeners) {
	    return;
	  }
	  listeners = listeners.slice();
	  for (var i = 0, l = listeners.length; i < l; i++) {
	    listeners[i](change);
	  }
	  untrackedEnd(prevU);
	}

	function makeObservable(target, annotations, options) {
	  var adm = asObservableObject(target, options)[$mobx];
	  startBatch();
	  try {
	    var _annotations;
	    if ("production" !== "production" && annotations && target[storedAnnotationsSymbol]) ;
	    // Default to decorators
	    (_annotations = annotations) != null ? _annotations : annotations = collectStoredAnnotations(target);
	    // Annotate
	    ownKeys$2(annotations).forEach(function (key) {
	      return adm.make_(key, annotations[key]);
	    });
	  } finally {
	    endBatch();
	  }
	  return target;
	}
	// proto[keysSymbol] = new Set<PropertyKey>()
	var keysSymbol = /*#__PURE__*/Symbol("mobx-keys");
	function makeAutoObservable(target, overrides, options) {
	  // Optimization: avoid visiting protos
	  // Assumes that annotation.make_/.extend_ works the same for plain objects
	  if (isPlainObject(target)) {
	    return extendObservable(target, target, overrides, options);
	  }
	  var adm = asObservableObject(target, options)[$mobx];
	  // Optimization: cache keys on proto
	  // Assumes makeAutoObservable can be called only once per object and can't be used in subclass
	  if (!target[keysSymbol]) {
	    var proto = Object.getPrototypeOf(target);
	    var keys = new Set([].concat(ownKeys$2(target), ownKeys$2(proto)));
	    keys["delete"]("constructor");
	    keys["delete"]($mobx);
	    addHiddenProp(proto, keysSymbol, keys);
	  }
	  startBatch();
	  try {
	    target[keysSymbol].forEach(function (key) {
	      return adm.make_(key,
	      // must pass "undefined" for { key: undefined }
	      !overrides ? true : key in overrides ? overrides[key] : true);
	    });
	  } finally {
	    endBatch();
	  }
	  return target;
	}

	var SPLICE = "splice";
	var UPDATE = "update";
	var MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859
	var arrayTraps = {
	  get: function get(target, name) {
	    var adm = target[$mobx];
	    if (name === $mobx) {
	      return adm;
	    }
	    if (name === "length") {
	      return adm.getArrayLength_();
	    }
	    if (typeof name === "string" && !isNaN(name)) {
	      return adm.get_(parseInt(name));
	    }
	    if (hasProp(arrayExtensions, name)) {
	      return arrayExtensions[name];
	    }
	    return target[name];
	  },
	  set: function set(target, name, value) {
	    var adm = target[$mobx];
	    if (name === "length") {
	      adm.setArrayLength_(value);
	    }
	    if (typeof name === "symbol" || isNaN(name)) {
	      target[name] = value;
	    } else {
	      // numeric string
	      adm.set_(parseInt(name), value);
	    }
	    return true;
	  },
	  preventExtensions: function preventExtensions() {
	    die(15);
	  }
	};
	var ObservableArrayAdministration = /*#__PURE__*/function () {
	  // this is the prop that gets proxied, so can't replace it!

	  function ObservableArrayAdministration(name, enhancer, owned_, legacyMode_) {
	    if (name === void 0) {
	      name = "ObservableArray";
	    }
	    this.owned_ = void 0;
	    this.legacyMode_ = void 0;
	    this.atom_ = void 0;
	    this.values_ = [];
	    this.interceptors_ = void 0;
	    this.changeListeners_ = void 0;
	    this.enhancer_ = void 0;
	    this.dehancer = void 0;
	    this.proxy_ = void 0;
	    this.lastKnownLength_ = 0;
	    this.owned_ = owned_;
	    this.legacyMode_ = legacyMode_;
	    this.atom_ = new Atom(name);
	    this.enhancer_ = function (newV, oldV) {
	      return enhancer(newV, oldV, "ObservableArray[..]");
	    };
	  }
	  var _proto = ObservableArrayAdministration.prototype;
	  _proto.dehanceValue_ = function dehanceValue_(value) {
	    if (this.dehancer !== undefined) {
	      return this.dehancer(value);
	    }
	    return value;
	  };
	  _proto.dehanceValues_ = function dehanceValues_(values) {
	    if (this.dehancer !== undefined && values.length > 0) {
	      return values.map(this.dehancer);
	    }
	    return values;
	  };
	  _proto.intercept_ = function intercept_(handler) {
	    return registerInterceptor(this, handler);
	  };
	  _proto.observe_ = function observe_(listener, fireImmediately) {
	    if (fireImmediately === void 0) {
	      fireImmediately = false;
	    }
	    if (fireImmediately) {
	      listener({
	        observableKind: "array",
	        object: this.proxy_,
	        debugObjectName: this.atom_.name_,
	        type: "splice",
	        index: 0,
	        added: this.values_.slice(),
	        addedCount: this.values_.length,
	        removed: [],
	        removedCount: 0
	      });
	    }
	    return registerListener(this, listener);
	  };
	  _proto.getArrayLength_ = function getArrayLength_() {
	    this.atom_.reportObserved();
	    return this.values_.length;
	  };
	  _proto.setArrayLength_ = function setArrayLength_(newLength) {
	    if (typeof newLength !== "number" || isNaN(newLength) || newLength < 0) {
	      die("Out of range: " + newLength);
	    }
	    var currentLength = this.values_.length;
	    if (newLength === currentLength) {
	      return;
	    } else if (newLength > currentLength) {
	      var newItems = new Array(newLength - currentLength);
	      for (var i = 0; i < newLength - currentLength; i++) {
	        newItems[i] = undefined;
	      } // No Array.fill everywhere...
	      this.spliceWithArray_(currentLength, 0, newItems);
	    } else {
	      this.spliceWithArray_(newLength, currentLength - newLength);
	    }
	  };
	  _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {
	    if (oldLength !== this.lastKnownLength_) {
	      die(16);
	    }
	    this.lastKnownLength_ += delta;
	    if (this.legacyMode_ && delta > 0) {
	      reserveArrayBuffer(oldLength + delta + 1);
	    }
	  };
	  _proto.spliceWithArray_ = function spliceWithArray_(index, deleteCount, newItems) {
	    var _this = this;
	    checkIfStateModificationsAreAllowed(this.atom_);
	    var length = this.values_.length;
	    if (index === undefined) {
	      index = 0;
	    } else if (index > length) {
	      index = length;
	    } else if (index < 0) {
	      index = Math.max(0, length + index);
	    }
	    if (arguments.length === 1) {
	      deleteCount = length - index;
	    } else if (deleteCount === undefined || deleteCount === null) {
	      deleteCount = 0;
	    } else {
	      deleteCount = Math.max(0, Math.min(deleteCount, length - index));
	    }
	    if (newItems === undefined) {
	      newItems = EMPTY_ARRAY;
	    }
	    if (hasInterceptors(this)) {
	      var change = interceptChange(this, {
	        object: this.proxy_,
	        type: SPLICE,
	        index: index,
	        removedCount: deleteCount,
	        added: newItems
	      });
	      if (!change) {
	        return EMPTY_ARRAY;
	      }
	      deleteCount = change.removedCount;
	      newItems = change.added;
	    }
	    newItems = newItems.length === 0 ? newItems : newItems.map(function (v) {
	      return _this.enhancer_(v, undefined);
	    });
	    if (this.legacyMode_ || "production" !== "production") {
	      var lengthDelta = newItems.length - deleteCount;
	      this.updateArrayLength_(length, lengthDelta); // checks if internal array wasn't modified
	    }

	    var res = this.spliceItemsIntoValues_(index, deleteCount, newItems);
	    if (deleteCount !== 0 || newItems.length !== 0) {
	      this.notifyArraySplice_(index, newItems, res);
	    }
	    return this.dehanceValues_(res);
	  };
	  _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index, deleteCount, newItems) {
	    if (newItems.length < MAX_SPLICE_SIZE) {
	      var _this$values_;
	      return (_this$values_ = this.values_).splice.apply(_this$values_, [index, deleteCount].concat(newItems));
	    } else {
	      // The items removed by the splice
	      var res = this.values_.slice(index, index + deleteCount);
	      // The items that that should remain at the end of the array
	      var oldItems = this.values_.slice(index + deleteCount);
	      // New length is the previous length + addition count - deletion count
	      this.values_.length += newItems.length - deleteCount;
	      for (var i = 0; i < newItems.length; i++) {
	        this.values_[index + i] = newItems[i];
	      }
	      for (var _i = 0; _i < oldItems.length; _i++) {
	        this.values_[index + newItems.length + _i] = oldItems[_i];
	      }
	      return res;
	    }
	  };
	  _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index, newValue, oldValue) {
	    var notifySpy = !this.owned_ && isSpyEnabled();
	    var notify = hasListeners(this);
	    var change = notify || notifySpy ? {
	      observableKind: "array",
	      object: this.proxy_,
	      type: UPDATE,
	      debugObjectName: this.atom_.name_,
	      index: index,
	      newValue: newValue,
	      oldValue: oldValue
	    } : null;
	    this.atom_.reportChanged();
	    if (notify) {
	      notifyListeners(this, change);
	    }
	  };
	  _proto.notifyArraySplice_ = function notifyArraySplice_(index, added, removed) {
	    var notifySpy = !this.owned_ && isSpyEnabled();
	    var notify = hasListeners(this);
	    var change = notify || notifySpy ? {
	      observableKind: "array",
	      object: this.proxy_,
	      debugObjectName: this.atom_.name_,
	      type: SPLICE,
	      index: index,
	      removed: removed,
	      added: added,
	      removedCount: removed.length,
	      addedCount: added.length
	    } : null;
	    this.atom_.reportChanged();
	    // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe
	    if (notify) {
	      notifyListeners(this, change);
	    }
	  };
	  _proto.get_ = function get_(index) {
	    if (this.legacyMode_ && index >= this.values_.length) {
	      console.warn("[mobx] Out of bounds read: " + index);
	      return undefined;
	    }
	    this.atom_.reportObserved();
	    return this.dehanceValue_(this.values_[index]);
	  };
	  _proto.set_ = function set_(index, newValue) {
	    var values = this.values_;
	    if (this.legacyMode_ && index > values.length) {
	      // out of bounds
	      die(17, index, values.length);
	    }
	    if (index < values.length) {
	      // update at index in range
	      checkIfStateModificationsAreAllowed(this.atom_);
	      var oldValue = values[index];
	      if (hasInterceptors(this)) {
	        var change = interceptChange(this, {
	          type: UPDATE,
	          object: this.proxy_,
	          index: index,
	          newValue: newValue
	        });
	        if (!change) {
	          return;
	        }
	        newValue = change.newValue;
	      }
	      newValue = this.enhancer_(newValue, oldValue);
	      var changed = newValue !== oldValue;
	      if (changed) {
	        values[index] = newValue;
	        this.notifyArrayChildUpdate_(index, newValue, oldValue);
	      }
	    } else {
	      // For out of bound index, we don't create an actual sparse array,
	      // but rather fill the holes with undefined (same as setArrayLength_).
	      // This could be considered a bug.
	      var newItems = new Array(index + 1 - values.length);
	      for (var i = 0; i < newItems.length - 1; i++) {
	        newItems[i] = undefined;
	      } // No Array.fill everywhere...
	      newItems[newItems.length - 1] = newValue;
	      this.spliceWithArray_(values.length, 0, newItems);
	    }
	  };
	  return ObservableArrayAdministration;
	}();
	function createObservableArray(initialValues, enhancer, name, owned) {
	  if (name === void 0) {
	    name = "ObservableArray";
	  }
	  if (owned === void 0) {
	    owned = false;
	  }
	  assertProxies();
	  var adm = new ObservableArrayAdministration(name, enhancer, owned, false);
	  addHiddenFinalProp(adm.values_, $mobx, adm);
	  var proxy = new Proxy(adm.values_, arrayTraps);
	  adm.proxy_ = proxy;
	  if (initialValues && initialValues.length) {
	    var prev = allowStateChangesStart(true);
	    adm.spliceWithArray_(0, 0, initialValues);
	    allowStateChangesEnd(prev);
	  }
	  return proxy;
	}
	// eslint-disable-next-line
	var arrayExtensions = {
	  clear: function clear() {
	    return this.splice(0);
	  },
	  replace: function replace(newItems) {
	    var adm = this[$mobx];
	    return adm.spliceWithArray_(0, adm.values_.length, newItems);
	  },
	  // Used by JSON.stringify
	  toJSON: function toJSON() {
	    return this.slice();
	  },
	  /*
	   * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
	   * since these functions alter the inner structure of the array, the have side effects.
	   * Because the have side effects, they should not be used in computed function,
	   * and for that reason the do not call dependencyState.notifyObserved
	   */
	  splice: function splice(index, deleteCount) {
	    for (var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      newItems[_key - 2] = arguments[_key];
	    }
	    var adm = this[$mobx];
	    switch (arguments.length) {
	      case 0:
	        return [];
	      case 1:
	        return adm.spliceWithArray_(index);
	      case 2:
	        return adm.spliceWithArray_(index, deleteCount);
	    }
	    return adm.spliceWithArray_(index, deleteCount, newItems);
	  },
	  spliceWithArray: function spliceWithArray(index, deleteCount, newItems) {
	    return this[$mobx].spliceWithArray_(index, deleteCount, newItems);
	  },
	  push: function push() {
	    var adm = this[$mobx];
	    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      items[_key2] = arguments[_key2];
	    }
	    adm.spliceWithArray_(adm.values_.length, 0, items);
	    return adm.values_.length;
	  },
	  pop: function pop() {
	    return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];
	  },
	  shift: function shift() {
	    return this.splice(0, 1)[0];
	  },
	  unshift: function unshift() {
	    var adm = this[$mobx];
	    for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	      items[_key3] = arguments[_key3];
	    }
	    adm.spliceWithArray_(0, 0, items);
	    return adm.values_.length;
	  },
	  reverse: function reverse() {
	    // reverse by default mutates in place before returning the result
	    // which makes it both a 'derivation' and a 'mutation'.
	    if (globalState.trackingDerivation) {
	      die(37, "reverse");
	    }
	    this.replace(this.slice().reverse());
	    return this;
	  },
	  sort: function sort() {
	    // sort by default mutates in place before returning the result
	    // which goes against all good practices. Let's not change the array in place!
	    if (globalState.trackingDerivation) {
	      die(37, "sort");
	    }
	    var copy = this.slice();
	    copy.sort.apply(copy, arguments);
	    this.replace(copy);
	    return this;
	  },
	  remove: function remove(value) {
	    var adm = this[$mobx];
	    var idx = adm.dehanceValues_(adm.values_).indexOf(value);
	    if (idx > -1) {
	      this.splice(idx, 1);
	      return true;
	    }
	    return false;
	  }
	};
	/**
	 * Wrap function from prototype
	 * Without this, everything works as well, but this works
	 * faster as everything works on unproxied values
	 */
	addArrayExtension("concat", simpleFunc);
	addArrayExtension("flat", simpleFunc);
	addArrayExtension("includes", simpleFunc);
	addArrayExtension("indexOf", simpleFunc);
	addArrayExtension("join", simpleFunc);
	addArrayExtension("lastIndexOf", simpleFunc);
	addArrayExtension("slice", simpleFunc);
	addArrayExtension("toString", simpleFunc);
	addArrayExtension("toLocaleString", simpleFunc);
	// map
	addArrayExtension("every", mapLikeFunc);
	addArrayExtension("filter", mapLikeFunc);
	addArrayExtension("find", mapLikeFunc);
	addArrayExtension("findIndex", mapLikeFunc);
	addArrayExtension("flatMap", mapLikeFunc);
	addArrayExtension("forEach", mapLikeFunc);
	addArrayExtension("map", mapLikeFunc);
	addArrayExtension("some", mapLikeFunc);
	// reduce
	addArrayExtension("reduce", reduceLikeFunc);
	addArrayExtension("reduceRight", reduceLikeFunc);
	function addArrayExtension(funcName, funcFactory) {
	  if (typeof Array.prototype[funcName] === "function") {
	    arrayExtensions[funcName] = funcFactory(funcName);
	  }
	}
	// Report and delegate to dehanced array
	function simpleFunc(funcName) {
	  return function () {
	    var adm = this[$mobx];
	    adm.atom_.reportObserved();
	    var dehancedValues = adm.dehanceValues_(adm.values_);
	    return dehancedValues[funcName].apply(dehancedValues, arguments);
	  };
	}
	// Make sure callbacks recieve correct array arg #2326
	function mapLikeFunc(funcName) {
	  return function (callback, thisArg) {
	    var _this2 = this;
	    var adm = this[$mobx];
	    adm.atom_.reportObserved();
	    var dehancedValues = adm.dehanceValues_(adm.values_);
	    return dehancedValues[funcName](function (element, index) {
	      return callback.call(thisArg, element, index, _this2);
	    });
	  };
	}
	// Make sure callbacks recieve correct array arg #2326
	function reduceLikeFunc(funcName) {
	  return function () {
	    var _this3 = this;
	    var adm = this[$mobx];
	    adm.atom_.reportObserved();
	    var dehancedValues = adm.dehanceValues_(adm.values_);
	    // #2432 - reduce behavior depends on arguments.length
	    var callback = arguments[0];
	    arguments[0] = function (accumulator, currentValue, index) {
	      return callback(accumulator, currentValue, index, _this3);
	    };
	    return dehancedValues[funcName].apply(dehancedValues, arguments);
	  };
	}
	var isObservableArrayAdministration = /*#__PURE__*/createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);
	function isObservableArray(thing) {
	  return isObject$1(thing) && isObservableArrayAdministration(thing[$mobx]);
	}

	var _Symbol$iterator, _Symbol$toStringTag;
	var ObservableMapMarker = {};
	var ADD = "add";
	var DELETE = "delete";
	// just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54
	// But: https://github.com/mobxjs/mobx/issues/1556
	_Symbol$iterator = Symbol.iterator;
	_Symbol$toStringTag = Symbol.toStringTag;
	var ObservableMap = /*#__PURE__*/function () {
	  // hasMap, not hashMap >-).

	  function ObservableMap(initialData, enhancer_, name_) {
	    var _this = this;
	    if (enhancer_ === void 0) {
	      enhancer_ = deepEnhancer;
	    }
	    if (name_ === void 0) {
	      name_ = "ObservableMap";
	    }
	    this.enhancer_ = void 0;
	    this.name_ = void 0;
	    this[$mobx] = ObservableMapMarker;
	    this.data_ = void 0;
	    this.hasMap_ = void 0;
	    this.keysAtom_ = void 0;
	    this.interceptors_ = void 0;
	    this.changeListeners_ = void 0;
	    this.dehancer = void 0;
	    this.enhancer_ = enhancer_;
	    this.name_ = name_;
	    if (!isFunction$1(Map)) {
	      die(18);
	    }
	    this.keysAtom_ = createAtom("ObservableMap.keys()");
	    this.data_ = new Map();
	    this.hasMap_ = new Map();
	    allowStateChanges(true, function () {
	      _this.merge(initialData);
	    });
	  }
	  var _proto = ObservableMap.prototype;
	  _proto.has_ = function has_(key) {
	    return this.data_.has(key);
	  };
	  _proto.has = function has(key) {
	    var _this2 = this;
	    if (!globalState.trackingDerivation) {
	      return this.has_(key);
	    }
	    var entry = this.hasMap_.get(key);
	    if (!entry) {
	      var newEntry = entry = new ObservableValue(this.has_(key), referenceEnhancer, "ObservableMap.key?", false);
	      this.hasMap_.set(key, newEntry);
	      onBecomeUnobserved(newEntry, function () {
	        return _this2.hasMap_["delete"](key);
	      });
	    }
	    return entry.get();
	  };
	  _proto.set = function set(key, value) {
	    var hasKey = this.has_(key);
	    if (hasInterceptors(this)) {
	      var change = interceptChange(this, {
	        type: hasKey ? UPDATE : ADD,
	        object: this,
	        newValue: value,
	        name: key
	      });
	      if (!change) {
	        return this;
	      }
	      value = change.newValue;
	    }
	    if (hasKey) {
	      this.updateValue_(key, value);
	    } else {
	      this.addValue_(key, value);
	    }
	    return this;
	  };
	  _proto["delete"] = function _delete(key) {
	    var _this3 = this;
	    checkIfStateModificationsAreAllowed(this.keysAtom_);
	    if (hasInterceptors(this)) {
	      var change = interceptChange(this, {
	        type: DELETE,
	        object: this,
	        name: key
	      });
	      if (!change) {
	        return false;
	      }
	    }
	    if (this.has_(key)) {
	      var notifySpy = isSpyEnabled();
	      var notify = hasListeners(this);
	      var _change = notify || notifySpy ? {
	        observableKind: "map",
	        debugObjectName: this.name_,
	        type: DELETE,
	        object: this,
	        oldValue: this.data_.get(key).value_,
	        name: key
	      } : null;
	      transaction(function () {
	        var _this3$hasMap_$get;
	        _this3.keysAtom_.reportChanged();
	        (_this3$hasMap_$get = _this3.hasMap_.get(key)) == null ? void 0 : _this3$hasMap_$get.setNewValue_(false);
	        var observable = _this3.data_.get(key);
	        observable.setNewValue_(undefined);
	        _this3.data_["delete"](key);
	      });
	      if (notify) {
	        notifyListeners(this, _change);
	      }
	      return true;
	    }
	    return false;
	  };
	  _proto.updateValue_ = function updateValue_(key, newValue) {
	    var observable = this.data_.get(key);
	    newValue = observable.prepareNewValue_(newValue);
	    if (newValue !== globalState.UNCHANGED) {
	      var notifySpy = isSpyEnabled();
	      var notify = hasListeners(this);
	      var change = notify || notifySpy ? {
	        observableKind: "map",
	        debugObjectName: this.name_,
	        type: UPDATE,
	        object: this,
	        oldValue: observable.value_,
	        name: key,
	        newValue: newValue
	      } : null;
	      observable.setNewValue_(newValue);
	      if (notify) {
	        notifyListeners(this, change);
	      }
	    }
	  };
	  _proto.addValue_ = function addValue_(key, newValue) {
	    var _this4 = this;
	    checkIfStateModificationsAreAllowed(this.keysAtom_);
	    transaction(function () {
	      var _this4$hasMap_$get;
	      var observable = new ObservableValue(newValue, _this4.enhancer_, "ObservableMap.key", false);
	      _this4.data_.set(key, observable);
	      newValue = observable.value_; // value might have been changed
	      (_this4$hasMap_$get = _this4.hasMap_.get(key)) == null ? void 0 : _this4$hasMap_$get.setNewValue_(true);
	      _this4.keysAtom_.reportChanged();
	    });
	    var notifySpy = isSpyEnabled();
	    var notify = hasListeners(this);
	    var change = notify || notifySpy ? {
	      observableKind: "map",
	      debugObjectName: this.name_,
	      type: ADD,
	      object: this,
	      name: key,
	      newValue: newValue
	    } : null;
	    if (notify) {
	      notifyListeners(this, change);
	    }
	  };
	  _proto.get = function get(key) {
	    if (this.has(key)) {
	      return this.dehanceValue_(this.data_.get(key).get());
	    }
	    return this.dehanceValue_(undefined);
	  };
	  _proto.dehanceValue_ = function dehanceValue_(value) {
	    if (this.dehancer !== undefined) {
	      return this.dehancer(value);
	    }
	    return value;
	  };
	  _proto.keys = function keys() {
	    this.keysAtom_.reportObserved();
	    return this.data_.keys();
	  };
	  _proto.values = function values() {
	    var self = this;
	    var keys = this.keys();
	    return makeIterable({
	      next: function next() {
	        var _keys$next = keys.next(),
	          done = _keys$next.done,
	          value = _keys$next.value;
	        return {
	          done: done,
	          value: done ? undefined : self.get(value)
	        };
	      }
	    });
	  };
	  _proto.entries = function entries() {
	    var self = this;
	    var keys = this.keys();
	    return makeIterable({
	      next: function next() {
	        var _keys$next2 = keys.next(),
	          done = _keys$next2.done,
	          value = _keys$next2.value;
	        return {
	          done: done,
	          value: done ? undefined : [value, self.get(value)]
	        };
	      }
	    });
	  };
	  _proto[_Symbol$iterator] = function () {
	    return this.entries();
	  };
	  _proto.forEach = function forEach(callback, thisArg) {
	    for (var _iterator = _createForOfIteratorHelperLoose(this), _step; !(_step = _iterator()).done;) {
	      var _step$value = _step.value,
	        key = _step$value[0],
	        value = _step$value[1];
	      callback.call(thisArg, value, key, this);
	    }
	  }
	  /** Merge another object into this object, returns this. */;
	  _proto.merge = function merge(other) {
	    var _this5 = this;
	    if (isObservableMap(other)) {
	      other = new Map(other);
	    }
	    transaction(function () {
	      if (isPlainObject(other)) {
	        getPlainObjectKeys(other).forEach(function (key) {
	          return _this5.set(key, other[key]);
	        });
	      } else if (Array.isArray(other)) {
	        other.forEach(function (_ref) {
	          var key = _ref[0],
	            value = _ref[1];
	          return _this5.set(key, value);
	        });
	      } else if (isES6Map(other)) {
	        if (other.constructor !== Map) {
	          die(19, other);
	        }
	        other.forEach(function (value, key) {
	          return _this5.set(key, value);
	        });
	      } else if (other !== null && other !== undefined) {
	        die(20, other);
	      }
	    });
	    return this;
	  };
	  _proto.clear = function clear() {
	    var _this6 = this;
	    transaction(function () {
	      untracked(function () {
	        for (var _iterator2 = _createForOfIteratorHelperLoose(_this6.keys()), _step2; !(_step2 = _iterator2()).done;) {
	          var key = _step2.value;
	          _this6["delete"](key);
	        }
	      });
	    });
	  };
	  _proto.replace = function replace(values) {
	    var _this7 = this;
	    // Implementation requirements:
	    // - respect ordering of replacement map
	    // - allow interceptors to run and potentially prevent individual operations
	    // - don't recreate observables that already exist in original map (so we don't destroy existing subscriptions)
	    // - don't _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)
	    // - note that result map may differ from replacement map due to the interceptors
	    transaction(function () {
	      // Convert to map so we can do quick key lookups
	      var replacementMap = convertToMap(values);
	      var orderedData = new Map();
	      // Used for optimization
	      var keysReportChangedCalled = false;
	      // Delete keys that don't exist in replacement map
	      // if the key deletion is prevented by interceptor
	      // add entry at the beginning of the result map
	      for (var _iterator3 = _createForOfIteratorHelperLoose(_this7.data_.keys()), _step3; !(_step3 = _iterator3()).done;) {
	        var key = _step3.value;
	        // Concurrently iterating/deleting keys
	        // iterator should handle this correctly
	        if (!replacementMap.has(key)) {
	          var deleted = _this7["delete"](key);
	          // Was the key removed?
	          if (deleted) {
	            // _keysAtom.reportChanged() was already called
	            keysReportChangedCalled = true;
	          } else {
	            // Delete prevented by interceptor
	            var value = _this7.data_.get(key);
	            orderedData.set(key, value);
	          }
	        }
	      }
	      // Merge entries
	      for (var _iterator4 = _createForOfIteratorHelperLoose(replacementMap.entries()), _step4; !(_step4 = _iterator4()).done;) {
	        var _step4$value = _step4.value,
	          _key = _step4$value[0],
	          _value = _step4$value[1];
	        // We will want to know whether a new key is added
	        var keyExisted = _this7.data_.has(_key);
	        // Add or update value
	        _this7.set(_key, _value);
	        // The addition could have been prevent by interceptor
	        if (_this7.data_.has(_key)) {
	          // The update could have been prevented by interceptor
	          // and also we want to preserve existing values
	          // so use value from _data map (instead of replacement map)
	          var _value2 = _this7.data_.get(_key);
	          orderedData.set(_key, _value2);
	          // Was a new key added?
	          if (!keyExisted) {
	            // _keysAtom.reportChanged() was already called
	            keysReportChangedCalled = true;
	          }
	        }
	      }
	      // Check for possible key order change
	      if (!keysReportChangedCalled) {
	        if (_this7.data_.size !== orderedData.size) {
	          // If size differs, keys are definitely modified
	          _this7.keysAtom_.reportChanged();
	        } else {
	          var iter1 = _this7.data_.keys();
	          var iter2 = orderedData.keys();
	          var next1 = iter1.next();
	          var next2 = iter2.next();
	          while (!next1.done) {
	            if (next1.value !== next2.value) {
	              _this7.keysAtom_.reportChanged();
	              break;
	            }
	            next1 = iter1.next();
	            next2 = iter2.next();
	          }
	        }
	      }
	      // Use correctly ordered map
	      _this7.data_ = orderedData;
	    });
	    return this;
	  };
	  _proto.toString = function toString() {
	    return "[object ObservableMap]";
	  };
	  _proto.toJSON = function toJSON() {
	    return Array.from(this);
	  };
	  /**
	   * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
	   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
	   * for callback details
	   */
	  _proto.observe_ = function observe_(listener, fireImmediately) {
	    return registerListener(this, listener);
	  };
	  _proto.intercept_ = function intercept_(handler) {
	    return registerInterceptor(this, handler);
	  };
	  _createClass(ObservableMap, [{
	    key: "size",
	    get: function get() {
	      this.keysAtom_.reportObserved();
	      return this.data_.size;
	    }
	  }, {
	    key: _Symbol$toStringTag,
	    get: function get() {
	      return "Map";
	    }
	  }]);
	  return ObservableMap;
	}();
	// eslint-disable-next-line
	var isObservableMap = /*#__PURE__*/createInstanceofPredicate("ObservableMap", ObservableMap);
	function convertToMap(dataStructure) {
	  if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {
	    return dataStructure;
	  } else if (Array.isArray(dataStructure)) {
	    return new Map(dataStructure);
	  } else if (isPlainObject(dataStructure)) {
	    var map = new Map();
	    for (var key in dataStructure) {
	      map.set(key, dataStructure[key]);
	    }
	    return map;
	  } else {
	    return die(21, dataStructure);
	  }
	}

	var _Symbol$iterator$1, _Symbol$toStringTag$1;
	var ObservableSetMarker = {};
	_Symbol$iterator$1 = Symbol.iterator;
	_Symbol$toStringTag$1 = Symbol.toStringTag;
	var ObservableSet = /*#__PURE__*/function () {
	  function ObservableSet(initialData, enhancer, name_) {
	    if (enhancer === void 0) {
	      enhancer = deepEnhancer;
	    }
	    if (name_ === void 0) {
	      name_ = "ObservableSet";
	    }
	    this.name_ = void 0;
	    this[$mobx] = ObservableSetMarker;
	    this.data_ = new Set();
	    this.atom_ = void 0;
	    this.changeListeners_ = void 0;
	    this.interceptors_ = void 0;
	    this.dehancer = void 0;
	    this.enhancer_ = void 0;
	    this.name_ = name_;
	    if (!isFunction$1(Set)) {
	      die(22);
	    }
	    this.atom_ = createAtom(this.name_);
	    this.enhancer_ = function (newV, oldV) {
	      return enhancer(newV, oldV, name_);
	    };
	    if (initialData) {
	      this.replace(initialData);
	    }
	  }
	  var _proto = ObservableSet.prototype;
	  _proto.dehanceValue_ = function dehanceValue_(value) {
	    if (this.dehancer !== undefined) {
	      return this.dehancer(value);
	    }
	    return value;
	  };
	  _proto.clear = function clear() {
	    var _this = this;
	    transaction(function () {
	      untracked(function () {
	        for (var _iterator = _createForOfIteratorHelperLoose(_this.data_.values()), _step; !(_step = _iterator()).done;) {
	          var value = _step.value;
	          _this["delete"](value);
	        }
	      });
	    });
	  };
	  _proto.forEach = function forEach(callbackFn, thisArg) {
	    for (var _iterator2 = _createForOfIteratorHelperLoose(this), _step2; !(_step2 = _iterator2()).done;) {
	      var value = _step2.value;
	      callbackFn.call(thisArg, value, value, this);
	    }
	  };
	  _proto.add = function add(value) {
	    var _this2 = this;
	    checkIfStateModificationsAreAllowed(this.atom_);
	    if (hasInterceptors(this)) {
	      var change = interceptChange(this, {
	        type: ADD,
	        object: this,
	        newValue: value
	      });
	      if (!change) {
	        return this;
	      }
	      // ideally, value = change.value would be done here, so that values can be
	      // changed by interceptor. Same applies for other Set and Map api's.
	    }

	    if (!this.has(value)) {
	      transaction(function () {
	        _this2.data_.add(_this2.enhancer_(value, undefined));
	        _this2.atom_.reportChanged();
	      });
	      var notifySpy = "production" !== "production" ;
	      var notify = hasListeners(this);
	      var _change = notify || notifySpy ? {
	        observableKind: "set",
	        debugObjectName: this.name_,
	        type: ADD,
	        object: this,
	        newValue: value
	      } : null;
	      if (notify) {
	        notifyListeners(this, _change);
	      }
	    }
	    return this;
	  };
	  _proto["delete"] = function _delete(value) {
	    var _this3 = this;
	    if (hasInterceptors(this)) {
	      var change = interceptChange(this, {
	        type: DELETE,
	        object: this,
	        oldValue: value
	      });
	      if (!change) {
	        return false;
	      }
	    }
	    if (this.has(value)) {
	      var notifySpy = "production" !== "production" ;
	      var notify = hasListeners(this);
	      var _change2 = notify || notifySpy ? {
	        observableKind: "set",
	        debugObjectName: this.name_,
	        type: DELETE,
	        object: this,
	        oldValue: value
	      } : null;
	      transaction(function () {
	        _this3.atom_.reportChanged();
	        _this3.data_["delete"](value);
	      });
	      if (notify) {
	        notifyListeners(this, _change2);
	      }
	      return true;
	    }
	    return false;
	  };
	  _proto.has = function has(value) {
	    this.atom_.reportObserved();
	    return this.data_.has(this.dehanceValue_(value));
	  };
	  _proto.entries = function entries() {
	    var nextIndex = 0;
	    var keys = Array.from(this.keys());
	    var values = Array.from(this.values());
	    return makeIterable({
	      next: function next() {
	        var index = nextIndex;
	        nextIndex += 1;
	        return index < values.length ? {
	          value: [keys[index], values[index]],
	          done: false
	        } : {
	          done: true
	        };
	      }
	    });
	  };
	  _proto.keys = function keys() {
	    return this.values();
	  };
	  _proto.values = function values() {
	    this.atom_.reportObserved();
	    var self = this;
	    var nextIndex = 0;
	    var observableValues = Array.from(this.data_.values());
	    return makeIterable({
	      next: function next() {
	        return nextIndex < observableValues.length ? {
	          value: self.dehanceValue_(observableValues[nextIndex++]),
	          done: false
	        } : {
	          done: true
	        };
	      }
	    });
	  };
	  _proto.replace = function replace(other) {
	    var _this4 = this;
	    if (isObservableSet(other)) {
	      other = new Set(other);
	    }
	    transaction(function () {
	      if (Array.isArray(other)) {
	        _this4.clear();
	        other.forEach(function (value) {
	          return _this4.add(value);
	        });
	      } else if (isES6Set(other)) {
	        _this4.clear();
	        other.forEach(function (value) {
	          return _this4.add(value);
	        });
	      } else if (other !== null && other !== undefined) {
	        die("Cannot initialize set from " + other);
	      }
	    });
	    return this;
	  };
	  _proto.observe_ = function observe_(listener, fireImmediately) {
	    return registerListener(this, listener);
	  };
	  _proto.intercept_ = function intercept_(handler) {
	    return registerInterceptor(this, handler);
	  };
	  _proto.toJSON = function toJSON() {
	    return Array.from(this);
	  };
	  _proto.toString = function toString() {
	    return "[object ObservableSet]";
	  };
	  _proto[_Symbol$iterator$1] = function () {
	    return this.values();
	  };
	  _createClass(ObservableSet, [{
	    key: "size",
	    get: function get() {
	      this.atom_.reportObserved();
	      return this.data_.size;
	    }
	  }, {
	    key: _Symbol$toStringTag$1,
	    get: function get() {
	      return "Set";
	    }
	  }]);
	  return ObservableSet;
	}();
	// eslint-disable-next-line
	var isObservableSet = /*#__PURE__*/createInstanceofPredicate("ObservableSet", ObservableSet);

	var descriptorCache = /*#__PURE__*/Object.create(null);
	var REMOVE = "remove";
	var ObservableObjectAdministration = /*#__PURE__*/function () {
	  function ObservableObjectAdministration(target_, values_, name_,
	  // Used anytime annotation is not explicitely provided
	  defaultAnnotation_) {
	    if (values_ === void 0) {
	      values_ = new Map();
	    }
	    if (defaultAnnotation_ === void 0) {
	      defaultAnnotation_ = autoAnnotation;
	    }
	    this.target_ = void 0;
	    this.values_ = void 0;
	    this.name_ = void 0;
	    this.defaultAnnotation_ = void 0;
	    this.keysAtom_ = void 0;
	    this.changeListeners_ = void 0;
	    this.interceptors_ = void 0;
	    this.proxy_ = void 0;
	    this.isPlainObject_ = void 0;
	    this.appliedAnnotations_ = void 0;
	    this.pendingKeys_ = void 0;
	    this.target_ = target_;
	    this.values_ = values_;
	    this.name_ = name_;
	    this.defaultAnnotation_ = defaultAnnotation_;
	    this.keysAtom_ = new Atom("ObservableObject.keys");
	    // Optimization: we use this frequently
	    this.isPlainObject_ = isPlainObject(this.target_);
	  }
	  var _proto = ObservableObjectAdministration.prototype;
	  _proto.getObservablePropValue_ = function getObservablePropValue_(key) {
	    return this.values_.get(key).get();
	  };
	  _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {
	    var observable = this.values_.get(key);
	    if (observable instanceof ComputedValue) {
	      observable.set(newValue);
	      return true;
	    }
	    // intercept
	    if (hasInterceptors(this)) {
	      var change = interceptChange(this, {
	        type: UPDATE,
	        object: this.proxy_ || this.target_,
	        name: key,
	        newValue: newValue
	      });
	      if (!change) {
	        return null;
	      }
	      newValue = change.newValue;
	    }
	    newValue = observable.prepareNewValue_(newValue);
	    // notify spy & observers
	    if (newValue !== globalState.UNCHANGED) {
	      var notify = hasListeners(this);
	      var notifySpy = "production" !== "production" ;
	      var _change = notify || notifySpy ? {
	        type: UPDATE,
	        observableKind: "object",
	        debugObjectName: this.name_,
	        object: this.proxy_ || this.target_,
	        oldValue: observable.value_,
	        name: key,
	        newValue: newValue
	      } : null;
	      observable.setNewValue_(newValue);
	      if (notify) {
	        notifyListeners(this, _change);
	      }
	    }
	    return true;
	  };
	  _proto.get_ = function get_(key) {
	    if (globalState.trackingDerivation && !hasProp(this.target_, key)) {
	      // Key doesn't exist yet, subscribe for it in case it's added later
	      this.has_(key);
	    }
	    return this.target_[key];
	  }
	  /**
	   * @param {PropertyKey} key
	   * @param {any} value
	   * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is
	   * @param {boolean} proxyTrap whether it's called from proxy trap
	   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
	   */;
	  _proto.set_ = function set_(key, value, proxyTrap) {
	    if (proxyTrap === void 0) {
	      proxyTrap = false;
	    }
	    // Don't use .has(key) - we care about own
	    if (hasProp(this.target_, key)) {
	      // Existing prop
	      if (this.values_.has(key)) {
	        // Observable (can be intercepted)
	        return this.setObservablePropValue_(key, value);
	      } else if (proxyTrap) {
	        // Non-observable - proxy
	        return Reflect.set(this.target_, key, value);
	      } else {
	        // Non-observable
	        this.target_[key] = value;
	        return true;
	      }
	    } else {
	      // New prop
	      return this.extend_(key, {
	        value: value,
	        enumerable: true,
	        writable: true,
	        configurable: true
	      }, this.defaultAnnotation_, proxyTrap);
	    }
	  }
	  // Trap for "in"
	  ;
	  _proto.has_ = function has_(key) {
	    if (!globalState.trackingDerivation) {
	      // Skip key subscription outside derivation
	      return key in this.target_;
	    }
	    this.pendingKeys_ || (this.pendingKeys_ = new Map());
	    var entry = this.pendingKeys_.get(key);
	    if (!entry) {
	      entry = new ObservableValue(key in this.target_, referenceEnhancer, "ObservableObject.key?", false);
	      this.pendingKeys_.set(key, entry);
	    }
	    return entry.get();
	  }
	  /**
	   * @param {PropertyKey} key
	   * @param {Annotation|boolean} annotation true - use default annotation, false - ignore prop
	   */;
	  _proto.make_ = function make_(key, annotation) {
	    if (annotation === true) {
	      annotation = this.defaultAnnotation_;
	    }
	    if (annotation === false) {
	      return;
	    }
	    if (!(key in this.target_)) {
	      var _this$target_$storedA;
	      // Throw on missing key, except for decorators:
	      // Decorator annotations are collected from whole prototype chain.
	      // When called from super() some props may not exist yet.
	      // However we don't have to worry about missing prop,
	      // because the decorator must have been applied to something.
	      if ((_this$target_$storedA = this.target_[storedAnnotationsSymbol]) != null && _this$target_$storedA[key]) {
	        return; // will be annotated by subclass constructor
	      } else {
	        die(1, annotation.annotationType_, this.name_ + "." + key.toString());
	      }
	    }
	    var source = this.target_;
	    while (source && source !== objectPrototype) {
	      var descriptor = getDescriptor(source, key);
	      if (descriptor) {
	        var outcome = annotation.make_(this, key, descriptor, source);
	        if (outcome === 0 /* Cancel */) {
	          return;
	        }
	        if (outcome === 1 /* Break */) {
	          break;
	        }
	      }
	      source = Object.getPrototypeOf(source);
	    }
	    recordAnnotationApplied(this, annotation, key);
	  }
	  /**
	   * @param {PropertyKey} key
	   * @param {PropertyDescriptor} descriptor
	   * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is
	   * @param {boolean} proxyTrap whether it's called from proxy trap
	   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
	   */;
	  _proto.extend_ = function extend_(key, descriptor, annotation, proxyTrap) {
	    if (proxyTrap === void 0) {
	      proxyTrap = false;
	    }
	    if (annotation === true) {
	      annotation = this.defaultAnnotation_;
	    }
	    if (annotation === false) {
	      return this.defineProperty_(key, descriptor, proxyTrap);
	    }
	    var outcome = annotation.extend_(this, key, descriptor, proxyTrap);
	    if (outcome) {
	      recordAnnotationApplied(this, annotation, key);
	    }
	    return outcome;
	  }
	  /**
	   * @param {PropertyKey} key
	   * @param {PropertyDescriptor} descriptor
	   * @param {boolean} proxyTrap whether it's called from proxy trap
	   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
	   */;
	  _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {
	    if (proxyTrap === void 0) {
	      proxyTrap = false;
	    }
	    try {
	      startBatch();
	      // Delete
	      var deleteOutcome = this.delete_(key);
	      if (!deleteOutcome) {
	        // Failure or intercepted
	        return deleteOutcome;
	      }
	      // ADD interceptor
	      if (hasInterceptors(this)) {
	        var change = interceptChange(this, {
	          object: this.proxy_ || this.target_,
	          name: key,
	          type: ADD,
	          newValue: descriptor.value
	        });
	        if (!change) {
	          return null;
	        }
	        var newValue = change.newValue;
	        if (descriptor.value !== newValue) {
	          descriptor = _extends$1({}, descriptor, {
	            value: newValue
	          });
	        }
	      }
	      // Define
	      if (proxyTrap) {
	        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
	          return false;
	        }
	      } else {
	        defineProperty(this.target_, key, descriptor);
	      }
	      // Notify
	      this.notifyPropertyAddition_(key, descriptor.value);
	    } finally {
	      endBatch();
	    }
	    return true;
	  }
	  // If original descriptor becomes relevant, move this to annotation directly
	  ;
	  _proto.defineObservableProperty_ = function defineObservableProperty_(key, value, enhancer, proxyTrap) {
	    if (proxyTrap === void 0) {
	      proxyTrap = false;
	    }
	    try {
	      startBatch();
	      // Delete
	      var deleteOutcome = this.delete_(key);
	      if (!deleteOutcome) {
	        // Failure or intercepted
	        return deleteOutcome;
	      }
	      // ADD interceptor
	      if (hasInterceptors(this)) {
	        var change = interceptChange(this, {
	          object: this.proxy_ || this.target_,
	          name: key,
	          type: ADD,
	          newValue: value
	        });
	        if (!change) {
	          return null;
	        }
	        value = change.newValue;
	      }
	      var cachedDescriptor = getCachedObservablePropDescriptor(key);
	      var descriptor = {
	        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
	        enumerable: true,
	        get: cachedDescriptor.get,
	        set: cachedDescriptor.set
	      };
	      // Define
	      if (proxyTrap) {
	        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
	          return false;
	        }
	      } else {
	        defineProperty(this.target_, key, descriptor);
	      }
	      var observable = new ObservableValue(value, enhancer, "production" !== "production" ? this.name_ + "." + key.toString() : "ObservableObject.key", false);
	      this.values_.set(key, observable);
	      // Notify (value possibly changed by ObservableValue)
	      this.notifyPropertyAddition_(key, observable.value_);
	    } finally {
	      endBatch();
	    }
	    return true;
	  }
	  // If original descriptor becomes relevant, move this to annotation directly
	  ;
	  _proto.defineComputedProperty_ = function defineComputedProperty_(key, options, proxyTrap) {
	    if (proxyTrap === void 0) {
	      proxyTrap = false;
	    }
	    try {
	      startBatch();
	      // Delete
	      var deleteOutcome = this.delete_(key);
	      if (!deleteOutcome) {
	        // Failure or intercepted
	        return deleteOutcome;
	      }
	      // ADD interceptor
	      if (hasInterceptors(this)) {
	        var change = interceptChange(this, {
	          object: this.proxy_ || this.target_,
	          name: key,
	          type: ADD,
	          newValue: undefined
	        });
	        if (!change) {
	          return null;
	        }
	      }
	      options.name || (options.name = "production" !== "production" ? this.name_ + "." + key.toString() : "ObservableObject.key");
	      options.context = this.proxy_ || this.target_;
	      var cachedDescriptor = getCachedObservablePropDescriptor(key);
	      var descriptor = {
	        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
	        enumerable: false,
	        get: cachedDescriptor.get,
	        set: cachedDescriptor.set
	      };
	      // Define
	      if (proxyTrap) {
	        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
	          return false;
	        }
	      } else {
	        defineProperty(this.target_, key, descriptor);
	      }
	      this.values_.set(key, new ComputedValue(options));
	      // Notify
	      this.notifyPropertyAddition_(key, undefined);
	    } finally {
	      endBatch();
	    }
	    return true;
	  }
	  /**
	   * @param {PropertyKey} key
	   * @param {PropertyDescriptor} descriptor
	   * @param {boolean} proxyTrap whether it's called from proxy trap
	   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
	   */;
	  _proto.delete_ = function delete_(key, proxyTrap) {
	    if (proxyTrap === void 0) {
	      proxyTrap = false;
	    }
	    // No such prop
	    if (!hasProp(this.target_, key)) {
	      return true;
	    }
	    // Intercept
	    if (hasInterceptors(this)) {
	      var change = interceptChange(this, {
	        object: this.proxy_ || this.target_,
	        name: key,
	        type: REMOVE
	      });
	      // Cancelled
	      if (!change) {
	        return null;
	      }
	    }
	    // Delete
	    try {
	      var _this$pendingKeys_, _this$pendingKeys_$ge;
	      startBatch();
	      var notify = hasListeners(this);
	      var notifySpy = "production" !== "production" && isSpyEnabled();
	      var observable = this.values_.get(key);
	      // Value needed for spies/listeners
	      var value = undefined;
	      // Optimization: don't pull the value unless we will need it
	      if (!observable && (notify || notifySpy)) {
	        var _getDescriptor;
	        value = (_getDescriptor = getDescriptor(this.target_, key)) == null ? void 0 : _getDescriptor.value;
	      }
	      // delete prop (do first, may fail)
	      if (proxyTrap) {
	        if (!Reflect.deleteProperty(this.target_, key)) {
	          return false;
	        }
	      } else {
	        delete this.target_[key];
	      }
	      // Allow re-annotating this field
	      if ("production" !== "production") ;
	      // Clear observable
	      if (observable) {
	        this.values_["delete"](key);
	        // for computed, value is undefined
	        if (observable instanceof ObservableValue) {
	          value = observable.value_;
	        }
	        // Notify: autorun(() => obj[key]), see #1796
	        propagateChanged(observable);
	      }
	      // Notify "keys/entries/values" observers
	      this.keysAtom_.reportChanged();
	      // Notify "has" observers
	      // "in" as it may still exist in proto
	      (_this$pendingKeys_ = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_$ge = _this$pendingKeys_.get(key)) == null ? void 0 : _this$pendingKeys_$ge.set(key in this.target_);
	      // Notify spies/listeners
	      if (notify || notifySpy) {
	        var _change2 = {
	          type: REMOVE,
	          observableKind: "object",
	          object: this.proxy_ || this.target_,
	          debugObjectName: this.name_,
	          oldValue: value,
	          name: key
	        };
	        if ("production" !== "production" && notifySpy) ;
	        if (notify) {
	          notifyListeners(this, _change2);
	        }
	        if ("production" !== "production" && notifySpy) ;
	      }
	    } finally {
	      endBatch();
	    }
	    return true;
	  }
	  /**
	   * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
	   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
	   * for callback details
	   */;
	  _proto.observe_ = function observe_(callback, fireImmediately) {
	    return registerListener(this, callback);
	  };
	  _proto.intercept_ = function intercept_(handler) {
	    return registerInterceptor(this, handler);
	  };
	  _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {
	    var _this$pendingKeys_2, _this$pendingKeys_2$g;
	    var notify = hasListeners(this);
	    var notifySpy = "production" !== "production" ;
	    if (notify || notifySpy) {
	      var change = notify || notifySpy ? {
	        type: ADD,
	        observableKind: "object",
	        debugObjectName: this.name_,
	        object: this.proxy_ || this.target_,
	        name: key,
	        newValue: value
	      } : null;
	      if (notify) {
	        notifyListeners(this, change);
	      }
	    }
	    (_this$pendingKeys_2 = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_2$g = _this$pendingKeys_2.get(key)) == null ? void 0 : _this$pendingKeys_2$g.set(true);
	    // Notify "keys/entries/values" observers
	    this.keysAtom_.reportChanged();
	  };
	  _proto.ownKeys_ = function ownKeys_() {
	    this.keysAtom_.reportObserved();
	    return ownKeys$2(this.target_);
	  };
	  _proto.keys_ = function keys_() {
	    // Returns enumerable && own, but unfortunately keysAtom will report on ANY key change.
	    // There is no way to distinguish between Object.keys(object) and Reflect.ownKeys(object) - both are handled by ownKeys trap.
	    // We can either over-report in Object.keys(object) or under-report in Reflect.ownKeys(object)
	    // We choose to over-report in Object.keys(object), because:
	    // - typically it's used with simple data objects
	    // - when symbolic/non-enumerable keys are relevant Reflect.ownKeys works as expected
	    this.keysAtom_.reportObserved();
	    return Object.keys(this.target_);
	  };
	  return ObservableObjectAdministration;
	}();
	function asObservableObject(target, options) {
	  var _options$name;
	  if (hasProp(target, $mobx)) {
	    return target;
	  }
	  var name = (_options$name = options == null ? void 0 : options.name) != null ? _options$name : "ObservableObject";
	  var adm = new ObservableObjectAdministration(target, new Map(), String(name), getAnnotationFromOptions(options));
	  addHiddenProp(target, $mobx, adm);
	  return target;
	}
	var isObservableObjectAdministration = /*#__PURE__*/createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);
	function getCachedObservablePropDescriptor(key) {
	  return descriptorCache[key] || (descriptorCache[key] = {
	    get: function get() {
	      return this[$mobx].getObservablePropValue_(key);
	    },
	    set: function set(value) {
	      return this[$mobx].setObservablePropValue_(key, value);
	    }
	  });
	}
	function isObservableObject(thing) {
	  if (isObject$1(thing)) {
	    return isObservableObjectAdministration(thing[$mobx]);
	  }
	  return false;
	}
	function recordAnnotationApplied(adm, annotation, key) {
	  var _adm$target_$storedAn;
	  // Remove applied decorator annotation so we don't try to apply it again in subclass constructor
	  (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? true : delete _adm$target_$storedAn[key];
	}

	// Bug in safari 9.* (or iOS 9 safari mobile). See #364
	var ENTRY_0 = /*#__PURE__*/createArrayEntryDescriptor(0);
	/**
	 * This array buffer contains two lists of properties, so that all arrays
	 * can recycle their property definitions, which significantly improves performance of creating
	 * properties on the fly.
	 */
	var OBSERVABLE_ARRAY_BUFFER_SIZE = 0;
	// Typescript workaround to make sure ObservableArray extends Array
	var StubArray = function StubArray() {};
	function inherit(ctor, proto) {
	  if (Object.setPrototypeOf) {
	    Object.setPrototypeOf(ctor.prototype, proto);
	  } else if (ctor.prototype.__proto__ !== undefined) {
	    ctor.prototype.__proto__ = proto;
	  } else {
	    ctor.prototype = proto;
	  }
	}
	inherit(StubArray, Array.prototype);
	// Weex proto freeze protection was here,
	// but it is unclear why the hack is need as MobX never changed the prototype
	// anyway, so removed it in V6
	var LegacyObservableArray = /*#__PURE__*/function (_StubArray, _Symbol$toStringTag, _Symbol$iterator) {
	  _inheritsLoose(LegacyObservableArray, _StubArray);
	  function LegacyObservableArray(initialValues, enhancer, name, owned) {
	    var _this;
	    if (name === void 0) {
	      name = "ObservableArray";
	    }
	    if (owned === void 0) {
	      owned = false;
	    }
	    _this = _StubArray.call(this) || this;
	    var adm = new ObservableArrayAdministration(name, enhancer, owned, true);
	    adm.proxy_ = _assertThisInitialized(_this);
	    addHiddenFinalProp(_assertThisInitialized(_this), $mobx, adm);
	    if (initialValues && initialValues.length) {
	      var prev = allowStateChangesStart(true);
	      // @ts-ignore
	      _this.spliceWithArray(0, 0, initialValues);
	      allowStateChangesEnd(prev);
	    }
	    {
	      // Seems that Safari won't use numeric prototype setter untill any * numeric property is
	      // defined on the instance. After that it works fine, even if this property is deleted.
	      Object.defineProperty(_assertThisInitialized(_this), "0", ENTRY_0);
	    }
	    return _this;
	  }
	  var _proto = LegacyObservableArray.prototype;
	  _proto.concat = function concat() {
	    this[$mobx].atom_.reportObserved();
	    for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {
	      arrays[_key] = arguments[_key];
	    }
	    return Array.prototype.concat.apply(this.slice(),
	    //@ts-ignore
	    arrays.map(function (a) {
	      return isObservableArray(a) ? a.slice() : a;
	    }));
	  };
	  _proto[_Symbol$iterator] = function () {
	    var self = this;
	    var nextIndex = 0;
	    return makeIterable({
	      next: function next() {
	        return nextIndex < self.length ? {
	          value: self[nextIndex++],
	          done: false
	        } : {
	          done: true,
	          value: undefined
	        };
	      }
	    });
	  };
	  _createClass(LegacyObservableArray, [{
	    key: "length",
	    get: function get() {
	      return this[$mobx].getArrayLength_();
	    },
	    set: function set(newLength) {
	      this[$mobx].setArrayLength_(newLength);
	    }
	  }, {
	    key: _Symbol$toStringTag,
	    get: function get() {
	      return "Array";
	    }
	  }]);
	  return LegacyObservableArray;
	}(StubArray, Symbol.toStringTag, Symbol.iterator);
	Object.entries(arrayExtensions).forEach(function (_ref) {
	  var prop = _ref[0],
	    fn = _ref[1];
	  if (prop !== "concat") {
	    addHiddenProp(LegacyObservableArray.prototype, prop, fn);
	  }
	});
	function createArrayEntryDescriptor(index) {
	  return {
	    enumerable: false,
	    configurable: true,
	    get: function get() {
	      return this[$mobx].get_(index);
	    },
	    set: function set(value) {
	      this[$mobx].set_(index, value);
	    }
	  };
	}
	function createArrayBufferItem(index) {
	  defineProperty(LegacyObservableArray.prototype, "" + index, createArrayEntryDescriptor(index));
	}
	function reserveArrayBuffer(max) {
	  if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {
	    for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {
	      createArrayBufferItem(index);
	    }
	    OBSERVABLE_ARRAY_BUFFER_SIZE = max;
	  }
	}
	reserveArrayBuffer(1000);
	function createLegacyArray(initialValues, enhancer, name) {
	  return new LegacyObservableArray(initialValues, enhancer, name);
	}

	function getAtom(thing, property) {
	  if (typeof thing === "object" && thing !== null) {
	    if (isObservableArray(thing)) {
	      if (property !== undefined) {
	        die(23);
	      }
	      return thing[$mobx].atom_;
	    }
	    if (isObservableSet(thing)) {
	      return thing.atom_;
	    }
	    if (isObservableMap(thing)) {
	      if (property === undefined) {
	        return thing.keysAtom_;
	      }
	      var observable = thing.data_.get(property) || thing.hasMap_.get(property);
	      if (!observable) {
	        die(25, property, getDebugName(thing));
	      }
	      return observable;
	    }
	    if (isObservableObject(thing)) {
	      if (!property) {
	        return die(26);
	      }
	      var _observable = thing[$mobx].values_.get(property);
	      if (!_observable) {
	        die(27, property, getDebugName(thing));
	      }
	      return _observable;
	    }
	    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
	      return thing;
	    }
	  } else if (isFunction$1(thing)) {
	    if (isReaction(thing[$mobx])) {
	      // disposer function
	      return thing[$mobx];
	    }
	  }
	  die(28);
	}
	function getAdministration(thing, property) {
	  if (!thing) {
	    die(29);
	  }
	  if (property !== undefined) {
	    return getAdministration(getAtom(thing, property));
	  }
	  if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
	    return thing;
	  }
	  if (isObservableMap(thing) || isObservableSet(thing)) {
	    return thing;
	  }
	  if (thing[$mobx]) {
	    return thing[$mobx];
	  }
	  die(24, thing);
	}
	function getDebugName(thing, property) {
	  var named;
	  if (property !== undefined) {
	    named = getAtom(thing, property);
	  } else if (isAction(thing)) {
	    return thing.name;
	  } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {
	    named = getAdministration(thing);
	  } else {
	    // valid for arrays as well
	    named = getAtom(thing);
	  }
	  return named.name_;
	}

	var toString = objectPrototype.toString;
	function deepEqual(a, b, depth) {
	  if (depth === void 0) {
	    depth = -1;
	  }
	  return eq$1(a, b, depth);
	}
	// Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289
	// Internal recursive comparison function for `isEqual`.
	function eq$1(a, b, depth, aStack, bStack) {
	  // Identical objects are equal. `0 === -0`, but they aren't identical.
	  // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	  if (a === b) {
	    return a !== 0 || 1 / a === 1 / b;
	  }
	  // `null` or `undefined` only equal to itself (strict comparison).
	  if (a == null || b == null) {
	    return false;
	  }
	  // `NaN`s are equivalent, but non-reflexive.
	  if (a !== a) {
	    return b !== b;
	  }
	  // Exhaust primitive checks
	  var type = typeof a;
	  if (type !== "function" && type !== "object" && typeof b != "object") {
	    return false;
	  }
	  // Compare `[[Class]]` names.
	  var className = toString.call(a);
	  if (className !== toString.call(b)) {
	    return false;
	  }
	  switch (className) {
	    // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	    case "[object RegExp]":
	    // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	    case "[object String]":
	      // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	      // equivalent to `new String("5")`.
	      return "" + a === "" + b;
	    case "[object Number]":
	      // `NaN`s are equivalent, but non-reflexive.
	      // Object(NaN) is equivalent to NaN.
	      if (+a !== +a) {
	        return +b !== +b;
	      }
	      // An `egal` comparison is performed for other numeric values.
	      return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	    case "[object Date]":
	    case "[object Boolean]":
	      // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	      // millisecond representations. Note that invalid dates with millisecond representations
	      // of `NaN` are not equivalent.
	      return +a === +b;
	    case "[object Symbol]":
	      return typeof Symbol !== "undefined" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b);
	    case "[object Map]":
	    case "[object Set]":
	      // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.
	      // Hide this extra level by increasing the depth.
	      if (depth >= 0) {
	        depth++;
	      }
	      break;
	  }
	  // Unwrap any wrapped objects.
	  a = unwrap(a);
	  b = unwrap(b);
	  var areArrays = className === "[object Array]";
	  if (!areArrays) {
	    if (typeof a != "object" || typeof b != "object") {
	      return false;
	    }
	    // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	    // from different frames are.
	    var aCtor = a.constructor,
	      bCtor = b.constructor;
	    if (aCtor !== bCtor && !(isFunction$1(aCtor) && aCtor instanceof aCtor && isFunction$1(bCtor) && bCtor instanceof bCtor) && "constructor" in a && "constructor" in b) {
	      return false;
	    }
	  }
	  if (depth === 0) {
	    return false;
	  } else if (depth < 0) {
	    depth = -1;
	  }
	  // Assume equality for cyclic structures. The algorithm for detecting cyclic
	  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
	  // Initializing stack of traversed objects.
	  // It's done here since we only need them for objects and arrays comparison.
	  aStack = aStack || [];
	  bStack = bStack || [];
	  var length = aStack.length;
	  while (length--) {
	    // Linear search. Performance is inversely proportional to the number of
	    // unique nested structures.
	    if (aStack[length] === a) {
	      return bStack[length] === b;
	    }
	  }
	  // Add the first object to the stack of traversed objects.
	  aStack.push(a);
	  bStack.push(b);
	  // Recursively compare objects and arrays.
	  if (areArrays) {
	    // Compare array lengths to determine if a deep comparison is necessary.
	    length = a.length;
	    if (length !== b.length) {
	      return false;
	    }
	    // Deep compare the contents, ignoring non-numeric properties.
	    while (length--) {
	      if (!eq$1(a[length], b[length], depth - 1, aStack, bStack)) {
	        return false;
	      }
	    }
	  } else {
	    // Deep compare objects.
	    var keys = Object.keys(a);
	    var key;
	    length = keys.length;
	    // Ensure that both objects contain the same number of properties before comparing deep equality.
	    if (Object.keys(b).length !== length) {
	      return false;
	    }
	    while (length--) {
	      // Deep compare each member
	      key = keys[length];
	      if (!(hasProp(b, key) && eq$1(a[key], b[key], depth - 1, aStack, bStack))) {
	        return false;
	      }
	    }
	  }
	  // Remove the first object from the stack of traversed objects.
	  aStack.pop();
	  bStack.pop();
	  return true;
	}
	function unwrap(a) {
	  if (isObservableArray(a)) {
	    return a.slice();
	  }
	  if (isES6Map(a) || isObservableMap(a)) {
	    return Array.from(a.entries());
	  }
	  if (isES6Set(a) || isObservableSet(a)) {
	    return Array.from(a.entries());
	  }
	  return a;
	}

	function makeIterable(iterator) {
	  iterator[Symbol.iterator] = getSelf;
	  return iterator;
	}
	function getSelf() {
	  return this;
	}

	/**
	 * (c) Michel Weststrate 2015 - 2020
	 * MIT Licensed
	 *
	 * Welcome to the mobx sources! To get a global overview of how MobX internally works,
	 * this is a good place to start:
	 * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74
	 *
	 * Source folders:
	 * ===============
	 *
	 * - api/     Most of the public static methods exposed by the module can be found here.
	 * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.
	 * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.
	 * - utils/   Utility stuff.
	 *
	 */
	["Symbol", "Map", "Set"].forEach(function (m) {
	  var g = getGlobal();
	  if (typeof g[m] === "undefined") {
	    die("MobX requires global '" + m + "' to be available or polyfilled");
	  }
	});
	if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
	  // See: https://github.com/andykog/mobx-devtools/
	  __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
	    spy: spy,
	    extras: {
	      getDebugName: getDebugName
	    },
	    $mobx: $mobx
	  });
	}

	if (!e$1.useState) {
	    throw new Error("mobx-react-lite requires React with Hooks support");
	}
	if (!makeObservable) {
	    throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available");
	}

	function defaultNoopBatch(callback) {
	    callback();
	}
	function observerBatching(reactionScheduler) {
	    if (!reactionScheduler) {
	        reactionScheduler = defaultNoopBatch;
	    }
	    configure({ reactionScheduler: reactionScheduler });
	}

	function printDebugValue(v) {
	    return getDependencyTree(v);
	}

	var REGISTRY_FINALIZE_AFTER = 10000;
	var REGISTRY_SWEEP_INTERVAL = 10000;
	var TimerBasedFinalizationRegistry = /** @class */ (function () {
	    function TimerBasedFinalizationRegistry(finalize) {
	        var _this = this;
	        Object.defineProperty(this, "finalize", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: finalize
	        });
	        Object.defineProperty(this, "registrations", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: new Map()
	        });
	        Object.defineProperty(this, "sweepTimeout", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        // Bound so it can be used directly as setTimeout callback.
	        Object.defineProperty(this, "sweep", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: function (maxAge) {
	                if (maxAge === void 0) { maxAge = REGISTRY_FINALIZE_AFTER; }
	                // cancel timeout so we can force sweep anytime
	                clearTimeout(_this.sweepTimeout);
	                _this.sweepTimeout = undefined;
	                var now = Date.now();
	                _this.registrations.forEach(function (registration, token) {
	                    if (now - registration.registeredAt >= maxAge) {
	                        _this.finalize(registration.value);
	                        _this.registrations.delete(token);
	                    }
	                });
	                if (_this.registrations.size > 0) {
	                    _this.scheduleSweep();
	                }
	            }
	        });
	        // Bound so it can be exported directly as clearTimers test utility.
	        Object.defineProperty(this, "finalizeAllImmediately", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: function () {
	                _this.sweep(0);
	            }
	        });
	    }
	    // Token is actually required with this impl
	    Object.defineProperty(TimerBasedFinalizationRegistry.prototype, "register", {
	        enumerable: false,
	        configurable: true,
	        writable: true,
	        value: function (target, value, token) {
	            this.registrations.set(token, {
	                value: value,
	                registeredAt: Date.now()
	            });
	            this.scheduleSweep();
	        }
	    });
	    Object.defineProperty(TimerBasedFinalizationRegistry.prototype, "unregister", {
	        enumerable: false,
	        configurable: true,
	        writable: true,
	        value: function (token) {
	            this.registrations.delete(token);
	        }
	    });
	    Object.defineProperty(TimerBasedFinalizationRegistry.prototype, "scheduleSweep", {
	        enumerable: false,
	        configurable: true,
	        writable: true,
	        value: function () {
	            if (this.sweepTimeout === undefined) {
	                this.sweepTimeout = setTimeout(this.sweep, REGISTRY_SWEEP_INTERVAL);
	            }
	        }
	    });
	    return TimerBasedFinalizationRegistry;
	}());
	var UniversalFinalizationRegistry = typeof FinalizationRegistry !== "undefined"
	    ? FinalizationRegistry
	    : TimerBasedFinalizationRegistry;

	var observerFinalizationRegistry = new UniversalFinalizationRegistry(function (adm) {
	    var _a;
	    (_a = adm.reaction) === null || _a === void 0 ? void 0 : _a.dispose();
	    adm.reaction = null;
	});

	var __read = (undefined && undefined.__read) || function (o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	};
	function observerComponentNameFor(baseComponentName) {
	    return "observer".concat(baseComponentName);
	}
	/**
	 * We use class to make it easier to detect in heap snapshots by name
	 */
	var ObjectToBeRetainedByReact = /** @class */ (function () {
	    function ObjectToBeRetainedByReact() {
	    }
	    return ObjectToBeRetainedByReact;
	}());
	function objectToBeRetainedByReactFactory() {
	    return new ObjectToBeRetainedByReact();
	}
	function useObserver(fn, baseComponentName) {
	    if (baseComponentName === void 0) { baseComponentName = "observed"; }
	    var _a = __read(e$1.useState(objectToBeRetainedByReactFactory), 1), objectRetainedByReact = _a[0];
	    // Force update, see #2982
	    var _b = __read(e$1.useState(), 2), setState = _b[1];
	    var forceUpdate = function () { return setState([]); };
	    // StrictMode/ConcurrentMode/Suspense may mean that our component is
	    // rendered and abandoned multiple times, so we need to track leaked
	    // Reactions.
	    var admRef = e$1.useRef(null);
	    if (!admRef.current) {
	        // First render
	        admRef.current = {
	            reaction: null,
	            mounted: false,
	            changedBeforeMount: false
	        };
	    }
	    var adm = admRef.current;
	    if (!adm.reaction) {
	        // First render or component was not committed and reaction was disposed by registry
	        adm.reaction = new Reaction(observerComponentNameFor(baseComponentName), function () {
	            // Observable has changed, meaning we want to re-render
	            // BUT if we're a component that hasn't yet got to the useEffect()
	            // stage, we might be a component that _started_ to render, but
	            // got dropped, and we don't want to make state changes then.
	            // (It triggers warnings in StrictMode, for a start.)
	            if (adm.mounted) {
	                // We have reached useEffect(), so we're mounted, and can trigger an update
	                forceUpdate();
	            }
	            else {
	                // We haven't yet reached useEffect(), so we'll need to trigger a re-render
	                // when (and if) useEffect() arrives.
	                adm.changedBeforeMount = true;
	            }
	        });
	        observerFinalizationRegistry.register(objectRetainedByReact, adm, adm);
	    }
	    e$1.useDebugValue(adm.reaction, printDebugValue);
	    e$1.useEffect(function () {
	        observerFinalizationRegistry.unregister(adm);
	        adm.mounted = true;
	        if (adm.reaction) {
	            if (adm.changedBeforeMount) {
	                // Got a change before mount, force an update
	                adm.changedBeforeMount = false;
	                forceUpdate();
	            }
	        }
	        else {
	            // The reaction we set up in our render has been disposed.
	            // This can be due to bad timings of renderings, e.g. our
	            // component was paused for a _very_ long time, and our
	            // reaction got cleaned up
	            // Re-create the reaction
	            adm.reaction = new Reaction(observerComponentNameFor(baseComponentName), function () {
	                // We've definitely already been mounted at this point
	                forceUpdate();
	            });
	            forceUpdate();
	        }
	        return function () {
	            adm.reaction.dispose();
	            adm.reaction = null;
	            adm.mounted = false;
	            adm.changedBeforeMount = false;
	        };
	    }, []);
	    // render the original component, but have the
	    // reaction track the observables, so that rendering
	    // can be invalidated (see above) once a dependency changes
	    var rendering;
	    var exception;
	    adm.reaction.track(function () {
	        try {
	            rendering = fn();
	        }
	        catch (e) {
	            exception = e;
	        }
	    });
	    if (exception) {
	        throw exception; // re-throw any exceptions caught during rendering
	    }
	    return rendering;
	}

	var hasSymbol = typeof Symbol === "function" && Symbol.for;
	// Using react-is had some issues (and operates on elements, not on types), see #608 / #609
	hasSymbol
	    ? Symbol.for("react.forward_ref")
	    : typeof e$1.forwardRef === "function" && e$1.forwardRef(function (props) { return null; })["$$typeof"];
	hasSymbol
	    ? Symbol.for("react.memo")
	    : typeof e$1.memo === "function" && e$1.memo(function (props) { return null; })["$$typeof"];

	function ObserverComponent(_a) {
	    var children = _a.children, render = _a.render;
	    var component = children || render;
	    if (typeof component !== "function") {
	        return null;
	    }
	    return useObserver(component);
	}
	ObserverComponent.displayName = "Observer";

	(undefined && undefined.__read) || function (o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	};

	var _a;
	observerBatching(require$$0.unstable_batchedUpdates);
	(_a = observerFinalizationRegistry["finalizeAllImmediately"]) !== null && _a !== void 0 ? _a : (function () { });

	function _extends() {
	  _extends = Object.assign ? Object.assign.bind() : function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];
	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }
	    return target;
	  };
	  return _extends.apply(this, arguments);
	}

	/**
	 * Actions represent the type of change to a location value.
	 *
	 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#action
	 */
	var Action;

	(function (Action) {
	  /**
	   * A POP indicates a change to an arbitrary index in the history stack, such
	   * as a back or forward navigation. It does not describe the direction of the
	   * navigation, only that the current index changed.
	   *
	   * Note: This is the default action for newly created history objects.
	   */
	  Action["Pop"] = "POP";
	  /**
	   * A PUSH indicates a new entry being added to the history stack, such as when
	   * a link is clicked and a new page loads. When this happens, all subsequent
	   * entries in the stack are lost.
	   */

	  Action["Push"] = "PUSH";
	  /**
	   * A REPLACE indicates the entry at the current index in the history stack
	   * being replaced by a new one.
	   */

	  Action["Replace"] = "REPLACE";
	})(Action || (Action = {}));

	var readOnly = function (obj) {
	  return obj;
	};

	var BeforeUnloadEventType = 'beforeunload';
	var PopStateEventType = 'popstate';
	/**
	 * Browser history stores the location in regular URLs. This is the standard for
	 * most web apps, but it requires some configuration on the server to ensure you
	 * serve the same app at multiple URLs.
	 *
	 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory
	 */

	function createBrowserHistory(options) {
	  if (options === void 0) {
	    options = {};
	  }

	  var _options = options,
	      _options$window = _options.window,
	      window = _options$window === void 0 ? document.defaultView : _options$window;
	  var globalHistory = window.history;

	  function getIndexAndLocation() {
	    var _window$location = window.location,
	        pathname = _window$location.pathname,
	        search = _window$location.search,
	        hash = _window$location.hash;
	    var state = globalHistory.state || {};
	    return [state.idx, readOnly({
	      pathname: pathname,
	      search: search,
	      hash: hash,
	      state: state.usr || null,
	      key: state.key || 'default'
	    })];
	  }

	  var blockedPopTx = null;

	  function handlePop() {
	    if (blockedPopTx) {
	      blockers.call(blockedPopTx);
	      blockedPopTx = null;
	    } else {
	      var nextAction = Action.Pop;

	      var _getIndexAndLocation = getIndexAndLocation(),
	          nextIndex = _getIndexAndLocation[0],
	          nextLocation = _getIndexAndLocation[1];

	      if (blockers.length) {
	        if (nextIndex != null) {
	          var delta = index - nextIndex;

	          if (delta) {
	            // Revert the POP
	            blockedPopTx = {
	              action: nextAction,
	              location: nextLocation,
	              retry: function retry() {
	                go(delta * -1);
	              }
	            };
	            go(delta);
	          }
	        }
	      } else {
	        applyTx(nextAction);
	      }
	    }
	  }

	  window.addEventListener(PopStateEventType, handlePop);
	  var action = Action.Pop;

	  var _getIndexAndLocation2 = getIndexAndLocation(),
	      index = _getIndexAndLocation2[0],
	      location = _getIndexAndLocation2[1];

	  var listeners = createEvents();
	  var blockers = createEvents();

	  if (index == null) {
	    index = 0;
	    globalHistory.replaceState(_extends({}, globalHistory.state, {
	      idx: index
	    }), '');
	  }

	  function createHref(to) {
	    return typeof to === 'string' ? to : createPath(to);
	  } // state defaults to `null` because `window.history.state` does


	  function getNextLocation(to, state) {
	    if (state === void 0) {
	      state = null;
	    }

	    return readOnly(_extends({
	      pathname: location.pathname,
	      hash: '',
	      search: ''
	    }, typeof to === 'string' ? parsePath(to) : to, {
	      state: state,
	      key: createKey()
	    }));
	  }

	  function getHistoryStateAndUrl(nextLocation, index) {
	    return [{
	      usr: nextLocation.state,
	      key: nextLocation.key,
	      idx: index
	    }, createHref(nextLocation)];
	  }

	  function allowTx(action, location, retry) {
	    return !blockers.length || (blockers.call({
	      action: action,
	      location: location,
	      retry: retry
	    }), false);
	  }

	  function applyTx(nextAction) {
	    action = nextAction;

	    var _getIndexAndLocation3 = getIndexAndLocation();

	    index = _getIndexAndLocation3[0];
	    location = _getIndexAndLocation3[1];
	    listeners.call({
	      action: action,
	      location: location
	    });
	  }

	  function push(to, state) {
	    var nextAction = Action.Push;
	    var nextLocation = getNextLocation(to, state);

	    function retry() {
	      push(to, state);
	    }

	    if (allowTx(nextAction, nextLocation, retry)) {
	      var _getHistoryStateAndUr = getHistoryStateAndUrl(nextLocation, index + 1),
	          historyState = _getHistoryStateAndUr[0],
	          url = _getHistoryStateAndUr[1]; // TODO: Support forced reloading
	      // try...catch because iOS limits us to 100 pushState calls :/


	      try {
	        globalHistory.pushState(historyState, '', url);
	      } catch (error) {
	        // They are going to lose state here, but there is no real
	        // way to warn them about it since the page will refresh...
	        window.location.assign(url);
	      }

	      applyTx(nextAction);
	    }
	  }

	  function replace(to, state) {
	    var nextAction = Action.Replace;
	    var nextLocation = getNextLocation(to, state);

	    function retry() {
	      replace(to, state);
	    }

	    if (allowTx(nextAction, nextLocation, retry)) {
	      var _getHistoryStateAndUr2 = getHistoryStateAndUrl(nextLocation, index),
	          historyState = _getHistoryStateAndUr2[0],
	          url = _getHistoryStateAndUr2[1]; // TODO: Support forced reloading


	      globalHistory.replaceState(historyState, '', url);
	      applyTx(nextAction);
	    }
	  }

	  function go(delta) {
	    globalHistory.go(delta);
	  }

	  var history = {
	    get action() {
	      return action;
	    },

	    get location() {
	      return location;
	    },

	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    back: function back() {
	      go(-1);
	    },
	    forward: function forward() {
	      go(1);
	    },
	    listen: function listen(listener) {
	      return listeners.push(listener);
	    },
	    block: function block(blocker) {
	      var unblock = blockers.push(blocker);

	      if (blockers.length === 1) {
	        window.addEventListener(BeforeUnloadEventType, promptBeforeUnload);
	      }

	      return function () {
	        unblock(); // Remove the beforeunload listener so the document may
	        // still be salvageable in the pagehide event.
	        // See https://html.spec.whatwg.org/#unloading-documents

	        if (!blockers.length) {
	          window.removeEventListener(BeforeUnloadEventType, promptBeforeUnload);
	        }
	      };
	    }
	  };
	  return history;
	}

	function promptBeforeUnload(event) {
	  // Cancel the event.
	  event.preventDefault(); // Chrome (and legacy IE) requires returnValue to be set.

	  event.returnValue = '';
	}

	function createEvents() {
	  var handlers = [];
	  return {
	    get length() {
	      return handlers.length;
	    },

	    push: function push(fn) {
	      handlers.push(fn);
	      return function () {
	        handlers = handlers.filter(function (handler) {
	          return handler !== fn;
	        });
	      };
	    },
	    call: function call(arg) {
	      handlers.forEach(function (fn) {
	        return fn && fn(arg);
	      });
	    }
	  };
	}

	function createKey() {
	  return Math.random().toString(36).substr(2, 8);
	}
	/**
	 * Creates a string URL path from the given pathname, search, and hash components.
	 *
	 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createpath
	 */


	function createPath(_ref) {
	  var _ref$pathname = _ref.pathname,
	      pathname = _ref$pathname === void 0 ? '/' : _ref$pathname,
	      _ref$search = _ref.search,
	      search = _ref$search === void 0 ? '' : _ref$search,
	      _ref$hash = _ref.hash,
	      hash = _ref$hash === void 0 ? '' : _ref$hash;
	  if (search && search !== '?') pathname += search.charAt(0) === '?' ? search : '?' + search;
	  if (hash && hash !== '#') pathname += hash.charAt(0) === '#' ? hash : '#' + hash;
	  return pathname;
	}
	/**
	 * Parses a string URL path into its separate pathname, search, and hash components.
	 *
	 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#parsepath
	 */

	function parsePath(path) {
	  var parsedPath = {};

	  if (path) {
	    var hashIndex = path.indexOf('#');

	    if (hashIndex >= 0) {
	      parsedPath.hash = path.substr(hashIndex);
	      path = path.substr(0, hashIndex);
	    }

	    var searchIndex = path.indexOf('?');

	    if (searchIndex >= 0) {
	      parsedPath.search = path.substr(searchIndex);
	      path = path.substr(0, searchIndex);
	    }

	    if (path) {
	      parsedPath.pathname = path;
	    }
	  }

	  return parsedPath;
	}

	/* eslint-disable */

	function _defineProperty(obj, key, value) {
	  return key in obj ? Object.defineProperty(obj, key, {
	    value,
	    enumerable: !0,
	    configurable: !0,
	    writable: !0
	  }) : obj[key] = value, obj;
	}

	function ownKeys$1(object, enumerableOnly) {
	  var keys = Object.keys(object);
	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    enumerableOnly && (symbols = symbols.filter((function(sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    }))), keys.push.apply(keys, symbols);
	  }
	  return keys;
	}

	function _objectSpread2$1(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = null != arguments[i] ? arguments[i] : {};
	    i % 2 ? ownKeys$1(Object(source), !0).forEach((function(key) {
	      _defineProperty(target, key, source[key]);
	    })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach((function(key) {
	      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	    }));
	  }
	  return target;
	}

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
	    "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	/**
	 * Parse a string for the raw tokens.
	 */
	function parse$2(str, options) {
	  void 0 === options && (options = {});
	  for (var tokens = 
	  /**
	 * Tokenize input string.
	 */
	  function(str) {
	    for (var tokens = [], i = 0; i < str.length; ) {
	      var char = str[i];
	      if ("*" !== char && "+" !== char && "?" !== char) if ("\\" !== char) if ("{" !== char) if ("}" !== char) if (":" !== char) if ("(" !== char) tokens.push({
	        type: "CHAR",
	        index: i,
	        value: str[i++]
	      }); else {
	        var count = 1, pattern = "";
	        if ("?" === str[j = i + 1]) throw new TypeError('Pattern cannot start with "?" at ' + j);
	        for (;j < str.length; ) if ("\\" !== str[j]) {
	          if (")" === str[j]) {
	            if (0 == --count) {
	              j++;
	              break;
	            }
	          } else if ("(" === str[j] && (count++, "?" !== str[j + 1])) throw new TypeError("Capturing groups are not allowed at " + j);
	          pattern += str[j++];
	        } else pattern += str[j++] + str[j++];
	        if (count) throw new TypeError("Unbalanced pattern at " + i);
	        if (!pattern) throw new TypeError("Missing pattern at " + i);
	        tokens.push({
	          type: "PATTERN",
	          index: i,
	          value: pattern
	        }), i = j;
	      } else {
	        for (var name = "", j = i + 1; j < str.length; ) {
	          var code = str.charCodeAt(j);
	          if (
	          // `0-9`
	          !(code >= 48 && code <= 57 || 
	          // `A-Z`
	          code >= 65 && code <= 90 || 
	          // `a-z`
	          code >= 97 && code <= 122 || 
	          // `_`
	          95 === code)) break;
	          name += str[j++];
	        }
	        if (!name) throw new TypeError("Missing parameter name at " + i);
	        tokens.push({
	          type: "NAME",
	          index: i,
	          value: name
	        }), i = j;
	      } else tokens.push({
	        type: "CLOSE",
	        index: i,
	        value: str[i++]
	      }); else tokens.push({
	        type: "OPEN",
	        index: i,
	        value: str[i++]
	      }); else tokens.push({
	        type: "ESCAPED_CHAR",
	        index: i++,
	        value: str[i++]
	      }); else tokens.push({
	        type: "MODIFIER",
	        index: i,
	        value: str[i++]
	      });
	    }
	    return tokens.push({
	      type: "END",
	      index: i,
	      value: ""
	    }), tokens;
	  }(str), _a = options.prefixes, prefixes = void 0 === _a ? "./" : _a, defaultPattern = "[^" + escapeString(options.delimiter || "/#?") + "]+?", result = [], key = 0, i = 0, path = "", tryConsume = function(type) {
	    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;
	  }, mustConsume = function(type) {
	    var value = tryConsume(type);
	    if (void 0 !== value) return value;
	    var _a = tokens[i], nextType = _a.type, index = _a.index;
	    throw new TypeError("Unexpected " + nextType + " at " + index + ", expected " + type);
	  }, consumeText = function() {
	    // tslint:disable-next-line
	    for (var value, result = ""; value = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR"); ) result += value;
	    return result;
	  }; i < tokens.length; ) {
	    var char = tryConsume("CHAR"), name = tryConsume("NAME"), pattern = tryConsume("PATTERN");
	    if (name || pattern) {
	      var prefix = char || "";
	      -1 === prefixes.indexOf(prefix) && (path += prefix, prefix = ""), path && (result.push(path), 
	      path = ""), result.push({
	        name: name || key++,
	        prefix,
	        suffix: "",
	        pattern: pattern || defaultPattern,
	        modifier: tryConsume("MODIFIER") || ""
	      });
	    } else {
	      var value = char || tryConsume("ESCAPED_CHAR");
	      if (value) path += value; else if (path && (result.push(path), path = ""), tryConsume("OPEN")) {
	        prefix = consumeText();
	        var name_1 = tryConsume("NAME") || "", pattern_1 = tryConsume("PATTERN") || "", suffix = consumeText();
	        mustConsume("CLOSE"), result.push({
	          name: name_1 || (pattern_1 ? key++ : ""),
	          pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,
	          prefix,
	          suffix,
	          modifier: tryConsume("MODIFIER") || ""
	        });
	      } else mustConsume("END");
	    }
	  }
	  return result;
	}

	/**
	 * Create path match function from `path-to-regexp` spec.
	 */ function match$1(str, options) {
	  var keys = [];
	  /**
	 * Create a path match function from `path-to-regexp` output.
	 */
	  return function(re, keys, options) {
	    void 0 === options && (options = {});
	    var _a = options.decode, decode = void 0 === _a ? function(x) {
	      return x;
	    } : _a;
	    return function(pathname) {
	      var m = re.exec(pathname);
	      if (!m) return !1;
	      for (var path = m[0], index = m.index, params = Object.create(null), _loop_1 = function(i) {
	        // tslint:disable-next-line
	        if (void 0 === m[i]) return "continue";
	        var key = keys[i - 1];
	        "*" === key.modifier || "+" === key.modifier ? params[key.name] = m[i].split(key.prefix + key.suffix).map((function(value) {
	          return decode(value, key);
	        })) : params[key.name] = decode(m[i], key);
	      }, i = 1; i < m.length; i++) _loop_1(i);
	      return {
	        path,
	        index,
	        params
	      };
	    };
	  }
	  /**
	 * Escape a regular expression string.
	 */ (pathToRegexp(str, keys, options), keys, options);
	}

	function escapeString(str) {
	  return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
	}

	/**
	 * Get the flags for a regexp from the options.
	 */ function flags(options) {
	  return options && options.sensitive ? "" : "i";
	}

	/**
	 * Pull out keys from a regexp.
	 */
	/**
	 * Create a path regexp from string input.
	 */
	function stringToRegexp(path, keys, options) {
	  /**
	 * Expose a function for taking tokens and returning a RegExp.
	 */
	  return function(tokens, keys, options) {
	    void 0 === options && (options = {});
	    // Iterate over the tokens and create our regexp string.
	    for (var _a = options.strict, strict = void 0 !== _a && _a, _b = options.start, start = void 0 === _b || _b, _c = options.end, end = void 0 === _c || _c, _d = options.encode, encode = void 0 === _d ? function(x) {
	      return x;
	    } : _d, endsWith = "[" + escapeString(options.endsWith || "") + "]|$", delimiter = "[" + escapeString(options.delimiter || "/#?") + "]", route = start ? "^" : "", _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
	      var token = tokens_1[_i];
	      if ("string" == typeof token) route += escapeString(encode(token)); else {
	        var prefix = escapeString(encode(token.prefix)), suffix = escapeString(encode(token.suffix));
	        if (token.pattern) if (keys && keys.push(token), prefix || suffix) if ("+" === token.modifier || "*" === token.modifier) {
	          var mod = "*" === token.modifier ? "?" : "";
	          route += "(?:" + prefix + "((?:" + token.pattern + ")(?:" + suffix + prefix + "(?:" + token.pattern + "))*)" + suffix + ")" + mod;
	        } else route += "(?:" + prefix + "(" + token.pattern + ")" + suffix + ")" + token.modifier; else route += "(" + token.pattern + ")" + token.modifier; else route += "(?:" + prefix + suffix + ")" + token.modifier;
	      }
	    }
	    if (end) strict || (route += delimiter + "?"), route += options.endsWith ? "(?=" + endsWith + ")" : "$"; else {
	      var endToken = tokens[tokens.length - 1], isEndDelimited = "string" == typeof endToken ? delimiter.indexOf(endToken[endToken.length - 1]) > -1 : // tslint:disable-next-line
	      void 0 === endToken;
	      strict || (route += "(?:" + delimiter + "(?=" + endsWith + "))?"), isEndDelimited || (route += "(?=" + delimiter + "|" + endsWith + ")");
	    }
	    return new RegExp(route, flags(options));
	  }
	  /**
	 * Normalize the given path string, returning a regular expression.
	 *
	 * An empty array can be passed in for the keys, which will hold the
	 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
	 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
	 */ (parse$2(path, options), keys, options);
	}

	function pathToRegexp(path, keys, options) {
	  return path instanceof RegExp ? function(path, keys) {
	    if (!keys) return path;
	    for (var groupsRegex = /\((?:\?<(.*?)>)?(?!\?)/g, index = 0, execResult = groupsRegex.exec(path.source); execResult; ) keys.push({
	      // Use parenthesized substring match if available, index otherwise
	      name: execResult[1] || index++,
	      prefix: "",
	      suffix: "",
	      modifier: "",
	      pattern: ""
	    }), execResult = groupsRegex.exec(path.source);
	    return path;
	  }
	  /**
	 * Transform an array into a regexp.
	 */ (path, keys) : Array.isArray(path) ? function(paths, keys, options) {
	    var parts = paths.map((function(path) {
	      return pathToRegexp(path, keys, options).source;
	    }));
	    return new RegExp("(?:" + parts.join("|") + ")", flags(options));
	  }(path, keys, options) : stringToRegexp(path, keys, options);
	}

	var RouterStore =  function() {
	  function RouterStore(history) {
	    var _this = this;
	    !function(instance, Constructor) {
	      if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
	    }(this, RouterStore), this.pathList = [], this.history = void 0, this.state = {
	      action: Action.Pop,
	      location: {
	        key: "default",
	        pathname: "",
	        search: "",
	        state: {},
	        hash: ""
	      }
	    }, this.updateState = action((function(newState) {
	      _this.state = {
	        action: newState.action,
	        location: _objectSpread2$1({}, newState.location)
	      };
	    })), this.push = void 0, this.replace = void 0, this.go = void 0, this.back = void 0, 
	    this.forward = void 0, this.goBack = void 0, this.goForward = void 0, this.subscribe = void 0, 
	    this.stopSyncWithHistory = void 0, this.history = history, this.push = history.push.bind(history), 
	    this.replace = history.replace.bind(history), this.go = history.go.bind(history);
	    // compatible with old history api
	    var back = history.back.bind(history), forward = history.forward.bind(history);
	    this.back = back, this.forward = forward, makeObservable(this, {
	      state: observable,
	      location: computed,
	      query: computed,
	      pathList: observable,
	      hashValue: computed,
	      pathValue: computed,
	      appendPathList: action,
	      prependPathList: action
	    }), 
	    /**
	     * Listen for changes to location state in store
	     * and run listener at once
	     */
	    this.subscribe = function(listener) {
	      var unlisten = history.listen(listener);
	      return listener({
	        action: history.action,
	        location: history.location
	      }), unlisten;
	    }, this.stopSyncWithHistory = this.subscribe(this.updateState);
	  }
	  var Constructor, protoProps;
	  return Constructor = RouterStore, protoProps = [ {
	    key: "location",
	    get: 
	    /** @readonly */
	    function() {
	      return this.state.location;
	    }
	  }, {
	    key: "query",
	    get: 
	    /**
	     * get query format from location.search
	     * @readonly
	     * */
	    function() {
	      var search = this.location.search, query = {};
	      return search && new URLSearchParams(search).forEach((function(value, name) {
	        query[name] ? Array.isArray(query[name]) ? query[name].push(value) : query[name] = [ query[name], value ] : query[name] = value;
	      })), query;
	    }
	    /**
	     * get hash, not include '#'
	     * @readonly
	     * */  }, {
	    key: "hashValue",
	    get: function() {
	      var hash = this.location.hash;
	      return hash ? hash.slice(1) : "";
	    }
	    /**
	     * get path variable value, example:
	     * /path/:name => /path/abc
	     * router.pathValue.name => ac
	     *
	     * @readonly
	     * */  }, {
	    key: "pathValue",
	    get: function() {
	      var pathname = this.location.pathname, param = {}, hasPathValue = !1;
	      return this.pathList.find((function(path) {
	        var matchResult = match$1(path, {
	          decode: decodeURIComponent
	        })(pathname);
	        return matchResult && matchResult && (param = matchResult.params, hasPathValue = !0), 
	        hasPathValue;
	      })), param;
	    }
	    /**
	     * append new path to router.pathList, like '/abc/:name'
	     * Note: the pathList order will affect pathValue
	     * */  }, {
	    key: "appendPathList",
	    value: function() {
	      var _this$pathList;
	      (_this$pathList = this.pathList).push.apply(_this$pathList, arguments);
	    }
	    /**
	     * preppend new path to router.pathList, like '/abc/:name'
	     * Note: the pathList order will affect pathValue
	     * */  }, {
	    key: "prependPathList",
	    value: function() {
	      var _this$pathList2;
	      (_this$pathList2 = this.pathList).unshift.apply(_this$pathList2, arguments);
	    }
	    /*
	     * History methods
	     */  } ], protoProps && _defineProperties(Constructor.prototype, protoProps), 
	  RouterStore;
	}();

	class URLFiltersStore {
	  urlParams = {};
	  constructor(routerStore) {
	    this.routerStore = routerStore;
	    makeAutoObservable(this);
	    this.routerStore.subscribe(({
	      location
	    }) => {
	      this.urlParams = new URLSearchParams(this.routerStore.location.search);
	    });
	  }
	  setServices(services) {
	    services ? this.urlParams.set('services', services) : this.urlParams.delete('services');
	  }
	  setLocations(locations) {
	    locations ? this.urlParams.set('locations', locations) : this.urlParams.delete('locations');
	  }
	  setEmployees(employees) {
	    employees ? this.urlParams.set('employees', employees) : this.urlParams.delete('employees');
	  }
	  setStatuses(statuses) {
	    statuses ? this.urlParams.set('statuses', statuses) : this.urlParams.delete('statuses');
	  }
	  setView(view) {
	    this.urlParams.set('view', view);
	  }
	  setDateStart(date) {
	    this.urlParams.set('date_start', moment(date).format('YYYY-MM-DD'));
	  }
	  setDateEnd(date) {
	    this.urlParams.set('date_end', moment(date).format('YYYY-MM-DD'));
	  }
	  setAggregateBy(aggregateBy) {
	    aggregateBy ? this.urlParams.set('aggregate_by', aggregateBy) : this.urlParams.delete('aggregate_by');
	  }
	  getStatuses() {
	    let statusesString = this.urlParams.get('statuses');
	    if (statusesString === null) {
	      statusesString = 'confirmed,pending';
	    }
	    return statusesString;
	  }
	  getEmployees() {
	    let employeesString = this.urlParams.get('employees');
	    if (employeesString === null) {
	      employeesString = '';
	    }
	    return employeesString;
	  }
	  getLocations() {
	    let locationsString = this.urlParams.get('locations');
	    if (locationsString === null) {
	      locationsString = '';
	    }
	    return locationsString;
	  }
	  getServices() {
	    let servicesString = this.urlParams.get('services');
	    if (servicesString === null) {
	      servicesString = '';
	    }
	    return servicesString;
	  }
	  getDateStart() {
	    const date = this.urlParams.get('date_start');
	    if (date === null) {
	      return moment().format('YYYY-MM-DD');
	    }
	    return date;
	  }
	  getDateEnd() {
	    const date = this.urlParams.get('date_end');
	    if (date === null) {
	      return moment().format('YYYY-MM-DD');
	    }
	    return date;
	  }
	  getAggregateBy() {
	    const aggregateBy = this.urlParams.get('aggregate_by');
	    if (aggregateBy === null) {
	      return getPossibleAggregateOptions(this.getDateStart(), this.getDateEnd());
	    }
	    return aggregateBy;
	  }
	  updateHistory() {
	    const nextRouterWithParam = `${this.routerStore.location.pathname}?${this.urlParams.toString()}`;
	    this.routerStore.push(nextRouterWithParam);
	  }
	}

	class PermissionStore {
	  constructor(rootStore) {
	    this.rootStore = rootStore;
	    this.edit_others_booking = mpaData$1.permissions.edit_others_mpa_bookings;
	  }
	}

	/**
	 * @param {Array} array
	 * @return {Array}
	 *
	 * @since 1.0
	 */

	/**
	 * @since 1.21.0
	 *
	 * Sorts an array alphabetically based on a specified key.
	 *
	 * @param {Array} array Array to be sorted
	 * @param {String} key Key to sort by
	 * @return {Array} Sorted array
	 */
	function mpa_array_sort_by_alphabetical_key(array, key) {
	  return [...array].sort((a, b) => {
	    const aValue = (a[key] || "").toLowerCase();
	    const bValue = (b[key] || "").toLowerCase();
	    return aValue.localeCompare(bValue);
	  });
	}

	/**
	 * @since 1.21.0
	 *
	 * Groups an array of objects based on a specified criterion.
	 *
	 * @param {Array} options - The array of objects to be grouped.
	 * @param {Function} getKey - A function that defines the grouping key for each element.
	 * Returns the key value as a string.
	 *
	 * @returns {Object} An object where keys are the results of the getKey function, and values are arrays of grouped elements.
	 */
	function mpa_array_group_by_key(options, getKey) {
	  return options.reduce((acc, item) => {
	    const key = String(getKey(item));
	    if (!acc.hasOwnProperty(key)) {
	      acc[key] = [];
	    }
	    acc[key].push(item);
	    return acc;
	  }, {});
	}

	var routes = {"/mpa/v1":{namespace:"mpa/v1",methods:["GET"],endpoints:[{methods:["GET"],args:{namespace:{},context:{}}}]},"/mpa/v1/bookings":{namespace:"mpa/v1",methods:["GET"],endpoints:[{methods:["GET"],args:{context:{},page:{},per_page:{},search:{},after:{},before:{},exclude:{},include:{},offset:{},order:{},orderby:{},filter:{}}}]},"/mpa/v1/bookings/(?P<id>[\\d]+)":{namespace:"mpa/v1",methods:["GET"],endpoints:[{methods:["GET"],args:{id:{},context:{}}}]},"/mpa/v1/payments":{namespace:"mpa/v1",methods:["GET"],endpoints:[{methods:["GET"],args:{context:{},page:{},per_page:{},search:{},after:{},before:{},exclude:{},include:{},offset:{},order:{},orderby:{},filter:{}}}]},"/mpa/v1/payments/(?P<id>[\\d]+)":{namespace:"mpa/v1",methods:["GET"],endpoints:[{methods:["GET"],args:{id:{},context:{}}}]},"/mpa/v1/reservations":{namespace:"mpa/v1",methods:["GET"],endpoints:[{methods:["GET"],args:{context:{},page:{},per_page:{},search:{},after:{},before:{},exclude:{},include:{},offset:{},order:{},orderby:{},filter:{},uid:{},min_reservation_date:{},max_reservation_date:{},booking_id:{},service_id:{},employee_id:{},location_id:{},min_price:{},max_price:{}}}]},"/mpa/v1/reservations/(?P<id>[\\d]+)":{namespace:"mpa/v1",methods:["GET"],endpoints:[{methods:["GET"],args:{id:{},context:{}}}]},"/mpa/v1/services":{namespace:"mpa/v1",methods:["GET"],endpoints:[{methods:["GET"],args:{context:{},page:{},per_page:{},search:{},after:{},before:{},exclude:{},include:{},offset:{},order:{},orderby:{},filter:{}}}]},"/mpa/v1/services/(?P<id>[\\d]+)":{namespace:"mpa/v1",methods:["GET"],endpoints:[{methods:["GET"],args:{id:{},context:{}}}]},"/mpa/v1/locations":{namespace:"mpa/v1",methods:["GET"],endpoints:[{methods:["GET"],args:{context:{},page:{},per_page:{},search:{},after:{},before:{},exclude:{},include:{},offset:{},order:{},orderby:{},filter:{}}}]},"/mpa/v1/locations/(?P<id>[\\d]+)":{namespace:"mpa/v1",methods:["GET"],endpoints:[{methods:["GET"],args:{id:{},context:{}}}]},"/mpa/v1/employees":{namespace:"mpa/v1",methods:["GET"],endpoints:[{methods:["GET"],args:{context:{},page:{},per_page:{},search:{},after:{},before:{},exclude:{},include:{},offset:{},order:{},orderby:{},filter:{}}}]},"/mpa/v1/employees/(?P<id>[\\d]+)":{namespace:"mpa/v1",methods:["GET"],endpoints:[{methods:["GET"],args:{id:{},context:{}}}]},"/mpa/v1/coupons":{namespace:"mpa/v1",methods:["GET"],endpoints:[{methods:["GET"],args:{context:{},page:{},per_page:{},search:{},after:{},before:{},exclude:{},include:{},offset:{},order:{},orderby:{},filter:{}}}]},"/mpa/v1/coupons/(?P<id>[\\d]+)":{namespace:"mpa/v1",methods:["GET"],endpoints:[{methods:["GET"],args:{id:{},context:{}}}]}};

	function mpa_rest_request() {
	  const url = mpaData$1.restAPI.root;
	  const nonce = {
	    nonce: mpaData$1.restAPI.nonce
	  };
	  const namespace = 'mpa/v1';
	  return new WPAPI({
	    endpoint: url,
	    routes: routes
	  }).auth(nonce).namespace(namespace);
	}

	function implement_default_request_filters(request, args = {}, embed) {
	  const availableDefaultFilters = ['context', 'page', 'per_page', 'search', 'after', 'before', 'exclude', 'include', 'offset', 'order', 'orderby', 'filter', '_fields', 'embed'];

	  // For better performance, set per_page = 100.
	  // This helps reduce the number of requests per render.
	  if (args.per_page === undefined) {
	    args.per_page = 100;
	  }
	  availableDefaultFilters.forEach(filter => {
	    if (args[filter] !== undefined) {
	      request.param(filter, args[filter]);
	    }
	  });
	  if (embed !== false) {
	    request.embed();
	  }
	  return request;
	}

	/**
	 * @param {Object} args
	 *     @param {Date|String} args['min_reservation_date']
	 *     @param {Date|String} args['max_reservation_date']
	 *     @param {String} args['booking_id']
	 *     @param {String} args['service_id']
	 *     @param {String} args['employee_id']
	 *     @param {String} args['location_id']
	 *     @param {Number} args['min_price']
	 *     @param {Number} args['max_price']
	 * @param {bool} embed Optional.
	 * @return {Promise}
	 */
	function get_reservations(args, embed = false) {
	  let request = mpa_rest_request().reservations();
	  request = implement_default_request_filters(request, args, embed);

	  // Add date range
	  if (args.min_reservation_date !== undefined) {
	    request.param('min_reservation_date', args.min_reservation_date);
	  }
	  if (args.max_reservation_date !== undefined) {
	    request.param('max_reservation_date', args.max_reservation_date);
	  }
	  if (args.booking_id !== undefined) {
	    request.param('booking_id', args.booking_id);
	  }
	  if (args.service_id !== undefined) {
	    request.param('service_id', args.service_id);
	  }
	  if (args.employee_id !== undefined) {
	    request.param('employee_id', args.employee_id);
	  }
	  if (args.location_id !== undefined) {
	    request.param('location_id', args.location_id);
	  }
	  if (args.min_price !== undefined) {
	    request.param('min_price', args.min_price);
	  }
	  if (args.max_price !== undefined) {
	    request.param('max_price', args.max_price);
	  }
	  return request;
	}
	function get_services(args, embed = false) {
	  const request = mpa_rest_request().services();
	  return implement_default_request_filters(request, args, embed);
	}
	function get_locations(args, embed = false) {
	  const request = mpa_rest_request().locations();
	  return implement_default_request_filters(request, args, embed);
	}
	function get_employees(args, embed = false) {
	  const request = mpa_rest_request().employees();
	  return implement_default_request_filters(request, args, embed);
	}
	function get_coupons(args, embed = false) {
	  const request = mpa_rest_request().coupons();
	  return implement_default_request_filters(request, args, embed);
	}
	function get_all(requestPromise) {
	  return requestPromise.then(function (response) {
	    if (!response._paging || !response._paging.next) {
	      return response;
	    }
	    // Request the next page and return both responses as one collection
	    return Promise.all([response, get_all(response._paging.next)]).then(function (responses) {
	      return responses.flat();
	    });
	  });
	}

	var chroma$1 = {exports: {}};

	/**
	 * chroma.js - JavaScript library for color conversions
	 *
	 * Copyright (c) 2011-2019, Gregor Aisch
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice, this
	 * list of conditions and the following disclaimer.
	 *
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 * this list of conditions and the following disclaimer in the documentation
	 * and/or other materials provided with the distribution.
	 *
	 * 3. The name Gregor Aisch may not be used to endorse or promote products
	 * derived from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *
	 * -------------------------------------------------------
	 *
	 * chroma.js includes colors from colorbrewer2.org, which are released under
	 * the following license:
	 *
	 * Copyright (c) 2002 Cynthia Brewer, Mark Harrower,
	 * and The Pennsylvania State University.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing,
	 * software distributed under the License is distributed on an
	 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
	 * either express or implied. See the License for the specific
	 * language governing permissions and limitations under the License.
	 *
	 * ------------------------------------------------------
	 *
	 * Named colors are taken from X11 Color Names.
	 * http://www.w3.org/TR/css3-color/#svg-color
	 *
	 * @preserve
	 */

	(function (module, exports) {
		(function (global, factory) {
		    module.exports = factory() ;
		})(commonjsGlobal, (function () {
		    var limit$2 = function (x, min, max) {
		        if ( min === void 0 ) min=0;
		        if ( max === void 0 ) max=1;

		        return x < min ? min : x > max ? max : x;
		    };

		    var limit$1 = limit$2;

		    var clip_rgb$3 = function (rgb) {
		        rgb._clipped = false;
		        rgb._unclipped = rgb.slice(0);
		        for (var i=0; i<=3; i++) {
		            if (i < 3) {
		                if (rgb[i] < 0 || rgb[i] > 255) { rgb._clipped = true; }
		                rgb[i] = limit$1(rgb[i], 0, 255);
		            } else if (i === 3) {
		                rgb[i] = limit$1(rgb[i], 0, 1);
		            }
		        }
		        return rgb;
		    };

		    // ported from jQuery's $.type
		    var classToType = {};
		    for (var i$1 = 0, list$1 = ['Boolean', 'Number', 'String', 'Function', 'Array', 'Date', 'RegExp', 'Undefined', 'Null']; i$1 < list$1.length; i$1 += 1) {
		        var name = list$1[i$1];

		        classToType[("[object " + name + "]")] = name.toLowerCase();
		    }
		    var type$p = function(obj) {
		        return classToType[Object.prototype.toString.call(obj)] || "object";
		    };

		    var type$o = type$p;

		    var unpack$B = function (args, keyOrder) {
		        if ( keyOrder === void 0 ) keyOrder=null;

		    	// if called with more than 3 arguments, we return the arguments
		        if (args.length >= 3) { return Array.prototype.slice.call(args); }
		        // with less than 3 args we check if first arg is object
		        // and use the keyOrder string to extract and sort properties
		    	if (type$o(args[0]) == 'object' && keyOrder) {
		    		return keyOrder.split('')
		    			.filter(function (k) { return args[0][k] !== undefined; })
		    			.map(function (k) { return args[0][k]; });
		    	}
		    	// otherwise we just return the first argument
		    	// (which we suppose is an array of args)
		        return args[0];
		    };

		    var type$n = type$p;

		    var last$4 = function (args) {
		        if (args.length < 2) { return null; }
		        var l = args.length-1;
		        if (type$n(args[l]) == 'string') { return args[l].toLowerCase(); }
		        return null;
		    };

		    var PI$2 = Math.PI;

		    var utils = {
		    	clip_rgb: clip_rgb$3,
		    	limit: limit$2,
		    	type: type$p,
		    	unpack: unpack$B,
		    	last: last$4,
		    	PI: PI$2,
		    	TWOPI: PI$2*2,
		    	PITHIRD: PI$2/3,
		    	DEG2RAD: PI$2 / 180,
		    	RAD2DEG: 180 / PI$2
		    };

		    var input$h = {
		    	format: {},
		    	autodetect: []
		    };

		    var last$3 = utils.last;
		    var clip_rgb$2 = utils.clip_rgb;
		    var type$m = utils.type;
		    var _input = input$h;

		    var Color$D = function Color() {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        var me = this;
		        if (type$m(args[0]) === 'object' &&
		            args[0].constructor &&
		            args[0].constructor === this.constructor) {
		            // the argument is already a Color instance
		            return args[0];
		        }

		        // last argument could be the mode
		        var mode = last$3(args);
		        var autodetect = false;

		        if (!mode) {
		            autodetect = true;
		            if (!_input.sorted) {
		                _input.autodetect = _input.autodetect.sort(function (a,b) { return b.p - a.p; });
		                _input.sorted = true;
		            }
		            // auto-detect format
		            for (var i = 0, list = _input.autodetect; i < list.length; i += 1) {
		                var chk = list[i];

		                mode = chk.test.apply(chk, args);
		                if (mode) { break; }
		            }
		        }

		        if (_input.format[mode]) {
		            var rgb = _input.format[mode].apply(null, autodetect ? args : args.slice(0,-1));
		            me._rgb = clip_rgb$2(rgb);
		        } else {
		            throw new Error('unknown format: '+args);
		        }

		        // add alpha channel
		        if (me._rgb.length === 3) { me._rgb.push(1); }
		    };

		    Color$D.prototype.toString = function toString () {
		        if (type$m(this.hex) == 'function') { return this.hex(); }
		        return ("[" + (this._rgb.join(',')) + "]");
		    };

		    var Color_1 = Color$D;

		    var chroma$k = function () {
		    	var args = [], len = arguments.length;
		    	while ( len-- ) args[ len ] = arguments[ len ];

		    	return new (Function.prototype.bind.apply( chroma$k.Color, [ null ].concat( args) ));
		    };

		    chroma$k.Color = Color_1;
		    chroma$k.version = '2.4.2';

		    var chroma_1 = chroma$k;

		    var unpack$A = utils.unpack;
		    var max$2 = Math.max;

		    var rgb2cmyk$1 = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        var ref = unpack$A(args, 'rgb');
		        var r = ref[0];
		        var g = ref[1];
		        var b = ref[2];
		        r = r / 255;
		        g = g / 255;
		        b = b / 255;
		        var k = 1 - max$2(r,max$2(g,b));
		        var f = k < 1 ? 1 / (1-k) : 0;
		        var c = (1-r-k) * f;
		        var m = (1-g-k) * f;
		        var y = (1-b-k) * f;
		        return [c,m,y,k];
		    };

		    var rgb2cmyk_1 = rgb2cmyk$1;

		    var unpack$z = utils.unpack;

		    var cmyk2rgb = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        args = unpack$z(args, 'cmyk');
		        var c = args[0];
		        var m = args[1];
		        var y = args[2];
		        var k = args[3];
		        var alpha = args.length > 4 ? args[4] : 1;
		        if (k === 1) { return [0,0,0,alpha]; }
		        return [
		            c >= 1 ? 0 : 255 * (1-c) * (1-k), // r
		            m >= 1 ? 0 : 255 * (1-m) * (1-k), // g
		            y >= 1 ? 0 : 255 * (1-y) * (1-k), // b
		            alpha
		        ];
		    };

		    var cmyk2rgb_1 = cmyk2rgb;

		    var chroma$j = chroma_1;
		    var Color$C = Color_1;
		    var input$g = input$h;
		    var unpack$y = utils.unpack;
		    var type$l = utils.type;

		    var rgb2cmyk = rgb2cmyk_1;

		    Color$C.prototype.cmyk = function() {
		        return rgb2cmyk(this._rgb);
		    };

		    chroma$j.cmyk = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        return new (Function.prototype.bind.apply( Color$C, [ null ].concat( args, ['cmyk']) ));
		    };

		    input$g.format.cmyk = cmyk2rgb_1;

		    input$g.autodetect.push({
		        p: 2,
		        test: function () {
		            var args = [], len = arguments.length;
		            while ( len-- ) args[ len ] = arguments[ len ];

		            args = unpack$y(args, 'cmyk');
		            if (type$l(args) === 'array' && args.length === 4) {
		                return 'cmyk';
		            }
		        }
		    });

		    var unpack$x = utils.unpack;
		    var last$2 = utils.last;
		    var rnd = function (a) { return Math.round(a*100)/100; };

		    /*
		     * supported arguments:
		     * - hsl2css(h,s,l)
		     * - hsl2css(h,s,l,a)
		     * - hsl2css([h,s,l], mode)
		     * - hsl2css([h,s,l,a], mode)
		     * - hsl2css({h,s,l,a}, mode)
		     */
		    var hsl2css$1 = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        var hsla = unpack$x(args, 'hsla');
		        var mode = last$2(args) || 'lsa';
		        hsla[0] = rnd(hsla[0] || 0);
		        hsla[1] = rnd(hsla[1]*100) + '%';
		        hsla[2] = rnd(hsla[2]*100) + '%';
		        if (mode === 'hsla' || (hsla.length > 3 && hsla[3]<1)) {
		            hsla[3] = hsla.length > 3 ? hsla[3] : 1;
		            mode = 'hsla';
		        } else {
		            hsla.length = 3;
		        }
		        return (mode + "(" + (hsla.join(',')) + ")");
		    };

		    var hsl2css_1 = hsl2css$1;

		    var unpack$w = utils.unpack;

		    /*
		     * supported arguments:
		     * - rgb2hsl(r,g,b)
		     * - rgb2hsl(r,g,b,a)
		     * - rgb2hsl([r,g,b])
		     * - rgb2hsl([r,g,b,a])
		     * - rgb2hsl({r,g,b,a})
		     */
		    var rgb2hsl$3 = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        args = unpack$w(args, 'rgba');
		        var r = args[0];
		        var g = args[1];
		        var b = args[2];

		        r /= 255;
		        g /= 255;
		        b /= 255;

		        var min = Math.min(r, g, b);
		        var max = Math.max(r, g, b);

		        var l = (max + min) / 2;
		        var s, h;

		        if (max === min){
		            s = 0;
		            h = Number.NaN;
		        } else {
		            s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);
		        }

		        if (r == max) { h = (g - b) / (max - min); }
		        else if (g == max) { h = 2 + (b - r) / (max - min); }
		        else if (b == max) { h = 4 + (r - g) / (max - min); }

		        h *= 60;
		        if (h < 0) { h += 360; }
		        if (args.length>3 && args[3]!==undefined) { return [h,s,l,args[3]]; }
		        return [h,s,l];
		    };

		    var rgb2hsl_1 = rgb2hsl$3;

		    var unpack$v = utils.unpack;
		    var last$1 = utils.last;
		    var hsl2css = hsl2css_1;
		    var rgb2hsl$2 = rgb2hsl_1;
		    var round$6 = Math.round;

		    /*
		     * supported arguments:
		     * - rgb2css(r,g,b)
		     * - rgb2css(r,g,b,a)
		     * - rgb2css([r,g,b], mode)
		     * - rgb2css([r,g,b,a], mode)
		     * - rgb2css({r,g,b,a}, mode)
		     */
		    var rgb2css$1 = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        var rgba = unpack$v(args, 'rgba');
		        var mode = last$1(args) || 'rgb';
		        if (mode.substr(0,3) == 'hsl') {
		            return hsl2css(rgb2hsl$2(rgba), mode);
		        }
		        rgba[0] = round$6(rgba[0]);
		        rgba[1] = round$6(rgba[1]);
		        rgba[2] = round$6(rgba[2]);
		        if (mode === 'rgba' || (rgba.length > 3 && rgba[3]<1)) {
		            rgba[3] = rgba.length > 3 ? rgba[3] : 1;
		            mode = 'rgba';
		        }
		        return (mode + "(" + (rgba.slice(0,mode==='rgb'?3:4).join(',')) + ")");
		    };

		    var rgb2css_1 = rgb2css$1;

		    var unpack$u = utils.unpack;
		    var round$5 = Math.round;

		    var hsl2rgb$1 = function () {
		        var assign;

		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];
		        args = unpack$u(args, 'hsl');
		        var h = args[0];
		        var s = args[1];
		        var l = args[2];
		        var r,g,b;
		        if (s === 0) {
		            r = g = b = l*255;
		        } else {
		            var t3 = [0,0,0];
		            var c = [0,0,0];
		            var t2 = l < 0.5 ? l * (1+s) : l+s-l*s;
		            var t1 = 2 * l - t2;
		            var h_ = h / 360;
		            t3[0] = h_ + 1/3;
		            t3[1] = h_;
		            t3[2] = h_ - 1/3;
		            for (var i=0; i<3; i++) {
		                if (t3[i] < 0) { t3[i] += 1; }
		                if (t3[i] > 1) { t3[i] -= 1; }
		                if (6 * t3[i] < 1)
		                    { c[i] = t1 + (t2 - t1) * 6 * t3[i]; }
		                else if (2 * t3[i] < 1)
		                    { c[i] = t2; }
		                else if (3 * t3[i] < 2)
		                    { c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6; }
		                else
		                    { c[i] = t1; }
		            }
		            (assign = [round$5(c[0]*255),round$5(c[1]*255),round$5(c[2]*255)], r = assign[0], g = assign[1], b = assign[2]);
		        }
		        if (args.length > 3) {
		            // keep alpha channel
		            return [r,g,b,args[3]];
		        }
		        return [r,g,b,1];
		    };

		    var hsl2rgb_1 = hsl2rgb$1;

		    var hsl2rgb = hsl2rgb_1;
		    var input$f = input$h;

		    var RE_RGB = /^rgb\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*\)$/;
		    var RE_RGBA = /^rgba\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*,\s*([01]|[01]?\.\d+)\)$/;
		    var RE_RGB_PCT = /^rgb\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/;
		    var RE_RGBA_PCT = /^rgba\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/;
		    var RE_HSL = /^hsl\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/;
		    var RE_HSLA = /^hsla\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/;

		    var round$4 = Math.round;

		    var css2rgb$1 = function (css) {
		        css = css.toLowerCase().trim();
		        var m;

		        if (input$f.format.named) {
		            try {
		                return input$f.format.named(css);
		            } catch (e) {
		                // eslint-disable-next-line
		            }
		        }

		        // rgb(250,20,0)
		        if ((m = css.match(RE_RGB))) {
		            var rgb = m.slice(1,4);
		            for (var i=0; i<3; i++) {
		                rgb[i] = +rgb[i];
		            }
		            rgb[3] = 1;  // default alpha
		            return rgb;
		        }

		        // rgba(250,20,0,0.4)
		        if ((m = css.match(RE_RGBA))) {
		            var rgb$1 = m.slice(1,5);
		            for (var i$1=0; i$1<4; i$1++) {
		                rgb$1[i$1] = +rgb$1[i$1];
		            }
		            return rgb$1;
		        }

		        // rgb(100%,0%,0%)
		        if ((m = css.match(RE_RGB_PCT))) {
		            var rgb$2 = m.slice(1,4);
		            for (var i$2=0; i$2<3; i$2++) {
		                rgb$2[i$2] = round$4(rgb$2[i$2] * 2.55);
		            }
		            rgb$2[3] = 1;  // default alpha
		            return rgb$2;
		        }

		        // rgba(100%,0%,0%,0.4)
		        if ((m = css.match(RE_RGBA_PCT))) {
		            var rgb$3 = m.slice(1,5);
		            for (var i$3=0; i$3<3; i$3++) {
		                rgb$3[i$3] = round$4(rgb$3[i$3] * 2.55);
		            }
		            rgb$3[3] = +rgb$3[3];
		            return rgb$3;
		        }

		        // hsl(0,100%,50%)
		        if ((m = css.match(RE_HSL))) {
		            var hsl = m.slice(1,4);
		            hsl[1] *= 0.01;
		            hsl[2] *= 0.01;
		            var rgb$4 = hsl2rgb(hsl);
		            rgb$4[3] = 1;
		            return rgb$4;
		        }

		        // hsla(0,100%,50%,0.5)
		        if ((m = css.match(RE_HSLA))) {
		            var hsl$1 = m.slice(1,4);
		            hsl$1[1] *= 0.01;
		            hsl$1[2] *= 0.01;
		            var rgb$5 = hsl2rgb(hsl$1);
		            rgb$5[3] = +m[4];  // default alpha = 1
		            return rgb$5;
		        }
		    };

		    css2rgb$1.test = function (s) {
		        return RE_RGB.test(s) ||
		            RE_RGBA.test(s) ||
		            RE_RGB_PCT.test(s) ||
		            RE_RGBA_PCT.test(s) ||
		            RE_HSL.test(s) ||
		            RE_HSLA.test(s);
		    };

		    var css2rgb_1 = css2rgb$1;

		    var chroma$i = chroma_1;
		    var Color$B = Color_1;
		    var input$e = input$h;
		    var type$k = utils.type;

		    var rgb2css = rgb2css_1;
		    var css2rgb = css2rgb_1;

		    Color$B.prototype.css = function(mode) {
		        return rgb2css(this._rgb, mode);
		    };

		    chroma$i.css = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        return new (Function.prototype.bind.apply( Color$B, [ null ].concat( args, ['css']) ));
		    };

		    input$e.format.css = css2rgb;

		    input$e.autodetect.push({
		        p: 5,
		        test: function (h) {
		            var rest = [], len = arguments.length - 1;
		            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];

		            if (!rest.length && type$k(h) === 'string' && css2rgb.test(h)) {
		                return 'css';
		            }
		        }
		    });

		    var Color$A = Color_1;
		    var chroma$h = chroma_1;
		    var input$d = input$h;
		    var unpack$t = utils.unpack;

		    input$d.format.gl = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        var rgb = unpack$t(args, 'rgba');
		        rgb[0] *= 255;
		        rgb[1] *= 255;
		        rgb[2] *= 255;
		        return rgb;
		    };

		    chroma$h.gl = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        return new (Function.prototype.bind.apply( Color$A, [ null ].concat( args, ['gl']) ));
		    };

		    Color$A.prototype.gl = function() {
		        var rgb = this._rgb;
		        return [rgb[0]/255, rgb[1]/255, rgb[2]/255, rgb[3]];
		    };

		    var unpack$s = utils.unpack;

		    var rgb2hcg$1 = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        var ref = unpack$s(args, 'rgb');
		        var r = ref[0];
		        var g = ref[1];
		        var b = ref[2];
		        var min = Math.min(r, g, b);
		        var max = Math.max(r, g, b);
		        var delta = max - min;
		        var c = delta * 100 / 255;
		        var _g = min / (255 - delta) * 100;
		        var h;
		        if (delta === 0) {
		            h = Number.NaN;
		        } else {
		            if (r === max) { h = (g - b) / delta; }
		            if (g === max) { h = 2+(b - r) / delta; }
		            if (b === max) { h = 4+(r - g) / delta; }
		            h *= 60;
		            if (h < 0) { h += 360; }
		        }
		        return [h, c, _g];
		    };

		    var rgb2hcg_1 = rgb2hcg$1;

		    var unpack$r = utils.unpack;
		    var floor$3 = Math.floor;

		    /*
		     * this is basically just HSV with some minor tweaks
		     *
		     * hue.. [0..360]
		     * chroma .. [0..1]
		     * grayness .. [0..1]
		     */

		    var hcg2rgb = function () {
		        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;

		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];
		        args = unpack$r(args, 'hcg');
		        var h = args[0];
		        var c = args[1];
		        var _g = args[2];
		        var r,g,b;
		        _g = _g * 255;
		        var _c = c * 255;
		        if (c === 0) {
		            r = g = b = _g;
		        } else {
		            if (h === 360) { h = 0; }
		            if (h > 360) { h -= 360; }
		            if (h < 0) { h += 360; }
		            h /= 60;
		            var i = floor$3(h);
		            var f = h - i;
		            var p = _g * (1 - c);
		            var q = p + _c * (1 - f);
		            var t = p + _c * f;
		            var v = p + _c;
		            switch (i) {
		                case 0: (assign = [v, t, p], r = assign[0], g = assign[1], b = assign[2]); break
		                case 1: (assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2]); break
		                case 2: (assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2]); break
		                case 3: (assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2]); break
		                case 4: (assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2]); break
		                case 5: (assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2]); break
		            }
		        }
		        return [r, g, b, args.length > 3 ? args[3] : 1];
		    };

		    var hcg2rgb_1 = hcg2rgb;

		    var unpack$q = utils.unpack;
		    var type$j = utils.type;
		    var chroma$g = chroma_1;
		    var Color$z = Color_1;
		    var input$c = input$h;

		    var rgb2hcg = rgb2hcg_1;

		    Color$z.prototype.hcg = function() {
		        return rgb2hcg(this._rgb);
		    };

		    chroma$g.hcg = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        return new (Function.prototype.bind.apply( Color$z, [ null ].concat( args, ['hcg']) ));
		    };

		    input$c.format.hcg = hcg2rgb_1;

		    input$c.autodetect.push({
		        p: 1,
		        test: function () {
		            var args = [], len = arguments.length;
		            while ( len-- ) args[ len ] = arguments[ len ];

		            args = unpack$q(args, 'hcg');
		            if (type$j(args) === 'array' && args.length === 3) {
		                return 'hcg';
		            }
		        }
		    });

		    var unpack$p = utils.unpack;
		    var last = utils.last;
		    var round$3 = Math.round;

		    var rgb2hex$2 = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        var ref = unpack$p(args, 'rgba');
		        var r = ref[0];
		        var g = ref[1];
		        var b = ref[2];
		        var a = ref[3];
		        var mode = last(args) || 'auto';
		        if (a === undefined) { a = 1; }
		        if (mode === 'auto') {
		            mode = a < 1 ? 'rgba' : 'rgb';
		        }
		        r = round$3(r);
		        g = round$3(g);
		        b = round$3(b);
		        var u = r << 16 | g << 8 | b;
		        var str = "000000" + u.toString(16); //#.toUpperCase();
		        str = str.substr(str.length - 6);
		        var hxa = '0' + round$3(a * 255).toString(16);
		        hxa = hxa.substr(hxa.length - 2);
		        switch (mode.toLowerCase()) {
		            case 'rgba': return ("#" + str + hxa);
		            case 'argb': return ("#" + hxa + str);
		            default: return ("#" + str);
		        }
		    };

		    var rgb2hex_1 = rgb2hex$2;

		    var RE_HEX = /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;
		    var RE_HEXA = /^#?([A-Fa-f0-9]{8}|[A-Fa-f0-9]{4})$/;

		    var hex2rgb$1 = function (hex) {
		        if (hex.match(RE_HEX)) {
		            // remove optional leading #
		            if (hex.length === 4 || hex.length === 7) {
		                hex = hex.substr(1);
		            }
		            // expand short-notation to full six-digit
		            if (hex.length === 3) {
		                hex = hex.split('');
		                hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];
		            }
		            var u = parseInt(hex, 16);
		            var r = u >> 16;
		            var g = u >> 8 & 0xFF;
		            var b = u & 0xFF;
		            return [r,g,b,1];
		        }

		        // match rgba hex format, eg #FF000077
		        if (hex.match(RE_HEXA)) {
		            if (hex.length === 5 || hex.length === 9) {
		                // remove optional leading #
		                hex = hex.substr(1);
		            }
		            // expand short-notation to full eight-digit
		            if (hex.length === 4) {
		                hex = hex.split('');
		                hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3];
		            }
		            var u$1 = parseInt(hex, 16);
		            var r$1 = u$1 >> 24 & 0xFF;
		            var g$1 = u$1 >> 16 & 0xFF;
		            var b$1 = u$1 >> 8 & 0xFF;
		            var a = Math.round((u$1 & 0xFF) / 0xFF * 100) / 100;
		            return [r$1,g$1,b$1,a];
		        }

		        // we used to check for css colors here
		        // if _input.css? and rgb = _input.css hex
		        //     return rgb

		        throw new Error(("unknown hex color: " + hex));
		    };

		    var hex2rgb_1 = hex2rgb$1;

		    var chroma$f = chroma_1;
		    var Color$y = Color_1;
		    var type$i = utils.type;
		    var input$b = input$h;

		    var rgb2hex$1 = rgb2hex_1;

		    Color$y.prototype.hex = function(mode) {
		        return rgb2hex$1(this._rgb, mode);
		    };

		    chroma$f.hex = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        return new (Function.prototype.bind.apply( Color$y, [ null ].concat( args, ['hex']) ));
		    };

		    input$b.format.hex = hex2rgb_1;
		    input$b.autodetect.push({
		        p: 4,
		        test: function (h) {
		            var rest = [], len = arguments.length - 1;
		            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];

		            if (!rest.length && type$i(h) === 'string' && [3,4,5,6,7,8,9].indexOf(h.length) >= 0) {
		                return 'hex';
		            }
		        }
		    });

		    var unpack$o = utils.unpack;
		    var TWOPI$2 = utils.TWOPI;
		    var min$2 = Math.min;
		    var sqrt$4 = Math.sqrt;
		    var acos = Math.acos;

		    var rgb2hsi$1 = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        /*
		        borrowed from here:
		        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp
		        */
		        var ref = unpack$o(args, 'rgb');
		        var r = ref[0];
		        var g = ref[1];
		        var b = ref[2];
		        r /= 255;
		        g /= 255;
		        b /= 255;
		        var h;
		        var min_ = min$2(r,g,b);
		        var i = (r+g+b) / 3;
		        var s = i > 0 ? 1 - min_/i : 0;
		        if (s === 0) {
		            h = NaN;
		        } else {
		            h = ((r-g)+(r-b)) / 2;
		            h /= sqrt$4((r-g)*(r-g) + (r-b)*(g-b));
		            h = acos(h);
		            if (b > g) {
		                h = TWOPI$2 - h;
		            }
		            h /= TWOPI$2;
		        }
		        return [h*360,s,i];
		    };

		    var rgb2hsi_1 = rgb2hsi$1;

		    var unpack$n = utils.unpack;
		    var limit = utils.limit;
		    var TWOPI$1 = utils.TWOPI;
		    var PITHIRD = utils.PITHIRD;
		    var cos$4 = Math.cos;

		    /*
		     * hue [0..360]
		     * saturation [0..1]
		     * intensity [0..1]
		     */
		    var hsi2rgb = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        /*
		        borrowed from here:
		        http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp
		        */
		        args = unpack$n(args, 'hsi');
		        var h = args[0];
		        var s = args[1];
		        var i = args[2];
		        var r,g,b;

		        if (isNaN(h)) { h = 0; }
		        if (isNaN(s)) { s = 0; }
		        // normalize hue
		        if (h > 360) { h -= 360; }
		        if (h < 0) { h += 360; }
		        h /= 360;
		        if (h < 1/3) {
		            b = (1-s)/3;
		            r = (1+s*cos$4(TWOPI$1*h)/cos$4(PITHIRD-TWOPI$1*h))/3;
		            g = 1 - (b+r);
		        } else if (h < 2/3) {
		            h -= 1/3;
		            r = (1-s)/3;
		            g = (1+s*cos$4(TWOPI$1*h)/cos$4(PITHIRD-TWOPI$1*h))/3;
		            b = 1 - (r+g);
		        } else {
		            h -= 2/3;
		            g = (1-s)/3;
		            b = (1+s*cos$4(TWOPI$1*h)/cos$4(PITHIRD-TWOPI$1*h))/3;
		            r = 1 - (g+b);
		        }
		        r = limit(i*r*3);
		        g = limit(i*g*3);
		        b = limit(i*b*3);
		        return [r*255, g*255, b*255, args.length > 3 ? args[3] : 1];
		    };

		    var hsi2rgb_1 = hsi2rgb;

		    var unpack$m = utils.unpack;
		    var type$h = utils.type;
		    var chroma$e = chroma_1;
		    var Color$x = Color_1;
		    var input$a = input$h;

		    var rgb2hsi = rgb2hsi_1;

		    Color$x.prototype.hsi = function() {
		        return rgb2hsi(this._rgb);
		    };

		    chroma$e.hsi = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        return new (Function.prototype.bind.apply( Color$x, [ null ].concat( args, ['hsi']) ));
		    };

		    input$a.format.hsi = hsi2rgb_1;

		    input$a.autodetect.push({
		        p: 2,
		        test: function () {
		            var args = [], len = arguments.length;
		            while ( len-- ) args[ len ] = arguments[ len ];

		            args = unpack$m(args, 'hsi');
		            if (type$h(args) === 'array' && args.length === 3) {
		                return 'hsi';
		            }
		        }
		    });

		    var unpack$l = utils.unpack;
		    var type$g = utils.type;
		    var chroma$d = chroma_1;
		    var Color$w = Color_1;
		    var input$9 = input$h;

		    var rgb2hsl$1 = rgb2hsl_1;

		    Color$w.prototype.hsl = function() {
		        return rgb2hsl$1(this._rgb);
		    };

		    chroma$d.hsl = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        return new (Function.prototype.bind.apply( Color$w, [ null ].concat( args, ['hsl']) ));
		    };

		    input$9.format.hsl = hsl2rgb_1;

		    input$9.autodetect.push({
		        p: 2,
		        test: function () {
		            var args = [], len = arguments.length;
		            while ( len-- ) args[ len ] = arguments[ len ];

		            args = unpack$l(args, 'hsl');
		            if (type$g(args) === 'array' && args.length === 3) {
		                return 'hsl';
		            }
		        }
		    });

		    var unpack$k = utils.unpack;
		    var min$1 = Math.min;
		    var max$1 = Math.max;

		    /*
		     * supported arguments:
		     * - rgb2hsv(r,g,b)
		     * - rgb2hsv([r,g,b])
		     * - rgb2hsv({r,g,b})
		     */
		    var rgb2hsl = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        args = unpack$k(args, 'rgb');
		        var r = args[0];
		        var g = args[1];
		        var b = args[2];
		        var min_ = min$1(r, g, b);
		        var max_ = max$1(r, g, b);
		        var delta = max_ - min_;
		        var h,s,v;
		        v = max_ / 255.0;
		        if (max_ === 0) {
		            h = Number.NaN;
		            s = 0;
		        } else {
		            s = delta / max_;
		            if (r === max_) { h = (g - b) / delta; }
		            if (g === max_) { h = 2+(b - r) / delta; }
		            if (b === max_) { h = 4+(r - g) / delta; }
		            h *= 60;
		            if (h < 0) { h += 360; }
		        }
		        return [h, s, v]
		    };

		    var rgb2hsv$1 = rgb2hsl;

		    var unpack$j = utils.unpack;
		    var floor$2 = Math.floor;

		    var hsv2rgb = function () {
		        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;

		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];
		        args = unpack$j(args, 'hsv');
		        var h = args[0];
		        var s = args[1];
		        var v = args[2];
		        var r,g,b;
		        v *= 255;
		        if (s === 0) {
		            r = g = b = v;
		        } else {
		            if (h === 360) { h = 0; }
		            if (h > 360) { h -= 360; }
		            if (h < 0) { h += 360; }
		            h /= 60;

		            var i = floor$2(h);
		            var f = h - i;
		            var p = v * (1 - s);
		            var q = v * (1 - s * f);
		            var t = v * (1 - s * (1 - f));

		            switch (i) {
		                case 0: (assign = [v, t, p], r = assign[0], g = assign[1], b = assign[2]); break
		                case 1: (assign$1 = [q, v, p], r = assign$1[0], g = assign$1[1], b = assign$1[2]); break
		                case 2: (assign$2 = [p, v, t], r = assign$2[0], g = assign$2[1], b = assign$2[2]); break
		                case 3: (assign$3 = [p, q, v], r = assign$3[0], g = assign$3[1], b = assign$3[2]); break
		                case 4: (assign$4 = [t, p, v], r = assign$4[0], g = assign$4[1], b = assign$4[2]); break
		                case 5: (assign$5 = [v, p, q], r = assign$5[0], g = assign$5[1], b = assign$5[2]); break
		            }
		        }
		        return [r,g,b,args.length > 3?args[3]:1];
		    };

		    var hsv2rgb_1 = hsv2rgb;

		    var unpack$i = utils.unpack;
		    var type$f = utils.type;
		    var chroma$c = chroma_1;
		    var Color$v = Color_1;
		    var input$8 = input$h;

		    var rgb2hsv = rgb2hsv$1;

		    Color$v.prototype.hsv = function() {
		        return rgb2hsv(this._rgb);
		    };

		    chroma$c.hsv = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        return new (Function.prototype.bind.apply( Color$v, [ null ].concat( args, ['hsv']) ));
		    };

		    input$8.format.hsv = hsv2rgb_1;

		    input$8.autodetect.push({
		        p: 2,
		        test: function () {
		            var args = [], len = arguments.length;
		            while ( len-- ) args[ len ] = arguments[ len ];

		            args = unpack$i(args, 'hsv');
		            if (type$f(args) === 'array' && args.length === 3) {
		                return 'hsv';
		            }
		        }
		    });

		    var labConstants = {
		        // Corresponds roughly to RGB brighter/darker
		        Kn: 18,

		        // D65 standard referent
		        Xn: 0.950470,
		        Yn: 1,
		        Zn: 1.088830,

		        t0: 0.137931034,  // 4 / 29
		        t1: 0.206896552,  // 6 / 29
		        t2: 0.12841855,   // 3 * t1 * t1
		        t3: 0.008856452,  // t1 * t1 * t1
		    };

		    var LAB_CONSTANTS$3 = labConstants;
		    var unpack$h = utils.unpack;
		    var pow$a = Math.pow;

		    var rgb2lab$2 = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        var ref = unpack$h(args, 'rgb');
		        var r = ref[0];
		        var g = ref[1];
		        var b = ref[2];
		        var ref$1 = rgb2xyz(r,g,b);
		        var x = ref$1[0];
		        var y = ref$1[1];
		        var z = ref$1[2];
		        var l = 116 * y - 16;
		        return [l < 0 ? 0 : l, 500 * (x - y), 200 * (y - z)];
		    };

		    var rgb_xyz = function (r) {
		        if ((r /= 255) <= 0.04045) { return r / 12.92; }
		        return pow$a((r + 0.055) / 1.055, 2.4);
		    };

		    var xyz_lab = function (t) {
		        if (t > LAB_CONSTANTS$3.t3) { return pow$a(t, 1 / 3); }
		        return t / LAB_CONSTANTS$3.t2 + LAB_CONSTANTS$3.t0;
		    };

		    var rgb2xyz = function (r,g,b) {
		        r = rgb_xyz(r);
		        g = rgb_xyz(g);
		        b = rgb_xyz(b);
		        var x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / LAB_CONSTANTS$3.Xn);
		        var y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / LAB_CONSTANTS$3.Yn);
		        var z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / LAB_CONSTANTS$3.Zn);
		        return [x,y,z];
		    };

		    var rgb2lab_1 = rgb2lab$2;

		    var LAB_CONSTANTS$2 = labConstants;
		    var unpack$g = utils.unpack;
		    var pow$9 = Math.pow;

		    /*
		     * L* [0..100]
		     * a [-100..100]
		     * b [-100..100]
		     */
		    var lab2rgb$1 = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        args = unpack$g(args, 'lab');
		        var l = args[0];
		        var a = args[1];
		        var b = args[2];
		        var x,y,z, r,g,b_;

		        y = (l + 16) / 116;
		        x = isNaN(a) ? y : y + a / 500;
		        z = isNaN(b) ? y : y - b / 200;

		        y = LAB_CONSTANTS$2.Yn * lab_xyz(y);
		        x = LAB_CONSTANTS$2.Xn * lab_xyz(x);
		        z = LAB_CONSTANTS$2.Zn * lab_xyz(z);

		        r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);  // D65 -> sRGB
		        g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);
		        b_ = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);

		        return [r,g,b_,args.length > 3 ? args[3] : 1];
		    };

		    var xyz_rgb = function (r) {
		        return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow$9(r, 1 / 2.4) - 0.055)
		    };

		    var lab_xyz = function (t) {
		        return t > LAB_CONSTANTS$2.t1 ? t * t * t : LAB_CONSTANTS$2.t2 * (t - LAB_CONSTANTS$2.t0)
		    };

		    var lab2rgb_1 = lab2rgb$1;

		    var unpack$f = utils.unpack;
		    var type$e = utils.type;
		    var chroma$b = chroma_1;
		    var Color$u = Color_1;
		    var input$7 = input$h;

		    var rgb2lab$1 = rgb2lab_1;

		    Color$u.prototype.lab = function() {
		        return rgb2lab$1(this._rgb);
		    };

		    chroma$b.lab = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        return new (Function.prototype.bind.apply( Color$u, [ null ].concat( args, ['lab']) ));
		    };

		    input$7.format.lab = lab2rgb_1;

		    input$7.autodetect.push({
		        p: 2,
		        test: function () {
		            var args = [], len = arguments.length;
		            while ( len-- ) args[ len ] = arguments[ len ];

		            args = unpack$f(args, 'lab');
		            if (type$e(args) === 'array' && args.length === 3) {
		                return 'lab';
		            }
		        }
		    });

		    var unpack$e = utils.unpack;
		    var RAD2DEG = utils.RAD2DEG;
		    var sqrt$3 = Math.sqrt;
		    var atan2$2 = Math.atan2;
		    var round$2 = Math.round;

		    var lab2lch$2 = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        var ref = unpack$e(args, 'lab');
		        var l = ref[0];
		        var a = ref[1];
		        var b = ref[2];
		        var c = sqrt$3(a * a + b * b);
		        var h = (atan2$2(b, a) * RAD2DEG + 360) % 360;
		        if (round$2(c*10000) === 0) { h = Number.NaN; }
		        return [l, c, h];
		    };

		    var lab2lch_1 = lab2lch$2;

		    var unpack$d = utils.unpack;
		    var rgb2lab = rgb2lab_1;
		    var lab2lch$1 = lab2lch_1;

		    var rgb2lch$1 = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        var ref = unpack$d(args, 'rgb');
		        var r = ref[0];
		        var g = ref[1];
		        var b = ref[2];
		        var ref$1 = rgb2lab(r,g,b);
		        var l = ref$1[0];
		        var a = ref$1[1];
		        var b_ = ref$1[2];
		        return lab2lch$1(l,a,b_);
		    };

		    var rgb2lch_1 = rgb2lch$1;

		    var unpack$c = utils.unpack;
		    var DEG2RAD = utils.DEG2RAD;
		    var sin$3 = Math.sin;
		    var cos$3 = Math.cos;

		    var lch2lab$2 = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        /*
		        Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.
		        These formulas were invented by David Dalrymple to obtain maximum contrast without going
		        out of gamut if the parameters are in the range 0-1.

		        A saturation multiplier was added by Gregor Aisch
		        */
		        var ref = unpack$c(args, 'lch');
		        var l = ref[0];
		        var c = ref[1];
		        var h = ref[2];
		        if (isNaN(h)) { h = 0; }
		        h = h * DEG2RAD;
		        return [l, cos$3(h) * c, sin$3(h) * c]
		    };

		    var lch2lab_1 = lch2lab$2;

		    var unpack$b = utils.unpack;
		    var lch2lab$1 = lch2lab_1;
		    var lab2rgb = lab2rgb_1;

		    var lch2rgb$1 = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        args = unpack$b(args, 'lch');
		        var l = args[0];
		        var c = args[1];
		        var h = args[2];
		        var ref = lch2lab$1 (l,c,h);
		        var L = ref[0];
		        var a = ref[1];
		        var b_ = ref[2];
		        var ref$1 = lab2rgb (L,a,b_);
		        var r = ref$1[0];
		        var g = ref$1[1];
		        var b = ref$1[2];
		        return [r, g, b, args.length > 3 ? args[3] : 1];
		    };

		    var lch2rgb_1 = lch2rgb$1;

		    var unpack$a = utils.unpack;
		    var lch2rgb = lch2rgb_1;

		    var hcl2rgb = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        var hcl = unpack$a(args, 'hcl').reverse();
		        return lch2rgb.apply(void 0, hcl);
		    };

		    var hcl2rgb_1 = hcl2rgb;

		    var unpack$9 = utils.unpack;
		    var type$d = utils.type;
		    var chroma$a = chroma_1;
		    var Color$t = Color_1;
		    var input$6 = input$h;

		    var rgb2lch = rgb2lch_1;

		    Color$t.prototype.lch = function() { return rgb2lch(this._rgb); };
		    Color$t.prototype.hcl = function() { return rgb2lch(this._rgb).reverse(); };

		    chroma$a.lch = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        return new (Function.prototype.bind.apply( Color$t, [ null ].concat( args, ['lch']) ));
		    };
		    chroma$a.hcl = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        return new (Function.prototype.bind.apply( Color$t, [ null ].concat( args, ['hcl']) ));
		    };

		    input$6.format.lch = lch2rgb_1;
		    input$6.format.hcl = hcl2rgb_1;

		    ['lch','hcl'].forEach(function (m) { return input$6.autodetect.push({
		        p: 2,
		        test: function () {
		            var args = [], len = arguments.length;
		            while ( len-- ) args[ len ] = arguments[ len ];

		            args = unpack$9(args, m);
		            if (type$d(args) === 'array' && args.length === 3) {
		                return m;
		            }
		        }
		    }); });

		    /**
		    	X11 color names

		    	http://www.w3.org/TR/css3-color/#svg-color
		    */

		    var w3cx11$1 = {
		        aliceblue: '#f0f8ff',
		        antiquewhite: '#faebd7',
		        aqua: '#00ffff',
		        aquamarine: '#7fffd4',
		        azure: '#f0ffff',
		        beige: '#f5f5dc',
		        bisque: '#ffe4c4',
		        black: '#000000',
		        blanchedalmond: '#ffebcd',
		        blue: '#0000ff',
		        blueviolet: '#8a2be2',
		        brown: '#a52a2a',
		        burlywood: '#deb887',
		        cadetblue: '#5f9ea0',
		        chartreuse: '#7fff00',
		        chocolate: '#d2691e',
		        coral: '#ff7f50',
		        cornflower: '#6495ed',
		        cornflowerblue: '#6495ed',
		        cornsilk: '#fff8dc',
		        crimson: '#dc143c',
		        cyan: '#00ffff',
		        darkblue: '#00008b',
		        darkcyan: '#008b8b',
		        darkgoldenrod: '#b8860b',
		        darkgray: '#a9a9a9',
		        darkgreen: '#006400',
		        darkgrey: '#a9a9a9',
		        darkkhaki: '#bdb76b',
		        darkmagenta: '#8b008b',
		        darkolivegreen: '#556b2f',
		        darkorange: '#ff8c00',
		        darkorchid: '#9932cc',
		        darkred: '#8b0000',
		        darksalmon: '#e9967a',
		        darkseagreen: '#8fbc8f',
		        darkslateblue: '#483d8b',
		        darkslategray: '#2f4f4f',
		        darkslategrey: '#2f4f4f',
		        darkturquoise: '#00ced1',
		        darkviolet: '#9400d3',
		        deeppink: '#ff1493',
		        deepskyblue: '#00bfff',
		        dimgray: '#696969',
		        dimgrey: '#696969',
		        dodgerblue: '#1e90ff',
		        firebrick: '#b22222',
		        floralwhite: '#fffaf0',
		        forestgreen: '#228b22',
		        fuchsia: '#ff00ff',
		        gainsboro: '#dcdcdc',
		        ghostwhite: '#f8f8ff',
		        gold: '#ffd700',
		        goldenrod: '#daa520',
		        gray: '#808080',
		        green: '#008000',
		        greenyellow: '#adff2f',
		        grey: '#808080',
		        honeydew: '#f0fff0',
		        hotpink: '#ff69b4',
		        indianred: '#cd5c5c',
		        indigo: '#4b0082',
		        ivory: '#fffff0',
		        khaki: '#f0e68c',
		        laserlemon: '#ffff54',
		        lavender: '#e6e6fa',
		        lavenderblush: '#fff0f5',
		        lawngreen: '#7cfc00',
		        lemonchiffon: '#fffacd',
		        lightblue: '#add8e6',
		        lightcoral: '#f08080',
		        lightcyan: '#e0ffff',
		        lightgoldenrod: '#fafad2',
		        lightgoldenrodyellow: '#fafad2',
		        lightgray: '#d3d3d3',
		        lightgreen: '#90ee90',
		        lightgrey: '#d3d3d3',
		        lightpink: '#ffb6c1',
		        lightsalmon: '#ffa07a',
		        lightseagreen: '#20b2aa',
		        lightskyblue: '#87cefa',
		        lightslategray: '#778899',
		        lightslategrey: '#778899',
		        lightsteelblue: '#b0c4de',
		        lightyellow: '#ffffe0',
		        lime: '#00ff00',
		        limegreen: '#32cd32',
		        linen: '#faf0e6',
		        magenta: '#ff00ff',
		        maroon: '#800000',
		        maroon2: '#7f0000',
		        maroon3: '#b03060',
		        mediumaquamarine: '#66cdaa',
		        mediumblue: '#0000cd',
		        mediumorchid: '#ba55d3',
		        mediumpurple: '#9370db',
		        mediumseagreen: '#3cb371',
		        mediumslateblue: '#7b68ee',
		        mediumspringgreen: '#00fa9a',
		        mediumturquoise: '#48d1cc',
		        mediumvioletred: '#c71585',
		        midnightblue: '#191970',
		        mintcream: '#f5fffa',
		        mistyrose: '#ffe4e1',
		        moccasin: '#ffe4b5',
		        navajowhite: '#ffdead',
		        navy: '#000080',
		        oldlace: '#fdf5e6',
		        olive: '#808000',
		        olivedrab: '#6b8e23',
		        orange: '#ffa500',
		        orangered: '#ff4500',
		        orchid: '#da70d6',
		        palegoldenrod: '#eee8aa',
		        palegreen: '#98fb98',
		        paleturquoise: '#afeeee',
		        palevioletred: '#db7093',
		        papayawhip: '#ffefd5',
		        peachpuff: '#ffdab9',
		        peru: '#cd853f',
		        pink: '#ffc0cb',
		        plum: '#dda0dd',
		        powderblue: '#b0e0e6',
		        purple: '#800080',
		        purple2: '#7f007f',
		        purple3: '#a020f0',
		        rebeccapurple: '#663399',
		        red: '#ff0000',
		        rosybrown: '#bc8f8f',
		        royalblue: '#4169e1',
		        saddlebrown: '#8b4513',
		        salmon: '#fa8072',
		        sandybrown: '#f4a460',
		        seagreen: '#2e8b57',
		        seashell: '#fff5ee',
		        sienna: '#a0522d',
		        silver: '#c0c0c0',
		        skyblue: '#87ceeb',
		        slateblue: '#6a5acd',
		        slategray: '#708090',
		        slategrey: '#708090',
		        snow: '#fffafa',
		        springgreen: '#00ff7f',
		        steelblue: '#4682b4',
		        tan: '#d2b48c',
		        teal: '#008080',
		        thistle: '#d8bfd8',
		        tomato: '#ff6347',
		        turquoise: '#40e0d0',
		        violet: '#ee82ee',
		        wheat: '#f5deb3',
		        white: '#ffffff',
		        whitesmoke: '#f5f5f5',
		        yellow: '#ffff00',
		        yellowgreen: '#9acd32'
		    };

		    var w3cx11_1 = w3cx11$1;

		    var Color$s = Color_1;
		    var input$5 = input$h;
		    var type$c = utils.type;

		    var w3cx11 = w3cx11_1;
		    var hex2rgb = hex2rgb_1;
		    var rgb2hex = rgb2hex_1;

		    Color$s.prototype.name = function() {
		        var hex = rgb2hex(this._rgb, 'rgb');
		        for (var i = 0, list = Object.keys(w3cx11); i < list.length; i += 1) {
		            var n = list[i];

		            if (w3cx11[n] === hex) { return n.toLowerCase(); }
		        }
		        return hex;
		    };

		    input$5.format.named = function (name) {
		        name = name.toLowerCase();
		        if (w3cx11[name]) { return hex2rgb(w3cx11[name]); }
		        throw new Error('unknown color name: '+name);
		    };

		    input$5.autodetect.push({
		        p: 5,
		        test: function (h) {
		            var rest = [], len = arguments.length - 1;
		            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];

		            if (!rest.length && type$c(h) === 'string' && w3cx11[h.toLowerCase()]) {
		                return 'named';
		            }
		        }
		    });

		    var unpack$8 = utils.unpack;

		    var rgb2num$1 = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        var ref = unpack$8(args, 'rgb');
		        var r = ref[0];
		        var g = ref[1];
		        var b = ref[2];
		        return (r << 16) + (g << 8) + b;
		    };

		    var rgb2num_1 = rgb2num$1;

		    var type$b = utils.type;

		    var num2rgb = function (num) {
		        if (type$b(num) == "number" && num >= 0 && num <= 0xFFFFFF) {
		            var r = num >> 16;
		            var g = (num >> 8) & 0xFF;
		            var b = num & 0xFF;
		            return [r,g,b,1];
		        }
		        throw new Error("unknown num color: "+num);
		    };

		    var num2rgb_1 = num2rgb;

		    var chroma$9 = chroma_1;
		    var Color$r = Color_1;
		    var input$4 = input$h;
		    var type$a = utils.type;

		    var rgb2num = rgb2num_1;

		    Color$r.prototype.num = function() {
		        return rgb2num(this._rgb);
		    };

		    chroma$9.num = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        return new (Function.prototype.bind.apply( Color$r, [ null ].concat( args, ['num']) ));
		    };

		    input$4.format.num = num2rgb_1;

		    input$4.autodetect.push({
		        p: 5,
		        test: function () {
		            var args = [], len = arguments.length;
		            while ( len-- ) args[ len ] = arguments[ len ];

		            if (args.length === 1 && type$a(args[0]) === 'number' && args[0] >= 0 && args[0] <= 0xFFFFFF) {
		                return 'num';
		            }
		        }
		    });

		    var chroma$8 = chroma_1;
		    var Color$q = Color_1;
		    var input$3 = input$h;
		    var unpack$7 = utils.unpack;
		    var type$9 = utils.type;
		    var round$1 = Math.round;

		    Color$q.prototype.rgb = function(rnd) {
		        if ( rnd === void 0 ) rnd=true;

		        if (rnd === false) { return this._rgb.slice(0,3); }
		        return this._rgb.slice(0,3).map(round$1);
		    };

		    Color$q.prototype.rgba = function(rnd) {
		        if ( rnd === void 0 ) rnd=true;

		        return this._rgb.slice(0,4).map(function (v,i) {
		            return i<3 ? (rnd === false ? v : round$1(v)) : v;
		        });
		    };

		    chroma$8.rgb = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        return new (Function.prototype.bind.apply( Color$q, [ null ].concat( args, ['rgb']) ));
		    };

		    input$3.format.rgb = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        var rgba = unpack$7(args, 'rgba');
		        if (rgba[3] === undefined) { rgba[3] = 1; }
		        return rgba;
		    };

		    input$3.autodetect.push({
		        p: 3,
		        test: function () {
		            var args = [], len = arguments.length;
		            while ( len-- ) args[ len ] = arguments[ len ];

		            args = unpack$7(args, 'rgba');
		            if (type$9(args) === 'array' && (args.length === 3 ||
		                args.length === 4 && type$9(args[3]) == 'number' && args[3] >= 0 && args[3] <= 1)) {
		                return 'rgb';
		            }
		        }
		    });

		    /*
		     * Based on implementation by Neil Bartlett
		     * https://github.com/neilbartlett/color-temperature
		     */

		    var log$1 = Math.log;

		    var temperature2rgb$1 = function (kelvin) {
		        var temp = kelvin / 100;
		        var r,g,b;
		        if (temp < 66) {
		            r = 255;
		            g = temp < 6 ? 0 : -155.25485562709179 - 0.44596950469579133 * (g = temp-2) + 104.49216199393888 * log$1(g);
		            b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp-10) + 115.67994401066147 * log$1(b);
		        } else {
		            r = 351.97690566805693 + 0.114206453784165 * (r = temp-55) - 40.25366309332127 * log$1(r);
		            g = 325.4494125711974 + 0.07943456536662342 * (g = temp-50) - 28.0852963507957 * log$1(g);
		            b = 255;
		        }
		        return [r,g,b,1];
		    };

		    var temperature2rgb_1 = temperature2rgb$1;

		    /*
		     * Based on implementation by Neil Bartlett
		     * https://github.com/neilbartlett/color-temperature
		     **/

		    var temperature2rgb = temperature2rgb_1;
		    var unpack$6 = utils.unpack;
		    var round = Math.round;

		    var rgb2temperature$1 = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        var rgb = unpack$6(args, 'rgb');
		        var r = rgb[0], b = rgb[2];
		        var minTemp = 1000;
		        var maxTemp = 40000;
		        var eps = 0.4;
		        var temp;
		        while (maxTemp - minTemp > eps) {
		            temp = (maxTemp + minTemp) * 0.5;
		            var rgb$1 = temperature2rgb(temp);
		            if ((rgb$1[2] / rgb$1[0]) >= (b / r)) {
		                maxTemp = temp;
		            } else {
		                minTemp = temp;
		            }
		        }
		        return round(temp);
		    };

		    var rgb2temperature_1 = rgb2temperature$1;

		    var chroma$7 = chroma_1;
		    var Color$p = Color_1;
		    var input$2 = input$h;

		    var rgb2temperature = rgb2temperature_1;

		    Color$p.prototype.temp =
		    Color$p.prototype.kelvin =
		    Color$p.prototype.temperature = function() {
		        return rgb2temperature(this._rgb);
		    };

		    chroma$7.temp =
		    chroma$7.kelvin =
		    chroma$7.temperature = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        return new (Function.prototype.bind.apply( Color$p, [ null ].concat( args, ['temp']) ));
		    };

		    input$2.format.temp =
		    input$2.format.kelvin =
		    input$2.format.temperature = temperature2rgb_1;

		    var unpack$5 = utils.unpack;
		    var cbrt = Math.cbrt;
		    var pow$8 = Math.pow;
		    var sign$1 = Math.sign;

		    var rgb2oklab$2 = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        // OKLab color space implementation taken from
		        // https://bottosson.github.io/posts/oklab/
		        var ref = unpack$5(args, 'rgb');
		        var r = ref[0];
		        var g = ref[1];
		        var b = ref[2];
		        var ref$1 = [rgb2lrgb(r / 255), rgb2lrgb(g / 255), rgb2lrgb(b / 255)];
		        var lr = ref$1[0];
		        var lg = ref$1[1];
		        var lb = ref$1[2];
		        var l = cbrt(0.4122214708 * lr + 0.5363325363 * lg + 0.0514459929 * lb);
		        var m = cbrt(0.2119034982 * lr + 0.6806995451 * lg + 0.1073969566 * lb);
		        var s = cbrt(0.0883024619 * lr + 0.2817188376 * lg + 0.6299787005 * lb);

		        return [
		            0.2104542553 * l + 0.793617785 * m - 0.0040720468 * s,
		            1.9779984951 * l - 2.428592205 * m + 0.4505937099 * s,
		            0.0259040371 * l + 0.7827717662 * m - 0.808675766 * s
		        ];
		    };

		    var rgb2oklab_1 = rgb2oklab$2;

		    function rgb2lrgb(c) {
		        var abs = Math.abs(c);
		        if (abs < 0.04045) {
		            return c / 12.92;
		        }
		        return (sign$1(c) || 1) * pow$8((abs + 0.055) / 1.055, 2.4);
		    }

		    var unpack$4 = utils.unpack;
		    var pow$7 = Math.pow;
		    var sign = Math.sign;

		    /*
		     * L* [0..100]
		     * a [-100..100]
		     * b [-100..100]
		     */
		    var oklab2rgb$1 = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        args = unpack$4(args, 'lab');
		        var L = args[0];
		        var a = args[1];
		        var b = args[2];

		        var l = pow$7(L + 0.3963377774 * a + 0.2158037573 * b, 3);
		        var m = pow$7(L - 0.1055613458 * a - 0.0638541728 * b, 3);
		        var s = pow$7(L - 0.0894841775 * a - 1.291485548 * b, 3);

		        return [
		            255 * lrgb2rgb(+4.0767416621 * l - 3.3077115913 * m + 0.2309699292 * s),
		            255 * lrgb2rgb(-1.2684380046 * l + 2.6097574011 * m - 0.3413193965 * s),
		            255 * lrgb2rgb(-0.0041960863 * l - 0.7034186147 * m + 1.707614701 * s),
		            args.length > 3 ? args[3] : 1
		        ];
		    };

		    var oklab2rgb_1 = oklab2rgb$1;

		    function lrgb2rgb(c) {
		        var abs = Math.abs(c);
		        if (abs > 0.0031308) {
		            return (sign(c) || 1) * (1.055 * pow$7(abs, 1 / 2.4) - 0.055);
		        }
		        return c * 12.92;
		    }

		    var unpack$3 = utils.unpack;
		    var type$8 = utils.type;
		    var chroma$6 = chroma_1;
		    var Color$o = Color_1;
		    var input$1 = input$h;

		    var rgb2oklab$1 = rgb2oklab_1;

		    Color$o.prototype.oklab = function () {
		        return rgb2oklab$1(this._rgb);
		    };

		    chroma$6.oklab = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        return new (Function.prototype.bind.apply( Color$o, [ null ].concat( args, ['oklab']) ));
		    };

		    input$1.format.oklab = oklab2rgb_1;

		    input$1.autodetect.push({
		        p: 3,
		        test: function () {
		            var args = [], len = arguments.length;
		            while ( len-- ) args[ len ] = arguments[ len ];

		            args = unpack$3(args, 'oklab');
		            if (type$8(args) === 'array' && args.length === 3) {
		                return 'oklab';
		            }
		        }
		    });

		    var unpack$2 = utils.unpack;
		    var rgb2oklab = rgb2oklab_1;
		    var lab2lch = lab2lch_1;

		    var rgb2oklch$1 = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        var ref = unpack$2(args, 'rgb');
		        var r = ref[0];
		        var g = ref[1];
		        var b = ref[2];
		        var ref$1 = rgb2oklab(r, g, b);
		        var l = ref$1[0];
		        var a = ref$1[1];
		        var b_ = ref$1[2];
		        return lab2lch(l, a, b_);
		    };

		    var rgb2oklch_1 = rgb2oklch$1;

		    var unpack$1 = utils.unpack;
		    var lch2lab = lch2lab_1;
		    var oklab2rgb = oklab2rgb_1;

		    var oklch2rgb = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        args = unpack$1(args, 'lch');
		        var l = args[0];
		        var c = args[1];
		        var h = args[2];
		        var ref = lch2lab(l, c, h);
		        var L = ref[0];
		        var a = ref[1];
		        var b_ = ref[2];
		        var ref$1 = oklab2rgb(L, a, b_);
		        var r = ref$1[0];
		        var g = ref$1[1];
		        var b = ref$1[2];
		        return [r, g, b, args.length > 3 ? args[3] : 1];
		    };

		    var oklch2rgb_1 = oklch2rgb;

		    var unpack = utils.unpack;
		    var type$7 = utils.type;
		    var chroma$5 = chroma_1;
		    var Color$n = Color_1;
		    var input = input$h;

		    var rgb2oklch = rgb2oklch_1;

		    Color$n.prototype.oklch = function () {
		        return rgb2oklch(this._rgb);
		    };

		    chroma$5.oklch = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        return new (Function.prototype.bind.apply( Color$n, [ null ].concat( args, ['oklch']) ));
		    };

		    input.format.oklch = oklch2rgb_1;

		    input.autodetect.push({
		        p: 3,
		        test: function () {
		            var args = [], len = arguments.length;
		            while ( len-- ) args[ len ] = arguments[ len ];

		            args = unpack(args, 'oklch');
		            if (type$7(args) === 'array' && args.length === 3) {
		                return 'oklch';
		            }
		        }
		    });

		    var Color$m = Color_1;
		    var type$6 = utils.type;

		    Color$m.prototype.alpha = function(a, mutate) {
		        if ( mutate === void 0 ) mutate=false;

		        if (a !== undefined && type$6(a) === 'number') {
		            if (mutate) {
		                this._rgb[3] = a;
		                return this;
		            }
		            return new Color$m([this._rgb[0], this._rgb[1], this._rgb[2], a], 'rgb');
		        }
		        return this._rgb[3];
		    };

		    var Color$l = Color_1;

		    Color$l.prototype.clipped = function() {
		        return this._rgb._clipped || false;
		    };

		    var Color$k = Color_1;
		    var LAB_CONSTANTS$1 = labConstants;

		    Color$k.prototype.darken = function(amount) {
		    	if ( amount === void 0 ) amount=1;

		    	var me = this;
		    	var lab = me.lab();
		    	lab[0] -= LAB_CONSTANTS$1.Kn * amount;
		    	return new Color$k(lab, 'lab').alpha(me.alpha(), true);
		    };

		    Color$k.prototype.brighten = function(amount) {
		    	if ( amount === void 0 ) amount=1;

		    	return this.darken(-amount);
		    };

		    Color$k.prototype.darker = Color$k.prototype.darken;
		    Color$k.prototype.brighter = Color$k.prototype.brighten;

		    var Color$j = Color_1;

		    Color$j.prototype.get = function (mc) {
		        var ref = mc.split('.');
		        var mode = ref[0];
		        var channel = ref[1];
		        var src = this[mode]();
		        if (channel) {
		            var i = mode.indexOf(channel) - (mode.substr(0, 2) === 'ok' ? 2 : 0);
		            if (i > -1) { return src[i]; }
		            throw new Error(("unknown channel " + channel + " in mode " + mode));
		        } else {
		            return src;
		        }
		    };

		    var Color$i = Color_1;
		    var type$5 = utils.type;
		    var pow$6 = Math.pow;

		    var EPS = 1e-7;
		    var MAX_ITER = 20;

		    Color$i.prototype.luminance = function(lum) {
		        if (lum !== undefined && type$5(lum) === 'number') {
		            if (lum === 0) {
		                // return pure black
		                return new Color$i([0,0,0,this._rgb[3]], 'rgb');
		            }
		            if (lum === 1) {
		                // return pure white
		                return new Color$i([255,255,255,this._rgb[3]], 'rgb');
		            }
		            // compute new color using...
		            var cur_lum = this.luminance();
		            var mode = 'rgb';
		            var max_iter = MAX_ITER;

		            var test = function (low, high) {
		                var mid = low.interpolate(high, 0.5, mode);
		                var lm = mid.luminance();
		                if (Math.abs(lum - lm) < EPS || !max_iter--) {
		                    // close enough
		                    return mid;
		                }
		                return lm > lum ? test(low, mid) : test(mid, high);
		            };

		            var rgb = (cur_lum > lum ? test(new Color$i([0,0,0]), this) : test(this, new Color$i([255,255,255]))).rgb();
		            return new Color$i(rgb.concat( [this._rgb[3]]));
		        }
		        return rgb2luminance.apply(void 0, (this._rgb).slice(0,3));
		    };


		    var rgb2luminance = function (r,g,b) {
		        // relative luminance
		        // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
		        r = luminance_x(r);
		        g = luminance_x(g);
		        b = luminance_x(b);
		        return 0.2126 * r + 0.7152 * g + 0.0722 * b;
		    };

		    var luminance_x = function (x) {
		        x /= 255;
		        return x <= 0.03928 ? x/12.92 : pow$6((x+0.055)/1.055, 2.4);
		    };

		    var interpolator$1 = {};

		    var Color$h = Color_1;
		    var type$4 = utils.type;
		    var interpolator = interpolator$1;

		    var mix$1 = function (col1, col2, f) {
		        if ( f === void 0 ) f=0.5;
		        var rest = [], len = arguments.length - 3;
		        while ( len-- > 0 ) rest[ len ] = arguments[ len + 3 ];

		        var mode = rest[0] || 'lrgb';
		        if (!interpolator[mode] && !rest.length) {
		            // fall back to the first supported mode
		            mode = Object.keys(interpolator)[0];
		        }
		        if (!interpolator[mode]) {
		            throw new Error(("interpolation mode " + mode + " is not defined"));
		        }
		        if (type$4(col1) !== 'object') { col1 = new Color$h(col1); }
		        if (type$4(col2) !== 'object') { col2 = new Color$h(col2); }
		        return interpolator[mode](col1, col2, f)
		            .alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));
		    };

		    var Color$g = Color_1;
		    var mix = mix$1;

		    Color$g.prototype.mix =
		    Color$g.prototype.interpolate = function(col2, f) {
		    	if ( f === void 0 ) f=0.5;
		    	var rest = [], len = arguments.length - 2;
		    	while ( len-- > 0 ) rest[ len ] = arguments[ len + 2 ];

		    	return mix.apply(void 0, [ this, col2, f ].concat( rest ));
		    };

		    var Color$f = Color_1;

		    Color$f.prototype.premultiply = function(mutate) {
		    	if ( mutate === void 0 ) mutate=false;

		    	var rgb = this._rgb;
		    	var a = rgb[3];
		    	if (mutate) {
		    		this._rgb = [rgb[0]*a, rgb[1]*a, rgb[2]*a, a];
		    		return this;
		    	} else {
		    		return new Color$f([rgb[0]*a, rgb[1]*a, rgb[2]*a, a], 'rgb');
		    	}
		    };

		    var Color$e = Color_1;
		    var LAB_CONSTANTS = labConstants;

		    Color$e.prototype.saturate = function(amount) {
		    	if ( amount === void 0 ) amount=1;

		    	var me = this;
		    	var lch = me.lch();
		    	lch[1] += LAB_CONSTANTS.Kn * amount;
		    	if (lch[1] < 0) { lch[1] = 0; }
		    	return new Color$e(lch, 'lch').alpha(me.alpha(), true);
		    };

		    Color$e.prototype.desaturate = function(amount) {
		    	if ( amount === void 0 ) amount=1;

		    	return this.saturate(-amount);
		    };

		    var Color$d = Color_1;
		    var type$3 = utils.type;

		    Color$d.prototype.set = function (mc, value, mutate) {
		        if ( mutate === void 0 ) mutate = false;

		        var ref = mc.split('.');
		        var mode = ref[0];
		        var channel = ref[1];
		        var src = this[mode]();
		        if (channel) {
		            var i = mode.indexOf(channel) - (mode.substr(0, 2) === 'ok' ? 2 : 0);
		            if (i > -1) {
		                if (type$3(value) == 'string') {
		                    switch (value.charAt(0)) {
		                        case '+':
		                            src[i] += +value;
		                            break;
		                        case '-':
		                            src[i] += +value;
		                            break;
		                        case '*':
		                            src[i] *= +value.substr(1);
		                            break;
		                        case '/':
		                            src[i] /= +value.substr(1);
		                            break;
		                        default:
		                            src[i] = +value;
		                    }
		                } else if (type$3(value) === 'number') {
		                    src[i] = value;
		                } else {
		                    throw new Error("unsupported value for Color.set");
		                }
		                var out = new Color$d(src, mode);
		                if (mutate) {
		                    this._rgb = out._rgb;
		                    return this;
		                }
		                return out;
		            }
		            throw new Error(("unknown channel " + channel + " in mode " + mode));
		        } else {
		            return src;
		        }
		    };

		    var Color$c = Color_1;

		    var rgb = function (col1, col2, f) {
		        var xyz0 = col1._rgb;
		        var xyz1 = col2._rgb;
		        return new Color$c(
		            xyz0[0] + f * (xyz1[0]-xyz0[0]),
		            xyz0[1] + f * (xyz1[1]-xyz0[1]),
		            xyz0[2] + f * (xyz1[2]-xyz0[2]),
		            'rgb'
		        )
		    };

		    // register interpolator
		    interpolator$1.rgb = rgb;

		    var Color$b = Color_1;
		    var sqrt$2 = Math.sqrt;
		    var pow$5 = Math.pow;

		    var lrgb = function (col1, col2, f) {
		        var ref = col1._rgb;
		        var x1 = ref[0];
		        var y1 = ref[1];
		        var z1 = ref[2];
		        var ref$1 = col2._rgb;
		        var x2 = ref$1[0];
		        var y2 = ref$1[1];
		        var z2 = ref$1[2];
		        return new Color$b(
		            sqrt$2(pow$5(x1,2) * (1-f) + pow$5(x2,2) * f),
		            sqrt$2(pow$5(y1,2) * (1-f) + pow$5(y2,2) * f),
		            sqrt$2(pow$5(z1,2) * (1-f) + pow$5(z2,2) * f),
		            'rgb'
		        )
		    };

		    // register interpolator
		    interpolator$1.lrgb = lrgb;

		    var Color$a = Color_1;

		    var lab = function (col1, col2, f) {
		        var xyz0 = col1.lab();
		        var xyz1 = col2.lab();
		        return new Color$a(
		            xyz0[0] + f * (xyz1[0]-xyz0[0]),
		            xyz0[1] + f * (xyz1[1]-xyz0[1]),
		            xyz0[2] + f * (xyz1[2]-xyz0[2]),
		            'lab'
		        )
		    };

		    // register interpolator
		    interpolator$1.lab = lab;

		    var Color$9 = Color_1;

		    var _hsx = function (col1, col2, f, m) {
		        var assign, assign$1;

		        var xyz0, xyz1;
		        if (m === 'hsl') {
		            xyz0 = col1.hsl();
		            xyz1 = col2.hsl();
		        } else if (m === 'hsv') {
		            xyz0 = col1.hsv();
		            xyz1 = col2.hsv();
		        } else if (m === 'hcg') {
		            xyz0 = col1.hcg();
		            xyz1 = col2.hcg();
		        } else if (m === 'hsi') {
		            xyz0 = col1.hsi();
		            xyz1 = col2.hsi();
		        } else if (m === 'lch' || m === 'hcl') {
		            m = 'hcl';
		            xyz0 = col1.hcl();
		            xyz1 = col2.hcl();
		        } else if (m === 'oklch') {
		            xyz0 = col1.oklch().reverse();
		            xyz1 = col2.oklch().reverse();
		        }

		        var hue0, hue1, sat0, sat1, lbv0, lbv1;
		        if (m.substr(0, 1) === 'h' || m === 'oklch') {
		            (assign = xyz0, hue0 = assign[0], sat0 = assign[1], lbv0 = assign[2]);
		            (assign$1 = xyz1, hue1 = assign$1[0], sat1 = assign$1[1], lbv1 = assign$1[2]);
		        }

		        var sat, hue, lbv, dh;

		        if (!isNaN(hue0) && !isNaN(hue1)) {
		            // both colors have hue
		            if (hue1 > hue0 && hue1 - hue0 > 180) {
		                dh = hue1 - (hue0 + 360);
		            } else if (hue1 < hue0 && hue0 - hue1 > 180) {
		                dh = hue1 + 360 - hue0;
		            } else {
		                dh = hue1 - hue0;
		            }
		            hue = hue0 + f * dh;
		        } else if (!isNaN(hue0)) {
		            hue = hue0;
		            if ((lbv1 == 1 || lbv1 == 0) && m != 'hsv') { sat = sat0; }
		        } else if (!isNaN(hue1)) {
		            hue = hue1;
		            if ((lbv0 == 1 || lbv0 == 0) && m != 'hsv') { sat = sat1; }
		        } else {
		            hue = Number.NaN;
		        }

		        if (sat === undefined) { sat = sat0 + f * (sat1 - sat0); }
		        lbv = lbv0 + f * (lbv1 - lbv0);
		        return m === 'oklch' ? new Color$9([lbv, sat, hue], m) : new Color$9([hue, sat, lbv], m);
		    };

		    var interpolate_hsx$5 = _hsx;

		    var lch = function (col1, col2, f) {
		    	return interpolate_hsx$5(col1, col2, f, 'lch');
		    };

		    // register interpolator
		    interpolator$1.lch = lch;
		    interpolator$1.hcl = lch;

		    var Color$8 = Color_1;

		    var num = function (col1, col2, f) {
		        var c1 = col1.num();
		        var c2 = col2.num();
		        return new Color$8(c1 + f * (c2-c1), 'num')
		    };

		    // register interpolator
		    interpolator$1.num = num;

		    var interpolate_hsx$4 = _hsx;

		    var hcg = function (col1, col2, f) {
		    	return interpolate_hsx$4(col1, col2, f, 'hcg');
		    };

		    // register interpolator
		    interpolator$1.hcg = hcg;

		    var interpolate_hsx$3 = _hsx;

		    var hsi = function (col1, col2, f) {
		    	return interpolate_hsx$3(col1, col2, f, 'hsi');
		    };

		    // register interpolator
		    interpolator$1.hsi = hsi;

		    var interpolate_hsx$2 = _hsx;

		    var hsl = function (col1, col2, f) {
		    	return interpolate_hsx$2(col1, col2, f, 'hsl');
		    };

		    // register interpolator
		    interpolator$1.hsl = hsl;

		    var interpolate_hsx$1 = _hsx;

		    var hsv = function (col1, col2, f) {
		    	return interpolate_hsx$1(col1, col2, f, 'hsv');
		    };

		    // register interpolator
		    interpolator$1.hsv = hsv;

		    var Color$7 = Color_1;

		    var oklab = function (col1, col2, f) {
		        var xyz0 = col1.oklab();
		        var xyz1 = col2.oklab();
		        return new Color$7(
		            xyz0[0] + f * (xyz1[0] - xyz0[0]),
		            xyz0[1] + f * (xyz1[1] - xyz0[1]),
		            xyz0[2] + f * (xyz1[2] - xyz0[2]),
		            'oklab'
		        );
		    };

		    // register interpolator
		    interpolator$1.oklab = oklab;

		    var interpolate_hsx = _hsx;

		    var oklch = function (col1, col2, f) {
		        return interpolate_hsx(col1, col2, f, 'oklch');
		    };

		    // register interpolator
		    interpolator$1.oklch = oklch;

		    var Color$6 = Color_1;
		    var clip_rgb$1 = utils.clip_rgb;
		    var pow$4 = Math.pow;
		    var sqrt$1 = Math.sqrt;
		    var PI$1 = Math.PI;
		    var cos$2 = Math.cos;
		    var sin$2 = Math.sin;
		    var atan2$1 = Math.atan2;

		    var average = function (colors, mode, weights) {
		        if ( mode === void 0 ) mode='lrgb';
		        if ( weights === void 0 ) weights=null;

		        var l = colors.length;
		        if (!weights) { weights = Array.from(new Array(l)).map(function () { return 1; }); }
		        // normalize weights
		        var k = l / weights.reduce(function(a, b) { return a + b; });
		        weights.forEach(function (w,i) { weights[i] *= k; });
		        // convert colors to Color objects
		        colors = colors.map(function (c) { return new Color$6(c); });
		        if (mode === 'lrgb') {
		            return _average_lrgb(colors, weights)
		        }
		        var first = colors.shift();
		        var xyz = first.get(mode);
		        var cnt = [];
		        var dx = 0;
		        var dy = 0;
		        // initial color
		        for (var i=0; i<xyz.length; i++) {
		            xyz[i] = (xyz[i] || 0) * weights[0];
		            cnt.push(isNaN(xyz[i]) ? 0 : weights[0]);
		            if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {
		                var A = xyz[i] / 180 * PI$1;
		                dx += cos$2(A) * weights[0];
		                dy += sin$2(A) * weights[0];
		            }
		        }

		        var alpha = first.alpha() * weights[0];
		        colors.forEach(function (c,ci) {
		            var xyz2 = c.get(mode);
		            alpha += c.alpha() * weights[ci+1];
		            for (var i=0; i<xyz.length; i++) {
		                if (!isNaN(xyz2[i])) {
		                    cnt[i] += weights[ci+1];
		                    if (mode.charAt(i) === 'h') {
		                        var A = xyz2[i] / 180 * PI$1;
		                        dx += cos$2(A) * weights[ci+1];
		                        dy += sin$2(A) * weights[ci+1];
		                    } else {
		                        xyz[i] += xyz2[i] * weights[ci+1];
		                    }
		                }
		            }
		        });

		        for (var i$1=0; i$1<xyz.length; i$1++) {
		            if (mode.charAt(i$1) === 'h') {
		                var A$1 = atan2$1(dy / cnt[i$1], dx / cnt[i$1]) / PI$1 * 180;
		                while (A$1 < 0) { A$1 += 360; }
		                while (A$1 >= 360) { A$1 -= 360; }
		                xyz[i$1] = A$1;
		            } else {
		                xyz[i$1] = xyz[i$1]/cnt[i$1];
		            }
		        }
		        alpha /= l;
		        return (new Color$6(xyz, mode)).alpha(alpha > 0.99999 ? 1 : alpha, true);
		    };


		    var _average_lrgb = function (colors, weights) {
		        var l = colors.length;
		        var xyz = [0,0,0,0];
		        for (var i=0; i < colors.length; i++) {
		            var col = colors[i];
		            var f = weights[i] / l;
		            var rgb = col._rgb;
		            xyz[0] += pow$4(rgb[0],2) * f;
		            xyz[1] += pow$4(rgb[1],2) * f;
		            xyz[2] += pow$4(rgb[2],2) * f;
		            xyz[3] += rgb[3] * f;
		        }
		        xyz[0] = sqrt$1(xyz[0]);
		        xyz[1] = sqrt$1(xyz[1]);
		        xyz[2] = sqrt$1(xyz[2]);
		        if (xyz[3] > 0.9999999) { xyz[3] = 1; }
		        return new Color$6(clip_rgb$1(xyz));
		    };

		    // minimal multi-purpose interface

		    // @requires utils color analyze

		    var chroma$4 = chroma_1;
		    var type$2 = utils.type;

		    var pow$3 = Math.pow;

		    var scale$2 = function(colors) {

		        // constructor
		        var _mode = 'rgb';
		        var _nacol = chroma$4('#ccc');
		        var _spread = 0;
		        // const _fixed = false;
		        var _domain = [0, 1];
		        var _pos = [];
		        var _padding = [0,0];
		        var _classes = false;
		        var _colors = [];
		        var _out = false;
		        var _min = 0;
		        var _max = 1;
		        var _correctLightness = false;
		        var _colorCache = {};
		        var _useCache = true;
		        var _gamma = 1;

		        // private methods

		        var setColors = function(colors) {
		            colors = colors || ['#fff', '#000'];
		            if (colors && type$2(colors) === 'string' && chroma$4.brewer &&
		                chroma$4.brewer[colors.toLowerCase()]) {
		                colors = chroma$4.brewer[colors.toLowerCase()];
		            }
		            if (type$2(colors) === 'array') {
		                // handle single color
		                if (colors.length === 1) {
		                    colors = [colors[0], colors[0]];
		                }
		                // make a copy of the colors
		                colors = colors.slice(0);
		                // convert to chroma classes
		                for (var c=0; c<colors.length; c++) {
		                    colors[c] = chroma$4(colors[c]);
		                }
		                // auto-fill color position
		                _pos.length = 0;
		                for (var c$1=0; c$1<colors.length; c$1++) {
		                    _pos.push(c$1/(colors.length-1));
		                }
		            }
		            resetCache();
		            return _colors = colors;
		        };

		        var getClass = function(value) {
		            if (_classes != null) {
		                var n = _classes.length-1;
		                var i = 0;
		                while (i < n && value >= _classes[i]) {
		                    i++;
		                }
		                return i-1;
		            }
		            return 0;
		        };

		        var tMapLightness = function (t) { return t; };
		        var tMapDomain = function (t) { return t; };

		        // const classifyValue = function(value) {
		        //     let val = value;
		        //     if (_classes.length > 2) {
		        //         const n = _classes.length-1;
		        //         const i = getClass(value);
		        //         const minc = _classes[0] + ((_classes[1]-_classes[0]) * (0 + (_spread * 0.5)));  // center of 1st class
		        //         const maxc = _classes[n-1] + ((_classes[n]-_classes[n-1]) * (1 - (_spread * 0.5)));  // center of last class
		        //         val = _min + ((((_classes[i] + ((_classes[i+1] - _classes[i]) * 0.5)) - minc) / (maxc-minc)) * (_max - _min));
		        //     }
		        //     return val;
		        // };

		        var getColor = function(val, bypassMap) {
		            var col, t;
		            if (bypassMap == null) { bypassMap = false; }
		            if (isNaN(val) || (val === null)) { return _nacol; }
		            if (!bypassMap) {
		                if (_classes && (_classes.length > 2)) {
		                    // find the class
		                    var c = getClass(val);
		                    t = c / (_classes.length-2);
		                } else if (_max !== _min) {
		                    // just interpolate between min/max
		                    t = (val - _min) / (_max - _min);
		                } else {
		                    t = 1;
		                }
		            } else {
		                t = val;
		            }

		            // domain map
		            t = tMapDomain(t);

		            if (!bypassMap) {
		                t = tMapLightness(t);  // lightness correction
		            }

		            if (_gamma !== 1) { t = pow$3(t, _gamma); }

		            t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));

		            t = Math.min(1, Math.max(0, t));

		            var k = Math.floor(t * 10000);

		            if (_useCache && _colorCache[k]) {
		                col = _colorCache[k];
		            } else {
		                if (type$2(_colors) === 'array') {
		                    //for i in [0.._pos.length-1]
		                    for (var i=0; i<_pos.length; i++) {
		                        var p = _pos[i];
		                        if (t <= p) {
		                            col = _colors[i];
		                            break;
		                        }
		                        if ((t >= p) && (i === (_pos.length-1))) {
		                            col = _colors[i];
		                            break;
		                        }
		                        if (t > p && t < _pos[i+1]) {
		                            t = (t-p)/(_pos[i+1]-p);
		                            col = chroma$4.interpolate(_colors[i], _colors[i+1], t, _mode);
		                            break;
		                        }
		                    }
		                } else if (type$2(_colors) === 'function') {
		                    col = _colors(t);
		                }
		                if (_useCache) { _colorCache[k] = col; }
		            }
		            return col;
		        };

		        var resetCache = function () { return _colorCache = {}; };

		        setColors(colors);

		        // public interface

		        var f = function(v) {
		            var c = chroma$4(getColor(v));
		            if (_out && c[_out]) { return c[_out](); } else { return c; }
		        };

		        f.classes = function(classes) {
		            if (classes != null) {
		                if (type$2(classes) === 'array') {
		                    _classes = classes;
		                    _domain = [classes[0], classes[classes.length-1]];
		                } else {
		                    var d = chroma$4.analyze(_domain);
		                    if (classes === 0) {
		                        _classes = [d.min, d.max];
		                    } else {
		                        _classes = chroma$4.limits(d, 'e', classes);
		                    }
		                }
		                return f;
		            }
		            return _classes;
		        };


		        f.domain = function(domain) {
		            if (!arguments.length) {
		                return _domain;
		            }
		            _min = domain[0];
		            _max = domain[domain.length-1];
		            _pos = [];
		            var k = _colors.length;
		            if ((domain.length === k) && (_min !== _max)) {
		                // update positions
		                for (var i = 0, list = Array.from(domain); i < list.length; i += 1) {
		                    var d = list[i];

		                  _pos.push((d-_min) / (_max-_min));
		                }
		            } else {
		                for (var c=0; c<k; c++) {
		                    _pos.push(c/(k-1));
		                }
		                if (domain.length > 2) {
		                    // set domain map
		                    var tOut = domain.map(function (d,i) { return i/(domain.length-1); });
		                    var tBreaks = domain.map(function (d) { return (d - _min) / (_max - _min); });
		                    if (!tBreaks.every(function (val, i) { return tOut[i] === val; })) {
		                        tMapDomain = function (t) {
		                            if (t <= 0 || t >= 1) { return t; }
		                            var i = 0;
		                            while (t >= tBreaks[i+1]) { i++; }
		                            var f = (t - tBreaks[i]) / (tBreaks[i+1] - tBreaks[i]);
		                            var out = tOut[i] + f * (tOut[i+1] - tOut[i]);
		                            return out;
		                        };
		                    }

		                }
		            }
		            _domain = [_min, _max];
		            return f;
		        };

		        f.mode = function(_m) {
		            if (!arguments.length) {
		                return _mode;
		            }
		            _mode = _m;
		            resetCache();
		            return f;
		        };

		        f.range = function(colors, _pos) {
		            setColors(colors);
		            return f;
		        };

		        f.out = function(_o) {
		            _out = _o;
		            return f;
		        };

		        f.spread = function(val) {
		            if (!arguments.length) {
		                return _spread;
		            }
		            _spread = val;
		            return f;
		        };

		        f.correctLightness = function(v) {
		            if (v == null) { v = true; }
		            _correctLightness = v;
		            resetCache();
		            if (_correctLightness) {
		                tMapLightness = function(t) {
		                    var L0 = getColor(0, true).lab()[0];
		                    var L1 = getColor(1, true).lab()[0];
		                    var pol = L0 > L1;
		                    var L_actual = getColor(t, true).lab()[0];
		                    var L_ideal = L0 + ((L1 - L0) * t);
		                    var L_diff = L_actual - L_ideal;
		                    var t0 = 0;
		                    var t1 = 1;
		                    var max_iter = 20;
		                    while ((Math.abs(L_diff) > 1e-2) && (max_iter-- > 0)) {
		                        (function() {
		                            if (pol) { L_diff *= -1; }
		                            if (L_diff < 0) {
		                                t0 = t;
		                                t += (t1 - t) * 0.5;
		                            } else {
		                                t1 = t;
		                                t += (t0 - t) * 0.5;
		                            }
		                            L_actual = getColor(t, true).lab()[0];
		                            return L_diff = L_actual - L_ideal;
		                        })();
		                    }
		                    return t;
		                };
		            } else {
		                tMapLightness = function (t) { return t; };
		            }
		            return f;
		        };

		        f.padding = function(p) {
		            if (p != null) {
		                if (type$2(p) === 'number') {
		                    p = [p,p];
		                }
		                _padding = p;
		                return f;
		            } else {
		                return _padding;
		            }
		        };

		        f.colors = function(numColors, out) {
		            // If no arguments are given, return the original colors that were provided
		            if (arguments.length < 2) { out = 'hex'; }
		            var result = [];

		            if (arguments.length === 0) {
		                result = _colors.slice(0);

		            } else if (numColors === 1) {
		                result = [f(0.5)];

		            } else if (numColors > 1) {
		                var dm = _domain[0];
		                var dd = _domain[1] - dm;
		                result = __range__(0, numColors, false).map(function (i) { return f( dm + ((i/(numColors-1)) * dd) ); });

		            } else { // returns all colors based on the defined classes
		                colors = [];
		                var samples = [];
		                if (_classes && (_classes.length > 2)) {
		                    for (var i = 1, end = _classes.length, asc = 1 <= end; asc ? i < end : i > end; asc ? i++ : i--) {
		                        samples.push((_classes[i-1]+_classes[i])*0.5);
		                    }
		                } else {
		                    samples = _domain;
		                }
		                result = samples.map(function (v) { return f(v); });
		            }

		            if (chroma$4[out]) {
		                result = result.map(function (c) { return c[out](); });
		            }
		            return result;
		        };

		        f.cache = function(c) {
		            if (c != null) {
		                _useCache = c;
		                return f;
		            } else {
		                return _useCache;
		            }
		        };

		        f.gamma = function(g) {
		            if (g != null) {
		                _gamma = g;
		                return f;
		            } else {
		                return _gamma;
		            }
		        };

		        f.nodata = function(d) {
		            if (d != null) {
		                _nacol = chroma$4(d);
		                return f;
		            } else {
		                return _nacol;
		            }
		        };

		        return f;
		    };

		    function __range__(left, right, inclusive) {
		      var range = [];
		      var ascending = left < right;
		      var end = !inclusive ? right : ascending ? right + 1 : right - 1;
		      for (var i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {
		        range.push(i);
		      }
		      return range;
		    }

		    //
		    // interpolates between a set of colors uzing a bezier spline
		    //

		    // @requires utils lab
		    var Color$5 = Color_1;

		    var scale$1 = scale$2;

		    // nth row of the pascal triangle
		    var binom_row = function(n) {
		        var row = [1, 1];
		        for (var i = 1; i < n; i++) {
		            var newrow = [1];
		            for (var j = 1; j <= row.length; j++) {
		                newrow[j] = (row[j] || 0) + row[j - 1];
		            }
		            row = newrow;
		        }
		        return row;
		    };

		    var bezier = function(colors) {
		        var assign, assign$1, assign$2;

		        var I, lab0, lab1, lab2;
		        colors = colors.map(function (c) { return new Color$5(c); });
		        if (colors.length === 2) {
		            // linear interpolation
		            (assign = colors.map(function (c) { return c.lab(); }), lab0 = assign[0], lab1 = assign[1]);
		            I = function(t) {
		                var lab = ([0, 1, 2].map(function (i) { return lab0[i] + (t * (lab1[i] - lab0[i])); }));
		                return new Color$5(lab, 'lab');
		            };
		        } else if (colors.length === 3) {
		            // quadratic bezier interpolation
		            (assign$1 = colors.map(function (c) { return c.lab(); }), lab0 = assign$1[0], lab1 = assign$1[1], lab2 = assign$1[2]);
		            I = function(t) {
		                var lab = ([0, 1, 2].map(function (i) { return ((1-t)*(1-t) * lab0[i]) + (2 * (1-t) * t * lab1[i]) + (t * t * lab2[i]); }));
		                return new Color$5(lab, 'lab');
		            };
		        } else if (colors.length === 4) {
		            // cubic bezier interpolation
		            var lab3;
		            (assign$2 = colors.map(function (c) { return c.lab(); }), lab0 = assign$2[0], lab1 = assign$2[1], lab2 = assign$2[2], lab3 = assign$2[3]);
		            I = function(t) {
		                var lab = ([0, 1, 2].map(function (i) { return ((1-t)*(1-t)*(1-t) * lab0[i]) + (3 * (1-t) * (1-t) * t * lab1[i]) + (3 * (1-t) * t * t * lab2[i]) + (t*t*t * lab3[i]); }));
		                return new Color$5(lab, 'lab');
		            };
		        } else if (colors.length >= 5) {
		            // general case (degree n bezier)
		            var labs, row, n;
		            labs = colors.map(function (c) { return c.lab(); });
		            n = colors.length - 1;
		            row = binom_row(n);
		            I = function (t) {
		                var u = 1 - t;
		                var lab = ([0, 1, 2].map(function (i) { return labs.reduce(function (sum, el, j) { return (sum + row[j] * Math.pow( u, (n - j) ) * Math.pow( t, j ) * el[i]); }, 0); }));
		                return new Color$5(lab, 'lab');
		            };
		        } else {
		            throw new RangeError("No point in running bezier with only one color.")
		        }
		        return I;
		    };

		    var bezier_1 = function (colors) {
		        var f = bezier(colors);
		        f.scale = function () { return scale$1(f); };
		        return f;
		    };

		    /*
		     * interpolates between a set of colors uzing a bezier spline
		     * blend mode formulas taken from http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/
		     */

		    var chroma$3 = chroma_1;

		    var blend = function (bottom, top, mode) {
		        if (!blend[mode]) {
		            throw new Error('unknown blend mode ' + mode);
		        }
		        return blend[mode](bottom, top);
		    };

		    var blend_f = function (f) { return function (bottom,top) {
		            var c0 = chroma$3(top).rgb();
		            var c1 = chroma$3(bottom).rgb();
		            return chroma$3.rgb(f(c0, c1));
		        }; };

		    var each = function (f) { return function (c0, c1) {
		            var out = [];
		            out[0] = f(c0[0], c1[0]);
		            out[1] = f(c0[1], c1[1]);
		            out[2] = f(c0[2], c1[2]);
		            return out;
		        }; };

		    var normal = function (a) { return a; };
		    var multiply = function (a,b) { return a * b / 255; };
		    var darken = function (a,b) { return a > b ? b : a; };
		    var lighten = function (a,b) { return a > b ? a : b; };
		    var screen = function (a,b) { return 255 * (1 - (1-a/255) * (1-b/255)); };
		    var overlay = function (a,b) { return b < 128 ? 2 * a * b / 255 : 255 * (1 - 2 * (1 - a / 255 ) * ( 1 - b / 255 )); };
		    var burn = function (a,b) { return 255 * (1 - (1 - b / 255) / (a/255)); };
		    var dodge = function (a,b) {
		        if (a === 255) { return 255; }
		        a = 255 * (b / 255) / (1 - a / 255);
		        return a > 255 ? 255 : a
		    };

		    // # add = (a,b) ->
		    // #     if (a + b > 255) then 255 else a + b

		    blend.normal = blend_f(each(normal));
		    blend.multiply = blend_f(each(multiply));
		    blend.screen = blend_f(each(screen));
		    blend.overlay = blend_f(each(overlay));
		    blend.darken = blend_f(each(darken));
		    blend.lighten = blend_f(each(lighten));
		    blend.dodge = blend_f(each(dodge));
		    blend.burn = blend_f(each(burn));
		    // blend.add = blend_f(each(add));

		    var blend_1 = blend;

		    // cubehelix interpolation
		    // based on D.A. Green "A colour scheme for the display of astronomical intensity images"
		    // http://astron-soc.in/bulletin/11June/289392011.pdf

		    var type$1 = utils.type;
		    var clip_rgb = utils.clip_rgb;
		    var TWOPI = utils.TWOPI;
		    var pow$2 = Math.pow;
		    var sin$1 = Math.sin;
		    var cos$1 = Math.cos;
		    var chroma$2 = chroma_1;

		    var cubehelix = function(start, rotations, hue, gamma, lightness) {
		        if ( start === void 0 ) start=300;
		        if ( rotations === void 0 ) rotations=-1.5;
		        if ( hue === void 0 ) hue=1;
		        if ( gamma === void 0 ) gamma=1;
		        if ( lightness === void 0 ) lightness=[0,1];

		        var dh = 0, dl;
		        if (type$1(lightness) === 'array') {
		            dl = lightness[1] - lightness[0];
		        } else {
		            dl = 0;
		            lightness = [lightness, lightness];
		        }

		        var f = function(fract) {
		            var a = TWOPI * (((start+120)/360) + (rotations * fract));
		            var l = pow$2(lightness[0] + (dl * fract), gamma);
		            var h = dh !== 0 ? hue[0] + (fract * dh) : hue;
		            var amp = (h * l * (1-l)) / 2;
		            var cos_a = cos$1(a);
		            var sin_a = sin$1(a);
		            var r = l + (amp * ((-0.14861 * cos_a) + (1.78277* sin_a)));
		            var g = l + (amp * ((-0.29227 * cos_a) - (0.90649* sin_a)));
		            var b = l + (amp * (+1.97294 * cos_a));
		            return chroma$2(clip_rgb([r*255,g*255,b*255,1]));
		        };

		        f.start = function(s) {
		            if ((s == null)) { return start; }
		            start = s;
		            return f;
		        };

		        f.rotations = function(r) {
		            if ((r == null)) { return rotations; }
		            rotations = r;
		            return f;
		        };

		        f.gamma = function(g) {
		            if ((g == null)) { return gamma; }
		            gamma = g;
		            return f;
		        };

		        f.hue = function(h) {
		            if ((h == null)) { return hue; }
		            hue = h;
		            if (type$1(hue) === 'array') {
		                dh = hue[1] - hue[0];
		                if (dh === 0) { hue = hue[1]; }
		            } else {
		                dh = 0;
		            }
		            return f;
		        };

		        f.lightness = function(h) {
		            if ((h == null)) { return lightness; }
		            if (type$1(h) === 'array') {
		                lightness = h;
		                dl = h[1] - h[0];
		            } else {
		                lightness = [h,h];
		                dl = 0;
		            }
		            return f;
		        };

		        f.scale = function () { return chroma$2.scale(f); };

		        f.hue(hue);

		        return f;
		    };

		    var Color$4 = Color_1;
		    var digits = '0123456789abcdef';

		    var floor$1 = Math.floor;
		    var random = Math.random;

		    var random_1 = function () {
		        var code = '#';
		        for (var i=0; i<6; i++) {
		            code += digits.charAt(floor$1(random() * 16));
		        }
		        return new Color$4(code, 'hex');
		    };

		    var type = type$p;
		    var log = Math.log;
		    var pow$1 = Math.pow;
		    var floor = Math.floor;
		    var abs$1 = Math.abs;


		    var analyze = function (data, key) {
		        if ( key === void 0 ) key=null;

		        var r = {
		            min: Number.MAX_VALUE,
		            max: Number.MAX_VALUE*-1,
		            sum: 0,
		            values: [],
		            count: 0
		        };
		        if (type(data) === 'object') {
		            data = Object.values(data);
		        }
		        data.forEach(function (val) {
		            if (key && type(val) === 'object') { val = val[key]; }
		            if (val !== undefined && val !== null && !isNaN(val)) {
		                r.values.push(val);
		                r.sum += val;
		                if (val < r.min) { r.min = val; }
		                if (val > r.max) { r.max = val; }
		                r.count += 1;
		            }
		        });

		        r.domain = [r.min, r.max];

		        r.limits = function (mode, num) { return limits(r, mode, num); };

		        return r;
		    };


		    var limits = function (data, mode, num) {
		        if ( mode === void 0 ) mode='equal';
		        if ( num === void 0 ) num=7;

		        if (type(data) == 'array') {
		            data = analyze(data);
		        }
		        var min = data.min;
		        var max = data.max;
		        var values = data.values.sort(function (a,b) { return a-b; });

		        if (num === 1) { return [min,max]; }

		        var limits = [];

		        if (mode.substr(0,1) === 'c') { // continuous
		            limits.push(min);
		            limits.push(max);
		        }

		        if (mode.substr(0,1) === 'e') { // equal interval
		            limits.push(min);
		            for (var i=1; i<num; i++) {
		                limits.push(min+((i/num)*(max-min)));
		            }
		            limits.push(max);
		        }

		        else if (mode.substr(0,1) === 'l') { // log scale
		            if (min <= 0) {
		                throw new Error('Logarithmic scales are only possible for values > 0');
		            }
		            var min_log = Math.LOG10E * log(min);
		            var max_log = Math.LOG10E * log(max);
		            limits.push(min);
		            for (var i$1=1; i$1<num; i$1++) {
		                limits.push(pow$1(10, min_log + ((i$1/num) * (max_log - min_log))));
		            }
		            limits.push(max);
		        }

		        else if (mode.substr(0,1) === 'q') { // quantile scale
		            limits.push(min);
		            for (var i$2=1; i$2<num; i$2++) {
		                var p = ((values.length-1) * i$2)/num;
		                var pb = floor(p);
		                if (pb === p) {
		                    limits.push(values[pb]);
		                } else { // p > pb
		                    var pr = p - pb;
		                    limits.push((values[pb]*(1-pr)) + (values[pb+1]*pr));
		                }
		            }
		            limits.push(max);

		        }

		        else if (mode.substr(0,1) === 'k') { // k-means clustering
		            /*
		            implementation based on
		            http://code.google.com/p/figue/source/browse/trunk/figue.js#336
		            simplified for 1-d input values
		            */
		            var cluster;
		            var n = values.length;
		            var assignments = new Array(n);
		            var clusterSizes = new Array(num);
		            var repeat = true;
		            var nb_iters = 0;
		            var centroids = null;

		            // get seed values
		            centroids = [];
		            centroids.push(min);
		            for (var i$3=1; i$3<num; i$3++) {
		                centroids.push(min + ((i$3/num) * (max-min)));
		            }
		            centroids.push(max);

		            while (repeat) {
		                // assignment step
		                for (var j=0; j<num; j++) {
		                    clusterSizes[j] = 0;
		                }
		                for (var i$4=0; i$4<n; i$4++) {
		                    var value = values[i$4];
		                    var mindist = Number.MAX_VALUE;
		                    var best = (void 0);
		                    for (var j$1=0; j$1<num; j$1++) {
		                        var dist = abs$1(centroids[j$1]-value);
		                        if (dist < mindist) {
		                            mindist = dist;
		                            best = j$1;
		                        }
		                        clusterSizes[best]++;
		                        assignments[i$4] = best;
		                    }
		                }

		                // update centroids step
		                var newCentroids = new Array(num);
		                for (var j$2=0; j$2<num; j$2++) {
		                    newCentroids[j$2] = null;
		                }
		                for (var i$5=0; i$5<n; i$5++) {
		                    cluster = assignments[i$5];
		                    if (newCentroids[cluster] === null) {
		                        newCentroids[cluster] = values[i$5];
		                    } else {
		                        newCentroids[cluster] += values[i$5];
		                    }
		                }
		                for (var j$3=0; j$3<num; j$3++) {
		                    newCentroids[j$3] *= 1/clusterSizes[j$3];
		                }

		                // check convergence
		                repeat = false;
		                for (var j$4=0; j$4<num; j$4++) {
		                    if (newCentroids[j$4] !== centroids[j$4]) {
		                        repeat = true;
		                        break;
		                    }
		                }

		                centroids = newCentroids;
		                nb_iters++;

		                if (nb_iters > 200) {
		                    repeat = false;
		                }
		            }

		            // finished k-means clustering
		            // the next part is borrowed from gabrielflor.it
		            var kClusters = {};
		            for (var j$5=0; j$5<num; j$5++) {
		                kClusters[j$5] = [];
		            }
		            for (var i$6=0; i$6<n; i$6++) {
		                cluster = assignments[i$6];
		                kClusters[cluster].push(values[i$6]);
		            }
		            var tmpKMeansBreaks = [];
		            for (var j$6=0; j$6<num; j$6++) {
		                tmpKMeansBreaks.push(kClusters[j$6][0]);
		                tmpKMeansBreaks.push(kClusters[j$6][kClusters[j$6].length-1]);
		            }
		            tmpKMeansBreaks = tmpKMeansBreaks.sort(function (a,b){ return a-b; });
		            limits.push(tmpKMeansBreaks[0]);
		            for (var i$7=1; i$7 < tmpKMeansBreaks.length; i$7+= 2) {
		                var v = tmpKMeansBreaks[i$7];
		                if (!isNaN(v) && (limits.indexOf(v) === -1)) {
		                    limits.push(v);
		                }
		            }
		        }
		        return limits;
		    };

		    var analyze_1 = {analyze: analyze, limits: limits};

		    var Color$3 = Color_1;


		    var contrast = function (a, b) {
		        // WCAG contrast ratio
		        // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
		        a = new Color$3(a);
		        b = new Color$3(b);
		        var l1 = a.luminance();
		        var l2 = b.luminance();
		        return l1 > l2 ? (l1 + 0.05) / (l2 + 0.05) : (l2 + 0.05) / (l1 + 0.05);
		    };

		    var Color$2 = Color_1;
		    var sqrt = Math.sqrt;
		    var pow = Math.pow;
		    var min = Math.min;
		    var max = Math.max;
		    var atan2 = Math.atan2;
		    var abs = Math.abs;
		    var cos = Math.cos;
		    var sin = Math.sin;
		    var exp = Math.exp;
		    var PI = Math.PI;

		    var deltaE = function(a, b, Kl, Kc, Kh) {
		        if ( Kl === void 0 ) Kl=1;
		        if ( Kc === void 0 ) Kc=1;
		        if ( Kh === void 0 ) Kh=1;

		        // Delta E (CIE 2000)
		        // see http://www.brucelindbloom.com/index.html?Eqn_DeltaE_CIE2000.html
		        var rad2deg = function(rad) {
		            return 360 * rad / (2 * PI);
		        };
		        var deg2rad = function(deg) {
		            return (2 * PI * deg) / 360;
		        };
		        a = new Color$2(a);
		        b = new Color$2(b);
		        var ref = Array.from(a.lab());
		        var L1 = ref[0];
		        var a1 = ref[1];
		        var b1 = ref[2];
		        var ref$1 = Array.from(b.lab());
		        var L2 = ref$1[0];
		        var a2 = ref$1[1];
		        var b2 = ref$1[2];
		        var avgL = (L1 + L2)/2;
		        var C1 = sqrt(pow(a1, 2) + pow(b1, 2));
		        var C2 = sqrt(pow(a2, 2) + pow(b2, 2));
		        var avgC = (C1 + C2)/2;
		        var G = 0.5*(1-sqrt(pow(avgC, 7)/(pow(avgC, 7) + pow(25, 7))));
		        var a1p = a1*(1+G);
		        var a2p = a2*(1+G);
		        var C1p = sqrt(pow(a1p, 2) + pow(b1, 2));
		        var C2p = sqrt(pow(a2p, 2) + pow(b2, 2));
		        var avgCp = (C1p + C2p)/2;
		        var arctan1 = rad2deg(atan2(b1, a1p));
		        var arctan2 = rad2deg(atan2(b2, a2p));
		        var h1p = arctan1 >= 0 ? arctan1 : arctan1 + 360;
		        var h2p = arctan2 >= 0 ? arctan2 : arctan2 + 360;
		        var avgHp = abs(h1p - h2p) > 180 ? (h1p + h2p + 360)/2 : (h1p + h2p)/2;
		        var T = 1 - 0.17*cos(deg2rad(avgHp - 30)) + 0.24*cos(deg2rad(2*avgHp)) + 0.32*cos(deg2rad(3*avgHp + 6)) - 0.2*cos(deg2rad(4*avgHp - 63));
		        var deltaHp = h2p - h1p;
		        deltaHp = abs(deltaHp) <= 180 ? deltaHp : h2p <= h1p ? deltaHp + 360 : deltaHp - 360;
		        deltaHp = 2*sqrt(C1p*C2p)*sin(deg2rad(deltaHp)/2);
		        var deltaL = L2 - L1;
		        var deltaCp = C2p - C1p;    
		        var sl = 1 + (0.015*pow(avgL - 50, 2))/sqrt(20 + pow(avgL - 50, 2));
		        var sc = 1 + 0.045*avgCp;
		        var sh = 1 + 0.015*avgCp*T;
		        var deltaTheta = 30*exp(-pow((avgHp - 275)/25, 2));
		        var Rc = 2*sqrt(pow(avgCp, 7)/(pow(avgCp, 7) + pow(25, 7)));
		        var Rt = -Rc*sin(2*deg2rad(deltaTheta));
		        var result = sqrt(pow(deltaL/(Kl*sl), 2) + pow(deltaCp/(Kc*sc), 2) + pow(deltaHp/(Kh*sh), 2) + Rt*(deltaCp/(Kc*sc))*(deltaHp/(Kh*sh)));
		        return max(0, min(100, result));
		    };

		    var Color$1 = Color_1;

		    // simple Euclidean distance
		    var distance = function(a, b, mode) {
		        if ( mode === void 0 ) mode='lab';

		        // Delta E (CIE 1976)
		        // see http://www.brucelindbloom.com/index.html?Equations.html
		        a = new Color$1(a);
		        b = new Color$1(b);
		        var l1 = a.get(mode);
		        var l2 = b.get(mode);
		        var sum_sq = 0;
		        for (var i in l1) {
		            var d = (l1[i] || 0) - (l2[i] || 0);
		            sum_sq += d*d;
		        }
		        return Math.sqrt(sum_sq);
		    };

		    var Color = Color_1;

		    var valid = function () {
		        var args = [], len = arguments.length;
		        while ( len-- ) args[ len ] = arguments[ len ];

		        try {
		            new (Function.prototype.bind.apply( Color, [ null ].concat( args) ));
		            return true;
		        } catch (e) {
		            return false;
		        }
		    };

		    // some pre-defined color scales:
		    var chroma$1 = chroma_1;

		    var scale = scale$2;

		    var scales = {
		    	cool: function cool() { return scale([chroma$1.hsl(180,1,.9), chroma$1.hsl(250,.7,.4)]) },
		    	hot: function hot() { return scale(['#000','#f00','#ff0','#fff']).mode('rgb') }
		    };

		    /**
		        ColorBrewer colors for chroma.js

		        Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The
		        Pennsylvania State University.

		        Licensed under the Apache License, Version 2.0 (the "License");
		        you may not use this file except in compliance with the License.
		        You may obtain a copy of the License at
		        http://www.apache.org/licenses/LICENSE-2.0

		        Unless required by applicable law or agreed to in writing, software distributed
		        under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
		        CONDITIONS OF ANY KIND, either express or implied. See the License for the
		        specific language governing permissions and limitations under the License.
		    */

		    var colorbrewer = {
		        // sequential
		        OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],
		        PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],
		        BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],
		        Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],
		        BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],
		        YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],
		        YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],
		        Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],
		        RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],
		        Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],
		        YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],
		        Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],
		        GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],
		        Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],
		        YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],
		        PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],
		        Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],
		        PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],
		        Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],

		        // diverging

		        Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],
		        RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],
		        RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],
		        PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],
		        PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],
		        RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],
		        BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],
		        RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],
		        PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],

		        // qualitative

		        Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],
		        Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],
		        Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],
		        Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],
		        Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],
		        Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],
		        Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],
		        Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2'],
		    };

		    // add lowercase aliases for case-insensitive matches
		    for (var i = 0, list = Object.keys(colorbrewer); i < list.length; i += 1) {
		        var key = list[i];

		        colorbrewer[key.toLowerCase()] = colorbrewer[key];
		    }

		    var colorbrewer_1 = colorbrewer;

		    var chroma = chroma_1;

		    // feel free to comment out anything to rollup
		    // a smaller chroma.js built

		    // io --> convert colors

















		    // operators --> modify existing Colors










		    // interpolators












		    // generators -- > create new colors
		    chroma.average = average;
		    chroma.bezier = bezier_1;
		    chroma.blend = blend_1;
		    chroma.cubehelix = cubehelix;
		    chroma.mix = chroma.interpolate = mix$1;
		    chroma.random = random_1;
		    chroma.scale = scale$2;

		    // other utility methods
		    chroma.analyze = analyze_1.analyze;
		    chroma.contrast = contrast;
		    chroma.deltaE = deltaE;
		    chroma.distance = distance;
		    chroma.limits = analyze_1.limits;
		    chroma.valid = valid;

		    // scale
		    chroma.scales = scales;

		    // colors
		    chroma.colors = w3cx11_1;
		    chroma.brewer = colorbrewer_1;

		    var chroma_js = chroma;

		    return chroma_js;

		})); 
	} (chroma$1));

	var chromaExports = chroma$1.exports;
	var chroma = /*@__PURE__*/getDefaultExportFromCjs(chromaExports);

	/**
	 * @param {Object} params
	 * @param {string} params.min_reservation_date
	 * @param {string} params.max_reservation_date
	 * @param {string} params.service_id
	 * @param {string} params.location_id
	 * @param {string} params.employee_id
	 * @param {string} params.orderby
	 * @param {string} params.order
	 */
	async function get_reservations_list(params) {
	  let events = [];
	  let args = {};
	  if (params.min_reservation_date !== '') {
	    args.min_reservation_date = params.min_reservation_date;
	  }
	  if (params.max_reservation_date !== '') {
	    args.max_reservation_date = params.max_reservation_date;
	  }
	  if (params.service_id !== '') {
	    args.service_id = params.service_id;
	  }
	  if (params.location_id !== '') {
	    args.location_id = params.location_id;
	  }
	  if (params.employee_id !== '') {
	    args.employee_id = params.employee_id;
	  }
	  if (params.orderby !== '') {
	    args.orderby = params.orderby;
	  }
	  if (params.order !== '') {
	    args.order = params.order;
	  }
	  const reservationsRequestPromise = get_reservations(args, true);
	  const allReservations = await get_all(reservationsRequestPromise);
	  allReservations.forEach(function (reservation) {
	    var _reservation$_embedde, _reservation$_embedde2, _reservation$_embedde3, _reservation$_embedde4;
	    let booking = (_reservation$_embedde = reservation._embedded?.booking_id?.[0]) !== null && _reservation$_embedde !== void 0 ? _reservation$_embedde : {};
	    let location = (_reservation$_embedde2 = reservation._embedded?.location_id?.[0]) !== null && _reservation$_embedde2 !== void 0 ? _reservation$_embedde2 : {};
	    let employee = (_reservation$_embedde3 = reservation._embedded?.employee_id?.[0]) !== null && _reservation$_embedde3 !== void 0 ? _reservation$_embedde3 : {};
	    let service = (_reservation$_embedde4 = reservation._embedded?.service_id?.[0]) !== null && _reservation$_embedde4 !== void 0 ? _reservation$_embedde4 : {};
	    events.push({
	      id: reservation.id,
	      title: '#' + reservation.id,
	      start: new Date(reservation.reservation_start_time),
	      end: new Date(reservation.reservation_end_time),
	      rich_info: {
	        reservation: {
	          capacity: reservation.capacity,
	          price: reservation.price
	        },
	        booking: {
	          id: booking?.id || 0,
	          status: booking?.status || '',
	          customer: {
	            name: booking?.customer?.name || '',
	            email: booking?.customer?.email || '',
	            phone: booking?.customer?.phone || ''
	          }
	        },
	        location: {
	          id: location?.id || 0,
	          title: location?.title || ''
	        },
	        employee: {
	          id: employee?.id || 0,
	          name: employee?.name || ''
	        },
	        service: {
	          id: service?.id || 0,
	          title: service?.title || ''
	        },
	        coupon: {
	          id: booking?.coupon || 0
	        },
	        payments: booking?.payments || []
	      }
	    });
	  });
	  return events;
	}

	/**
	 * @param {Object[]} options
	 *  @param {Number} options['value']
	 *  @param {String} options['label']
	 *  @param {String[]} options['categories']
	 *
	 * @return {Object[]}
	 *  {String} label
	 *  {Object[]} options
	 *      {Number} options['value']
	 *      {String} options['label']
	 */
	function group_options_by_categories(options) {
	  const grouped = mpa_array_group_by_key(options, item => item.categories);
	  return Object.keys(grouped).map(key => ({
	    label: window.wp.htmlEntities.decodeEntities(key),
	    options: grouped[key]
	  }));
	}
	async function get_services_list() {
	  let services = [];
	  const args = {
	    _fields: ['id', 'title', 'categories', 'color']
	  };
	  const servicesRequestPromise = get_services(args, false);
	  const allServices = await get_all(servicesRequestPromise);
	  allServices.map(function (service) {
	    services.push({
	      value: service.id,
	      label: service.title,
	      // Price need for use in coupons analytics.
	      // Better move price to another store
	      price: service.price,
	      backgroundColor: service.color,
	      textColor: chroma.contrast(service.color, 'white') > 4.5 ? 'white' : 'black',
	      categories: service.categories.map(category => category.name).filter(name => name !== undefined)
	    });
	  });
	  // sort by services label
	  services = mpa_array_sort_by_alphabetical_key(services, 'label');
	  // group services by service categories
	  services = group_options_by_categories(services);
	  // sort by categories
	  services = mpa_array_sort_by_alphabetical_key(services, 'label');
	  return services;
	}
	async function get_locations_list() {
	  let locations = [];
	  const args = {
	    _fields: ['id', 'title']
	  };
	  const locationsRequestPromise = get_locations(args, false);
	  const allLocations = await get_all(locationsRequestPromise);
	  allLocations.map(function (location) {
	    locations.push({
	      value: location.id,
	      label: location.title
	    });
	  });
	  return mpa_array_sort_by_alphabetical_key(locations, 'label');
	}
	async function get_employees_list() {
	  let employees = [];
	  const args = {
	    _fields: ['id', 'name']
	  };
	  const employeesRequestPromise = get_employees(args, false);
	  const allEmployees = await get_all(employeesRequestPromise);
	  allEmployees.map(function (employee) {
	    employees.push({
	      value: employee.id,
	      label: employee.name
	    });
	  });
	  return mpa_array_sort_by_alphabetical_key(employees, 'label');
	}

	class FiltersStore {
	  servicesLoading = true;
	  locationsLoading = true;
	  employeesLoading = true;
	  locations = [];
	  services = [];
	  employees = [];
	  employeesDisabled = false;
	  statuses = [{
	    value: 'confirmed',
	    label: 'Confirmed'
	  }, {
	    value: 'pending',
	    label: 'Pending'
	  }, {
	    value: 'cancelled',
	    label: 'Cancelled'
	  }];
	  constructor(urlFiltersStore) {
	    this.urlFiltersStore = urlFiltersStore;
	    makeAutoObservable(this);
	    this.initServices();
	    this.initLocations();
	    this.initEmployees();
	  }
	  initServices() {
	    get_services_list().then(services => {
	      runInAction(() => {
	        this.services = services;
	        this.servicesLoading = false;
	      });
	    });
	  }
	  initLocations() {
	    get_locations_list().then(locations => {
	      runInAction(() => {
	        this.locations = locations;
	        this.locationsLoading = false;
	      });
	    });
	  }
	  initEmployees() {
	    get_employees_list().then(employees => {
	      runInAction(() => {
	        this.employees = employees;
	        this.employeesLoading = false;
	        if (employees.length === 1) {
	          this.urlFiltersStore.setEmployees(employees[0].value.toString());
	          this.employeesDisabled = true;
	        }
	      });
	    });
	  }
	}

	class CouponStore {
	  loaded = false;
	  coupons = new Map();
	  constructor() {
	    makeAutoObservable(this);
	    this.loadCoupons();
	  }
	  async loadCoupons() {
	    try {
	      const couponsRequest = get_coupons();
	      const coupons = await get_all(couponsRequest);
	      runInAction(() => {
	        coupons.forEach(coupon => {
	          this.coupons.set(coupon.id, coupon);
	        });
	        this.loaded = true;
	      });
	    } catch (error) {
	      console.error("An error occurred while loading coupons:", error);
	      runInAction(() => {
	        this.loaded = false;
	      });
	    }
	  }
	  getCouponById(couponId) {
	    return this.coupons.get(couponId) || {};
	  }
	}

	class PromiseRaceConditionGuardUtils {
	  constructor() {
	    this.lastPromise = null;
	    this.cancel = () => {
	      this.lastPromise = null;
	    };
	  }
	  getGuardedPromise(promise) {
	    this.lastPromise = promise;
	    return this.lastPromise.then(this.preventRaceCondition());
	  }
	  preventRaceCondition() {
	    const currentPromise = this.lastPromise;
	    return response => {
	      if (this.lastPromise !== currentPromise) {
	        return new Promise(() => null);
	      }
	      return response;
	    };
	  }
	}

	class EventStore {
	  loading = false;
	  events = [];
	  constructor(urlFiltersStore, filtersStore) {
	    this.urlFiltersStore = urlFiltersStore;
	    this.filtersStore = filtersStore;
	    makeAutoObservable(this);
	    this.fetchCalendarEvents = this.fetchCalendarEvents.bind(this);
	    this.applyFilterByStatuses = this.applyFilterByStatuses.bind(this);
	    this.raceConditionGuard = new PromiseRaceConditionGuardUtils();
	    this.urlFiltersStore.routerStore.subscribe(({
	      location
	    }) => {
	      this.fetchCalendarEvents();
	    });
	  }
	  applyFilterByStatuses(events) {
	    const selectedStatuses = this.urlFiltersStore.getStatuses().split(',');
	    if (Array.isArray(selectedStatuses) && selectedStatuses.length) {
	      events = events.filter(function (event) {
	        return true === selectedStatuses.includes(event.rich_info.booking.status);
	      });
	    }
	    return events;
	  }
	  getServiceColors(serviceId) {
	    const services = toJS(this.filtersStore.services);
	    let findedService = undefined;
	    services.forEach(serviceGroup => {
	      serviceGroup.options.forEach(service => {
	        if (service.value === serviceId) {
	          findedService = service;
	        }
	      });
	    });
	    return findedService;
	  }
	  applyColors(events) {
	    return events.map(event => {
	      const serviceColors = this.getServiceColors(event.rich_info.service.id);
	      if (serviceColors !== undefined) {
	        event.backgroundColor = serviceColors.backgroundColor;
	        event.textColor = serviceColors.textColor;
	      }
	      return event;
	    });
	  }
	  async fetchCalendarEvents() {
	    const params = {
	      min_reservation_date: this.urlFiltersStore.getDateStart(),
	      max_reservation_date: this.urlFiltersStore.getDateEnd(),
	      service_id: this.urlFiltersStore.getServices(),
	      location_id: this.urlFiltersStore.getLocations(),
	      employee_id: this.urlFiltersStore.getEmployees(),
	      orderby: 'reservation_start_time'
	    };
	    this.loading = true;
	    this.raceConditionGuard.getGuardedPromise(get_reservations_list(params)).then(events => {
	      // We can't filter reservations by their booking status via api without additional requests, because reservations has only booking id, but not status.
	      // Apply filter by status after receiving data.
	      events = this.applyFilterByStatuses(events);
	      events = this.applyColors(events);
	      runInAction(() => {
	        this.events = events;
	        this.loading = false;
	      });
	    });
	  }
	}

	const browserHistory = createBrowserHistory();
	const routerStoreInstance = new RouterStore(browserHistory);
	class RootStore {
	  constructor() {
	    this.urlFiltersStore = new URLFiltersStore(routerStoreInstance);
	    this.filtersStore = new FiltersStore(this.urlFiltersStore);
	    this.permissionStore = new PermissionStore(this);
	    this.eventStore = new EventStore(this.urlFiltersStore, this.filtersStore);
	    this.couponStore = new CouponStore();
	  }
	}
	const StoresContext = React.createContext(new RootStore());

	// this will be the function available for the app to connect to the stores
	const useStores = () => React.useContext(StoresContext);

	var jsxRuntime = {exports: {}};

	var reactJsxRuntime_production_min = {};

	/**
	 * @license React
	 * react-jsx-runtime.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var f$1=e$1,k$1=Symbol.for("react.element"),l$1=Symbol.for("react.fragment"),m$1=Object.prototype.hasOwnProperty,n$1=f$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p$1={key:!0,ref:!0,__self:!0,__source:!0};
	function q$1(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=""+g);void 0!==a.key&&(e=""+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m$1.call(a,b)&&!p$1.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return {$$typeof:k$1,type:c,key:e,ref:h,props:d,_owner:n$1.current}}reactJsxRuntime_production_min.Fragment=l$1;reactJsxRuntime_production_min.jsx=q$1;reactJsxRuntime_production_min.jsxs=q$1;

	{
	  jsxRuntime.exports = reactJsxRuntime_production_min;
	}

	var jsxRuntimeExports = jsxRuntime.exports;

	const propTypes$1 = {
	  /**
	   * Specify whether the feedback is for valid or invalid fields
	   *
	   * @type {('valid'|'invalid')}
	   */
	  type: PropTypes.string,
	  /** Display feedback as a tooltip. */
	  tooltip: PropTypes.bool,
	  as: PropTypes.elementType
	};
	const Feedback = /*#__PURE__*/e__namespace.forwardRef(
	// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
	({
	  as: Component = 'div',
	  className,
	  type = 'valid',
	  tooltip = false,
	  ...props
	}, ref) => /*#__PURE__*/jsxRuntimeExports.jsx(Component, {
	  ...props,
	  ref: ref,
	  className: classNames$1(className, `${type}-${tooltip ? 'tooltip' : 'feedback'}`)
	}));
	Feedback.displayName = 'Feedback';
	Feedback.propTypes = propTypes$1;
	var Feedback$1 = Feedback;

	// TODO

	const FormContext = /*#__PURE__*/e__namespace.createContext({});
	var FormContext$1 = FormContext;

	const DEFAULT_BREAKPOINTS = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];
	const DEFAULT_MIN_BREAKPOINT = 'xs';
	const ThemeContext$1 = /*#__PURE__*/e__namespace.createContext({
	  prefixes: {},
	  breakpoints: DEFAULT_BREAKPOINTS,
	  minBreakpoint: DEFAULT_MIN_BREAKPOINT
	});
	function useBootstrapPrefix(prefix, defaultPrefix) {
	  const {
	    prefixes
	  } = e$1.useContext(ThemeContext$1);
	  return prefix || prefixes[defaultPrefix] || defaultPrefix;
	}
	function useBootstrapBreakpoints() {
	  const {
	    breakpoints
	  } = e$1.useContext(ThemeContext$1);
	  return breakpoints;
	}
	function useBootstrapMinBreakpoint() {
	  const {
	    minBreakpoint
	  } = e$1.useContext(ThemeContext$1);
	  return minBreakpoint;
	}

	const FormCheckInput = /*#__PURE__*/e__namespace.forwardRef(({
	  id,
	  bsPrefix,
	  className,
	  type = 'checkbox',
	  isValid = false,
	  isInvalid = false,
	  // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
	  as: Component = 'input',
	  ...props
	}, ref) => {
	  const {
	    controlId
	  } = e$1.useContext(FormContext$1);
	  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check-input');
	  return /*#__PURE__*/jsxRuntimeExports.jsx(Component, {
	    ...props,
	    ref: ref,
	    type: type,
	    id: id || controlId,
	    className: classNames$1(className, bsPrefix, isValid && 'is-valid', isInvalid && 'is-invalid')
	  });
	});
	FormCheckInput.displayName = 'FormCheckInput';
	var FormCheckInput$1 = FormCheckInput;

	const FormCheckLabel = /*#__PURE__*/e__namespace.forwardRef(({
	  bsPrefix,
	  className,
	  htmlFor,
	  ...props
	}, ref) => {
	  const {
	    controlId
	  } = e$1.useContext(FormContext$1);
	  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check-label');
	  return /*#__PURE__*/jsxRuntimeExports.jsx("label", {
	    ...props,
	    ref: ref,
	    htmlFor: htmlFor || controlId,
	    className: classNames$1(className, bsPrefix)
	  });
	});
	FormCheckLabel.displayName = 'FormCheckLabel';
	var FormCheckLabel$1 = FormCheckLabel;

	/**
	 * Finds whether a component's `children` prop includes a React element of the
	 * specified type.
	 */
	function hasChildOfType(children, type) {
	  return e__namespace.Children.toArray(children).some(child => /*#__PURE__*/e__namespace.isValidElement(child) && child.type === type);
	}

	const FormCheck = /*#__PURE__*/e__namespace.forwardRef(({
	  id,
	  bsPrefix,
	  bsSwitchPrefix,
	  inline = false,
	  reverse = false,
	  disabled = false,
	  isValid = false,
	  isInvalid = false,
	  feedbackTooltip = false,
	  feedback,
	  feedbackType,
	  className,
	  style,
	  title = '',
	  type = 'checkbox',
	  label,
	  children,
	  // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
	  as = 'input',
	  ...props
	}, ref) => {
	  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-check');
	  bsSwitchPrefix = useBootstrapPrefix(bsSwitchPrefix, 'form-switch');
	  const {
	    controlId
	  } = e$1.useContext(FormContext$1);
	  const innerFormContext = e$1.useMemo(() => ({
	    controlId: id || controlId
	  }), [controlId, id]);
	  const hasLabel = !children && label != null && label !== false || hasChildOfType(children, FormCheckLabel$1);
	  const input = /*#__PURE__*/jsxRuntimeExports.jsx(FormCheckInput$1, {
	    ...props,
	    type: type === 'switch' ? 'checkbox' : type,
	    ref: ref,
	    isValid: isValid,
	    isInvalid: isInvalid,
	    disabled: disabled,
	    as: as
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsx(FormContext$1.Provider, {
	    value: innerFormContext,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("div", {
	      style: style,
	      className: classNames$1(className, hasLabel && bsPrefix, inline && `${bsPrefix}-inline`, reverse && `${bsPrefix}-reverse`, type === 'switch' && bsSwitchPrefix),
	      children: children || /*#__PURE__*/jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, {
	        children: [input, hasLabel && /*#__PURE__*/jsxRuntimeExports.jsx(FormCheckLabel$1, {
	          title: title,
	          children: label
	        }), feedback && /*#__PURE__*/jsxRuntimeExports.jsx(Feedback$1, {
	          type: feedbackType,
	          tooltip: feedbackTooltip,
	          children: feedback
	        })]
	      })
	    })
	  });
	});
	FormCheck.displayName = 'FormCheck';
	var FormCheck$1 = Object.assign(FormCheck, {
	  Input: FormCheckInput$1,
	  Label: FormCheckLabel$1
	});

	const FormControl = /*#__PURE__*/e__namespace.forwardRef(({
	  bsPrefix,
	  type,
	  size,
	  htmlSize,
	  id,
	  className,
	  isValid = false,
	  isInvalid = false,
	  plaintext,
	  readOnly,
	  // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
	  as: Component = 'input',
	  ...props
	}, ref) => {
	  const {
	    controlId
	  } = e$1.useContext(FormContext$1);
	  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-control');
	  let classes;
	  if (plaintext) {
	    classes = {
	      [`${bsPrefix}-plaintext`]: true
	    };
	  } else {
	    classes = {
	      [bsPrefix]: true,
	      [`${bsPrefix}-${size}`]: size
	    };
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(Component, {
	    ...props,
	    type: type,
	    size: htmlSize,
	    ref: ref,
	    readOnly: readOnly,
	    id: id || controlId,
	    className: classNames$1(className, classes, isValid && `is-valid`, isInvalid && `is-invalid`, type === 'color' && `${bsPrefix}-color`)
	  });
	});
	FormControl.displayName = 'FormControl';
	var FormControl$1 = Object.assign(FormControl, {
	  Feedback: Feedback$1
	});

	var rHyphen = /-(.)/g;
	function camelize(string) {
	  return string.replace(rHyphen, function (_, chr) {
	    return chr.toUpperCase();
	  });
	}

	const pascalCase = str => str[0].toUpperCase() + camelize(str).slice(1);
	// TODO: emstricten & fix the typing here! `createWithBsPrefix<TElementType>...`
	function createWithBsPrefix(prefix, {
	  displayName = pascalCase(prefix),
	  Component,
	  defaultProps
	} = {}) {
	  const BsComponent = /*#__PURE__*/e__namespace.forwardRef(({
	    className,
	    bsPrefix,
	    as: Tag = Component || 'div',
	    ...props
	  }, ref) => {
	    const componentProps = {
	      ...defaultProps,
	      ...props
	    };
	    const resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);
	    return /*#__PURE__*/jsxRuntimeExports.jsx(Tag, {
	      ref: ref,
	      className: classNames$1(className, resolvedPrefix),
	      ...componentProps
	    });
	  });
	  BsComponent.displayName = displayName;
	  return BsComponent;
	}

	var FormFloating = createWithBsPrefix('form-floating');

	const FormGroup = /*#__PURE__*/e__namespace.forwardRef(({
	  controlId,
	  // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
	  as: Component = 'div',
	  ...props
	}, ref) => {
	  const context = e$1.useMemo(() => ({
	    controlId
	  }), [controlId]);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(FormContext$1.Provider, {
	    value: context,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(Component, {
	      ...props,
	      ref: ref
	    })
	  });
	});
	FormGroup.displayName = 'FormGroup';
	var FormGroup$1 = FormGroup;

	function useCol({
	  as,
	  bsPrefix,
	  className,
	  ...props
	}) {
	  bsPrefix = useBootstrapPrefix(bsPrefix, 'col');
	  const breakpoints = useBootstrapBreakpoints();
	  const minBreakpoint = useBootstrapMinBreakpoint();
	  const spans = [];
	  const classes = [];
	  breakpoints.forEach(brkPoint => {
	    const propValue = props[brkPoint];
	    delete props[brkPoint];
	    let span;
	    let offset;
	    let order;
	    if (typeof propValue === 'object' && propValue != null) {
	      ({
	        span,
	        offset,
	        order
	      } = propValue);
	    } else {
	      span = propValue;
	    }
	    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';
	    if (span) spans.push(span === true ? `${bsPrefix}${infix}` : `${bsPrefix}${infix}-${span}`);
	    if (order != null) classes.push(`order${infix}-${order}`);
	    if (offset != null) classes.push(`offset${infix}-${offset}`);
	  });
	  return [{
	    ...props,
	    className: classNames$1(className, ...spans, ...classes)
	  }, {
	    as,
	    bsPrefix,
	    spans
	  }];
	}
	const Col = /*#__PURE__*/e__namespace.forwardRef(
	// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
	(props, ref) => {
	  const [{
	    className,
	    ...colProps
	  }, {
	    as: Component = 'div',
	    bsPrefix,
	    spans
	  }] = useCol(props);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(Component, {
	    ...colProps,
	    ref: ref,
	    className: classNames$1(className, !spans.length && bsPrefix)
	  });
	});
	Col.displayName = 'Col';
	var Col$1 = Col;

	const FormLabel = /*#__PURE__*/e__namespace.forwardRef(({
	  // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
	  as: Component = 'label',
	  bsPrefix,
	  column = false,
	  visuallyHidden = false,
	  className,
	  htmlFor,
	  ...props
	}, ref) => {
	  const {
	    controlId
	  } = e$1.useContext(FormContext$1);
	  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-label');
	  let columnClass = 'col-form-label';
	  if (typeof column === 'string') columnClass = `${columnClass} ${columnClass}-${column}`;
	  const classes = classNames$1(className, bsPrefix, visuallyHidden && 'visually-hidden', column && columnClass);
	  htmlFor = htmlFor || controlId;
	  if (column) return /*#__PURE__*/jsxRuntimeExports.jsx(Col$1, {
	    ref: ref,
	    as: "label",
	    className: classes,
	    htmlFor: htmlFor,
	    ...props
	  });
	  return (
	    /*#__PURE__*/
	    // eslint-disable-next-line jsx-a11y/label-has-for, jsx-a11y/label-has-associated-control
	    jsxRuntimeExports.jsx(Component, {
	      ref: ref,
	      className: classes,
	      htmlFor: htmlFor,
	      ...props
	    })
	  );
	});
	FormLabel.displayName = 'FormLabel';
	var FormLabel$1 = FormLabel;

	const FormRange = /*#__PURE__*/e__namespace.forwardRef(({
	  bsPrefix,
	  className,
	  id,
	  ...props
	}, ref) => {
	  const {
	    controlId
	  } = e$1.useContext(FormContext$1);
	  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-range');
	  return /*#__PURE__*/jsxRuntimeExports.jsx("input", {
	    ...props,
	    type: "range",
	    ref: ref,
	    className: classNames$1(className, bsPrefix),
	    id: id || controlId
	  });
	});
	FormRange.displayName = 'FormRange';
	var FormRange$1 = FormRange;

	const FormSelect = /*#__PURE__*/e__namespace.forwardRef(({
	  bsPrefix,
	  size,
	  htmlSize,
	  className,
	  isValid = false,
	  isInvalid = false,
	  id,
	  ...props
	}, ref) => {
	  const {
	    controlId
	  } = e$1.useContext(FormContext$1);
	  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-select');
	  return /*#__PURE__*/jsxRuntimeExports.jsx("select", {
	    ...props,
	    size: htmlSize,
	    ref: ref,
	    className: classNames$1(className, bsPrefix, size && `${bsPrefix}-${size}`, isValid && `is-valid`, isInvalid && `is-invalid`),
	    id: id || controlId
	  });
	});
	FormSelect.displayName = 'FormSelect';
	var FormSelect$1 = FormSelect;

	const FormText = /*#__PURE__*/e__namespace.forwardRef(
	// Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
	({
	  bsPrefix,
	  className,
	  as: Component = 'small',
	  muted,
	  ...props
	}, ref) => {
	  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-text');
	  return /*#__PURE__*/jsxRuntimeExports.jsx(Component, {
	    ...props,
	    ref: ref,
	    className: classNames$1(className, bsPrefix, muted && 'text-muted')
	  });
	});
	FormText.displayName = 'FormText';
	var FormText$1 = FormText;

	const Switch = /*#__PURE__*/e__namespace.forwardRef((props, ref) => /*#__PURE__*/jsxRuntimeExports.jsx(FormCheck$1, {
	  ...props,
	  ref: ref,
	  type: "switch"
	}));
	Switch.displayName = 'Switch';
	var Switch$1 = Object.assign(Switch, {
	  Input: FormCheck$1.Input,
	  Label: FormCheck$1.Label
	});

	const FloatingLabel = /*#__PURE__*/e__namespace.forwardRef(({
	  bsPrefix,
	  className,
	  children,
	  controlId,
	  label,
	  ...props
	}, ref) => {
	  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-floating');
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(FormGroup$1, {
	    ref: ref,
	    className: classNames$1(className, bsPrefix),
	    controlId: controlId,
	    ...props,
	    children: [children, /*#__PURE__*/jsxRuntimeExports.jsx("label", {
	      htmlFor: controlId,
	      children: label
	    })]
	  });
	});
	FloatingLabel.displayName = 'FloatingLabel';
	var FloatingLabel$1 = FloatingLabel;

	const propTypes = {
	  /**
	   * The Form `ref` will be forwarded to the underlying element,
	   * which means, unless it's rendered `as` a composite component,
	   * it will be a DOM node, when resolved.
	   *
	   * @type {ReactRef}
	   * @alias ref
	   */
	  _ref: PropTypes.any,
	  /**
	   * Mark a form as having been validated. Setting it to `true` will
	   * toggle any validation styles on the forms elements.
	   */
	  validated: PropTypes.bool,
	  as: PropTypes.elementType
	};
	const Form = /*#__PURE__*/e__namespace.forwardRef(({
	  className,
	  validated,
	  // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
	  as: Component = 'form',
	  ...props
	}, ref) => /*#__PURE__*/jsxRuntimeExports.jsx(Component, {
	  ...props,
	  ref: ref,
	  className: classNames$1(className, validated && 'was-validated')
	}));
	Form.displayName = 'Form';
	Form.propTypes = propTypes;
	var Form$1 = Object.assign(Form, {
	  Group: FormGroup$1,
	  Control: FormControl$1,
	  Floating: FormFloating,
	  Check: FormCheck$1,
	  Switch: Switch$1,
	  Label: FormLabel$1,
	  Text: FormText$1,
	  Range: FormRange$1,
	  Select: FormSelect$1,
	  FloatingLabel: FloatingLabel$1
	});

	function ownKeys(object, enumerableOnly) {
	  var keys = Object.keys(object);
	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    enumerableOnly && (symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    })), keys.push.apply(keys, symbols);
	  }
	  return keys;
	}
	function _objectSpread2(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = null != arguments[i] ? arguments[i] : {};
	    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
	      _defineProperty$1(target, key, source[key]);
	    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
	      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	    });
	  }
	  return target;
	}

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArrayLimit(arr, i) {
	  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
	  if (null != _i) {
	    var _s,
	      _e,
	      _x,
	      _r,
	      _arr = [],
	      _n = !0,
	      _d = !1;
	    try {
	      if (_x = (_i = _i.call(arr)).next, 0 === i) {
	        if (Object(_i) !== _i) return;
	        _n = !1;
	      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
	    } catch (err) {
	      _d = !0, _e = err;
	    } finally {
	      try {
	        if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;
	      } finally {
	        if (_d) throw _e;
	      }
	    }
	    return _arr;
	  }
	}

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _slicedToArray(arr, i) {
	  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest();
	}

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;
	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }
	  return target;
	}

	function _objectWithoutProperties(source, excluded) {
	  if (source == null) return {};
	  var target = _objectWithoutPropertiesLoose(source, excluded);
	  var key, i;
	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }
	  return target;
	}

	var _excluded$5 = ["defaultInputValue", "defaultMenuIsOpen", "defaultValue", "inputValue", "menuIsOpen", "onChange", "onInputChange", "onMenuClose", "onMenuOpen", "value"];
	function useStateManager(_ref) {
	  var _ref$defaultInputValu = _ref.defaultInputValue,
	    defaultInputValue = _ref$defaultInputValu === void 0 ? '' : _ref$defaultInputValu,
	    _ref$defaultMenuIsOpe = _ref.defaultMenuIsOpen,
	    defaultMenuIsOpen = _ref$defaultMenuIsOpe === void 0 ? false : _ref$defaultMenuIsOpe,
	    _ref$defaultValue = _ref.defaultValue,
	    defaultValue = _ref$defaultValue === void 0 ? null : _ref$defaultValue,
	    propsInputValue = _ref.inputValue,
	    propsMenuIsOpen = _ref.menuIsOpen,
	    propsOnChange = _ref.onChange,
	    propsOnInputChange = _ref.onInputChange,
	    propsOnMenuClose = _ref.onMenuClose,
	    propsOnMenuOpen = _ref.onMenuOpen,
	    propsValue = _ref.value,
	    restSelectProps = _objectWithoutProperties(_ref, _excluded$5);
	  var _useState = e$1.useState(propsInputValue !== undefined ? propsInputValue : defaultInputValue),
	    _useState2 = _slicedToArray(_useState, 2),
	    stateInputValue = _useState2[0],
	    setStateInputValue = _useState2[1];
	  var _useState3 = e$1.useState(propsMenuIsOpen !== undefined ? propsMenuIsOpen : defaultMenuIsOpen),
	    _useState4 = _slicedToArray(_useState3, 2),
	    stateMenuIsOpen = _useState4[0],
	    setStateMenuIsOpen = _useState4[1];
	  var _useState5 = e$1.useState(propsValue !== undefined ? propsValue : defaultValue),
	    _useState6 = _slicedToArray(_useState5, 2),
	    stateValue = _useState6[0],
	    setStateValue = _useState6[1];
	  var onChange = e$1.useCallback(function (value, actionMeta) {
	    if (typeof propsOnChange === 'function') {
	      propsOnChange(value, actionMeta);
	    }
	    setStateValue(value);
	  }, [propsOnChange]);
	  var onInputChange = e$1.useCallback(function (value, actionMeta) {
	    var newValue;
	    if (typeof propsOnInputChange === 'function') {
	      newValue = propsOnInputChange(value, actionMeta);
	    }
	    setStateInputValue(newValue !== undefined ? newValue : value);
	  }, [propsOnInputChange]);
	  var onMenuOpen = e$1.useCallback(function () {
	    if (typeof propsOnMenuOpen === 'function') {
	      propsOnMenuOpen();
	    }
	    setStateMenuIsOpen(true);
	  }, [propsOnMenuOpen]);
	  var onMenuClose = e$1.useCallback(function () {
	    if (typeof propsOnMenuClose === 'function') {
	      propsOnMenuClose();
	    }
	    setStateMenuIsOpen(false);
	  }, [propsOnMenuClose]);
	  var inputValue = propsInputValue !== undefined ? propsInputValue : stateInputValue;
	  var menuIsOpen = propsMenuIsOpen !== undefined ? propsMenuIsOpen : stateMenuIsOpen;
	  var value = propsValue !== undefined ? propsValue : stateValue;
	  return _objectSpread2(_objectSpread2({}, restSelectProps), {}, {
	    inputValue: inputValue,
	    menuIsOpen: menuIsOpen,
	    onChange: onChange,
	    onInputChange: onInputChange,
	    onMenuClose: onMenuClose,
	    onMenuOpen: onMenuOpen,
	    value: value
	  });
	}

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
	}

	function _iterableToArray(iter) {
	  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
	}

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _toConsumableArray(arr) {
	  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread();
	}

	/*

	Based off glamor's StyleSheet, thanks Sunil ❤️

	high performance StyleSheet for css-in-js systems

	- uses multiple style tags behind the scenes for millions of rules
	- uses `insertRule` for appending in production for *much* faster performance

	// usage

	import { StyleSheet } from '@emotion/sheet'

	let styleSheet = new StyleSheet({ key: '', container: document.head })

	styleSheet.insert('#box { border: 1px solid red; }')
	- appends a css rule into the stylesheet

	styleSheet.flush()
	- empties the stylesheet of all its contents

	*/
	// $FlowFixMe
	function sheetForTag(tag) {
	  if (tag.sheet) {
	    // $FlowFixMe
	    return tag.sheet;
	  } // this weirdness brought to you by firefox

	  /* istanbul ignore next */


	  for (var i = 0; i < document.styleSheets.length; i++) {
	    if (document.styleSheets[i].ownerNode === tag) {
	      // $FlowFixMe
	      return document.styleSheets[i];
	    }
	  }
	}

	function createStyleElement(options) {
	  var tag = document.createElement('style');
	  tag.setAttribute('data-emotion', options.key);

	  if (options.nonce !== undefined) {
	    tag.setAttribute('nonce', options.nonce);
	  }

	  tag.appendChild(document.createTextNode(''));
	  tag.setAttribute('data-s', '');
	  return tag;
	}

	var StyleSheet = /*#__PURE__*/function () {
	  // Using Node instead of HTMLElement since container may be a ShadowRoot
	  function StyleSheet(options) {
	    var _this = this;

	    this._insertTag = function (tag) {
	      var before;

	      if (_this.tags.length === 0) {
	        if (_this.insertionPoint) {
	          before = _this.insertionPoint.nextSibling;
	        } else if (_this.prepend) {
	          before = _this.container.firstChild;
	        } else {
	          before = _this.before;
	        }
	      } else {
	        before = _this.tags[_this.tags.length - 1].nextSibling;
	      }

	      _this.container.insertBefore(tag, before);

	      _this.tags.push(tag);
	    };

	    this.isSpeedy = options.speedy === undefined ? "production" === 'production' : options.speedy;
	    this.tags = [];
	    this.ctr = 0;
	    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

	    this.key = options.key;
	    this.container = options.container;
	    this.prepend = options.prepend;
	    this.insertionPoint = options.insertionPoint;
	    this.before = null;
	  }

	  var _proto = StyleSheet.prototype;

	  _proto.hydrate = function hydrate(nodes) {
	    nodes.forEach(this._insertTag);
	  };

	  _proto.insert = function insert(rule) {
	    // the max length is how many rules we have per style tag, it's 65000 in speedy mode
	    // it's 1 in dev because we insert source maps that map a single rule to a location
	    // and you can only have one source map per style tag
	    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
	      this._insertTag(createStyleElement(this));
	    }

	    var tag = this.tags[this.tags.length - 1];

	    if (this.isSpeedy) {
	      var sheet = sheetForTag(tag);

	      try {
	        // this is the ultrafast version, works across browsers
	        // the big drawback is that the css won't be editable in devtools
	        sheet.insertRule(rule, sheet.cssRules.length);
	      } catch (e) {
	      }
	    } else {
	      tag.appendChild(document.createTextNode(rule));
	    }

	    this.ctr++;
	  };

	  _proto.flush = function flush() {
	    // $FlowFixMe
	    this.tags.forEach(function (tag) {
	      return tag.parentNode && tag.parentNode.removeChild(tag);
	    });
	    this.tags = [];
	    this.ctr = 0;
	  };

	  return StyleSheet;
	}();

	var MS = '-ms-';
	var MOZ = '-moz-';
	var WEBKIT = '-webkit-';

	var COMMENT = 'comm';
	var RULESET = 'rule';
	var DECLARATION = 'decl';
	var IMPORT = '@import';
	var KEYFRAMES = '@keyframes';
	var LAYER = '@layer';

	/**
	 * @param {number}
	 * @return {number}
	 */
	var abs = Math.abs;

	/**
	 * @param {number}
	 * @return {string}
	 */
	var from$1 = String.fromCharCode;

	/**
	 * @param {object}
	 * @return {object}
	 */
	var assign = Object.assign;

	/**
	 * @param {string} value
	 * @param {number} length
	 * @return {number}
	 */
	function hash (value, length) {
		return charat(value, 0) ^ 45 ? (((((((length << 2) ^ charat(value, 0)) << 2) ^ charat(value, 1)) << 2) ^ charat(value, 2)) << 2) ^ charat(value, 3) : 0
	}

	/**
	 * @param {string} value
	 * @return {string}
	 */
	function trim (value) {
		return value.trim()
	}

	/**
	 * @param {string} value
	 * @param {RegExp} pattern
	 * @return {string?}
	 */
	function match (value, pattern) {
		return (value = pattern.exec(value)) ? value[0] : value
	}

	/**
	 * @param {string} value
	 * @param {(string|RegExp)} pattern
	 * @param {string} replacement
	 * @return {string}
	 */
	function replace (value, pattern, replacement) {
		return value.replace(pattern, replacement)
	}

	/**
	 * @param {string} value
	 * @param {string} search
	 * @return {number}
	 */
	function indexof (value, search) {
		return value.indexOf(search)
	}

	/**
	 * @param {string} value
	 * @param {number} index
	 * @return {number}
	 */
	function charat (value, index) {
		return value.charCodeAt(index) | 0
	}

	/**
	 * @param {string} value
	 * @param {number} begin
	 * @param {number} end
	 * @return {string}
	 */
	function substr (value, begin, end) {
		return value.slice(begin, end)
	}

	/**
	 * @param {string} value
	 * @return {number}
	 */
	function strlen (value) {
		return value.length
	}

	/**
	 * @param {any[]} value
	 * @return {number}
	 */
	function sizeof (value) {
		return value.length
	}

	/**
	 * @param {any} value
	 * @param {any[]} array
	 * @return {any}
	 */
	function append (value, array) {
		return array.push(value), value
	}

	/**
	 * @param {string[]} array
	 * @param {function} callback
	 * @return {string}
	 */
	function combine (array, callback) {
		return array.map(callback).join('')
	}

	var line = 1;
	var column = 1;
	var length = 0;
	var position = 0;
	var character = 0;
	var characters = '';

	/**
	 * @param {string} value
	 * @param {object | null} root
	 * @param {object | null} parent
	 * @param {string} type
	 * @param {string[] | string} props
	 * @param {object[] | string} children
	 * @param {number} length
	 */
	function node (value, root, parent, type, props, children, length) {
		return {value: value, root: root, parent: parent, type: type, props: props, children: children, line: line, column: column, length: length, return: ''}
	}

	/**
	 * @param {object} root
	 * @param {object} props
	 * @return {object}
	 */
	function copy (root, props) {
		return assign(node('', null, null, '', null, null, 0), root, {length: -root.length}, props)
	}

	/**
	 * @return {number}
	 */
	function char () {
		return character
	}

	/**
	 * @return {number}
	 */
	function prev () {
		character = position > 0 ? charat(characters, --position) : 0;

		if (column--, character === 10)
			column = 1, line--;

		return character
	}

	/**
	 * @return {number}
	 */
	function next () {
		character = position < length ? charat(characters, position++) : 0;

		if (column++, character === 10)
			column = 1, line++;

		return character
	}

	/**
	 * @return {number}
	 */
	function peek () {
		return charat(characters, position)
	}

	/**
	 * @return {number}
	 */
	function caret () {
		return position
	}

	/**
	 * @param {number} begin
	 * @param {number} end
	 * @return {string}
	 */
	function slice (begin, end) {
		return substr(characters, begin, end)
	}

	/**
	 * @param {number} type
	 * @return {number}
	 */
	function token (type) {
		switch (type) {
			// \0 \t \n \r \s whitespace token
			case 0: case 9: case 10: case 13: case 32:
				return 5
			// ! + , / > @ ~ isolate token
			case 33: case 43: case 44: case 47: case 62: case 64: case 126:
			// ; { } breakpoint token
			case 59: case 123: case 125:
				return 4
			// : accompanied token
			case 58:
				return 3
			// " ' ( [ opening delimit token
			case 34: case 39: case 40: case 91:
				return 2
			// ) ] closing delimit token
			case 41: case 93:
				return 1
		}

		return 0
	}

	/**
	 * @param {string} value
	 * @return {any[]}
	 */
	function alloc (value) {
		return line = column = 1, length = strlen(characters = value), position = 0, []
	}

	/**
	 * @param {any} value
	 * @return {any}
	 */
	function dealloc (value) {
		return characters = '', value
	}

	/**
	 * @param {number} type
	 * @return {string}
	 */
	function delimit (type) {
		return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)))
	}

	/**
	 * @param {number} type
	 * @return {string}
	 */
	function whitespace (type) {
		while (character = peek())
			if (character < 33)
				next();
			else
				break

		return token(type) > 2 || token(character) > 3 ? '' : ' '
	}

	/**
	 * @param {number} index
	 * @param {number} count
	 * @return {string}
	 */
	function escaping (index, count) {
		while (--count && next())
			// not 0-9 A-F a-f
			if (character < 48 || character > 102 || (character > 57 && character < 65) || (character > 70 && character < 97))
				break

		return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32))
	}

	/**
	 * @param {number} type
	 * @return {number}
	 */
	function delimiter (type) {
		while (next())
			switch (character) {
				// ] ) " '
				case type:
					return position
				// " '
				case 34: case 39:
					if (type !== 34 && type !== 39)
						delimiter(character);
					break
				// (
				case 40:
					if (type === 41)
						delimiter(type);
					break
				// \
				case 92:
					next();
					break
			}

		return position
	}

	/**
	 * @param {number} type
	 * @param {number} index
	 * @return {number}
	 */
	function commenter (type, index) {
		while (next())
			// //
			if (type + character === 47 + 10)
				break
			// /*
			else if (type + character === 42 + 42 && peek() === 47)
				break

		return '/*' + slice(index, position - 1) + '*' + from$1(type === 47 ? type : next())
	}

	/**
	 * @param {number} index
	 * @return {string}
	 */
	function identifier (index) {
		while (!token(peek()))
			next();

		return slice(index, position)
	}

	/**
	 * @param {string} value
	 * @return {object[]}
	 */
	function compile (value) {
		return dealloc(parse$1('', null, null, null, [''], value = alloc(value), 0, [0], value))
	}

	/**
	 * @param {string} value
	 * @param {object} root
	 * @param {object?} parent
	 * @param {string[]} rule
	 * @param {string[]} rules
	 * @param {string[]} rulesets
	 * @param {number[]} pseudo
	 * @param {number[]} points
	 * @param {string[]} declarations
	 * @return {object}
	 */
	function parse$1 (value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
		var index = 0;
		var offset = 0;
		var length = pseudo;
		var atrule = 0;
		var property = 0;
		var previous = 0;
		var variable = 1;
		var scanning = 1;
		var ampersand = 1;
		var character = 0;
		var type = '';
		var props = rules;
		var children = rulesets;
		var reference = rule;
		var characters = type;

		while (scanning)
			switch (previous = character, character = next()) {
				// (
				case 40:
					if (previous != 108 && charat(characters, length - 1) == 58) {
						if (indexof(characters += replace(delimit(character), '&', '&\f'), '&\f') != -1)
							ampersand = -1;
						break
					}
				// " ' [
				case 34: case 39: case 91:
					characters += delimit(character);
					break
				// \t \n \r \s
				case 9: case 10: case 13: case 32:
					characters += whitespace(previous);
					break
				// \
				case 92:
					characters += escaping(caret() - 1, 7);
					continue
				// /
				case 47:
					switch (peek()) {
						case 42: case 47:
							append(comment(commenter(next(), caret()), root, parent), declarations);
							break
						default:
							characters += '/';
					}
					break
				// {
				case 123 * variable:
					points[index++] = strlen(characters) * ampersand;
				// } ; \0
				case 125 * variable: case 59: case 0:
					switch (character) {
						// \0 }
						case 0: case 125: scanning = 0;
						// ;
						case 59 + offset: if (ampersand == -1) characters = replace(characters, /\f/g, '');
							if (property > 0 && (strlen(characters) - length))
								append(property > 32 ? declaration(characters + ';', rule, parent, length - 1) : declaration(replace(characters, ' ', '') + ';', rule, parent, length - 2), declarations);
							break
						// @ ;
						case 59: characters += ';';
						// { rule/at-rule
						default:
							append(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets);

							if (character === 123)
								if (offset === 0)
									parse$1(characters, root, reference, reference, props, rulesets, length, points, children);
								else
									switch (atrule === 99 && charat(characters, 3) === 110 ? 100 : atrule) {
										// d l m s
										case 100: case 108: case 109: case 115:
											parse$1(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children);
											break
										default:
											parse$1(characters, reference, reference, reference, [''], children, 0, points, children);
									}
					}

					index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo;
					break
				// :
				case 58:
					length = 1 + strlen(characters), property = previous;
				default:
					if (variable < 1)
						if (character == 123)
							--variable;
						else if (character == 125 && variable++ == 0 && prev() == 125)
							continue

					switch (characters += from$1(character), character * variable) {
						// &
						case 38:
							ampersand = offset > 0 ? 1 : (characters += '\f', -1);
							break
						// ,
						case 44:
							points[index++] = (strlen(characters) - 1) * ampersand, ampersand = 1;
							break
						// @
						case 64:
							// -
							if (peek() === 45)
								characters += delimit(next());

							atrule = peek(), offset = length = strlen(type = characters += identifier(caret())), character++;
							break
						// -
						case 45:
							if (previous === 45 && strlen(characters) == 2)
								variable = 0;
					}
			}

		return rulesets
	}

	/**
	 * @param {string} value
	 * @param {object} root
	 * @param {object?} parent
	 * @param {number} index
	 * @param {number} offset
	 * @param {string[]} rules
	 * @param {number[]} points
	 * @param {string} type
	 * @param {string[]} props
	 * @param {string[]} children
	 * @param {number} length
	 * @return {object}
	 */
	function ruleset (value, root, parent, index, offset, rules, points, type, props, children, length) {
		var post = offset - 1;
		var rule = offset === 0 ? rules : [''];
		var size = sizeof(rule);

		for (var i = 0, j = 0, k = 0; i < index; ++i)
			for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
				if (z = trim(j > 0 ? rule[x] + ' ' + y : replace(y, /&\f/g, rule[x])))
					props[k++] = z;

		return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length)
	}

	/**
	 * @param {number} value
	 * @param {object} root
	 * @param {object?} parent
	 * @return {object}
	 */
	function comment (value, root, parent) {
		return node(value, root, parent, COMMENT, from$1(char()), substr(value, 2, -2), 0)
	}

	/**
	 * @param {string} value
	 * @param {object} root
	 * @param {object?} parent
	 * @param {number} length
	 * @return {object}
	 */
	function declaration (value, root, parent, length) {
		return node(value, root, parent, DECLARATION, substr(value, 0, length), substr(value, length + 1, -1), length)
	}

	/**
	 * @param {object[]} children
	 * @param {function} callback
	 * @return {string}
	 */
	function serialize (children, callback) {
		var output = '';
		var length = sizeof(children);

		for (var i = 0; i < length; i++)
			output += callback(children[i], i, children, callback) || '';

		return output
	}

	/**
	 * @param {object} element
	 * @param {number} index
	 * @param {object[]} children
	 * @param {function} callback
	 * @return {string}
	 */
	function stringify (element, index, children, callback) {
		switch (element.type) {
			case LAYER: if (element.children.length) break
			case IMPORT: case DECLARATION: return element.return = element.return || element.value
			case COMMENT: return ''
			case KEYFRAMES: return element.return = element.value + '{' + serialize(element.children, callback) + '}'
			case RULESET: element.value = element.props.join(',');
		}

		return strlen(children = serialize(element.children, callback)) ? element.return = element.value + '{' + children + '}' : ''
	}

	/**
	 * @param {function[]} collection
	 * @return {function}
	 */
	function middleware (collection) {
		var length = sizeof(collection);

		return function (element, index, children, callback) {
			var output = '';

			for (var i = 0; i < length; i++)
				output += collection[i](element, index, children, callback) || '';

			return output
		}
	}

	/**
	 * @param {function} callback
	 * @return {function}
	 */
	function rulesheet (callback) {
		return function (element) {
			if (!element.root)
				if (element = element.return)
					callback(element);
		}
	}

	var weakMemoize = function weakMemoize(func) {
	  // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps
	  var cache = new WeakMap();
	  return function (arg) {
	    if (cache.has(arg)) {
	      // $FlowFixMe
	      return cache.get(arg);
	    }

	    var ret = func(arg);
	    cache.set(arg, ret);
	    return ret;
	  };
	};

	function memoize(fn) {
	  var cache = Object.create(null);
	  return function (arg) {
	    if (cache[arg] === undefined) cache[arg] = fn(arg);
	    return cache[arg];
	  };
	}

	var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
	  var previous = 0;
	  var character = 0;

	  while (true) {
	    previous = character;
	    character = peek(); // &\f

	    if (previous === 38 && character === 12) {
	      points[index] = 1;
	    }

	    if (token(character)) {
	      break;
	    }

	    next();
	  }

	  return slice(begin, position);
	};

	var toRules = function toRules(parsed, points) {
	  // pretend we've started with a comma
	  var index = -1;
	  var character = 44;

	  do {
	    switch (token(character)) {
	      case 0:
	        // &\f
	        if (character === 38 && peek() === 12) {
	          // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
	          // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
	          // and when it should just concatenate the outer and inner selectors
	          // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
	          points[index] = 1;
	        }

	        parsed[index] += identifierWithPointTracking(position - 1, points, index);
	        break;

	      case 2:
	        parsed[index] += delimit(character);
	        break;

	      case 4:
	        // comma
	        if (character === 44) {
	          // colon
	          parsed[++index] = peek() === 58 ? '&\f' : '';
	          points[index] = parsed[index].length;
	          break;
	        }

	      // fallthrough

	      default:
	        parsed[index] += from$1(character);
	    }
	  } while (character = next());

	  return parsed;
	};

	var getRules = function getRules(value, points) {
	  return dealloc(toRules(alloc(value), points));
	}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11


	var fixedElements = /* #__PURE__ */new WeakMap();
	var compat = function compat(element) {
	  if (element.type !== 'rule' || !element.parent || // positive .length indicates that this rule contains pseudo
	  // negative .length indicates that this rule has been already prefixed
	  element.length < 1) {
	    return;
	  }

	  var value = element.value,
	      parent = element.parent;
	  var isImplicitRule = element.column === parent.column && element.line === parent.line;

	  while (parent.type !== 'rule') {
	    parent = parent.parent;
	    if (!parent) return;
	  } // short-circuit for the simplest case


	  if (element.props.length === 1 && value.charCodeAt(0) !== 58
	  /* colon */
	  && !fixedElements.get(parent)) {
	    return;
	  } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
	  // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"


	  if (isImplicitRule) {
	    return;
	  }

	  fixedElements.set(element, true);
	  var points = [];
	  var rules = getRules(value, points);
	  var parentRules = parent.props;

	  for (var i = 0, k = 0; i < rules.length; i++) {
	    for (var j = 0; j < parentRules.length; j++, k++) {
	      element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
	    }
	  }
	};
	var removeLabel = function removeLabel(element) {
	  if (element.type === 'decl') {
	    var value = element.value;

	    if ( // charcode for l
	    value.charCodeAt(0) === 108 && // charcode for b
	    value.charCodeAt(2) === 98) {
	      // this ignores label
	      element["return"] = '';
	      element.value = '';
	    }
	  }
	};

	/* eslint-disable no-fallthrough */

	function prefix(value, length) {
	  switch (hash(value, length)) {
	    // color-adjust
	    case 5103:
	      return WEBKIT + 'print-' + value + value;
	    // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)

	    case 5737:
	    case 4201:
	    case 3177:
	    case 3433:
	    case 1641:
	    case 4457:
	    case 2921: // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break

	    case 5572:
	    case 6356:
	    case 5844:
	    case 3191:
	    case 6645:
	    case 3005: // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,

	    case 6391:
	    case 5879:
	    case 5623:
	    case 6135:
	    case 4599:
	    case 4855: // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)

	    case 4215:
	    case 6389:
	    case 5109:
	    case 5365:
	    case 5621:
	    case 3829:
	      return WEBKIT + value + value;
	    // appearance, user-select, transform, hyphens, text-size-adjust

	    case 5349:
	    case 4246:
	    case 4810:
	    case 6968:
	    case 2756:
	      return WEBKIT + value + MOZ + value + MS + value + value;
	    // flex, flex-direction

	    case 6828:
	    case 4268:
	      return WEBKIT + value + MS + value + value;
	    // order

	    case 6165:
	      return WEBKIT + value + MS + 'flex-' + value + value;
	    // align-items

	    case 5187:
	      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + 'box-$1$2' + MS + 'flex-$1$2') + value;
	    // align-self

	    case 5443:
	      return WEBKIT + value + MS + 'flex-item-' + replace(value, /flex-|-self/, '') + value;
	    // align-content

	    case 4675:
	      return WEBKIT + value + MS + 'flex-line-pack' + replace(value, /align-content|flex-|-self/, '') + value;
	    // flex-shrink

	    case 5548:
	      return WEBKIT + value + MS + replace(value, 'shrink', 'negative') + value;
	    // flex-basis

	    case 5292:
	      return WEBKIT + value + MS + replace(value, 'basis', 'preferred-size') + value;
	    // flex-grow

	    case 6060:
	      return WEBKIT + 'box-' + replace(value, '-grow', '') + WEBKIT + value + MS + replace(value, 'grow', 'positive') + value;
	    // transition

	    case 4554:
	      return WEBKIT + replace(value, /([^-])(transform)/g, '$1' + WEBKIT + '$2') + value;
	    // cursor

	    case 6187:
	      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + '$1'), /(image-set)/, WEBKIT + '$1'), value, '') + value;
	    // background, background-image

	    case 5495:
	    case 3959:
	      return replace(value, /(image-set\([^]*)/, WEBKIT + '$1' + '$`$1');
	    // justify-content

	    case 4968:
	      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + 'box-pack:$3' + MS + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + WEBKIT + value + value;
	    // (margin|padding)-inline-(start|end)

	    case 4095:
	    case 3583:
	    case 4068:
	    case 2532:
	      return replace(value, /(.+)-inline(.+)/, WEBKIT + '$1$2') + value;
	    // (min|max)?(width|height|inline-size|block-size)

	    case 8116:
	    case 7059:
	    case 5753:
	    case 5535:
	    case 5445:
	    case 5701:
	    case 4933:
	    case 4677:
	    case 5533:
	    case 5789:
	    case 5021:
	    case 4765:
	      // stretch, max-content, min-content, fill-available
	      if (strlen(value) - 1 - length > 6) switch (charat(value, length + 1)) {
	        // (m)ax-content, (m)in-content
	        case 109:
	          // -
	          if (charat(value, length + 4) !== 45) break;
	        // (f)ill-available, (f)it-content

	        case 102:
	          return replace(value, /(.+:)(.+)-([^]+)/, '$1' + WEBKIT + '$2-$3' + '$1' + MOZ + (charat(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;
	        // (s)tretch

	        case 115:
	          return ~indexof(value, 'stretch') ? prefix(replace(value, 'stretch', 'fill-available'), length) + value : value;
	      }
	      break;
	    // position: sticky

	    case 4949:
	      // (s)ticky?
	      if (charat(value, length + 1) !== 115) break;
	    // display: (flex|inline-flex)

	    case 6444:
	      switch (charat(value, strlen(value) - 3 - (~indexof(value, '!important') && 10))) {
	        // stic(k)y
	        case 107:
	          return replace(value, ':', ':' + WEBKIT) + value;
	        // (inline-)?fl(e)x

	        case 101:
	          return replace(value, /(.+:)([^;!]+)(;|!.+)?/, '$1' + WEBKIT + (charat(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + WEBKIT + '$2$3' + '$1' + MS + '$2box$3') + value;
	      }

	      break;
	    // writing-mode

	    case 5936:
	      switch (charat(value, length + 11)) {
	        // vertical-l(r)
	        case 114:
	          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb') + value;
	        // vertical-r(l)

	        case 108:
	          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value;
	        // horizontal(-)tb

	        case 45:
	          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'lr') + value;
	      }

	      return WEBKIT + value + MS + value + value;
	  }

	  return value;
	}

	var prefixer = function prefixer(element, index, children, callback) {
	  if (element.length > -1) if (!element["return"]) switch (element.type) {
	    case DECLARATION:
	      element["return"] = prefix(element.value, element.length);
	      break;

	    case KEYFRAMES:
	      return serialize([copy(element, {
	        value: replace(element.value, '@', '@' + WEBKIT)
	      })], callback);

	    case RULESET:
	      if (element.length) return combine(element.props, function (value) {
	        switch (match(value, /(::plac\w+|:read-\w+)/)) {
	          // :read-(only|write)
	          case ':read-only':
	          case ':read-write':
	            return serialize([copy(element, {
	              props: [replace(value, /:(read-\w+)/, ':' + MOZ + '$1')]
	            })], callback);
	          // :placeholder

	          case '::placeholder':
	            return serialize([copy(element, {
	              props: [replace(value, /:(plac\w+)/, ':' + WEBKIT + 'input-$1')]
	            }), copy(element, {
	              props: [replace(value, /:(plac\w+)/, ':' + MOZ + '$1')]
	            }), copy(element, {
	              props: [replace(value, /:(plac\w+)/, MS + 'input-$1')]
	            })], callback);
	        }

	        return '';
	      });
	  }
	};

	var isBrowser$3 = typeof document !== 'undefined';
	var getServerStylisCache = isBrowser$3 ? undefined : weakMemoize(function () {
	  return memoize(function () {
	    var cache = {};
	    return function (name) {
	      return cache[name];
	    };
	  });
	});
	var defaultStylisPlugins = [prefixer];

	var createCache = function createCache(options) {
	  var key = options.key;

	  if (isBrowser$3 && key === 'css') {
	    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
	    // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
	    // note this very very intentionally targets all style elements regardless of the key to ensure
	    // that creating a cache works inside of render of a React component

	    Array.prototype.forEach.call(ssrStyles, function (node) {
	      // we want to only move elements which have a space in the data-emotion attribute value
	      // because that indicates that it is an Emotion 11 server-side rendered style elements
	      // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
	      // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
	      // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
	      // will not result in the Emotion 10 styles being destroyed
	      var dataEmotionAttribute = node.getAttribute('data-emotion');

	      if (dataEmotionAttribute.indexOf(' ') === -1) {
	        return;
	      }
	      document.head.appendChild(node);
	      node.setAttribute('data-s', '');
	    });
	  }

	  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;

	  var inserted = {};
	  var container;
	  var nodesToHydrate = [];

	  if (isBrowser$3) {
	    container = options.container || document.head;
	    Array.prototype.forEach.call( // this means we will ignore elements which don't have a space in them which
	    // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
	    document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node) {
	      var attrib = node.getAttribute("data-emotion").split(' '); // $FlowFixMe

	      for (var i = 1; i < attrib.length; i++) {
	        inserted[attrib[i]] = true;
	      }

	      nodesToHydrate.push(node);
	    });
	  }

	  var _insert;

	  var omnipresentPlugins = [compat, removeLabel];

	  if (isBrowser$3) {
	    var currentSheet;
	    var finalizingPlugins = [stringify, rulesheet(function (rule) {
	      currentSheet.insert(rule);
	    })];
	    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));

	    var stylis = function stylis(styles) {
	      return serialize(compile(styles), serializer);
	    };

	    _insert = function insert(selector, serialized, sheet, shouldCache) {
	      currentSheet = sheet;

	      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);

	      if (shouldCache) {
	        cache.inserted[serialized.name] = true;
	      }
	    };
	  } else {
	    var _finalizingPlugins = [stringify];

	    var _serializer = middleware(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));

	    var _stylis = function _stylis(styles) {
	      return serialize(compile(styles), _serializer);
	    }; // $FlowFixMe


	    var serverStylisCache = getServerStylisCache(stylisPlugins)(key);

	    var getRules = function getRules(selector, serialized) {
	      var name = serialized.name;

	      if (serverStylisCache[name] === undefined) {
	        serverStylisCache[name] = _stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
	      }

	      return serverStylisCache[name];
	    };

	    _insert = function _insert(selector, serialized, sheet, shouldCache) {
	      var name = serialized.name;
	      var rules = getRules(selector, serialized);

	      if (cache.compat === undefined) {
	        // in regular mode, we don't set the styles on the inserted cache
	        // since we don't need to and that would be wasting memory
	        // we return them so that they are rendered in a style tag
	        if (shouldCache) {
	          cache.inserted[name] = true;
	        }

	        return rules;
	      } else {
	        // in compat mode, we put the styles on the inserted cache so
	        // that emotion-server can pull out the styles
	        // except when we don't want to cache it which was in Global but now
	        // is nowhere but we don't want to do a major right now
	        // and just in case we're going to leave the case here
	        // it's also not affecting client side bundle size
	        // so it's really not a big deal
	        if (shouldCache) {
	          cache.inserted[name] = rules;
	        } else {
	          return rules;
	        }
	      }
	    };
	  }

	  var cache = {
	    key: key,
	    sheet: new StyleSheet({
	      key: key,
	      container: container,
	      nonce: options.nonce,
	      speedy: options.speedy,
	      prepend: options.prepend,
	      insertionPoint: options.insertionPoint
	    }),
	    nonce: options.nonce,
	    inserted: inserted,
	    registered: {},
	    insert: _insert
	  };
	  cache.sheet.hydrate(nodesToHydrate);
	  return cache;
	};

	var reactIs$1 = {exports: {}};

	var reactIs_production_min = {};

	/** @license React v16.13.1
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
	Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w$1=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
	function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k;reactIs_production_min.ContextProvider=h;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d;
	reactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A;reactIs_production_min.isContextConsumer=function(a){return z(a)===k};reactIs_production_min.isContextProvider=function(a){return z(a)===h};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};
	reactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};
	reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w$1||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min.typeOf=z;

	{
	  reactIs$1.exports = reactIs_production_min;
	}

	var reactIsExports = reactIs$1.exports;

	var reactIs = reactIsExports;
	var FORWARD_REF_STATICS = {
	  '$$typeof': true,
	  render: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true
	};
	var MEMO_STATICS = {
	  '$$typeof': true,
	  compare: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true,
	  type: true
	};
	var TYPE_STATICS = {};
	TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
	TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

	var isBrowser$2 = typeof document !== 'undefined';
	function getRegisteredStyles(registered, registeredStyles, classNames) {
	  var rawClassName = '';
	  classNames.split(' ').forEach(function (className) {
	    if (registered[className] !== undefined) {
	      registeredStyles.push(registered[className] + ";");
	    } else {
	      rawClassName += className + " ";
	    }
	  });
	  return rawClassName;
	}
	var registerStyles = function registerStyles(cache, serialized, isStringTag) {
	  var className = cache.key + "-" + serialized.name;

	  if ( // we only need to add the styles to the registered cache if the
	  // class name could be used further down
	  // the tree but if it's a string tag, we know it won't
	  // so we don't have to add it to registered cache.
	  // this improves memory usage since we can avoid storing the whole style string
	  (isStringTag === false || // we need to always store it if we're in compat mode and
	  // in node since emotion-server relies on whether a style is in
	  // the registered cache to know whether a style is global or not
	  // also, note that this check will be dead code eliminated in the browser
	  isBrowser$2 === false && cache.compat !== undefined) && cache.registered[className] === undefined) {
	    cache.registered[className] = serialized.styles;
	  }
	};
	var insertStyles = function insertStyles(cache, serialized, isStringTag) {
	  registerStyles(cache, serialized, isStringTag);
	  var className = cache.key + "-" + serialized.name;

	  if (cache.inserted[serialized.name] === undefined) {
	    var stylesForSSR = '';
	    var current = serialized;

	    do {
	      var maybeStyles = cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);

	      if (!isBrowser$2 && maybeStyles !== undefined) {
	        stylesForSSR += maybeStyles;
	      }

	      current = current.next;
	    } while (current !== undefined);

	    if (!isBrowser$2 && stylesForSSR.length !== 0) {
	      return stylesForSSR;
	    }
	  }
	};

	/* eslint-disable */
	// Inspired by https://github.com/garycourt/murmurhash-js
	// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
	function murmur2(str) {
	  // 'm' and 'r' are mixing constants generated offline.
	  // They're not really 'magic', they just happen to work well.
	  // const m = 0x5bd1e995;
	  // const r = 24;
	  // Initialize the hash
	  var h = 0; // Mix 4 bytes at a time into the hash

	  var k,
	      i = 0,
	      len = str.length;

	  for (; len >= 4; ++i, len -= 4) {
	    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
	    k =
	    /* Math.imul(k, m): */
	    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
	    k ^=
	    /* k >>> r: */
	    k >>> 24;
	    h =
	    /* Math.imul(k, m): */
	    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
	    /* Math.imul(h, m): */
	    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  } // Handle the last few bytes of the input array


	  switch (len) {
	    case 3:
	      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

	    case 2:
	      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

	    case 1:
	      h ^= str.charCodeAt(i) & 0xff;
	      h =
	      /* Math.imul(h, m): */
	      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  } // Do a few final mixes of the hash to ensure the last few
	  // bytes are well-incorporated.


	  h ^= h >>> 13;
	  h =
	  /* Math.imul(h, m): */
	  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  return ((h ^ h >>> 15) >>> 0).toString(36);
	}

	var unitlessKeys = {
	  animationIterationCount: 1,
	  aspectRatio: 1,
	  borderImageOutset: 1,
	  borderImageSlice: 1,
	  borderImageWidth: 1,
	  boxFlex: 1,
	  boxFlexGroup: 1,
	  boxOrdinalGroup: 1,
	  columnCount: 1,
	  columns: 1,
	  flex: 1,
	  flexGrow: 1,
	  flexPositive: 1,
	  flexShrink: 1,
	  flexNegative: 1,
	  flexOrder: 1,
	  gridRow: 1,
	  gridRowEnd: 1,
	  gridRowSpan: 1,
	  gridRowStart: 1,
	  gridColumn: 1,
	  gridColumnEnd: 1,
	  gridColumnSpan: 1,
	  gridColumnStart: 1,
	  msGridRow: 1,
	  msGridRowSpan: 1,
	  msGridColumn: 1,
	  msGridColumnSpan: 1,
	  fontWeight: 1,
	  lineHeight: 1,
	  opacity: 1,
	  order: 1,
	  orphans: 1,
	  tabSize: 1,
	  widows: 1,
	  zIndex: 1,
	  zoom: 1,
	  WebkitLineClamp: 1,
	  // SVG-related properties
	  fillOpacity: 1,
	  floodOpacity: 1,
	  stopOpacity: 1,
	  strokeDasharray: 1,
	  strokeDashoffset: 1,
	  strokeMiterlimit: 1,
	  strokeOpacity: 1,
	  strokeWidth: 1
	};

	var hyphenateRegex = /[A-Z]|^ms/g;
	var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

	var isCustomProperty = function isCustomProperty(property) {
	  return property.charCodeAt(1) === 45;
	};

	var isProcessableValue = function isProcessableValue(value) {
	  return value != null && typeof value !== 'boolean';
	};

	var processStyleName = /* #__PURE__ */memoize(function (styleName) {
	  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
	});

	var processStyleValue = function processStyleValue(key, value) {
	  switch (key) {
	    case 'animation':
	    case 'animationName':
	      {
	        if (typeof value === 'string') {
	          return value.replace(animationRegex, function (match, p1, p2) {
	            cursor = {
	              name: p1,
	              styles: p2,
	              next: cursor
	            };
	            return p1;
	          });
	        }
	      }
	  }

	  if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
	    return value + 'px';
	  }

	  return value;
	};

	var noComponentSelectorMessage = 'Component selectors can only be used in conjunction with ' + '@emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware ' + 'compiler transform.';

	function handleInterpolation(mergedProps, registered, interpolation) {
	  if (interpolation == null) {
	    return '';
	  }

	  if (interpolation.__emotion_styles !== undefined) {

	    return interpolation;
	  }

	  switch (typeof interpolation) {
	    case 'boolean':
	      {
	        return '';
	      }

	    case 'object':
	      {
	        if (interpolation.anim === 1) {
	          cursor = {
	            name: interpolation.name,
	            styles: interpolation.styles,
	            next: cursor
	          };
	          return interpolation.name;
	        }

	        if (interpolation.styles !== undefined) {
	          var next = interpolation.next;

	          if (next !== undefined) {
	            // not the most efficient thing ever but this is a pretty rare case
	            // and there will be very few iterations of this generally
	            while (next !== undefined) {
	              cursor = {
	                name: next.name,
	                styles: next.styles,
	                next: cursor
	              };
	              next = next.next;
	            }
	          }

	          var styles = interpolation.styles + ";";

	          return styles;
	        }

	        return createStringFromObject(mergedProps, registered, interpolation);
	      }

	    case 'function':
	      {
	        if (mergedProps !== undefined) {
	          var previousCursor = cursor;
	          var result = interpolation(mergedProps);
	          cursor = previousCursor;
	          return handleInterpolation(mergedProps, registered, result);
	        }

	        break;
	      }
	  } // finalize string values (regular strings and functions interpolated into css calls)


	  if (registered == null) {
	    return interpolation;
	  }

	  var cached = registered[interpolation];
	  return cached !== undefined ? cached : interpolation;
	}

	function createStringFromObject(mergedProps, registered, obj) {
	  var string = '';

	  if (Array.isArray(obj)) {
	    for (var i = 0; i < obj.length; i++) {
	      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
	    }
	  } else {
	    for (var _key in obj) {
	      var value = obj[_key];

	      if (typeof value !== 'object') {
	        if (registered != null && registered[value] !== undefined) {
	          string += _key + "{" + registered[value] + "}";
	        } else if (isProcessableValue(value)) {
	          string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
	        }
	      } else {
	        if (_key === 'NO_COMPONENT_SELECTOR' && "production" !== 'production') {
	          throw new Error(noComponentSelectorMessage);
	        }

	        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
	          for (var _i = 0; _i < value.length; _i++) {
	            if (isProcessableValue(value[_i])) {
	              string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
	            }
	          }
	        } else {
	          var interpolated = handleInterpolation(mergedProps, registered, value);

	          switch (_key) {
	            case 'animation':
	            case 'animationName':
	              {
	                string += processStyleName(_key) + ":" + interpolated + ";";
	                break;
	              }

	            default:
	              {

	                string += _key + "{" + interpolated + "}";
	              }
	          }
	        }
	      }
	    }
	  }

	  return string;
	}

	var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
	// keyframes are stored on the SerializedStyles object as a linked list


	var cursor;
	var serializeStyles = function serializeStyles(args, registered, mergedProps) {
	  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
	    return args[0];
	  }

	  var stringMode = true;
	  var styles = '';
	  cursor = undefined;
	  var strings = args[0];

	  if (strings == null || strings.raw === undefined) {
	    stringMode = false;
	    styles += handleInterpolation(mergedProps, registered, strings);
	  } else {

	    styles += strings[0];
	  } // we start at 1 since we've already handled the first arg


	  for (var i = 1; i < args.length; i++) {
	    styles += handleInterpolation(mergedProps, registered, args[i]);

	    if (stringMode) {

	      styles += strings[i];
	    }
	  }


	  labelPattern.lastIndex = 0;
	  var identifierName = '';
	  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

	  while ((match = labelPattern.exec(styles)) !== null) {
	    identifierName += '-' + // $FlowFixMe we know it's not null
	    match[1];
	  }

	  var name = murmur2(styles) + identifierName;

	  return {
	    name: name,
	    styles: styles,
	    next: cursor
	  };
	};

	var isBrowser$1 = typeof document !== 'undefined';

	var syncFallback = function syncFallback(create) {
	  return create();
	};

	var useInsertionEffect = e__namespace['useInsertion' + 'Effect'] ? e__namespace['useInsertion' + 'Effect'] : false;
	var useInsertionEffectAlwaysWithSyncFallback = !isBrowser$1 ? syncFallback : useInsertionEffect || syncFallback;

	var isBrowser = typeof document !== 'undefined';
	var hasOwnProperty = {}.hasOwnProperty;

	var EmotionCacheContext = /* #__PURE__ */e__namespace.createContext( // we're doing this to avoid preconstruct's dead code elimination in this one case
	// because this module is primarily intended for the browser and node
	// but it's also required in react native and similar environments sometimes
	// and we could have a special build just for that
	// but this is much easier and the native packages
	// might use a different theme context in the future anyway
	typeof HTMLElement !== 'undefined' ? /* #__PURE__ */createCache({
	  key: 'css'
	}) : null);

	EmotionCacheContext.Provider;

	var withEmotionCache = function withEmotionCache(func) {
	  // $FlowFixMe
	  return /*#__PURE__*/e$1.forwardRef(function (props, ref) {
	    // the cache will never be null in the browser
	    var cache = e$1.useContext(EmotionCacheContext);
	    return func(props, cache, ref);
	  });
	};

	if (!isBrowser) {
	  withEmotionCache = function withEmotionCache(func) {
	    return function (props) {
	      var cache = e$1.useContext(EmotionCacheContext);

	      if (cache === null) {
	        // yes, we're potentially creating this on every render
	        // it doesn't actually matter though since it's only on the server
	        // so there will only every be a single render
	        // that could change in the future because of suspense and etc. but for now,
	        // this works and i don't want to optimise for a future thing that we aren't sure about
	        cache = createCache({
	          key: 'css'
	        });
	        return /*#__PURE__*/e__namespace.createElement(EmotionCacheContext.Provider, {
	          value: cache
	        }, func(props, cache));
	      } else {
	        return func(props, cache);
	      }
	    };
	  };
	}

	var ThemeContext = /* #__PURE__ */e__namespace.createContext({});

	var typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';
	var createEmotionProps = function createEmotionProps(type, props) {

	  var newProps = {};

	  for (var key in props) {
	    if (hasOwnProperty.call(props, key)) {
	      newProps[key] = props[key];
	    }
	  }

	  newProps[typePropName] = type; // For performance, only call getLabelFromStackTrace in development and when

	  return newProps;
	};

	var Insertion = function Insertion(_ref) {
	  var cache = _ref.cache,
	      serialized = _ref.serialized,
	      isStringTag = _ref.isStringTag;
	  registerStyles(cache, serialized, isStringTag);
	  var rules = useInsertionEffectAlwaysWithSyncFallback(function () {
	    return insertStyles(cache, serialized, isStringTag);
	  });

	  if (!isBrowser && rules !== undefined) {
	    var _ref2;

	    var serializedNames = serialized.name;
	    var next = serialized.next;

	    while (next !== undefined) {
	      serializedNames += ' ' + next.name;
	      next = next.next;
	    }

	    return /*#__PURE__*/e__namespace.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
	      __html: rules
	    }, _ref2.nonce = cache.sheet.nonce, _ref2));
	  }

	  return null;
	};

	var Emotion = /* #__PURE__ */withEmotionCache(function (props, cache, ref) {
	  var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works
	  // not passing the registered cache to serializeStyles because it would
	  // make certain babel optimisations not possible

	  if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) {
	    cssProp = cache.registered[cssProp];
	  }

	  var WrappedComponent = props[typePropName];
	  var registeredStyles = [cssProp];
	  var className = '';

	  if (typeof props.className === 'string') {
	    className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
	  } else if (props.className != null) {
	    className = props.className + " ";
	  }

	  var serialized = serializeStyles(registeredStyles, undefined, e__namespace.useContext(ThemeContext));

	  className += cache.key + "-" + serialized.name;
	  var newProps = {};

	  for (var key in props) {
	    if (hasOwnProperty.call(props, key) && key !== 'css' && key !== typePropName && ("production" === 'production' )) {
	      newProps[key] = props[key];
	    }
	  }

	  newProps.ref = ref;
	  newProps.className = className;
	  return /*#__PURE__*/e__namespace.createElement(e__namespace.Fragment, null, /*#__PURE__*/e__namespace.createElement(Insertion, {
	    cache: cache,
	    serialized: serialized,
	    isStringTag: typeof WrappedComponent === 'string'
	  }), /*#__PURE__*/e__namespace.createElement(WrappedComponent, newProps));
	});

	var Emotion$1 = Emotion;

	var jsx = function jsx(type, props) {
	  var args = arguments;

	  if (props == null || !hasOwnProperty.call(props, 'css')) {
	    // $FlowFixMe
	    return e__namespace.createElement.apply(undefined, args);
	  }

	  var argsLength = args.length;
	  var createElementArgArray = new Array(argsLength);
	  createElementArgArray[0] = Emotion$1;
	  createElementArgArray[1] = createEmotionProps(type, props);

	  for (var i = 2; i < argsLength; i++) {
	    createElementArgArray[i] = args[i];
	  } // $FlowFixMe


	  return e__namespace.createElement.apply(null, createElementArgArray);
	};

	function css$2() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  return serializeStyles(args);
	}

	var keyframes = function keyframes() {
	  var insertable = css$2.apply(void 0, arguments);
	  var name = "animation-" + insertable.name; // $FlowFixMe

	  return {
	    name: name,
	    styles: "@keyframes " + name + "{" + insertable.styles + "}",
	    anim: 1,
	    toString: function toString() {
	      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
	    }
	  };
	};

	function _taggedTemplateLiteral(strings, raw) {
	  if (!raw) {
	    raw = strings.slice(0);
	  }
	  return Object.freeze(Object.defineProperties(strings, {
	    raw: {
	      value: Object.freeze(raw)
	    }
	  }));
	}

	function rectToClientRect(rect) {
	  return {
	    ...rect,
	    top: rect.y,
	    left: rect.x,
	    right: rect.x + rect.width,
	    bottom: rect.y + rect.height
	  };
	}

	function getWindow(node) {
	  var _node$ownerDocument;
	  return (node == null ? void 0 : (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
	}

	function getComputedStyle$1$1(element) {
	  return getWindow(element).getComputedStyle(element);
	}

	function isNode(value) {
	  return value instanceof getWindow(value).Node;
	}
	function getNodeName(node) {
	  if (isNode(node)) {
	    return (node.nodeName || '').toLowerCase();
	  }
	  // Mocked nodes in testing environments may not be instances of Node. By
	  // returning `#document` an infinite loop won't occur.
	  // https://github.com/floating-ui/floating-ui/issues/2317
	  return '#document';
	}

	function isHTMLElement(value) {
	  return value instanceof getWindow(value).HTMLElement;
	}
	function isShadowRoot(node) {
	  // Browsers without `ShadowRoot` support.
	  if (typeof ShadowRoot === 'undefined') {
	    return false;
	  }
	  return node instanceof getWindow(node).ShadowRoot || node instanceof ShadowRoot;
	}
	function isOverflowElement(element) {
	  const {
	    overflow,
	    overflowX,
	    overflowY,
	    display
	  } = getComputedStyle$1$1(element);
	  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);
	}
	function isSafari() {
	  if (typeof CSS === 'undefined' || !CSS.supports) return false;
	  return CSS.supports('-webkit-backdrop-filter', 'none');
	}
	function isLastTraversableNode(node) {
	  return ['html', 'body', '#document'].includes(getNodeName(node));
	}

	const min = Math.min;
	const max = Math.max;
	const round$1 = Math.round;
	const floor = Math.floor;
	const createCoords = v => ({
	  x: v,
	  y: v
	});

	function getCssDimensions(element) {
	  const css = getComputedStyle$1$1(element);
	  // In testing environments, the `width` and `height` properties are empty
	  // strings for SVG elements, returning NaN. Fallback to `0` in this case.
	  let width = parseFloat(css.width) || 0;
	  let height = parseFloat(css.height) || 0;
	  const hasOffset = isHTMLElement(element);
	  const offsetWidth = hasOffset ? element.offsetWidth : width;
	  const offsetHeight = hasOffset ? element.offsetHeight : height;
	  const shouldFallback = round$1(width) !== offsetWidth || round$1(height) !== offsetHeight;
	  if (shouldFallback) {
	    width = offsetWidth;
	    height = offsetHeight;
	  }
	  return {
	    width,
	    height,
	    $: shouldFallback
	  };
	}

	function isElement(value) {
	  return value instanceof getWindow(value).Element;
	}

	function unwrapElement(element) {
	  return !isElement(element) ? element.contextElement : element;
	}

	function getScale(element) {
	  const domElement = unwrapElement(element);
	  if (!isHTMLElement(domElement)) {
	    return createCoords(1);
	  }
	  const rect = domElement.getBoundingClientRect();
	  const {
	    width,
	    height,
	    $
	  } = getCssDimensions(domElement);
	  let x = ($ ? round$1(rect.width) : rect.width) / width;
	  let y = ($ ? round$1(rect.height) : rect.height) / height;

	  // 0, NaN, or Infinity should always fallback to 1.

	  if (!x || !Number.isFinite(x)) {
	    x = 1;
	  }
	  if (!y || !Number.isFinite(y)) {
	    y = 1;
	  }
	  return {
	    x,
	    y
	  };
	}

	const noOffsets = /*#__PURE__*/createCoords(0);
	function getVisualOffsets(element) {
	  const win = getWindow(element);
	  if (!isSafari() || !win.visualViewport) {
	    return noOffsets;
	  }
	  return {
	    x: win.visualViewport.offsetLeft,
	    y: win.visualViewport.offsetTop
	  };
	}
	function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
	  if (isFixed === void 0) {
	    isFixed = false;
	  }
	  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
	    return false;
	  }
	  return isFixed;
	}

	function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
	  if (includeScale === void 0) {
	    includeScale = false;
	  }
	  if (isFixedStrategy === void 0) {
	    isFixedStrategy = false;
	  }
	  const clientRect = element.getBoundingClientRect();
	  const domElement = unwrapElement(element);
	  let scale = createCoords(1);
	  if (includeScale) {
	    if (offsetParent) {
	      if (isElement(offsetParent)) {
	        scale = getScale(offsetParent);
	      }
	    } else {
	      scale = getScale(element);
	    }
	  }
	  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
	  let x = (clientRect.left + visualOffsets.x) / scale.x;
	  let y = (clientRect.top + visualOffsets.y) / scale.y;
	  let width = clientRect.width / scale.x;
	  let height = clientRect.height / scale.y;
	  if (domElement) {
	    const win = getWindow(domElement);
	    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
	    let currentIFrame = win.frameElement;
	    while (currentIFrame && offsetParent && offsetWin !== win) {
	      const iframeScale = getScale(currentIFrame);
	      const iframeRect = currentIFrame.getBoundingClientRect();
	      const css = getComputedStyle(currentIFrame);
	      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
	      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
	      x *= iframeScale.x;
	      y *= iframeScale.y;
	      width *= iframeScale.x;
	      height *= iframeScale.y;
	      x += left;
	      y += top;
	      currentIFrame = getWindow(currentIFrame).frameElement;
	    }
	  }
	  return rectToClientRect({
	    width,
	    height,
	    x,
	    y
	  });
	}

	function getDocumentElement(node) {
	  return ((isNode(node) ? node.ownerDocument : node.document) || window.document).documentElement;
	}

	function getParentNode(node) {
	  if (getNodeName(node) === 'html') {
	    return node;
	  }
	  const result =
	  // Step into the shadow DOM of the parent of a slotted node.
	  node.assignedSlot ||
	  // DOM Element detected.
	  node.parentNode ||
	  // ShadowRoot detected.
	  isShadowRoot(node) && node.host ||
	  // Fallback.
	  getDocumentElement(node);
	  return isShadowRoot(result) ? result.host : result;
	}

	function getNearestOverflowAncestor(node) {
	  const parentNode = getParentNode(node);
	  if (isLastTraversableNode(parentNode)) {
	    return node.ownerDocument ? node.ownerDocument.body : node.body;
	  }
	  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
	    return parentNode;
	  }
	  return getNearestOverflowAncestor(parentNode);
	}

	function getOverflowAncestors(node, list) {
	  var _node$ownerDocument;
	  if (list === void 0) {
	    list = [];
	  }
	  const scrollableAncestor = getNearestOverflowAncestor(node);
	  const isBody = scrollableAncestor === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body);
	  const win = getWindow(scrollableAncestor);
	  if (isBody) {
	    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);
	  }
	  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));
	}

	// https://samthor.au/2021/observing-dom/
	function observeMove(element, onMove) {
	  let io = null;
	  let timeoutId;
	  const root = getDocumentElement(element);
	  function cleanup() {
	    clearTimeout(timeoutId);
	    io && io.disconnect();
	    io = null;
	  }
	  function refresh(skip, threshold) {
	    if (skip === void 0) {
	      skip = false;
	    }
	    if (threshold === void 0) {
	      threshold = 1;
	    }
	    cleanup();
	    const {
	      left,
	      top,
	      width,
	      height
	    } = element.getBoundingClientRect();
	    if (!skip) {
	      onMove();
	    }
	    if (!width || !height) {
	      return;
	    }
	    const insetTop = floor(top);
	    const insetRight = floor(root.clientWidth - (left + width));
	    const insetBottom = floor(root.clientHeight - (top + height));
	    const insetLeft = floor(left);
	    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
	    const options = {
	      rootMargin,
	      threshold: max(0, min(1, threshold)) || 1
	    };
	    let isFirstUpdate = true;
	    function handleObserve(entries) {
	      const ratio = entries[0].intersectionRatio;
	      if (ratio !== threshold) {
	        if (!isFirstUpdate) {
	          return refresh();
	        }
	        if (!ratio) {
	          timeoutId = setTimeout(() => {
	            refresh(false, 1e-7);
	          }, 100);
	        } else {
	          refresh(false, ratio);
	        }
	      }
	      isFirstUpdate = false;
	    }

	    // Older browsers don't support a `document` as the root and will throw an
	    // error.
	    try {
	      io = new IntersectionObserver(handleObserve, {
	        ...options,
	        // Handle <iframe>s
	        root: root.ownerDocument
	      });
	    } catch (e) {
	      io = new IntersectionObserver(handleObserve, options);
	    }
	    io.observe(element);
	  }
	  refresh(true);
	  return cleanup;
	}

	/**
	 * Automatically updates the position of the floating element when necessary.
	 * Should only be called when the floating element is mounted on the DOM or
	 * visible on the screen.
	 * @returns cleanup function that should be invoked when the floating element is
	 * removed from the DOM or hidden from the screen.
	 * @see https://floating-ui.com/docs/autoUpdate
	 */
	function autoUpdate(reference, floating, update, options) {
	  if (options === void 0) {
	    options = {};
	  }
	  const {
	    ancestorScroll = true,
	    ancestorResize = true,
	    elementResize = typeof ResizeObserver === 'function',
	    layoutShift = typeof IntersectionObserver === 'function',
	    animationFrame = false
	  } = options;
	  const referenceEl = unwrapElement(reference);
	  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];
	  ancestors.forEach(ancestor => {
	    ancestorScroll && ancestor.addEventListener('scroll', update, {
	      passive: true
	    });
	    ancestorResize && ancestor.addEventListener('resize', update);
	  });
	  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
	  let reobserveFrame = -1;
	  let resizeObserver = null;
	  if (elementResize) {
	    resizeObserver = new ResizeObserver(_ref => {
	      let [firstEntry] = _ref;
	      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
	        // Prevent update loops when using the `size` middleware.
	        // https://github.com/floating-ui/floating-ui/issues/1740
	        resizeObserver.unobserve(floating);
	        cancelAnimationFrame(reobserveFrame);
	        reobserveFrame = requestAnimationFrame(() => {
	          resizeObserver && resizeObserver.observe(floating);
	        });
	      }
	      update();
	    });
	    if (referenceEl && !animationFrame) {
	      resizeObserver.observe(referenceEl);
	    }
	    resizeObserver.observe(floating);
	  }
	  let frameId;
	  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
	  if (animationFrame) {
	    frameLoop();
	  }
	  function frameLoop() {
	    const nextRefRect = getBoundingClientRect(reference);
	    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
	      update();
	    }
	    prevRefRect = nextRefRect;
	    frameId = requestAnimationFrame(frameLoop);
	  }
	  update();
	  return () => {
	    ancestors.forEach(ancestor => {
	      ancestorScroll && ancestor.removeEventListener('scroll', update);
	      ancestorResize && ancestor.removeEventListener('resize', update);
	    });
	    cleanupIo && cleanupIo();
	    resizeObserver && resizeObserver.disconnect();
	    resizeObserver = null;
	    if (animationFrame) {
	      cancelAnimationFrame(frameId);
	    }
	  };
	}

	var index = typeof document !== 'undefined' ? e$1.useLayoutEffect : e$1.useEffect;

	var _excluded$3 = ["className", "clearValue", "cx", "getStyles", "getClassNames", "getValue", "hasValue", "isMulti", "isRtl", "options", "selectOption", "selectProps", "setValue", "theme"];
	// ==============================
	// NO OP
	// ==============================

	var noop$1 = function noop() {};

	// ==============================
	// Class Name Prefixer
	// ==============================

	/**
	 String representation of component state for styling with class names.

	 Expects an array of strings OR a string/object pair:
	 - className(['comp', 'comp-arg', 'comp-arg-2'])
	   @returns 'react-select__comp react-select__comp-arg react-select__comp-arg-2'
	 - className('comp', { some: true, state: false })
	   @returns 'react-select__comp react-select__comp--some'
	*/
	function applyPrefixToName(prefix, name) {
	  if (!name) {
	    return prefix;
	  } else if (name[0] === '-') {
	    return prefix + name;
	  } else {
	    return prefix + '__' + name;
	  }
	}
	function classNames(prefix, state) {
	  for (var _len = arguments.length, classNameList = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	    classNameList[_key - 2] = arguments[_key];
	  }
	  var arr = [].concat(classNameList);
	  if (state && prefix) {
	    for (var key in state) {
	      if (state.hasOwnProperty(key) && state[key]) {
	        arr.push("".concat(applyPrefixToName(prefix, key)));
	      }
	    }
	  }
	  return arr.filter(function (i) {
	    return i;
	  }).map(function (i) {
	    return String(i).trim();
	  }).join(' ');
	}
	// ==============================
	// Clean Value
	// ==============================

	var cleanValue = function cleanValue(value) {
	  if (isArray$1(value)) return value.filter(Boolean);
	  if (_typeof(value) === 'object' && value !== null) return [value];
	  return [];
	};

	// ==============================
	// Clean Common Props
	// ==============================

	var cleanCommonProps = function cleanCommonProps(props) {
	  //className
	  props.className;
	    props.clearValue;
	    props.cx;
	    props.getStyles;
	    props.getClassNames;
	    props.getValue;
	    props.hasValue;
	    props.isMulti;
	    props.isRtl;
	    props.options;
	    props.selectOption;
	    props.selectProps;
	    props.setValue;
	    props.theme;
	    var innerProps = _objectWithoutProperties(props, _excluded$3);
	  return _objectSpread2({}, innerProps);
	};

	// ==============================
	// Get Style Props
	// ==============================

	var getStyleProps = function getStyleProps(props, name, classNamesState) {
	  var cx = props.cx,
	    getStyles = props.getStyles,
	    getClassNames = props.getClassNames,
	    className = props.className;
	  return {
	    css: getStyles(name, props),
	    className: cx(classNamesState !== null && classNamesState !== void 0 ? classNamesState : {}, getClassNames(name, props), className)
	  };
	};

	// ==============================
	// Scroll Helpers
	// ==============================

	function isDocumentElement(el) {
	  return [document.documentElement, document.body, window].indexOf(el) > -1;
	}

	// Normalized Scroll Top
	// ------------------------------

	function normalizedHeight(el) {
	  if (isDocumentElement(el)) {
	    return window.innerHeight;
	  }
	  return el.clientHeight;
	}

	// Normalized scrollTo & scrollTop
	// ------------------------------

	function getScrollTop(el) {
	  if (isDocumentElement(el)) {
	    return window.pageYOffset;
	  }
	  return el.scrollTop;
	}
	function scrollTo(el, top) {
	  // with a scroll distance, we perform scroll on the element
	  if (isDocumentElement(el)) {
	    window.scrollTo(0, top);
	    return;
	  }
	  el.scrollTop = top;
	}

	// Get Scroll Parent
	// ------------------------------

	function getScrollParent(element) {
	  var style = getComputedStyle(element);
	  var excludeStaticParent = style.position === 'absolute';
	  var overflowRx = /(auto|scroll)/;
	  if (style.position === 'fixed') return document.documentElement;
	  for (var parent = element; parent = parent.parentElement;) {
	    style = getComputedStyle(parent);
	    if (excludeStaticParent && style.position === 'static') {
	      continue;
	    }
	    if (overflowRx.test(style.overflow + style.overflowY + style.overflowX)) {
	      return parent;
	    }
	  }
	  return document.documentElement;
	}

	// Animated Scroll To
	// ------------------------------

	/**
	  @param t: time (elapsed)
	  @param b: initial value
	  @param c: amount of change
	  @param d: duration
	*/
	function easeOutCubic(t, b, c, d) {
	  return c * ((t = t / d - 1) * t * t + 1) + b;
	}
	function animatedScrollTo(element, to) {
	  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;
	  var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : noop$1;
	  var start = getScrollTop(element);
	  var change = to - start;
	  var increment = 10;
	  var currentTime = 0;
	  function animateScroll() {
	    currentTime += increment;
	    var val = easeOutCubic(currentTime, start, change, duration);
	    scrollTo(element, val);
	    if (currentTime < duration) {
	      window.requestAnimationFrame(animateScroll);
	    } else {
	      callback(element);
	    }
	  }
	  animateScroll();
	}

	// Scroll Into View
	// ------------------------------

	function scrollIntoView(menuEl, focusedEl) {
	  var menuRect = menuEl.getBoundingClientRect();
	  var focusedRect = focusedEl.getBoundingClientRect();
	  var overScroll = focusedEl.offsetHeight / 3;
	  if (focusedRect.bottom + overScroll > menuRect.bottom) {
	    scrollTo(menuEl, Math.min(focusedEl.offsetTop + focusedEl.clientHeight - menuEl.offsetHeight + overScroll, menuEl.scrollHeight));
	  } else if (focusedRect.top - overScroll < menuRect.top) {
	    scrollTo(menuEl, Math.max(focusedEl.offsetTop - overScroll, 0));
	  }
	}

	// ==============================
	// Get bounding client object
	// ==============================

	// cannot get keys using array notation with DOMRect
	function getBoundingClientObj(element) {
	  var rect = element.getBoundingClientRect();
	  return {
	    bottom: rect.bottom,
	    height: rect.height,
	    left: rect.left,
	    right: rect.right,
	    top: rect.top,
	    width: rect.width
	  };
	}

	// ==============================
	// Touch Capability Detector
	// ==============================

	function isTouchCapable() {
	  try {
	    document.createEvent('TouchEvent');
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	// ==============================
	// Mobile Device Detector
	// ==============================

	function isMobileDevice() {
	  try {
	    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
	  } catch (e) {
	    return false;
	  }
	}

	// ==============================
	// Passive Event Detector
	// ==============================

	// https://github.com/rafgraph/detect-it/blob/main/src/index.ts#L19-L36
	var passiveOptionAccessed = false;
	var options = {
	  get passive() {
	    return passiveOptionAccessed = true;
	  }
	};
	// check for SSR
	var w = typeof window !== 'undefined' ? window : {};
	if (w.addEventListener && w.removeEventListener) {
	  w.addEventListener('p', noop$1, options);
	  w.removeEventListener('p', noop$1, false);
	}
	var supportsPassiveEvents = passiveOptionAccessed;
	function notNullish(item) {
	  return item != null;
	}
	function isArray$1(arg) {
	  return Array.isArray(arg);
	}
	function valueTernary(isMulti, multiValue, singleValue) {
	  return isMulti ? multiValue : singleValue;
	}
	function singleValueAsValue(singleValue) {
	  return singleValue;
	}
	function multiValueAsValue(multiValue) {
	  return multiValue;
	}
	var removeProps = function removeProps(propsObj) {
	  for (var _len2 = arguments.length, properties = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	    properties[_key2 - 1] = arguments[_key2];
	  }
	  var propsMap = Object.entries(propsObj).filter(function (_ref) {
	    var _ref2 = _slicedToArray(_ref, 1),
	      key = _ref2[0];
	    return !properties.includes(key);
	  });
	  return propsMap.reduce(function (newProps, _ref3) {
	    var _ref4 = _slicedToArray(_ref3, 2),
	      key = _ref4[0],
	      val = _ref4[1];
	    newProps[key] = val;
	    return newProps;
	  }, {});
	};

	function getMenuPlacement(_ref) {
	  var preferredMaxHeight = _ref.maxHeight,
	    menuEl = _ref.menuEl,
	    minHeight = _ref.minHeight,
	    preferredPlacement = _ref.placement,
	    shouldScroll = _ref.shouldScroll,
	    isFixedPosition = _ref.isFixedPosition,
	    controlHeight = _ref.controlHeight;
	  var scrollParent = getScrollParent(menuEl);
	  var defaultState = {
	    placement: 'bottom',
	    maxHeight: preferredMaxHeight
	  };

	  // something went wrong, return default state
	  if (!menuEl || !menuEl.offsetParent) return defaultState;

	  // we can't trust `scrollParent.scrollHeight` --> it may increase when
	  // the menu is rendered
	  var _scrollParent$getBoun = scrollParent.getBoundingClientRect(),
	    scrollHeight = _scrollParent$getBoun.height;
	  var _menuEl$getBoundingCl = menuEl.getBoundingClientRect(),
	    menuBottom = _menuEl$getBoundingCl.bottom,
	    menuHeight = _menuEl$getBoundingCl.height,
	    menuTop = _menuEl$getBoundingCl.top;
	  var _menuEl$offsetParent$ = menuEl.offsetParent.getBoundingClientRect(),
	    containerTop = _menuEl$offsetParent$.top;
	  var viewHeight = isFixedPosition ? window.innerHeight : normalizedHeight(scrollParent);
	  var scrollTop = getScrollTop(scrollParent);
	  var marginBottom = parseInt(getComputedStyle(menuEl).marginBottom, 10);
	  var marginTop = parseInt(getComputedStyle(menuEl).marginTop, 10);
	  var viewSpaceAbove = containerTop - marginTop;
	  var viewSpaceBelow = viewHeight - menuTop;
	  var scrollSpaceAbove = viewSpaceAbove + scrollTop;
	  var scrollSpaceBelow = scrollHeight - scrollTop - menuTop;
	  var scrollDown = menuBottom - viewHeight + scrollTop + marginBottom;
	  var scrollUp = scrollTop + menuTop - marginTop;
	  var scrollDuration = 160;
	  switch (preferredPlacement) {
	    case 'auto':
	    case 'bottom':
	      // 1: the menu will fit, do nothing
	      if (viewSpaceBelow >= menuHeight) {
	        return {
	          placement: 'bottom',
	          maxHeight: preferredMaxHeight
	        };
	      }

	      // 2: the menu will fit, if scrolled
	      if (scrollSpaceBelow >= menuHeight && !isFixedPosition) {
	        if (shouldScroll) {
	          animatedScrollTo(scrollParent, scrollDown, scrollDuration);
	        }
	        return {
	          placement: 'bottom',
	          maxHeight: preferredMaxHeight
	        };
	      }

	      // 3: the menu will fit, if constrained
	      if (!isFixedPosition && scrollSpaceBelow >= minHeight || isFixedPosition && viewSpaceBelow >= minHeight) {
	        if (shouldScroll) {
	          animatedScrollTo(scrollParent, scrollDown, scrollDuration);
	        }

	        // we want to provide as much of the menu as possible to the user,
	        // so give them whatever is available below rather than the minHeight.
	        var constrainedHeight = isFixedPosition ? viewSpaceBelow - marginBottom : scrollSpaceBelow - marginBottom;
	        return {
	          placement: 'bottom',
	          maxHeight: constrainedHeight
	        };
	      }

	      // 4. Forked beviour when there isn't enough space below

	      // AUTO: flip the menu, render above
	      if (preferredPlacement === 'auto' || isFixedPosition) {
	        // may need to be constrained after flipping
	        var _constrainedHeight = preferredMaxHeight;
	        var spaceAbove = isFixedPosition ? viewSpaceAbove : scrollSpaceAbove;
	        if (spaceAbove >= minHeight) {
	          _constrainedHeight = Math.min(spaceAbove - marginBottom - controlHeight, preferredMaxHeight);
	        }
	        return {
	          placement: 'top',
	          maxHeight: _constrainedHeight
	        };
	      }

	      // BOTTOM: allow browser to increase scrollable area and immediately set scroll
	      if (preferredPlacement === 'bottom') {
	        if (shouldScroll) {
	          scrollTo(scrollParent, scrollDown);
	        }
	        return {
	          placement: 'bottom',
	          maxHeight: preferredMaxHeight
	        };
	      }
	      break;
	    case 'top':
	      // 1: the menu will fit, do nothing
	      if (viewSpaceAbove >= menuHeight) {
	        return {
	          placement: 'top',
	          maxHeight: preferredMaxHeight
	        };
	      }

	      // 2: the menu will fit, if scrolled
	      if (scrollSpaceAbove >= menuHeight && !isFixedPosition) {
	        if (shouldScroll) {
	          animatedScrollTo(scrollParent, scrollUp, scrollDuration);
	        }
	        return {
	          placement: 'top',
	          maxHeight: preferredMaxHeight
	        };
	      }

	      // 3: the menu will fit, if constrained
	      if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
	        var _constrainedHeight2 = preferredMaxHeight;

	        // we want to provide as much of the menu as possible to the user,
	        // so give them whatever is available below rather than the minHeight.
	        if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
	          _constrainedHeight2 = isFixedPosition ? viewSpaceAbove - marginTop : scrollSpaceAbove - marginTop;
	        }
	        if (shouldScroll) {
	          animatedScrollTo(scrollParent, scrollUp, scrollDuration);
	        }
	        return {
	          placement: 'top',
	          maxHeight: _constrainedHeight2
	        };
	      }

	      // 4. not enough space, the browser WILL NOT increase scrollable area when
	      // absolutely positioned element rendered above the viewport (only below).
	      // Flip the menu, render below
	      return {
	        placement: 'bottom',
	        maxHeight: preferredMaxHeight
	      };
	    default:
	      throw new Error("Invalid placement provided \"".concat(preferredPlacement, "\"."));
	  }
	  return defaultState;
	}

	// Menu Component
	// ------------------------------

	function alignToControl(placement) {
	  var placementToCSSProp = {
	    bottom: 'top',
	    top: 'bottom'
	  };
	  return placement ? placementToCSSProp[placement] : 'bottom';
	}
	var coercePlacement = function coercePlacement(p) {
	  return p === 'auto' ? 'bottom' : p;
	};
	var menuCSS = function menuCSS(_ref2, unstyled) {
	  var _objectSpread2$1;
	  var placement = _ref2.placement,
	    _ref2$theme = _ref2.theme,
	    borderRadius = _ref2$theme.borderRadius,
	    spacing = _ref2$theme.spacing,
	    colors = _ref2$theme.colors;
	  return _objectSpread2((_objectSpread2$1 = {
	    label: 'menu'
	  }, _defineProperty$1(_objectSpread2$1, alignToControl(placement), '100%'), _defineProperty$1(_objectSpread2$1, "position", 'absolute'), _defineProperty$1(_objectSpread2$1, "width", '100%'), _defineProperty$1(_objectSpread2$1, "zIndex", 1), _objectSpread2$1), unstyled ? {} : {
	    backgroundColor: colors.neutral0,
	    borderRadius: borderRadius,
	    boxShadow: '0 0 0 1px hsla(0, 0%, 0%, 0.1), 0 4px 11px hsla(0, 0%, 0%, 0.1)',
	    marginBottom: spacing.menuGutter,
	    marginTop: spacing.menuGutter
	  });
	};
	var PortalPlacementContext = /*#__PURE__*/e$1.createContext(null);

	// NOTE: internal only
	var MenuPlacer = function MenuPlacer(props) {
	  var children = props.children,
	    minMenuHeight = props.minMenuHeight,
	    maxMenuHeight = props.maxMenuHeight,
	    menuPlacement = props.menuPlacement,
	    menuPosition = props.menuPosition,
	    menuShouldScrollIntoView = props.menuShouldScrollIntoView,
	    theme = props.theme;
	  var _ref3 = e$1.useContext(PortalPlacementContext) || {},
	    setPortalPlacement = _ref3.setPortalPlacement;
	  var ref = e$1.useRef(null);
	  var _useState = e$1.useState(maxMenuHeight),
	    _useState2 = _slicedToArray(_useState, 2),
	    maxHeight = _useState2[0],
	    setMaxHeight = _useState2[1];
	  var _useState3 = e$1.useState(null),
	    _useState4 = _slicedToArray(_useState3, 2),
	    placement = _useState4[0],
	    setPlacement = _useState4[1];
	  var controlHeight = theme.spacing.controlHeight;
	  index(function () {
	    var menuEl = ref.current;
	    if (!menuEl) return;

	    // DO NOT scroll if position is fixed
	    var isFixedPosition = menuPosition === 'fixed';
	    var shouldScroll = menuShouldScrollIntoView && !isFixedPosition;
	    var state = getMenuPlacement({
	      maxHeight: maxMenuHeight,
	      menuEl: menuEl,
	      minHeight: minMenuHeight,
	      placement: menuPlacement,
	      shouldScroll: shouldScroll,
	      isFixedPosition: isFixedPosition,
	      controlHeight: controlHeight
	    });
	    setMaxHeight(state.maxHeight);
	    setPlacement(state.placement);
	    setPortalPlacement === null || setPortalPlacement === void 0 ? void 0 : setPortalPlacement(state.placement);
	  }, [maxMenuHeight, menuPlacement, menuPosition, menuShouldScrollIntoView, minMenuHeight, setPortalPlacement, controlHeight]);
	  return children({
	    ref: ref,
	    placerProps: _objectSpread2(_objectSpread2({}, props), {}, {
	      placement: placement || coercePlacement(menuPlacement),
	      maxHeight: maxHeight
	    })
	  });
	};
	var Menu = function Menu(props) {
	  var children = props.children,
	    innerRef = props.innerRef,
	    innerProps = props.innerProps;
	  return jsx("div", _extends({}, getStyleProps(props, 'menu', {
	    menu: true
	  }), {
	    ref: innerRef
	  }, innerProps), children);
	};
	var Menu$1 = Menu;

	// ==============================
	// Menu List
	// ==============================

	var menuListCSS = function menuListCSS(_ref4, unstyled) {
	  var maxHeight = _ref4.maxHeight,
	    baseUnit = _ref4.theme.spacing.baseUnit;
	  return _objectSpread2({
	    maxHeight: maxHeight,
	    overflowY: 'auto',
	    position: 'relative',
	    // required for offset[Height, Top] > keyboard scroll
	    WebkitOverflowScrolling: 'touch'
	  }, unstyled ? {} : {
	    paddingBottom: baseUnit,
	    paddingTop: baseUnit
	  });
	};
	var MenuList = function MenuList(props) {
	  var children = props.children,
	    innerProps = props.innerProps,
	    innerRef = props.innerRef,
	    isMulti = props.isMulti;
	  return jsx("div", _extends({}, getStyleProps(props, 'menuList', {
	    'menu-list': true,
	    'menu-list--is-multi': isMulti
	  }), {
	    ref: innerRef
	  }, innerProps), children);
	};

	// ==============================
	// Menu Notices
	// ==============================

	var noticeCSS = function noticeCSS(_ref5, unstyled) {
	  var _ref5$theme = _ref5.theme,
	    baseUnit = _ref5$theme.spacing.baseUnit,
	    colors = _ref5$theme.colors;
	  return _objectSpread2({
	    textAlign: 'center'
	  }, unstyled ? {} : {
	    color: colors.neutral40,
	    padding: "".concat(baseUnit * 2, "px ").concat(baseUnit * 3, "px")
	  });
	};
	var noOptionsMessageCSS = noticeCSS;
	var loadingMessageCSS = noticeCSS;
	var NoOptionsMessage = function NoOptionsMessage(props) {
	  var children = props.children,
	    innerProps = props.innerProps;
	  return jsx("div", _extends({}, getStyleProps(props, 'noOptionsMessage', {
	    'menu-notice': true,
	    'menu-notice--no-options': true
	  }), innerProps), children);
	};
	NoOptionsMessage.defaultProps = {
	  children: 'No options'
	};
	var LoadingMessage = function LoadingMessage(props) {
	  var children = props.children,
	    innerProps = props.innerProps;
	  return jsx("div", _extends({}, getStyleProps(props, 'loadingMessage', {
	    'menu-notice': true,
	    'menu-notice--loading': true
	  }), innerProps), children);
	};
	LoadingMessage.defaultProps = {
	  children: 'Loading...'
	};

	// ==============================
	// Menu Portal
	// ==============================

	var menuPortalCSS = function menuPortalCSS(_ref6) {
	  var rect = _ref6.rect,
	    offset = _ref6.offset,
	    position = _ref6.position;
	  return {
	    left: rect.left,
	    position: position,
	    top: offset,
	    width: rect.width,
	    zIndex: 1
	  };
	};
	var MenuPortal = function MenuPortal(props) {
	  var appendTo = props.appendTo,
	    children = props.children,
	    controlElement = props.controlElement,
	    innerProps = props.innerProps,
	    menuPlacement = props.menuPlacement,
	    menuPosition = props.menuPosition;
	  var menuPortalRef = e$1.useRef(null);
	  var cleanupRef = e$1.useRef(null);
	  var _useState5 = e$1.useState(coercePlacement(menuPlacement)),
	    _useState6 = _slicedToArray(_useState5, 2),
	    placement = _useState6[0],
	    setPortalPlacement = _useState6[1];
	  var portalPlacementContext = e$1.useMemo(function () {
	    return {
	      setPortalPlacement: setPortalPlacement
	    };
	  }, []);
	  var _useState7 = e$1.useState(null),
	    _useState8 = _slicedToArray(_useState7, 2),
	    computedPosition = _useState8[0],
	    setComputedPosition = _useState8[1];
	  var updateComputedPosition = e$1.useCallback(function () {
	    if (!controlElement) return;
	    var rect = getBoundingClientObj(controlElement);
	    var scrollDistance = menuPosition === 'fixed' ? 0 : window.pageYOffset;
	    var offset = rect[placement] + scrollDistance;
	    if (offset !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.offset) || rect.left !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.left) || rect.width !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.width)) {
	      setComputedPosition({
	        offset: offset,
	        rect: rect
	      });
	    }
	  }, [controlElement, menuPosition, placement, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.offset, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.left, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.width]);
	  index(function () {
	    updateComputedPosition();
	  }, [updateComputedPosition]);
	  var runAutoUpdate = e$1.useCallback(function () {
	    if (typeof cleanupRef.current === 'function') {
	      cleanupRef.current();
	      cleanupRef.current = null;
	    }
	    if (controlElement && menuPortalRef.current) {
	      cleanupRef.current = autoUpdate(controlElement, menuPortalRef.current, updateComputedPosition, {
	        elementResize: 'ResizeObserver' in window
	      });
	    }
	  }, [controlElement, updateComputedPosition]);
	  index(function () {
	    runAutoUpdate();
	  }, [runAutoUpdate]);
	  var setMenuPortalElement = e$1.useCallback(function (menuPortalElement) {
	    menuPortalRef.current = menuPortalElement;
	    runAutoUpdate();
	  }, [runAutoUpdate]);

	  // bail early if required elements aren't present
	  if (!appendTo && menuPosition !== 'fixed' || !computedPosition) return null;

	  // same wrapper element whether fixed or portalled
	  var menuWrapper = jsx("div", _extends({
	    ref: setMenuPortalElement
	  }, getStyleProps(_objectSpread2(_objectSpread2({}, props), {}, {
	    offset: computedPosition.offset,
	    position: menuPosition,
	    rect: computedPosition.rect
	  }), 'menuPortal', {
	    'menu-portal': true
	  }), innerProps), children);
	  return jsx(PortalPlacementContext.Provider, {
	    value: portalPlacementContext
	  }, appendTo ? /*#__PURE__*/require$$0.createPortal(menuWrapper, appendTo) : menuWrapper);
	};

	// ==============================
	// Root Container
	// ==============================

	var containerCSS = function containerCSS(_ref) {
	  var isDisabled = _ref.isDisabled,
	    isRtl = _ref.isRtl;
	  return {
	    label: 'container',
	    direction: isRtl ? 'rtl' : undefined,
	    pointerEvents: isDisabled ? 'none' : undefined,
	    // cancel mouse events when disabled
	    position: 'relative'
	  };
	};
	var SelectContainer = function SelectContainer(props) {
	  var children = props.children,
	    innerProps = props.innerProps,
	    isDisabled = props.isDisabled,
	    isRtl = props.isRtl;
	  return jsx("div", _extends({}, getStyleProps(props, 'container', {
	    '--is-disabled': isDisabled,
	    '--is-rtl': isRtl
	  }), innerProps), children);
	};

	// ==============================
	// Value Container
	// ==============================

	var valueContainerCSS = function valueContainerCSS(_ref2, unstyled) {
	  var spacing = _ref2.theme.spacing,
	    isMulti = _ref2.isMulti,
	    hasValue = _ref2.hasValue,
	    controlShouldRenderValue = _ref2.selectProps.controlShouldRenderValue;
	  return _objectSpread2({
	    alignItems: 'center',
	    display: isMulti && hasValue && controlShouldRenderValue ? 'flex' : 'grid',
	    flex: 1,
	    flexWrap: 'wrap',
	    WebkitOverflowScrolling: 'touch',
	    position: 'relative',
	    overflow: 'hidden'
	  }, unstyled ? {} : {
	    padding: "".concat(spacing.baseUnit / 2, "px ").concat(spacing.baseUnit * 2, "px")
	  });
	};
	var ValueContainer = function ValueContainer(props) {
	  var children = props.children,
	    innerProps = props.innerProps,
	    isMulti = props.isMulti,
	    hasValue = props.hasValue;
	  return jsx("div", _extends({}, getStyleProps(props, 'valueContainer', {
	    'value-container': true,
	    'value-container--is-multi': isMulti,
	    'value-container--has-value': hasValue
	  }), innerProps), children);
	};

	// ==============================
	// Indicator Container
	// ==============================

	var indicatorsContainerCSS = function indicatorsContainerCSS() {
	  return {
	    alignItems: 'center',
	    alignSelf: 'stretch',
	    display: 'flex',
	    flexShrink: 0
	  };
	};
	var IndicatorsContainer = function IndicatorsContainer(props) {
	  var children = props.children,
	    innerProps = props.innerProps;
	  return jsx("div", _extends({}, getStyleProps(props, 'indicatorsContainer', {
	    indicators: true
	  }), innerProps), children);
	};

	var _templateObject;
	var _excluded$2 = ["size"];

	// ==============================
	// Dropdown & Clear Icons
	// ==============================
	var _ref2$2 = {
	  name: "8mmkcg",
	  styles: "display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0"
	} ;
	var Svg = function Svg(_ref) {
	  var size = _ref.size,
	    props = _objectWithoutProperties(_ref, _excluded$2);
	  return jsx("svg", _extends({
	    height: size,
	    width: size,
	    viewBox: "0 0 20 20",
	    "aria-hidden": "true",
	    focusable: "false",
	    css: _ref2$2
	  }, props));
	};
	var CrossIcon = function CrossIcon(props) {
	  return jsx(Svg, _extends({
	    size: 20
	  }, props), jsx("path", {
	    d: "M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z"
	  }));
	};
	var DownChevron = function DownChevron(props) {
	  return jsx(Svg, _extends({
	    size: 20
	  }, props), jsx("path", {
	    d: "M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
	  }));
	};

	// ==============================
	// Dropdown & Clear Buttons
	// ==============================

	var baseCSS = function baseCSS(_ref3, unstyled) {
	  var isFocused = _ref3.isFocused,
	    _ref3$theme = _ref3.theme,
	    baseUnit = _ref3$theme.spacing.baseUnit,
	    colors = _ref3$theme.colors;
	  return _objectSpread2({
	    label: 'indicatorContainer',
	    display: 'flex',
	    transition: 'color 150ms'
	  }, unstyled ? {} : {
	    color: isFocused ? colors.neutral60 : colors.neutral20,
	    padding: baseUnit * 2,
	    ':hover': {
	      color: isFocused ? colors.neutral80 : colors.neutral40
	    }
	  });
	};
	var dropdownIndicatorCSS = baseCSS;
	var DropdownIndicator = function DropdownIndicator(props) {
	  var children = props.children,
	    innerProps = props.innerProps;
	  return jsx("div", _extends({}, getStyleProps(props, 'dropdownIndicator', {
	    indicator: true,
	    'dropdown-indicator': true
	  }), innerProps), children || jsx(DownChevron, null));
	};
	var clearIndicatorCSS = baseCSS;
	var ClearIndicator = function ClearIndicator(props) {
	  var children = props.children,
	    innerProps = props.innerProps;
	  return jsx("div", _extends({}, getStyleProps(props, 'clearIndicator', {
	    indicator: true,
	    'clear-indicator': true
	  }), innerProps), children || jsx(CrossIcon, null));
	};

	// ==============================
	// Separator
	// ==============================

	var indicatorSeparatorCSS = function indicatorSeparatorCSS(_ref4, unstyled) {
	  var isDisabled = _ref4.isDisabled,
	    _ref4$theme = _ref4.theme,
	    baseUnit = _ref4$theme.spacing.baseUnit,
	    colors = _ref4$theme.colors;
	  return _objectSpread2({
	    label: 'indicatorSeparator',
	    alignSelf: 'stretch',
	    width: 1
	  }, unstyled ? {} : {
	    backgroundColor: isDisabled ? colors.neutral10 : colors.neutral20,
	    marginBottom: baseUnit * 2,
	    marginTop: baseUnit * 2
	  });
	};
	var IndicatorSeparator = function IndicatorSeparator(props) {
	  var innerProps = props.innerProps;
	  return jsx("span", _extends({}, innerProps, getStyleProps(props, 'indicatorSeparator', {
	    'indicator-separator': true
	  })));
	};

	// ==============================
	// Loading
	// ==============================

	var loadingDotAnimations = keyframes(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  0%, 80%, 100% { opacity: 0; }\n  40% { opacity: 1; }\n"])));
	var loadingIndicatorCSS = function loadingIndicatorCSS(_ref5, unstyled) {
	  var isFocused = _ref5.isFocused,
	    size = _ref5.size,
	    _ref5$theme = _ref5.theme,
	    colors = _ref5$theme.colors,
	    baseUnit = _ref5$theme.spacing.baseUnit;
	  return _objectSpread2({
	    label: 'loadingIndicator',
	    display: 'flex',
	    transition: 'color 150ms',
	    alignSelf: 'center',
	    fontSize: size,
	    lineHeight: 1,
	    marginRight: size,
	    textAlign: 'center',
	    verticalAlign: 'middle'
	  }, unstyled ? {} : {
	    color: isFocused ? colors.neutral60 : colors.neutral20,
	    padding: baseUnit * 2
	  });
	};
	var LoadingDot = function LoadingDot(_ref6) {
	  var delay = _ref6.delay,
	    offset = _ref6.offset;
	  return jsx("span", {
	    css: /*#__PURE__*/css$2({
	      animation: "".concat(loadingDotAnimations, " 1s ease-in-out ").concat(delay, "ms infinite;"),
	      backgroundColor: 'currentColor',
	      borderRadius: '1em',
	      display: 'inline-block',
	      marginLeft: offset ? '1em' : undefined,
	      height: '1em',
	      verticalAlign: 'top',
	      width: '1em'
	    }, "" , "" )
	  });
	};
	var LoadingIndicator = function LoadingIndicator(props) {
	  var innerProps = props.innerProps,
	    isRtl = props.isRtl;
	  return jsx("div", _extends({}, getStyleProps(props, 'loadingIndicator', {
	    indicator: true,
	    'loading-indicator': true
	  }), innerProps), jsx(LoadingDot, {
	    delay: 0,
	    offset: isRtl
	  }), jsx(LoadingDot, {
	    delay: 160,
	    offset: true
	  }), jsx(LoadingDot, {
	    delay: 320,
	    offset: !isRtl
	  }));
	};
	LoadingIndicator.defaultProps = {
	  size: 4
	};

	var css$1 = function css(_ref, unstyled) {
	  var isDisabled = _ref.isDisabled,
	    isFocused = _ref.isFocused,
	    _ref$theme = _ref.theme,
	    colors = _ref$theme.colors,
	    borderRadius = _ref$theme.borderRadius,
	    spacing = _ref$theme.spacing;
	  return _objectSpread2({
	    label: 'control',
	    alignItems: 'center',
	    cursor: 'default',
	    display: 'flex',
	    flexWrap: 'wrap',
	    justifyContent: 'space-between',
	    minHeight: spacing.controlHeight,
	    outline: '0 !important',
	    position: 'relative',
	    transition: 'all 100ms'
	  }, unstyled ? {} : {
	    backgroundColor: isDisabled ? colors.neutral5 : colors.neutral0,
	    borderColor: isDisabled ? colors.neutral10 : isFocused ? colors.primary : colors.neutral20,
	    borderRadius: borderRadius,
	    borderStyle: 'solid',
	    borderWidth: 1,
	    boxShadow: isFocused ? "0 0 0 1px ".concat(colors.primary) : undefined,
	    '&:hover': {
	      borderColor: isFocused ? colors.primary : colors.neutral30
	    }
	  });
	};
	var Control = function Control(props) {
	  var children = props.children,
	    isDisabled = props.isDisabled,
	    isFocused = props.isFocused,
	    innerRef = props.innerRef,
	    innerProps = props.innerProps,
	    menuIsOpen = props.menuIsOpen;
	  return jsx("div", _extends({
	    ref: innerRef
	  }, getStyleProps(props, 'control', {
	    control: true,
	    'control--is-disabled': isDisabled,
	    'control--is-focused': isFocused,
	    'control--menu-is-open': menuIsOpen
	  }), innerProps), children);
	};
	var Control$1 = Control;

	var _excluded$1 = ["data"];
	var groupCSS = function groupCSS(_ref, unstyled) {
	  var spacing = _ref.theme.spacing;
	  return unstyled ? {} : {
	    paddingBottom: spacing.baseUnit * 2,
	    paddingTop: spacing.baseUnit * 2
	  };
	};
	var Group = function Group(props) {
	  var children = props.children,
	    cx = props.cx,
	    getStyles = props.getStyles,
	    getClassNames = props.getClassNames,
	    Heading = props.Heading,
	    headingProps = props.headingProps,
	    innerProps = props.innerProps,
	    label = props.label,
	    theme = props.theme,
	    selectProps = props.selectProps;
	  return jsx("div", _extends({}, getStyleProps(props, 'group', {
	    group: true
	  }), innerProps), jsx(Heading, _extends({}, headingProps, {
	    selectProps: selectProps,
	    theme: theme,
	    getStyles: getStyles,
	    getClassNames: getClassNames,
	    cx: cx
	  }), label), jsx("div", null, children));
	};
	var groupHeadingCSS = function groupHeadingCSS(_ref2, unstyled) {
	  var _ref2$theme = _ref2.theme,
	    colors = _ref2$theme.colors,
	    spacing = _ref2$theme.spacing;
	  return _objectSpread2({
	    label: 'group',
	    cursor: 'default',
	    display: 'block'
	  }, unstyled ? {} : {
	    color: colors.neutral40,
	    fontSize: '75%',
	    fontWeight: 500,
	    marginBottom: '0.25em',
	    paddingLeft: spacing.baseUnit * 3,
	    paddingRight: spacing.baseUnit * 3,
	    textTransform: 'uppercase'
	  });
	};
	var GroupHeading = function GroupHeading(props) {
	  var _cleanCommonProps = cleanCommonProps(props);
	    _cleanCommonProps.data;
	    var innerProps = _objectWithoutProperties(_cleanCommonProps, _excluded$1);
	  return jsx("div", _extends({}, getStyleProps(props, 'groupHeading', {
	    'group-heading': true
	  }), innerProps));
	};
	var Group$1 = Group;

	var _excluded$4 = ["innerRef", "isDisabled", "isHidden", "inputClassName"];
	var inputCSS = function inputCSS(_ref, unstyled) {
	  var isDisabled = _ref.isDisabled,
	    value = _ref.value,
	    _ref$theme = _ref.theme,
	    spacing = _ref$theme.spacing,
	    colors = _ref$theme.colors;
	  return _objectSpread2(_objectSpread2({
	    visibility: isDisabled ? 'hidden' : 'visible',
	    // force css to recompute when value change due to @emotion bug.
	    // We can remove it whenever the bug is fixed.
	    transform: value ? 'translateZ(0)' : ''
	  }, containerStyle), unstyled ? {} : {
	    margin: spacing.baseUnit / 2,
	    paddingBottom: spacing.baseUnit / 2,
	    paddingTop: spacing.baseUnit / 2,
	    color: colors.neutral80
	  });
	};
	var spacingStyle = {
	  gridArea: '1 / 2',
	  font: 'inherit',
	  minWidth: '2px',
	  border: 0,
	  margin: 0,
	  outline: 0,
	  padding: 0
	};
	var containerStyle = {
	  flex: '1 1 auto',
	  display: 'inline-grid',
	  gridArea: '1 / 1 / 2 / 3',
	  gridTemplateColumns: '0 min-content',
	  '&:after': _objectSpread2({
	    content: 'attr(data-value) " "',
	    visibility: 'hidden',
	    whiteSpace: 'pre'
	  }, spacingStyle)
	};
	var inputStyle = function inputStyle(isHidden) {
	  return _objectSpread2({
	    label: 'input',
	    color: 'inherit',
	    background: 0,
	    opacity: isHidden ? 0 : 1,
	    width: '100%'
	  }, spacingStyle);
	};
	var Input = function Input(props) {
	  var cx = props.cx,
	    value = props.value;
	  var _cleanCommonProps = cleanCommonProps(props),
	    innerRef = _cleanCommonProps.innerRef,
	    isDisabled = _cleanCommonProps.isDisabled,
	    isHidden = _cleanCommonProps.isHidden,
	    inputClassName = _cleanCommonProps.inputClassName,
	    innerProps = _objectWithoutProperties(_cleanCommonProps, _excluded$4);
	  return jsx("div", _extends({}, getStyleProps(props, 'input', {
	    'input-container': true
	  }), {
	    "data-value": value || ''
	  }), jsx("input", _extends({
	    className: cx({
	      input: true
	    }, inputClassName),
	    ref: innerRef,
	    style: inputStyle(isHidden),
	    disabled: isDisabled
	  }, innerProps)));
	};
	var Input$1 = Input;

	var multiValueCSS = function multiValueCSS(_ref, unstyled) {
	  var _ref$theme = _ref.theme,
	    spacing = _ref$theme.spacing,
	    borderRadius = _ref$theme.borderRadius,
	    colors = _ref$theme.colors;
	  return _objectSpread2({
	    label: 'multiValue',
	    display: 'flex',
	    minWidth: 0
	  }, unstyled ? {} : {
	    backgroundColor: colors.neutral10,
	    borderRadius: borderRadius / 2,
	    margin: spacing.baseUnit / 2
	  });
	};
	var multiValueLabelCSS = function multiValueLabelCSS(_ref2, unstyled) {
	  var _ref2$theme = _ref2.theme,
	    borderRadius = _ref2$theme.borderRadius,
	    colors = _ref2$theme.colors,
	    cropWithEllipsis = _ref2.cropWithEllipsis;
	  return _objectSpread2({
	    overflow: 'hidden',
	    textOverflow: cropWithEllipsis || cropWithEllipsis === undefined ? 'ellipsis' : undefined,
	    whiteSpace: 'nowrap'
	  }, unstyled ? {} : {
	    borderRadius: borderRadius / 2,
	    color: colors.neutral80,
	    fontSize: '85%',
	    padding: 3,
	    paddingLeft: 6
	  });
	};
	var multiValueRemoveCSS = function multiValueRemoveCSS(_ref3, unstyled) {
	  var _ref3$theme = _ref3.theme,
	    spacing = _ref3$theme.spacing,
	    borderRadius = _ref3$theme.borderRadius,
	    colors = _ref3$theme.colors,
	    isFocused = _ref3.isFocused;
	  return _objectSpread2({
	    alignItems: 'center',
	    display: 'flex'
	  }, unstyled ? {} : {
	    borderRadius: borderRadius / 2,
	    backgroundColor: isFocused ? colors.dangerLight : undefined,
	    paddingLeft: spacing.baseUnit,
	    paddingRight: spacing.baseUnit,
	    ':hover': {
	      backgroundColor: colors.dangerLight,
	      color: colors.danger
	    }
	  });
	};
	var MultiValueGeneric = function MultiValueGeneric(_ref4) {
	  var children = _ref4.children,
	    innerProps = _ref4.innerProps;
	  return jsx("div", innerProps, children);
	};
	var MultiValueContainer = MultiValueGeneric;
	var MultiValueLabel = MultiValueGeneric;
	function MultiValueRemove(_ref5) {
	  var children = _ref5.children,
	    innerProps = _ref5.innerProps;
	  return jsx("div", _extends({
	    role: "button"
	  }, innerProps), children || jsx(CrossIcon, {
	    size: 14
	  }));
	}
	var MultiValue = function MultiValue(props) {
	  var children = props.children,
	    components = props.components,
	    data = props.data,
	    innerProps = props.innerProps,
	    isDisabled = props.isDisabled,
	    removeProps = props.removeProps,
	    selectProps = props.selectProps;
	  var Container = components.Container,
	    Label = components.Label,
	    Remove = components.Remove;
	  return jsx(Container, {
	    data: data,
	    innerProps: _objectSpread2(_objectSpread2({}, getStyleProps(props, 'multiValue', {
	      'multi-value': true,
	      'multi-value--is-disabled': isDisabled
	    })), innerProps),
	    selectProps: selectProps
	  }, jsx(Label, {
	    data: data,
	    innerProps: _objectSpread2({}, getStyleProps(props, 'multiValueLabel', {
	      'multi-value__label': true
	    })),
	    selectProps: selectProps
	  }, children), jsx(Remove, {
	    data: data,
	    innerProps: _objectSpread2(_objectSpread2({}, getStyleProps(props, 'multiValueRemove', {
	      'multi-value__remove': true
	    })), {}, {
	      'aria-label': "Remove ".concat(children || 'option')
	    }, removeProps),
	    selectProps: selectProps
	  }));
	};
	var MultiValue$1 = MultiValue;

	var optionCSS = function optionCSS(_ref, unstyled) {
	  var isDisabled = _ref.isDisabled,
	    isFocused = _ref.isFocused,
	    isSelected = _ref.isSelected,
	    _ref$theme = _ref.theme,
	    spacing = _ref$theme.spacing,
	    colors = _ref$theme.colors;
	  return _objectSpread2({
	    label: 'option',
	    cursor: 'default',
	    display: 'block',
	    fontSize: 'inherit',
	    width: '100%',
	    userSelect: 'none',
	    WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)'
	  }, unstyled ? {} : {
	    backgroundColor: isSelected ? colors.primary : isFocused ? colors.primary25 : 'transparent',
	    color: isDisabled ? colors.neutral20 : isSelected ? colors.neutral0 : 'inherit',
	    padding: "".concat(spacing.baseUnit * 2, "px ").concat(spacing.baseUnit * 3, "px"),
	    // provide some affordance on touch devices
	    ':active': {
	      backgroundColor: !isDisabled ? isSelected ? colors.primary : colors.primary50 : undefined
	    }
	  });
	};
	var Option = function Option(props) {
	  var children = props.children,
	    isDisabled = props.isDisabled,
	    isFocused = props.isFocused,
	    isSelected = props.isSelected,
	    innerRef = props.innerRef,
	    innerProps = props.innerProps;
	  return jsx("div", _extends({}, getStyleProps(props, 'option', {
	    option: true,
	    'option--is-disabled': isDisabled,
	    'option--is-focused': isFocused,
	    'option--is-selected': isSelected
	  }), {
	    ref: innerRef,
	    "aria-disabled": isDisabled
	  }, innerProps), children);
	};
	var Option$1 = Option;

	var placeholderCSS = function placeholderCSS(_ref, unstyled) {
	  var _ref$theme = _ref.theme,
	    spacing = _ref$theme.spacing,
	    colors = _ref$theme.colors;
	  return _objectSpread2({
	    label: 'placeholder',
	    gridArea: '1 / 1 / 2 / 3'
	  }, unstyled ? {} : {
	    color: colors.neutral50,
	    marginLeft: spacing.baseUnit / 2,
	    marginRight: spacing.baseUnit / 2
	  });
	};
	var Placeholder = function Placeholder(props) {
	  var children = props.children,
	    innerProps = props.innerProps;
	  return jsx("div", _extends({}, getStyleProps(props, 'placeholder', {
	    placeholder: true
	  }), innerProps), children);
	};
	var Placeholder$1 = Placeholder;

	var css = function css(_ref, unstyled) {
	  var isDisabled = _ref.isDisabled,
	    _ref$theme = _ref.theme,
	    spacing = _ref$theme.spacing,
	    colors = _ref$theme.colors;
	  return _objectSpread2({
	    label: 'singleValue',
	    gridArea: '1 / 1 / 2 / 3',
	    maxWidth: '100%',
	    overflow: 'hidden',
	    textOverflow: 'ellipsis',
	    whiteSpace: 'nowrap'
	  }, unstyled ? {} : {
	    color: isDisabled ? colors.neutral40 : colors.neutral80,
	    marginLeft: spacing.baseUnit / 2,
	    marginRight: spacing.baseUnit / 2
	  });
	};
	var SingleValue = function SingleValue(props) {
	  var children = props.children,
	    isDisabled = props.isDisabled,
	    innerProps = props.innerProps;
	  return jsx("div", _extends({}, getStyleProps(props, 'singleValue', {
	    'single-value': true,
	    'single-value--is-disabled': isDisabled
	  }), innerProps), children);
	};
	var SingleValue$1 = SingleValue;

	var components = {
	  ClearIndicator: ClearIndicator,
	  Control: Control$1,
	  DropdownIndicator: DropdownIndicator,
	  DownChevron: DownChevron,
	  CrossIcon: CrossIcon,
	  Group: Group$1,
	  GroupHeading: GroupHeading,
	  IndicatorsContainer: IndicatorsContainer,
	  IndicatorSeparator: IndicatorSeparator,
	  Input: Input$1,
	  LoadingIndicator: LoadingIndicator,
	  Menu: Menu$1,
	  MenuList: MenuList,
	  MenuPortal: MenuPortal,
	  LoadingMessage: LoadingMessage,
	  NoOptionsMessage: NoOptionsMessage,
	  MultiValue: MultiValue$1,
	  MultiValueContainer: MultiValueContainer,
	  MultiValueLabel: MultiValueLabel,
	  MultiValueRemove: MultiValueRemove,
	  Option: Option$1,
	  Placeholder: Placeholder$1,
	  SelectContainer: SelectContainer,
	  SingleValue: SingleValue$1,
	  ValueContainer: ValueContainer
	};
	var defaultComponents = function defaultComponents(props) {
	  return _objectSpread2(_objectSpread2({}, components), props.components);
	};

	var safeIsNaN = Number.isNaN ||
	    function ponyfill(value) {
	        return typeof value === 'number' && value !== value;
	    };
	function isEqual(first, second) {
	    if (first === second) {
	        return true;
	    }
	    if (safeIsNaN(first) && safeIsNaN(second)) {
	        return true;
	    }
	    return false;
	}
	function areInputsEqual(newInputs, lastInputs) {
	    if (newInputs.length !== lastInputs.length) {
	        return false;
	    }
	    for (var i = 0; i < newInputs.length; i++) {
	        if (!isEqual(newInputs[i], lastInputs[i])) {
	            return false;
	        }
	    }
	    return true;
	}

	function memoizeOne(resultFn, isEqual) {
	    if (isEqual === void 0) { isEqual = areInputsEqual; }
	    var cache = null;
	    function memoized() {
	        var newArgs = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            newArgs[_i] = arguments[_i];
	        }
	        if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {
	            return cache.lastResult;
	        }
	        var lastResult = resultFn.apply(this, newArgs);
	        cache = {
	            lastResult: lastResult,
	            lastArgs: newArgs,
	            lastThis: this,
	        };
	        return lastResult;
	    }
	    memoized.clear = function clear() {
	        cache = null;
	    };
	    return memoized;
	}

	// Assistive text to describe visual elements. Hidden for sighted users.
	var _ref = {
	  name: "7pg0cj-a11yText",
	  styles: "label:a11yText;z-index:9999;border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;width:1px;position:absolute;overflow:hidden;padding:0;white-space:nowrap"
	} ;
	var A11yText = function A11yText(props) {
	  return jsx("span", _extends({
	    css: _ref
	  }, props));
	};
	var A11yText$1 = A11yText;

	var defaultAriaLiveMessages = {
	  guidance: function guidance(props) {
	    var isSearchable = props.isSearchable,
	      isMulti = props.isMulti,
	      isDisabled = props.isDisabled,
	      tabSelectsValue = props.tabSelectsValue,
	      context = props.context;
	    switch (context) {
	      case 'menu':
	        return "Use Up and Down to choose options".concat(isDisabled ? '' : ', press Enter to select the currently focused option', ", press Escape to exit the menu").concat(tabSelectsValue ? ', press Tab to select the option and exit the menu' : '', ".");
	      case 'input':
	        return "".concat(props['aria-label'] || 'Select', " is focused ").concat(isSearchable ? ',type to refine list' : '', ", press Down to open the menu, ").concat(isMulti ? ' press left to focus selected values' : '');
	      case 'value':
	        return 'Use left and right to toggle between focused values, press Backspace to remove the currently focused value';
	      default:
	        return '';
	    }
	  },
	  onChange: function onChange(props) {
	    var action = props.action,
	      _props$label = props.label,
	      label = _props$label === void 0 ? '' : _props$label,
	      labels = props.labels,
	      isDisabled = props.isDisabled;
	    switch (action) {
	      case 'deselect-option':
	      case 'pop-value':
	      case 'remove-value':
	        return "option ".concat(label, ", deselected.");
	      case 'clear':
	        return 'All selected options have been cleared.';
	      case 'initial-input-focus':
	        return "option".concat(labels.length > 1 ? 's' : '', " ").concat(labels.join(','), ", selected.");
	      case 'select-option':
	        return isDisabled ? "option ".concat(label, " is disabled. Select another option.") : "option ".concat(label, ", selected.");
	      default:
	        return '';
	    }
	  },
	  onFocus: function onFocus(props) {
	    var context = props.context,
	      focused = props.focused,
	      options = props.options,
	      _props$label2 = props.label,
	      label = _props$label2 === void 0 ? '' : _props$label2,
	      selectValue = props.selectValue,
	      isDisabled = props.isDisabled,
	      isSelected = props.isSelected;
	    var getArrayIndex = function getArrayIndex(arr, item) {
	      return arr && arr.length ? "".concat(arr.indexOf(item) + 1, " of ").concat(arr.length) : '';
	    };
	    if (context === 'value' && selectValue) {
	      return "value ".concat(label, " focused, ").concat(getArrayIndex(selectValue, focused), ".");
	    }
	    if (context === 'menu') {
	      var disabled = isDisabled ? ' disabled' : '';
	      var status = "".concat(isSelected ? 'selected' : 'focused').concat(disabled);
	      return "option ".concat(label, " ").concat(status, ", ").concat(getArrayIndex(options, focused), ".");
	    }
	    return '';
	  },
	  onFilter: function onFilter(props) {
	    var inputValue = props.inputValue,
	      resultsMessage = props.resultsMessage;
	    return "".concat(resultsMessage).concat(inputValue ? ' for search term ' + inputValue : '', ".");
	  }
	};

	var LiveRegion = function LiveRegion(props) {
	  var ariaSelection = props.ariaSelection,
	    focusedOption = props.focusedOption,
	    focusedValue = props.focusedValue,
	    focusableOptions = props.focusableOptions,
	    isFocused = props.isFocused,
	    selectValue = props.selectValue,
	    selectProps = props.selectProps,
	    id = props.id;
	  var ariaLiveMessages = selectProps.ariaLiveMessages,
	    getOptionLabel = selectProps.getOptionLabel,
	    inputValue = selectProps.inputValue,
	    isMulti = selectProps.isMulti,
	    isOptionDisabled = selectProps.isOptionDisabled,
	    isSearchable = selectProps.isSearchable,
	    menuIsOpen = selectProps.menuIsOpen,
	    options = selectProps.options,
	    screenReaderStatus = selectProps.screenReaderStatus,
	    tabSelectsValue = selectProps.tabSelectsValue;
	  var ariaLabel = selectProps['aria-label'];
	  var ariaLive = selectProps['aria-live'];

	  // Update aria live message configuration when prop changes
	  var messages = e$1.useMemo(function () {
	    return _objectSpread2(_objectSpread2({}, defaultAriaLiveMessages), ariaLiveMessages || {});
	  }, [ariaLiveMessages]);

	  // Update aria live selected option when prop changes
	  var ariaSelected = e$1.useMemo(function () {
	    var message = '';
	    if (ariaSelection && messages.onChange) {
	      var option = ariaSelection.option,
	        selectedOptions = ariaSelection.options,
	        removedValue = ariaSelection.removedValue,
	        removedValues = ariaSelection.removedValues,
	        value = ariaSelection.value;
	      // select-option when !isMulti does not return option so we assume selected option is value
	      var asOption = function asOption(val) {
	        return !Array.isArray(val) ? val : null;
	      };

	      // If there is just one item from the action then get its label
	      var selected = removedValue || option || asOption(value);
	      var label = selected ? getOptionLabel(selected) : '';

	      // If there are multiple items from the action then return an array of labels
	      var multiSelected = selectedOptions || removedValues || undefined;
	      var labels = multiSelected ? multiSelected.map(getOptionLabel) : [];
	      var onChangeProps = _objectSpread2({
	        // multiSelected items are usually items that have already been selected
	        // or set by the user as a default value so we assume they are not disabled
	        isDisabled: selected && isOptionDisabled(selected, selectValue),
	        label: label,
	        labels: labels
	      }, ariaSelection);
	      message = messages.onChange(onChangeProps);
	    }
	    return message;
	  }, [ariaSelection, messages, isOptionDisabled, selectValue, getOptionLabel]);
	  var ariaFocused = e$1.useMemo(function () {
	    var focusMsg = '';
	    var focused = focusedOption || focusedValue;
	    var isSelected = !!(focusedOption && selectValue && selectValue.includes(focusedOption));
	    if (focused && messages.onFocus) {
	      var onFocusProps = {
	        focused: focused,
	        label: getOptionLabel(focused),
	        isDisabled: isOptionDisabled(focused, selectValue),
	        isSelected: isSelected,
	        options: focusableOptions,
	        context: focused === focusedOption ? 'menu' : 'value',
	        selectValue: selectValue
	      };
	      focusMsg = messages.onFocus(onFocusProps);
	    }
	    return focusMsg;
	  }, [focusedOption, focusedValue, getOptionLabel, isOptionDisabled, messages, focusableOptions, selectValue]);
	  var ariaResults = e$1.useMemo(function () {
	    var resultsMsg = '';
	    if (menuIsOpen && options.length && messages.onFilter) {
	      var resultsMessage = screenReaderStatus({
	        count: focusableOptions.length
	      });
	      resultsMsg = messages.onFilter({
	        inputValue: inputValue,
	        resultsMessage: resultsMessage
	      });
	    }
	    return resultsMsg;
	  }, [focusableOptions, inputValue, menuIsOpen, messages, options, screenReaderStatus]);
	  var ariaGuidance = e$1.useMemo(function () {
	    var guidanceMsg = '';
	    if (messages.guidance) {
	      var context = focusedValue ? 'value' : menuIsOpen ? 'menu' : 'input';
	      guidanceMsg = messages.guidance({
	        'aria-label': ariaLabel,
	        context: context,
	        isDisabled: focusedOption && isOptionDisabled(focusedOption, selectValue),
	        isMulti: isMulti,
	        isSearchable: isSearchable,
	        tabSelectsValue: tabSelectsValue
	      });
	    }
	    return guidanceMsg;
	  }, [ariaLabel, focusedOption, focusedValue, isMulti, isOptionDisabled, isSearchable, menuIsOpen, messages, selectValue, tabSelectsValue]);
	  var ariaContext = "".concat(ariaFocused, " ").concat(ariaResults, " ").concat(ariaGuidance);
	  var ScreenReaderText = jsx(e$1.Fragment, null, jsx("span", {
	    id: "aria-selection"
	  }, ariaSelected), jsx("span", {
	    id: "aria-context"
	  }, ariaContext));
	  var isInitialFocus = (ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === 'initial-input-focus';
	  return jsx(e$1.Fragment, null, jsx(A11yText$1, {
	    id: id
	  }, isInitialFocus && ScreenReaderText), jsx(A11yText$1, {
	    "aria-live": ariaLive,
	    "aria-atomic": "false",
	    "aria-relevant": "additions text"
	  }, isFocused && !isInitialFocus && ScreenReaderText));
	};
	var LiveRegion$1 = LiveRegion;

	var diacritics = [{
	  base: 'A',
	  letters: "A\u24B6\uFF21\xC0\xC1\xC2\u1EA6\u1EA4\u1EAA\u1EA8\xC3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\xC4\u01DE\u1EA2\xC5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F"
	}, {
	  base: 'AA',
	  letters: "\uA732"
	}, {
	  base: 'AE',
	  letters: "\xC6\u01FC\u01E2"
	}, {
	  base: 'AO',
	  letters: "\uA734"
	}, {
	  base: 'AU',
	  letters: "\uA736"
	}, {
	  base: 'AV',
	  letters: "\uA738\uA73A"
	}, {
	  base: 'AY',
	  letters: "\uA73C"
	}, {
	  base: 'B',
	  letters: "B\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181"
	}, {
	  base: 'C',
	  letters: "C\u24B8\uFF23\u0106\u0108\u010A\u010C\xC7\u1E08\u0187\u023B\uA73E"
	}, {
	  base: 'D',
	  letters: "D\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779"
	}, {
	  base: 'DZ',
	  letters: "\u01F1\u01C4"
	}, {
	  base: 'Dz',
	  letters: "\u01F2\u01C5"
	}, {
	  base: 'E',
	  letters: "E\u24BA\uFF25\xC8\xC9\xCA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\xCB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E"
	}, {
	  base: 'F',
	  letters: "F\u24BB\uFF26\u1E1E\u0191\uA77B"
	}, {
	  base: 'G',
	  letters: "G\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E"
	}, {
	  base: 'H',
	  letters: "H\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D"
	}, {
	  base: 'I',
	  letters: "I\u24BE\uFF29\xCC\xCD\xCE\u0128\u012A\u012C\u0130\xCF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197"
	}, {
	  base: 'J',
	  letters: "J\u24BF\uFF2A\u0134\u0248"
	}, {
	  base: 'K',
	  letters: "K\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2"
	}, {
	  base: 'L',
	  letters: "L\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780"
	}, {
	  base: 'LJ',
	  letters: "\u01C7"
	}, {
	  base: 'Lj',
	  letters: "\u01C8"
	}, {
	  base: 'M',
	  letters: "M\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C"
	}, {
	  base: 'N',
	  letters: "N\u24C3\uFF2E\u01F8\u0143\xD1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4"
	}, {
	  base: 'NJ',
	  letters: "\u01CA"
	}, {
	  base: 'Nj',
	  letters: "\u01CB"
	}, {
	  base: 'O',
	  letters: "O\u24C4\uFF2F\xD2\xD3\xD4\u1ED2\u1ED0\u1ED6\u1ED4\xD5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\xD6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\xD8\u01FE\u0186\u019F\uA74A\uA74C"
	}, {
	  base: 'OI',
	  letters: "\u01A2"
	}, {
	  base: 'OO',
	  letters: "\uA74E"
	}, {
	  base: 'OU',
	  letters: "\u0222"
	}, {
	  base: 'P',
	  letters: "P\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754"
	}, {
	  base: 'Q',
	  letters: "Q\u24C6\uFF31\uA756\uA758\u024A"
	}, {
	  base: 'R',
	  letters: "R\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782"
	}, {
	  base: 'S',
	  letters: "S\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784"
	}, {
	  base: 'T',
	  letters: "T\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786"
	}, {
	  base: 'TZ',
	  letters: "\uA728"
	}, {
	  base: 'U',
	  letters: "U\u24CA\uFF35\xD9\xDA\xDB\u0168\u1E78\u016A\u1E7A\u016C\xDC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244"
	}, {
	  base: 'V',
	  letters: "V\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245"
	}, {
	  base: 'VY',
	  letters: "\uA760"
	}, {
	  base: 'W',
	  letters: "W\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72"
	}, {
	  base: 'X',
	  letters: "X\u24CD\uFF38\u1E8A\u1E8C"
	}, {
	  base: 'Y',
	  letters: "Y\u24CE\uFF39\u1EF2\xDD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE"
	}, {
	  base: 'Z',
	  letters: "Z\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762"
	}, {
	  base: 'a',
	  letters: "a\u24D0\uFF41\u1E9A\xE0\xE1\xE2\u1EA7\u1EA5\u1EAB\u1EA9\xE3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\xE4\u01DF\u1EA3\xE5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250"
	}, {
	  base: 'aa',
	  letters: "\uA733"
	}, {
	  base: 'ae',
	  letters: "\xE6\u01FD\u01E3"
	}, {
	  base: 'ao',
	  letters: "\uA735"
	}, {
	  base: 'au',
	  letters: "\uA737"
	}, {
	  base: 'av',
	  letters: "\uA739\uA73B"
	}, {
	  base: 'ay',
	  letters: "\uA73D"
	}, {
	  base: 'b',
	  letters: "b\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253"
	}, {
	  base: 'c',
	  letters: "c\u24D2\uFF43\u0107\u0109\u010B\u010D\xE7\u1E09\u0188\u023C\uA73F\u2184"
	}, {
	  base: 'd',
	  letters: "d\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A"
	}, {
	  base: 'dz',
	  letters: "\u01F3\u01C6"
	}, {
	  base: 'e',
	  letters: "e\u24D4\uFF45\xE8\xE9\xEA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\xEB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD"
	}, {
	  base: 'f',
	  letters: "f\u24D5\uFF46\u1E1F\u0192\uA77C"
	}, {
	  base: 'g',
	  letters: "g\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F"
	}, {
	  base: 'h',
	  letters: "h\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265"
	}, {
	  base: 'hv',
	  letters: "\u0195"
	}, {
	  base: 'i',
	  letters: "i\u24D8\uFF49\xEC\xED\xEE\u0129\u012B\u012D\xEF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131"
	}, {
	  base: 'j',
	  letters: "j\u24D9\uFF4A\u0135\u01F0\u0249"
	}, {
	  base: 'k',
	  letters: "k\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3"
	}, {
	  base: 'l',
	  letters: "l\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747"
	}, {
	  base: 'lj',
	  letters: "\u01C9"
	}, {
	  base: 'm',
	  letters: "m\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F"
	}, {
	  base: 'n',
	  letters: "n\u24DD\uFF4E\u01F9\u0144\xF1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5"
	}, {
	  base: 'nj',
	  letters: "\u01CC"
	}, {
	  base: 'o',
	  letters: "o\u24DE\uFF4F\xF2\xF3\xF4\u1ED3\u1ED1\u1ED7\u1ED5\xF5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\xF6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\xF8\u01FF\u0254\uA74B\uA74D\u0275"
	}, {
	  base: 'oi',
	  letters: "\u01A3"
	}, {
	  base: 'ou',
	  letters: "\u0223"
	}, {
	  base: 'oo',
	  letters: "\uA74F"
	}, {
	  base: 'p',
	  letters: "p\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755"
	}, {
	  base: 'q',
	  letters: "q\u24E0\uFF51\u024B\uA757\uA759"
	}, {
	  base: 'r',
	  letters: "r\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783"
	}, {
	  base: 's',
	  letters: "s\u24E2\uFF53\xDF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B"
	}, {
	  base: 't',
	  letters: "t\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787"
	}, {
	  base: 'tz',
	  letters: "\uA729"
	}, {
	  base: 'u',
	  letters: "u\u24E4\uFF55\xF9\xFA\xFB\u0169\u1E79\u016B\u1E7B\u016D\xFC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289"
	}, {
	  base: 'v',
	  letters: "v\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C"
	}, {
	  base: 'vy',
	  letters: "\uA761"
	}, {
	  base: 'w',
	  letters: "w\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73"
	}, {
	  base: 'x',
	  letters: "x\u24E7\uFF58\u1E8B\u1E8D"
	}, {
	  base: 'y',
	  letters: "y\u24E8\uFF59\u1EF3\xFD\u0177\u1EF9\u0233\u1E8F\xFF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF"
	}, {
	  base: 'z',
	  letters: "z\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763"
	}];
	var anyDiacritic = new RegExp('[' + diacritics.map(function (d) {
	  return d.letters;
	}).join('') + ']', 'g');
	var diacriticToBase = {};
	for (var i = 0; i < diacritics.length; i++) {
	  var diacritic = diacritics[i];
	  for (var j = 0; j < diacritic.letters.length; j++) {
	    diacriticToBase[diacritic.letters[j]] = diacritic.base;
	  }
	}
	var stripDiacritics = function stripDiacritics(str) {
	  return str.replace(anyDiacritic, function (match) {
	    return diacriticToBase[match];
	  });
	};

	var memoizedStripDiacriticsForInput = memoizeOne(stripDiacritics);
	var trimString = function trimString(str) {
	  return str.replace(/^\s+|\s+$/g, '');
	};
	var defaultStringify = function defaultStringify(option) {
	  return "".concat(option.label, " ").concat(option.value);
	};
	var createFilter = function createFilter(config) {
	  return function (option, rawInput) {
	    // eslint-disable-next-line no-underscore-dangle
	    if (option.data.__isNew__) return true;
	    var _ignoreCase$ignoreAcc = _objectSpread2({
	        ignoreCase: true,
	        ignoreAccents: true,
	        stringify: defaultStringify,
	        trim: true,
	        matchFrom: 'any'
	      }, config),
	      ignoreCase = _ignoreCase$ignoreAcc.ignoreCase,
	      ignoreAccents = _ignoreCase$ignoreAcc.ignoreAccents,
	      stringify = _ignoreCase$ignoreAcc.stringify,
	      trim = _ignoreCase$ignoreAcc.trim,
	      matchFrom = _ignoreCase$ignoreAcc.matchFrom;
	    var input = trim ? trimString(rawInput) : rawInput;
	    var candidate = trim ? trimString(stringify(option)) : stringify(option);
	    if (ignoreCase) {
	      input = input.toLowerCase();
	      candidate = candidate.toLowerCase();
	    }
	    if (ignoreAccents) {
	      input = memoizedStripDiacriticsForInput(input);
	      candidate = stripDiacritics(candidate);
	    }
	    return matchFrom === 'start' ? candidate.substr(0, input.length) === input : candidate.indexOf(input) > -1;
	  };
	};

	var _excluded = ["innerRef"];
	function DummyInput(_ref) {
	  var innerRef = _ref.innerRef,
	    props = _objectWithoutProperties(_ref, _excluded);
	  // Remove animation props not meant for HTML elements
	  var filteredProps = removeProps(props, 'onExited', 'in', 'enter', 'exit', 'appear');
	  return jsx("input", _extends({
	    ref: innerRef
	  }, filteredProps, {
	    css: /*#__PURE__*/css$2({
	      label: 'dummyInput',
	      // get rid of any default styles
	      background: 0,
	      border: 0,
	      // important! this hides the flashing cursor
	      caretColor: 'transparent',
	      fontSize: 'inherit',
	      gridArea: '1 / 1 / 2 / 3',
	      outline: 0,
	      padding: 0,
	      // important! without `width` browsers won't allow focus
	      width: 1,
	      // remove cursor on desktop
	      color: 'transparent',
	      // remove cursor on mobile whilst maintaining "scroll into view" behaviour
	      left: -100,
	      opacity: 0,
	      position: 'relative',
	      transform: 'scale(.01)'
	    }, "" , "" )
	  }));
	}

	var cancelScroll = function cancelScroll(event) {
	  event.preventDefault();
	  event.stopPropagation();
	};
	function useScrollCapture(_ref) {
	  var isEnabled = _ref.isEnabled,
	    onBottomArrive = _ref.onBottomArrive,
	    onBottomLeave = _ref.onBottomLeave,
	    onTopArrive = _ref.onTopArrive,
	    onTopLeave = _ref.onTopLeave;
	  var isBottom = e$1.useRef(false);
	  var isTop = e$1.useRef(false);
	  var touchStart = e$1.useRef(0);
	  var scrollTarget = e$1.useRef(null);
	  var handleEventDelta = e$1.useCallback(function (event, delta) {
	    if (scrollTarget.current === null) return;
	    var _scrollTarget$current = scrollTarget.current,
	      scrollTop = _scrollTarget$current.scrollTop,
	      scrollHeight = _scrollTarget$current.scrollHeight,
	      clientHeight = _scrollTarget$current.clientHeight;
	    var target = scrollTarget.current;
	    var isDeltaPositive = delta > 0;
	    var availableScroll = scrollHeight - clientHeight - scrollTop;
	    var shouldCancelScroll = false;

	    // reset bottom/top flags
	    if (availableScroll > delta && isBottom.current) {
	      if (onBottomLeave) onBottomLeave(event);
	      isBottom.current = false;
	    }
	    if (isDeltaPositive && isTop.current) {
	      if (onTopLeave) onTopLeave(event);
	      isTop.current = false;
	    }

	    // bottom limit
	    if (isDeltaPositive && delta > availableScroll) {
	      if (onBottomArrive && !isBottom.current) {
	        onBottomArrive(event);
	      }
	      target.scrollTop = scrollHeight;
	      shouldCancelScroll = true;
	      isBottom.current = true;

	      // top limit
	    } else if (!isDeltaPositive && -delta > scrollTop) {
	      if (onTopArrive && !isTop.current) {
	        onTopArrive(event);
	      }
	      target.scrollTop = 0;
	      shouldCancelScroll = true;
	      isTop.current = true;
	    }

	    // cancel scroll
	    if (shouldCancelScroll) {
	      cancelScroll(event);
	    }
	  }, [onBottomArrive, onBottomLeave, onTopArrive, onTopLeave]);
	  var onWheel = e$1.useCallback(function (event) {
	    handleEventDelta(event, event.deltaY);
	  }, [handleEventDelta]);
	  var onTouchStart = e$1.useCallback(function (event) {
	    // set touch start so we can calculate touchmove delta
	    touchStart.current = event.changedTouches[0].clientY;
	  }, []);
	  var onTouchMove = e$1.useCallback(function (event) {
	    var deltaY = touchStart.current - event.changedTouches[0].clientY;
	    handleEventDelta(event, deltaY);
	  }, [handleEventDelta]);
	  var startListening = e$1.useCallback(function (el) {
	    // bail early if no element is available to attach to
	    if (!el) return;
	    var notPassive = supportsPassiveEvents ? {
	      passive: false
	    } : false;
	    el.addEventListener('wheel', onWheel, notPassive);
	    el.addEventListener('touchstart', onTouchStart, notPassive);
	    el.addEventListener('touchmove', onTouchMove, notPassive);
	  }, [onTouchMove, onTouchStart, onWheel]);
	  var stopListening = e$1.useCallback(function (el) {
	    // bail early if no element is available to detach from
	    if (!el) return;
	    el.removeEventListener('wheel', onWheel, false);
	    el.removeEventListener('touchstart', onTouchStart, false);
	    el.removeEventListener('touchmove', onTouchMove, false);
	  }, [onTouchMove, onTouchStart, onWheel]);
	  e$1.useEffect(function () {
	    if (!isEnabled) return;
	    var element = scrollTarget.current;
	    startListening(element);
	    return function () {
	      stopListening(element);
	    };
	  }, [isEnabled, startListening, stopListening]);
	  return function (element) {
	    scrollTarget.current = element;
	  };
	}

	var STYLE_KEYS = ['boxSizing', 'height', 'overflow', 'paddingRight', 'position'];
	var LOCK_STYLES = {
	  boxSizing: 'border-box',
	  // account for possible declaration `width: 100%;` on body
	  overflow: 'hidden',
	  position: 'relative',
	  height: '100%'
	};
	function preventTouchMove(e) {
	  e.preventDefault();
	}
	function allowTouchMove(e) {
	  e.stopPropagation();
	}
	function preventInertiaScroll() {
	  var top = this.scrollTop;
	  var totalScroll = this.scrollHeight;
	  var currentScroll = top + this.offsetHeight;
	  if (top === 0) {
	    this.scrollTop = 1;
	  } else if (currentScroll === totalScroll) {
	    this.scrollTop = top - 1;
	  }
	}

	// `ontouchstart` check works on most browsers
	// `maxTouchPoints` works on IE10/11 and Surface
	function isTouchDevice() {
	  return 'ontouchstart' in window || navigator.maxTouchPoints;
	}
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	var activeScrollLocks = 0;
	var listenerOptions = {
	  capture: false,
	  passive: false
	};
	function useScrollLock(_ref) {
	  var isEnabled = _ref.isEnabled,
	    _ref$accountForScroll = _ref.accountForScrollbars,
	    accountForScrollbars = _ref$accountForScroll === void 0 ? true : _ref$accountForScroll;
	  var originalStyles = e$1.useRef({});
	  var scrollTarget = e$1.useRef(null);
	  var addScrollLock = e$1.useCallback(function (touchScrollTarget) {
	    if (!canUseDOM) return;
	    var target = document.body;
	    var targetStyle = target && target.style;
	    if (accountForScrollbars) {
	      // store any styles already applied to the body
	      STYLE_KEYS.forEach(function (key) {
	        var val = targetStyle && targetStyle[key];
	        originalStyles.current[key] = val;
	      });
	    }

	    // apply the lock styles and padding if this is the first scroll lock
	    if (accountForScrollbars && activeScrollLocks < 1) {
	      var currentPadding = parseInt(originalStyles.current.paddingRight, 10) || 0;
	      var clientWidth = document.body ? document.body.clientWidth : 0;
	      var adjustedPadding = window.innerWidth - clientWidth + currentPadding || 0;
	      Object.keys(LOCK_STYLES).forEach(function (key) {
	        var val = LOCK_STYLES[key];
	        if (targetStyle) {
	          targetStyle[key] = val;
	        }
	      });
	      if (targetStyle) {
	        targetStyle.paddingRight = "".concat(adjustedPadding, "px");
	      }
	    }

	    // account for touch devices
	    if (target && isTouchDevice()) {
	      // Mobile Safari ignores { overflow: hidden } declaration on the body.
	      target.addEventListener('touchmove', preventTouchMove, listenerOptions);

	      // Allow scroll on provided target
	      if (touchScrollTarget) {
	        touchScrollTarget.addEventListener('touchstart', preventInertiaScroll, listenerOptions);
	        touchScrollTarget.addEventListener('touchmove', allowTouchMove, listenerOptions);
	      }
	    }

	    // increment active scroll locks
	    activeScrollLocks += 1;
	  }, [accountForScrollbars]);
	  var removeScrollLock = e$1.useCallback(function (touchScrollTarget) {
	    if (!canUseDOM) return;
	    var target = document.body;
	    var targetStyle = target && target.style;

	    // safely decrement active scroll locks
	    activeScrollLocks = Math.max(activeScrollLocks - 1, 0);

	    // reapply original body styles, if any
	    if (accountForScrollbars && activeScrollLocks < 1) {
	      STYLE_KEYS.forEach(function (key) {
	        var val = originalStyles.current[key];
	        if (targetStyle) {
	          targetStyle[key] = val;
	        }
	      });
	    }

	    // remove touch listeners
	    if (target && isTouchDevice()) {
	      target.removeEventListener('touchmove', preventTouchMove, listenerOptions);
	      if (touchScrollTarget) {
	        touchScrollTarget.removeEventListener('touchstart', preventInertiaScroll, listenerOptions);
	        touchScrollTarget.removeEventListener('touchmove', allowTouchMove, listenerOptions);
	      }
	    }
	  }, [accountForScrollbars]);
	  e$1.useEffect(function () {
	    if (!isEnabled) return;
	    var element = scrollTarget.current;
	    addScrollLock(element);
	    return function () {
	      removeScrollLock(element);
	    };
	  }, [isEnabled, addScrollLock, removeScrollLock]);
	  return function (element) {
	    scrollTarget.current = element;
	  };
	}
	var blurSelectInput = function blurSelectInput() {
	  return document.activeElement && document.activeElement.blur();
	};
	var _ref2$1 = {
	  name: "1kfdb0e",
	  styles: "position:fixed;left:0;bottom:0;right:0;top:0"
	} ;
	function ScrollManager(_ref) {
	  var children = _ref.children,
	    lockEnabled = _ref.lockEnabled,
	    _ref$captureEnabled = _ref.captureEnabled,
	    captureEnabled = _ref$captureEnabled === void 0 ? true : _ref$captureEnabled,
	    onBottomArrive = _ref.onBottomArrive,
	    onBottomLeave = _ref.onBottomLeave,
	    onTopArrive = _ref.onTopArrive,
	    onTopLeave = _ref.onTopLeave;
	  var setScrollCaptureTarget = useScrollCapture({
	    isEnabled: captureEnabled,
	    onBottomArrive: onBottomArrive,
	    onBottomLeave: onBottomLeave,
	    onTopArrive: onTopArrive,
	    onTopLeave: onTopLeave
	  });
	  var setScrollLockTarget = useScrollLock({
	    isEnabled: lockEnabled
	  });
	  var targetRef = function targetRef(element) {
	    setScrollCaptureTarget(element);
	    setScrollLockTarget(element);
	  };
	  return jsx(e$1.Fragment, null, lockEnabled && jsx("div", {
	    onClick: blurSelectInput,
	    css: _ref2$1
	  }), children(targetRef));
	}
	var _ref2 = {
	  name: "1a0ro4n-requiredInput",
	  styles: "label:requiredInput;opacity:0;pointer-events:none;position:absolute;bottom:0;left:0;right:0;width:100%"
	} ;
	var RequiredInput = function RequiredInput(_ref) {
	  var name = _ref.name,
	    onFocus = _ref.onFocus;
	  return jsx("input", {
	    required: true,
	    name: name,
	    tabIndex: -1,
	    "aria-hidden": "true",
	    onFocus: onFocus,
	    css: _ref2
	    // Prevent `Switching from uncontrolled to controlled` error
	    ,
	    value: "",
	    onChange: function onChange() {}
	  });
	};
	var RequiredInput$1 = RequiredInput;

	var formatGroupLabel = function formatGroupLabel(group) {
	  return group.label;
	};
	var getOptionLabel$1 = function getOptionLabel(option) {
	  return option.label;
	};
	var getOptionValue$1 = function getOptionValue(option) {
	  return option.value;
	};
	var isOptionDisabled = function isOptionDisabled(option) {
	  return !!option.isDisabled;
	};

	var defaultStyles = {
	  clearIndicator: clearIndicatorCSS,
	  container: containerCSS,
	  control: css$1,
	  dropdownIndicator: dropdownIndicatorCSS,
	  group: groupCSS,
	  groupHeading: groupHeadingCSS,
	  indicatorsContainer: indicatorsContainerCSS,
	  indicatorSeparator: indicatorSeparatorCSS,
	  input: inputCSS,
	  loadingIndicator: loadingIndicatorCSS,
	  loadingMessage: loadingMessageCSS,
	  menu: menuCSS,
	  menuList: menuListCSS,
	  menuPortal: menuPortalCSS,
	  multiValue: multiValueCSS,
	  multiValueLabel: multiValueLabelCSS,
	  multiValueRemove: multiValueRemoveCSS,
	  noOptionsMessage: noOptionsMessageCSS,
	  option: optionCSS,
	  placeholder: placeholderCSS,
	  singleValue: css,
	  valueContainer: valueContainerCSS
	};

	var colors$1 = {
	  primary: '#2684FF',
	  primary75: '#4C9AFF',
	  primary50: '#B2D4FF',
	  primary25: '#DEEBFF',
	  danger: '#DE350B',
	  dangerLight: '#FFBDAD',
	  neutral0: 'hsl(0, 0%, 100%)',
	  neutral5: 'hsl(0, 0%, 95%)',
	  neutral10: 'hsl(0, 0%, 90%)',
	  neutral20: 'hsl(0, 0%, 80%)',
	  neutral30: 'hsl(0, 0%, 70%)',
	  neutral40: 'hsl(0, 0%, 60%)',
	  neutral50: 'hsl(0, 0%, 50%)',
	  neutral60: 'hsl(0, 0%, 40%)',
	  neutral70: 'hsl(0, 0%, 30%)',
	  neutral80: 'hsl(0, 0%, 20%)',
	  neutral90: 'hsl(0, 0%, 10%)'
	};
	var borderRadius = 4;
	// Used to calculate consistent margin/padding on elements
	var baseUnit = 4;
	// The minimum height of the control
	var controlHeight = 38;
	// The amount of space between the control and menu */
	var menuGutter = baseUnit * 2;
	var spacing = {
	  baseUnit: baseUnit,
	  controlHeight: controlHeight,
	  menuGutter: menuGutter
	};
	var defaultTheme = {
	  borderRadius: borderRadius,
	  colors: colors$1,
	  spacing: spacing
	};

	var defaultProps = {
	  'aria-live': 'polite',
	  backspaceRemovesValue: true,
	  blurInputOnSelect: isTouchCapable(),
	  captureMenuScroll: !isTouchCapable(),
	  classNames: {},
	  closeMenuOnSelect: true,
	  closeMenuOnScroll: false,
	  components: {},
	  controlShouldRenderValue: true,
	  escapeClearsValue: false,
	  filterOption: createFilter(),
	  formatGroupLabel: formatGroupLabel,
	  getOptionLabel: getOptionLabel$1,
	  getOptionValue: getOptionValue$1,
	  isDisabled: false,
	  isLoading: false,
	  isMulti: false,
	  isRtl: false,
	  isSearchable: true,
	  isOptionDisabled: isOptionDisabled,
	  loadingMessage: function loadingMessage() {
	    return 'Loading...';
	  },
	  maxMenuHeight: 300,
	  minMenuHeight: 140,
	  menuIsOpen: false,
	  menuPlacement: 'bottom',
	  menuPosition: 'absolute',
	  menuShouldBlockScroll: false,
	  menuShouldScrollIntoView: !isMobileDevice(),
	  noOptionsMessage: function noOptionsMessage() {
	    return 'No options';
	  },
	  openMenuOnFocus: false,
	  openMenuOnClick: true,
	  options: [],
	  pageSize: 5,
	  placeholder: 'Select...',
	  screenReaderStatus: function screenReaderStatus(_ref) {
	    var count = _ref.count;
	    return "".concat(count, " result").concat(count !== 1 ? 's' : '', " available");
	  },
	  styles: {},
	  tabIndex: 0,
	  tabSelectsValue: true,
	  unstyled: false
	};
	function toCategorizedOption(props, option, selectValue, index) {
	  var isDisabled = _isOptionDisabled(props, option, selectValue);
	  var isSelected = _isOptionSelected(props, option, selectValue);
	  var label = getOptionLabel(props, option);
	  var value = getOptionValue(props, option);
	  return {
	    type: 'option',
	    data: option,
	    isDisabled: isDisabled,
	    isSelected: isSelected,
	    label: label,
	    value: value,
	    index: index
	  };
	}
	function buildCategorizedOptions(props, selectValue) {
	  return props.options.map(function (groupOrOption, groupOrOptionIndex) {
	    if ('options' in groupOrOption) {
	      var categorizedOptions = groupOrOption.options.map(function (option, optionIndex) {
	        return toCategorizedOption(props, option, selectValue, optionIndex);
	      }).filter(function (categorizedOption) {
	        return isFocusable(props, categorizedOption);
	      });
	      return categorizedOptions.length > 0 ? {
	        type: 'group',
	        data: groupOrOption,
	        options: categorizedOptions,
	        index: groupOrOptionIndex
	      } : undefined;
	    }
	    var categorizedOption = toCategorizedOption(props, groupOrOption, selectValue, groupOrOptionIndex);
	    return isFocusable(props, categorizedOption) ? categorizedOption : undefined;
	  }).filter(notNullish);
	}
	function buildFocusableOptionsFromCategorizedOptions(categorizedOptions) {
	  return categorizedOptions.reduce(function (optionsAccumulator, categorizedOption) {
	    if (categorizedOption.type === 'group') {
	      optionsAccumulator.push.apply(optionsAccumulator, _toConsumableArray(categorizedOption.options.map(function (option) {
	        return option.data;
	      })));
	    } else {
	      optionsAccumulator.push(categorizedOption.data);
	    }
	    return optionsAccumulator;
	  }, []);
	}
	function buildFocusableOptions(props, selectValue) {
	  return buildFocusableOptionsFromCategorizedOptions(buildCategorizedOptions(props, selectValue));
	}
	function isFocusable(props, categorizedOption) {
	  var _props$inputValue = props.inputValue,
	    inputValue = _props$inputValue === void 0 ? '' : _props$inputValue;
	  var data = categorizedOption.data,
	    isSelected = categorizedOption.isSelected,
	    label = categorizedOption.label,
	    value = categorizedOption.value;
	  return (!shouldHideSelectedOptions(props) || !isSelected) && _filterOption(props, {
	    label: label,
	    value: value,
	    data: data
	  }, inputValue);
	}
	function getNextFocusedValue(state, nextSelectValue) {
	  var focusedValue = state.focusedValue,
	    lastSelectValue = state.selectValue;
	  var lastFocusedIndex = lastSelectValue.indexOf(focusedValue);
	  if (lastFocusedIndex > -1) {
	    var nextFocusedIndex = nextSelectValue.indexOf(focusedValue);
	    if (nextFocusedIndex > -1) {
	      // the focused value is still in the selectValue, return it
	      return focusedValue;
	    } else if (lastFocusedIndex < nextSelectValue.length) {
	      // the focusedValue is not present in the next selectValue array by
	      // reference, so return the new value at the same index
	      return nextSelectValue[lastFocusedIndex];
	    }
	  }
	  return null;
	}
	function getNextFocusedOption(state, options) {
	  var lastFocusedOption = state.focusedOption;
	  return lastFocusedOption && options.indexOf(lastFocusedOption) > -1 ? lastFocusedOption : options[0];
	}
	var getOptionLabel = function getOptionLabel(props, data) {
	  return props.getOptionLabel(data);
	};
	var getOptionValue = function getOptionValue(props, data) {
	  return props.getOptionValue(data);
	};
	function _isOptionDisabled(props, option, selectValue) {
	  return typeof props.isOptionDisabled === 'function' ? props.isOptionDisabled(option, selectValue) : false;
	}
	function _isOptionSelected(props, option, selectValue) {
	  if (selectValue.indexOf(option) > -1) return true;
	  if (typeof props.isOptionSelected === 'function') {
	    return props.isOptionSelected(option, selectValue);
	  }
	  var candidate = getOptionValue(props, option);
	  return selectValue.some(function (i) {
	    return getOptionValue(props, i) === candidate;
	  });
	}
	function _filterOption(props, option, inputValue) {
	  return props.filterOption ? props.filterOption(option, inputValue) : true;
	}
	var shouldHideSelectedOptions = function shouldHideSelectedOptions(props) {
	  var hideSelectedOptions = props.hideSelectedOptions,
	    isMulti = props.isMulti;
	  if (hideSelectedOptions === undefined) return isMulti;
	  return hideSelectedOptions;
	};
	var instanceId = 1;
	var Select = /*#__PURE__*/function (_Component) {
	  _inherits(Select, _Component);
	  var _super = _createSuper(Select);
	  // Misc. Instance Properties
	  // ------------------------------

	  // TODO

	  // Refs
	  // ------------------------------

	  // Lifecycle
	  // ------------------------------

	  function Select(_props) {
	    var _this;
	    _classCallCheck(this, Select);
	    _this = _super.call(this, _props);
	    _this.state = {
	      ariaSelection: null,
	      focusedOption: null,
	      focusedValue: null,
	      inputIsHidden: false,
	      isFocused: false,
	      selectValue: [],
	      clearFocusValueOnUpdate: false,
	      prevWasFocused: false,
	      inputIsHiddenAfterUpdate: undefined,
	      prevProps: undefined
	    };
	    _this.blockOptionHover = false;
	    _this.isComposing = false;
	    _this.commonProps = void 0;
	    _this.initialTouchX = 0;
	    _this.initialTouchY = 0;
	    _this.instancePrefix = '';
	    _this.openAfterFocus = false;
	    _this.scrollToFocusedOptionOnUpdate = false;
	    _this.userIsDragging = void 0;
	    _this.controlRef = null;
	    _this.getControlRef = function (ref) {
	      _this.controlRef = ref;
	    };
	    _this.focusedOptionRef = null;
	    _this.getFocusedOptionRef = function (ref) {
	      _this.focusedOptionRef = ref;
	    };
	    _this.menuListRef = null;
	    _this.getMenuListRef = function (ref) {
	      _this.menuListRef = ref;
	    };
	    _this.inputRef = null;
	    _this.getInputRef = function (ref) {
	      _this.inputRef = ref;
	    };
	    _this.focus = _this.focusInput;
	    _this.blur = _this.blurInput;
	    _this.onChange = function (newValue, actionMeta) {
	      var _this$props = _this.props,
	        onChange = _this$props.onChange,
	        name = _this$props.name;
	      actionMeta.name = name;
	      _this.ariaOnChange(newValue, actionMeta);
	      onChange(newValue, actionMeta);
	    };
	    _this.setValue = function (newValue, action, option) {
	      var _this$props2 = _this.props,
	        closeMenuOnSelect = _this$props2.closeMenuOnSelect,
	        isMulti = _this$props2.isMulti,
	        inputValue = _this$props2.inputValue;
	      _this.onInputChange('', {
	        action: 'set-value',
	        prevInputValue: inputValue
	      });
	      if (closeMenuOnSelect) {
	        _this.setState({
	          inputIsHiddenAfterUpdate: !isMulti
	        });
	        _this.onMenuClose();
	      }
	      // when the select value should change, we should reset focusedValue
	      _this.setState({
	        clearFocusValueOnUpdate: true
	      });
	      _this.onChange(newValue, {
	        action: action,
	        option: option
	      });
	    };
	    _this.selectOption = function (newValue) {
	      var _this$props3 = _this.props,
	        blurInputOnSelect = _this$props3.blurInputOnSelect,
	        isMulti = _this$props3.isMulti,
	        name = _this$props3.name;
	      var selectValue = _this.state.selectValue;
	      var deselected = isMulti && _this.isOptionSelected(newValue, selectValue);
	      var isDisabled = _this.isOptionDisabled(newValue, selectValue);
	      if (deselected) {
	        var candidate = _this.getOptionValue(newValue);
	        _this.setValue(multiValueAsValue(selectValue.filter(function (i) {
	          return _this.getOptionValue(i) !== candidate;
	        })), 'deselect-option', newValue);
	      } else if (!isDisabled) {
	        // Select option if option is not disabled
	        if (isMulti) {
	          _this.setValue(multiValueAsValue([].concat(_toConsumableArray(selectValue), [newValue])), 'select-option', newValue);
	        } else {
	          _this.setValue(singleValueAsValue(newValue), 'select-option');
	        }
	      } else {
	        _this.ariaOnChange(singleValueAsValue(newValue), {
	          action: 'select-option',
	          option: newValue,
	          name: name
	        });
	        return;
	      }
	      if (blurInputOnSelect) {
	        _this.blurInput();
	      }
	    };
	    _this.removeValue = function (removedValue) {
	      var isMulti = _this.props.isMulti;
	      var selectValue = _this.state.selectValue;
	      var candidate = _this.getOptionValue(removedValue);
	      var newValueArray = selectValue.filter(function (i) {
	        return _this.getOptionValue(i) !== candidate;
	      });
	      var newValue = valueTernary(isMulti, newValueArray, newValueArray[0] || null);
	      _this.onChange(newValue, {
	        action: 'remove-value',
	        removedValue: removedValue
	      });
	      _this.focusInput();
	    };
	    _this.clearValue = function () {
	      var selectValue = _this.state.selectValue;
	      _this.onChange(valueTernary(_this.props.isMulti, [], null), {
	        action: 'clear',
	        removedValues: selectValue
	      });
	    };
	    _this.popValue = function () {
	      var isMulti = _this.props.isMulti;
	      var selectValue = _this.state.selectValue;
	      var lastSelectedValue = selectValue[selectValue.length - 1];
	      var newValueArray = selectValue.slice(0, selectValue.length - 1);
	      var newValue = valueTernary(isMulti, newValueArray, newValueArray[0] || null);
	      _this.onChange(newValue, {
	        action: 'pop-value',
	        removedValue: lastSelectedValue
	      });
	    };
	    _this.getValue = function () {
	      return _this.state.selectValue;
	    };
	    _this.cx = function () {
	      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }
	      return classNames.apply(void 0, [_this.props.classNamePrefix].concat(args));
	    };
	    _this.getOptionLabel = function (data) {
	      return getOptionLabel(_this.props, data);
	    };
	    _this.getOptionValue = function (data) {
	      return getOptionValue(_this.props, data);
	    };
	    _this.getStyles = function (key, props) {
	      var unstyled = _this.props.unstyled;
	      var base = defaultStyles[key](props, unstyled);
	      base.boxSizing = 'border-box';
	      var custom = _this.props.styles[key];
	      return custom ? custom(base, props) : base;
	    };
	    _this.getClassNames = function (key, props) {
	      var _this$props$className, _this$props$className2;
	      return (_this$props$className = (_this$props$className2 = _this.props.classNames)[key]) === null || _this$props$className === void 0 ? void 0 : _this$props$className.call(_this$props$className2, props);
	    };
	    _this.getElementId = function (element) {
	      return "".concat(_this.instancePrefix, "-").concat(element);
	    };
	    _this.getComponents = function () {
	      return defaultComponents(_this.props);
	    };
	    _this.buildCategorizedOptions = function () {
	      return buildCategorizedOptions(_this.props, _this.state.selectValue);
	    };
	    _this.getCategorizedOptions = function () {
	      return _this.props.menuIsOpen ? _this.buildCategorizedOptions() : [];
	    };
	    _this.buildFocusableOptions = function () {
	      return buildFocusableOptionsFromCategorizedOptions(_this.buildCategorizedOptions());
	    };
	    _this.getFocusableOptions = function () {
	      return _this.props.menuIsOpen ? _this.buildFocusableOptions() : [];
	    };
	    _this.ariaOnChange = function (value, actionMeta) {
	      _this.setState({
	        ariaSelection: _objectSpread2({
	          value: value
	        }, actionMeta)
	      });
	    };
	    _this.onMenuMouseDown = function (event) {
	      if (event.button !== 0) {
	        return;
	      }
	      event.stopPropagation();
	      event.preventDefault();
	      _this.focusInput();
	    };
	    _this.onMenuMouseMove = function (event) {
	      _this.blockOptionHover = false;
	    };
	    _this.onControlMouseDown = function (event) {
	      // Event captured by dropdown indicator
	      if (event.defaultPrevented) {
	        return;
	      }
	      var openMenuOnClick = _this.props.openMenuOnClick;
	      if (!_this.state.isFocused) {
	        if (openMenuOnClick) {
	          _this.openAfterFocus = true;
	        }
	        _this.focusInput();
	      } else if (!_this.props.menuIsOpen) {
	        if (openMenuOnClick) {
	          _this.openMenu('first');
	        }
	      } else {
	        if (event.target.tagName !== 'INPUT' && event.target.tagName !== 'TEXTAREA') {
	          _this.onMenuClose();
	        }
	      }
	      if (event.target.tagName !== 'INPUT' && event.target.tagName !== 'TEXTAREA') {
	        event.preventDefault();
	      }
	    };
	    _this.onDropdownIndicatorMouseDown = function (event) {
	      // ignore mouse events that weren't triggered by the primary button
	      if (event && event.type === 'mousedown' && event.button !== 0) {
	        return;
	      }
	      if (_this.props.isDisabled) return;
	      var _this$props4 = _this.props,
	        isMulti = _this$props4.isMulti,
	        menuIsOpen = _this$props4.menuIsOpen;
	      _this.focusInput();
	      if (menuIsOpen) {
	        _this.setState({
	          inputIsHiddenAfterUpdate: !isMulti
	        });
	        _this.onMenuClose();
	      } else {
	        _this.openMenu('first');
	      }
	      event.preventDefault();
	    };
	    _this.onClearIndicatorMouseDown = function (event) {
	      // ignore mouse events that weren't triggered by the primary button
	      if (event && event.type === 'mousedown' && event.button !== 0) {
	        return;
	      }
	      _this.clearValue();
	      event.preventDefault();
	      _this.openAfterFocus = false;
	      if (event.type === 'touchend') {
	        _this.focusInput();
	      } else {
	        setTimeout(function () {
	          return _this.focusInput();
	        });
	      }
	    };
	    _this.onScroll = function (event) {
	      if (typeof _this.props.closeMenuOnScroll === 'boolean') {
	        if (event.target instanceof HTMLElement && isDocumentElement(event.target)) {
	          _this.props.onMenuClose();
	        }
	      } else if (typeof _this.props.closeMenuOnScroll === 'function') {
	        if (_this.props.closeMenuOnScroll(event)) {
	          _this.props.onMenuClose();
	        }
	      }
	    };
	    _this.onCompositionStart = function () {
	      _this.isComposing = true;
	    };
	    _this.onCompositionEnd = function () {
	      _this.isComposing = false;
	    };
	    _this.onTouchStart = function (_ref2) {
	      var touches = _ref2.touches;
	      var touch = touches && touches.item(0);
	      if (!touch) {
	        return;
	      }
	      _this.initialTouchX = touch.clientX;
	      _this.initialTouchY = touch.clientY;
	      _this.userIsDragging = false;
	    };
	    _this.onTouchMove = function (_ref3) {
	      var touches = _ref3.touches;
	      var touch = touches && touches.item(0);
	      if (!touch) {
	        return;
	      }
	      var deltaX = Math.abs(touch.clientX - _this.initialTouchX);
	      var deltaY = Math.abs(touch.clientY - _this.initialTouchY);
	      var moveThreshold = 5;
	      _this.userIsDragging = deltaX > moveThreshold || deltaY > moveThreshold;
	    };
	    _this.onTouchEnd = function (event) {
	      if (_this.userIsDragging) return;

	      // close the menu if the user taps outside
	      // we're checking on event.target here instead of event.currentTarget, because we want to assert information
	      // on events on child elements, not the document (which we've attached this handler to).
	      if (_this.controlRef && !_this.controlRef.contains(event.target) && _this.menuListRef && !_this.menuListRef.contains(event.target)) {
	        _this.blurInput();
	      }

	      // reset move vars
	      _this.initialTouchX = 0;
	      _this.initialTouchY = 0;
	    };
	    _this.onControlTouchEnd = function (event) {
	      if (_this.userIsDragging) return;
	      _this.onControlMouseDown(event);
	    };
	    _this.onClearIndicatorTouchEnd = function (event) {
	      if (_this.userIsDragging) return;
	      _this.onClearIndicatorMouseDown(event);
	    };
	    _this.onDropdownIndicatorTouchEnd = function (event) {
	      if (_this.userIsDragging) return;
	      _this.onDropdownIndicatorMouseDown(event);
	    };
	    _this.handleInputChange = function (event) {
	      var prevInputValue = _this.props.inputValue;
	      var inputValue = event.currentTarget.value;
	      _this.setState({
	        inputIsHiddenAfterUpdate: false
	      });
	      _this.onInputChange(inputValue, {
	        action: 'input-change',
	        prevInputValue: prevInputValue
	      });
	      if (!_this.props.menuIsOpen) {
	        _this.onMenuOpen();
	      }
	    };
	    _this.onInputFocus = function (event) {
	      if (_this.props.onFocus) {
	        _this.props.onFocus(event);
	      }
	      _this.setState({
	        inputIsHiddenAfterUpdate: false,
	        isFocused: true
	      });
	      if (_this.openAfterFocus || _this.props.openMenuOnFocus) {
	        _this.openMenu('first');
	      }
	      _this.openAfterFocus = false;
	    };
	    _this.onInputBlur = function (event) {
	      var prevInputValue = _this.props.inputValue;
	      if (_this.menuListRef && _this.menuListRef.contains(document.activeElement)) {
	        _this.inputRef.focus();
	        return;
	      }
	      if (_this.props.onBlur) {
	        _this.props.onBlur(event);
	      }
	      _this.onInputChange('', {
	        action: 'input-blur',
	        prevInputValue: prevInputValue
	      });
	      _this.onMenuClose();
	      _this.setState({
	        focusedValue: null,
	        isFocused: false
	      });
	    };
	    _this.onOptionHover = function (focusedOption) {
	      if (_this.blockOptionHover || _this.state.focusedOption === focusedOption) {
	        return;
	      }
	      _this.setState({
	        focusedOption: focusedOption
	      });
	    };
	    _this.shouldHideSelectedOptions = function () {
	      return shouldHideSelectedOptions(_this.props);
	    };
	    _this.onValueInputFocus = function (e) {
	      e.preventDefault();
	      e.stopPropagation();
	      _this.focus();
	    };
	    _this.onKeyDown = function (event) {
	      var _this$props5 = _this.props,
	        isMulti = _this$props5.isMulti,
	        backspaceRemovesValue = _this$props5.backspaceRemovesValue,
	        escapeClearsValue = _this$props5.escapeClearsValue,
	        inputValue = _this$props5.inputValue,
	        isClearable = _this$props5.isClearable,
	        isDisabled = _this$props5.isDisabled,
	        menuIsOpen = _this$props5.menuIsOpen,
	        onKeyDown = _this$props5.onKeyDown,
	        tabSelectsValue = _this$props5.tabSelectsValue,
	        openMenuOnFocus = _this$props5.openMenuOnFocus;
	      var _this$state = _this.state,
	        focusedOption = _this$state.focusedOption,
	        focusedValue = _this$state.focusedValue,
	        selectValue = _this$state.selectValue;
	      if (isDisabled) return;
	      if (typeof onKeyDown === 'function') {
	        onKeyDown(event);
	        if (event.defaultPrevented) {
	          return;
	        }
	      }

	      // Block option hover events when the user has just pressed a key
	      _this.blockOptionHover = true;
	      switch (event.key) {
	        case 'ArrowLeft':
	          if (!isMulti || inputValue) return;
	          _this.focusValue('previous');
	          break;
	        case 'ArrowRight':
	          if (!isMulti || inputValue) return;
	          _this.focusValue('next');
	          break;
	        case 'Delete':
	        case 'Backspace':
	          if (inputValue) return;
	          if (focusedValue) {
	            _this.removeValue(focusedValue);
	          } else {
	            if (!backspaceRemovesValue) return;
	            if (isMulti) {
	              _this.popValue();
	            } else if (isClearable) {
	              _this.clearValue();
	            }
	          }
	          break;
	        case 'Tab':
	          if (_this.isComposing) return;
	          if (event.shiftKey || !menuIsOpen || !tabSelectsValue || !focusedOption ||
	          // don't capture the event if the menu opens on focus and the focused
	          // option is already selected; it breaks the flow of navigation
	          openMenuOnFocus && _this.isOptionSelected(focusedOption, selectValue)) {
	            return;
	          }
	          _this.selectOption(focusedOption);
	          break;
	        case 'Enter':
	          if (event.keyCode === 229) {
	            // ignore the keydown event from an Input Method Editor(IME)
	            // ref. https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode
	            break;
	          }
	          if (menuIsOpen) {
	            if (!focusedOption) return;
	            if (_this.isComposing) return;
	            _this.selectOption(focusedOption);
	            break;
	          }
	          return;
	        case 'Escape':
	          if (menuIsOpen) {
	            _this.setState({
	              inputIsHiddenAfterUpdate: false
	            });
	            _this.onInputChange('', {
	              action: 'menu-close',
	              prevInputValue: inputValue
	            });
	            _this.onMenuClose();
	          } else if (isClearable && escapeClearsValue) {
	            _this.clearValue();
	          }
	          break;
	        case ' ':
	          // space
	          if (inputValue) {
	            return;
	          }
	          if (!menuIsOpen) {
	            _this.openMenu('first');
	            break;
	          }
	          if (!focusedOption) return;
	          _this.selectOption(focusedOption);
	          break;
	        case 'ArrowUp':
	          if (menuIsOpen) {
	            _this.focusOption('up');
	          } else {
	            _this.openMenu('last');
	          }
	          break;
	        case 'ArrowDown':
	          if (menuIsOpen) {
	            _this.focusOption('down');
	          } else {
	            _this.openMenu('first');
	          }
	          break;
	        case 'PageUp':
	          if (!menuIsOpen) return;
	          _this.focusOption('pageup');
	          break;
	        case 'PageDown':
	          if (!menuIsOpen) return;
	          _this.focusOption('pagedown');
	          break;
	        case 'Home':
	          if (!menuIsOpen) return;
	          _this.focusOption('first');
	          break;
	        case 'End':
	          if (!menuIsOpen) return;
	          _this.focusOption('last');
	          break;
	        default:
	          return;
	      }
	      event.preventDefault();
	    };
	    _this.instancePrefix = 'react-select-' + (_this.props.instanceId || ++instanceId);
	    _this.state.selectValue = cleanValue(_props.value);

	    // Set focusedOption if menuIsOpen is set on init (e.g. defaultMenuIsOpen)
	    if (_props.menuIsOpen && _this.state.selectValue.length) {
	      var focusableOptions = _this.buildFocusableOptions();
	      var optionIndex = focusableOptions.indexOf(_this.state.selectValue[0]);
	      _this.state.focusedOption = focusableOptions[optionIndex];
	    }
	    return _this;
	  }
	  _createClass$1(Select, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.startListeningComposition();
	      this.startListeningToTouch();
	      if (this.props.closeMenuOnScroll && document && document.addEventListener) {
	        // Listen to all scroll events, and filter them out inside of 'onScroll'
	        document.addEventListener('scroll', this.onScroll, true);
	      }
	      if (this.props.autoFocus) {
	        this.focusInput();
	      }

	      // Scroll focusedOption into view if menuIsOpen is set on mount (e.g. defaultMenuIsOpen)
	      if (this.props.menuIsOpen && this.state.focusedOption && this.menuListRef && this.focusedOptionRef) {
	        scrollIntoView(this.menuListRef, this.focusedOptionRef);
	      }
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      var _this$props6 = this.props,
	        isDisabled = _this$props6.isDisabled,
	        menuIsOpen = _this$props6.menuIsOpen;
	      var isFocused = this.state.isFocused;
	      if (
	      // ensure focus is restored correctly when the control becomes enabled
	      isFocused && !isDisabled && prevProps.isDisabled ||
	      // ensure focus is on the Input when the menu opens
	      isFocused && menuIsOpen && !prevProps.menuIsOpen) {
	        this.focusInput();
	      }
	      if (isFocused && isDisabled && !prevProps.isDisabled) {
	        // ensure select state gets blurred in case Select is programmatically disabled while focused
	        // eslint-disable-next-line react/no-did-update-set-state
	        this.setState({
	          isFocused: false
	        }, this.onMenuClose);
	      } else if (!isFocused && !isDisabled && prevProps.isDisabled && this.inputRef === document.activeElement) {
	        // ensure select state gets focused in case Select is programatically re-enabled while focused (Firefox)
	        // eslint-disable-next-line react/no-did-update-set-state
	        this.setState({
	          isFocused: true
	        });
	      }

	      // scroll the focused option into view if necessary
	      if (this.menuListRef && this.focusedOptionRef && this.scrollToFocusedOptionOnUpdate) {
	        scrollIntoView(this.menuListRef, this.focusedOptionRef);
	        this.scrollToFocusedOptionOnUpdate = false;
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.stopListeningComposition();
	      this.stopListeningToTouch();
	      document.removeEventListener('scroll', this.onScroll, true);
	    }

	    // ==============================
	    // Consumer Handlers
	    // ==============================
	  }, {
	    key: "onMenuOpen",
	    value: function onMenuOpen() {
	      this.props.onMenuOpen();
	    }
	  }, {
	    key: "onMenuClose",
	    value: function onMenuClose() {
	      this.onInputChange('', {
	        action: 'menu-close',
	        prevInputValue: this.props.inputValue
	      });
	      this.props.onMenuClose();
	    }
	  }, {
	    key: "onInputChange",
	    value: function onInputChange(newValue, actionMeta) {
	      this.props.onInputChange(newValue, actionMeta);
	    }

	    // ==============================
	    // Methods
	    // ==============================
	  }, {
	    key: "focusInput",
	    value: function focusInput() {
	      if (!this.inputRef) return;
	      this.inputRef.focus();
	    }
	  }, {
	    key: "blurInput",
	    value: function blurInput() {
	      if (!this.inputRef) return;
	      this.inputRef.blur();
	    }

	    // aliased for consumers
	  }, {
	    key: "openMenu",
	    value: function openMenu(focusOption) {
	      var _this2 = this;
	      var _this$state2 = this.state,
	        selectValue = _this$state2.selectValue,
	        isFocused = _this$state2.isFocused;
	      var focusableOptions = this.buildFocusableOptions();
	      var openAtIndex = focusOption === 'first' ? 0 : focusableOptions.length - 1;
	      if (!this.props.isMulti) {
	        var selectedIndex = focusableOptions.indexOf(selectValue[0]);
	        if (selectedIndex > -1) {
	          openAtIndex = selectedIndex;
	        }
	      }

	      // only scroll if the menu isn't already open
	      this.scrollToFocusedOptionOnUpdate = !(isFocused && this.menuListRef);
	      this.setState({
	        inputIsHiddenAfterUpdate: false,
	        focusedValue: null,
	        focusedOption: focusableOptions[openAtIndex]
	      }, function () {
	        return _this2.onMenuOpen();
	      });
	    }
	  }, {
	    key: "focusValue",
	    value: function focusValue(direction) {
	      var _this$state3 = this.state,
	        selectValue = _this$state3.selectValue,
	        focusedValue = _this$state3.focusedValue;

	      // Only multiselects support value focusing
	      if (!this.props.isMulti) return;
	      this.setState({
	        focusedOption: null
	      });
	      var focusedIndex = selectValue.indexOf(focusedValue);
	      if (!focusedValue) {
	        focusedIndex = -1;
	      }
	      var lastIndex = selectValue.length - 1;
	      var nextFocus = -1;
	      if (!selectValue.length) return;
	      switch (direction) {
	        case 'previous':
	          if (focusedIndex === 0) {
	            // don't cycle from the start to the end
	            nextFocus = 0;
	          } else if (focusedIndex === -1) {
	            // if nothing is focused, focus the last value first
	            nextFocus = lastIndex;
	          } else {
	            nextFocus = focusedIndex - 1;
	          }
	          break;
	        case 'next':
	          if (focusedIndex > -1 && focusedIndex < lastIndex) {
	            nextFocus = focusedIndex + 1;
	          }
	          break;
	      }
	      this.setState({
	        inputIsHidden: nextFocus !== -1,
	        focusedValue: selectValue[nextFocus]
	      });
	    }
	  }, {
	    key: "focusOption",
	    value: function focusOption() {
	      var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'first';
	      var pageSize = this.props.pageSize;
	      var focusedOption = this.state.focusedOption;
	      var options = this.getFocusableOptions();
	      if (!options.length) return;
	      var nextFocus = 0; // handles 'first'
	      var focusedIndex = options.indexOf(focusedOption);
	      if (!focusedOption) {
	        focusedIndex = -1;
	      }
	      if (direction === 'up') {
	        nextFocus = focusedIndex > 0 ? focusedIndex - 1 : options.length - 1;
	      } else if (direction === 'down') {
	        nextFocus = (focusedIndex + 1) % options.length;
	      } else if (direction === 'pageup') {
	        nextFocus = focusedIndex - pageSize;
	        if (nextFocus < 0) nextFocus = 0;
	      } else if (direction === 'pagedown') {
	        nextFocus = focusedIndex + pageSize;
	        if (nextFocus > options.length - 1) nextFocus = options.length - 1;
	      } else if (direction === 'last') {
	        nextFocus = options.length - 1;
	      }
	      this.scrollToFocusedOptionOnUpdate = true;
	      this.setState({
	        focusedOption: options[nextFocus],
	        focusedValue: null
	      });
	    }
	  }, {
	    key: "getTheme",
	    value:
	    // ==============================
	    // Getters
	    // ==============================

	    function getTheme() {
	      // Use the default theme if there are no customisations.
	      if (!this.props.theme) {
	        return defaultTheme;
	      }
	      // If the theme prop is a function, assume the function
	      // knows how to merge the passed-in default theme with
	      // its own modifications.
	      if (typeof this.props.theme === 'function') {
	        return this.props.theme(defaultTheme);
	      }
	      // Otherwise, if a plain theme object was passed in,
	      // overlay it with the default theme.
	      return _objectSpread2(_objectSpread2({}, defaultTheme), this.props.theme);
	    }
	  }, {
	    key: "getCommonProps",
	    value: function getCommonProps() {
	      var clearValue = this.clearValue,
	        cx = this.cx,
	        getStyles = this.getStyles,
	        getClassNames = this.getClassNames,
	        getValue = this.getValue,
	        selectOption = this.selectOption,
	        setValue = this.setValue,
	        props = this.props;
	      var isMulti = props.isMulti,
	        isRtl = props.isRtl,
	        options = props.options;
	      var hasValue = this.hasValue();
	      return {
	        clearValue: clearValue,
	        cx: cx,
	        getStyles: getStyles,
	        getClassNames: getClassNames,
	        getValue: getValue,
	        hasValue: hasValue,
	        isMulti: isMulti,
	        isRtl: isRtl,
	        options: options,
	        selectOption: selectOption,
	        selectProps: props,
	        setValue: setValue,
	        theme: this.getTheme()
	      };
	    }
	  }, {
	    key: "hasValue",
	    value: function hasValue() {
	      var selectValue = this.state.selectValue;
	      return selectValue.length > 0;
	    }
	  }, {
	    key: "hasOptions",
	    value: function hasOptions() {
	      return !!this.getFocusableOptions().length;
	    }
	  }, {
	    key: "isClearable",
	    value: function isClearable() {
	      var _this$props7 = this.props,
	        isClearable = _this$props7.isClearable,
	        isMulti = _this$props7.isMulti;

	      // single select, by default, IS NOT clearable
	      // multi select, by default, IS clearable
	      if (isClearable === undefined) return isMulti;
	      return isClearable;
	    }
	  }, {
	    key: "isOptionDisabled",
	    value: function isOptionDisabled(option, selectValue) {
	      return _isOptionDisabled(this.props, option, selectValue);
	    }
	  }, {
	    key: "isOptionSelected",
	    value: function isOptionSelected(option, selectValue) {
	      return _isOptionSelected(this.props, option, selectValue);
	    }
	  }, {
	    key: "filterOption",
	    value: function filterOption(option, inputValue) {
	      return _filterOption(this.props, option, inputValue);
	    }
	  }, {
	    key: "formatOptionLabel",
	    value: function formatOptionLabel(data, context) {
	      if (typeof this.props.formatOptionLabel === 'function') {
	        var _inputValue = this.props.inputValue;
	        var _selectValue = this.state.selectValue;
	        return this.props.formatOptionLabel(data, {
	          context: context,
	          inputValue: _inputValue,
	          selectValue: _selectValue
	        });
	      } else {
	        return this.getOptionLabel(data);
	      }
	    }
	  }, {
	    key: "formatGroupLabel",
	    value: function formatGroupLabel(data) {
	      return this.props.formatGroupLabel(data);
	    }

	    // ==============================
	    // Mouse Handlers
	    // ==============================
	  }, {
	    key: "startListeningComposition",
	    value:
	    // ==============================
	    // Composition Handlers
	    // ==============================

	    function startListeningComposition() {
	      if (document && document.addEventListener) {
	        document.addEventListener('compositionstart', this.onCompositionStart, false);
	        document.addEventListener('compositionend', this.onCompositionEnd, false);
	      }
	    }
	  }, {
	    key: "stopListeningComposition",
	    value: function stopListeningComposition() {
	      if (document && document.removeEventListener) {
	        document.removeEventListener('compositionstart', this.onCompositionStart);
	        document.removeEventListener('compositionend', this.onCompositionEnd);
	      }
	    }
	  }, {
	    key: "startListeningToTouch",
	    value:
	    // ==============================
	    // Touch Handlers
	    // ==============================

	    function startListeningToTouch() {
	      if (document && document.addEventListener) {
	        document.addEventListener('touchstart', this.onTouchStart, false);
	        document.addEventListener('touchmove', this.onTouchMove, false);
	        document.addEventListener('touchend', this.onTouchEnd, false);
	      }
	    }
	  }, {
	    key: "stopListeningToTouch",
	    value: function stopListeningToTouch() {
	      if (document && document.removeEventListener) {
	        document.removeEventListener('touchstart', this.onTouchStart);
	        document.removeEventListener('touchmove', this.onTouchMove);
	        document.removeEventListener('touchend', this.onTouchEnd);
	      }
	    }
	  }, {
	    key: "renderInput",
	    value:
	    // ==============================
	    // Renderers
	    // ==============================
	    function renderInput() {
	      var _this$props8 = this.props,
	        isDisabled = _this$props8.isDisabled,
	        isSearchable = _this$props8.isSearchable,
	        inputId = _this$props8.inputId,
	        inputValue = _this$props8.inputValue,
	        tabIndex = _this$props8.tabIndex,
	        form = _this$props8.form,
	        menuIsOpen = _this$props8.menuIsOpen,
	        required = _this$props8.required;
	      var _this$getComponents = this.getComponents(),
	        Input = _this$getComponents.Input;
	      var _this$state4 = this.state,
	        inputIsHidden = _this$state4.inputIsHidden,
	        ariaSelection = _this$state4.ariaSelection;
	      var commonProps = this.commonProps;
	      var id = inputId || this.getElementId('input');

	      // aria attributes makes the JSX "noisy", separated for clarity
	      var ariaAttributes = _objectSpread2(_objectSpread2(_objectSpread2({
	        'aria-autocomplete': 'list',
	        'aria-expanded': menuIsOpen,
	        'aria-haspopup': true,
	        'aria-errormessage': this.props['aria-errormessage'],
	        'aria-invalid': this.props['aria-invalid'],
	        'aria-label': this.props['aria-label'],
	        'aria-labelledby': this.props['aria-labelledby'],
	        'aria-required': required,
	        role: 'combobox'
	      }, menuIsOpen && {
	        'aria-controls': this.getElementId('listbox'),
	        'aria-owns': this.getElementId('listbox')
	      }), !isSearchable && {
	        'aria-readonly': true
	      }), this.hasValue() ? (ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === 'initial-input-focus' && {
	        'aria-describedby': this.getElementId('live-region')
	      } : {
	        'aria-describedby': this.getElementId('placeholder')
	      });
	      if (!isSearchable) {
	        // use a dummy input to maintain focus/blur functionality
	        return /*#__PURE__*/e__namespace.createElement(DummyInput, _extends({
	          id: id,
	          innerRef: this.getInputRef,
	          onBlur: this.onInputBlur,
	          onChange: noop$1,
	          onFocus: this.onInputFocus,
	          disabled: isDisabled,
	          tabIndex: tabIndex,
	          inputMode: "none",
	          form: form,
	          value: ""
	        }, ariaAttributes));
	      }
	      return /*#__PURE__*/e__namespace.createElement(Input, _extends({}, commonProps, {
	        autoCapitalize: "none",
	        autoComplete: "off",
	        autoCorrect: "off",
	        id: id,
	        innerRef: this.getInputRef,
	        isDisabled: isDisabled,
	        isHidden: inputIsHidden,
	        onBlur: this.onInputBlur,
	        onChange: this.handleInputChange,
	        onFocus: this.onInputFocus,
	        spellCheck: "false",
	        tabIndex: tabIndex,
	        form: form,
	        type: "text",
	        value: inputValue
	      }, ariaAttributes));
	    }
	  }, {
	    key: "renderPlaceholderOrValue",
	    value: function renderPlaceholderOrValue() {
	      var _this3 = this;
	      var _this$getComponents2 = this.getComponents(),
	        MultiValue = _this$getComponents2.MultiValue,
	        MultiValueContainer = _this$getComponents2.MultiValueContainer,
	        MultiValueLabel = _this$getComponents2.MultiValueLabel,
	        MultiValueRemove = _this$getComponents2.MultiValueRemove,
	        SingleValue = _this$getComponents2.SingleValue,
	        Placeholder = _this$getComponents2.Placeholder;
	      var commonProps = this.commonProps;
	      var _this$props9 = this.props,
	        controlShouldRenderValue = _this$props9.controlShouldRenderValue,
	        isDisabled = _this$props9.isDisabled,
	        isMulti = _this$props9.isMulti,
	        inputValue = _this$props9.inputValue,
	        placeholder = _this$props9.placeholder;
	      var _this$state5 = this.state,
	        selectValue = _this$state5.selectValue,
	        focusedValue = _this$state5.focusedValue,
	        isFocused = _this$state5.isFocused;
	      if (!this.hasValue() || !controlShouldRenderValue) {
	        return inputValue ? null : /*#__PURE__*/e__namespace.createElement(Placeholder, _extends({}, commonProps, {
	          key: "placeholder",
	          isDisabled: isDisabled,
	          isFocused: isFocused,
	          innerProps: {
	            id: this.getElementId('placeholder')
	          }
	        }), placeholder);
	      }
	      if (isMulti) {
	        return selectValue.map(function (opt, index) {
	          var isOptionFocused = opt === focusedValue;
	          var key = "".concat(_this3.getOptionLabel(opt), "-").concat(_this3.getOptionValue(opt));
	          return /*#__PURE__*/e__namespace.createElement(MultiValue, _extends({}, commonProps, {
	            components: {
	              Container: MultiValueContainer,
	              Label: MultiValueLabel,
	              Remove: MultiValueRemove
	            },
	            isFocused: isOptionFocused,
	            isDisabled: isDisabled,
	            key: key,
	            index: index,
	            removeProps: {
	              onClick: function onClick() {
	                return _this3.removeValue(opt);
	              },
	              onTouchEnd: function onTouchEnd() {
	                return _this3.removeValue(opt);
	              },
	              onMouseDown: function onMouseDown(e) {
	                e.preventDefault();
	              }
	            },
	            data: opt
	          }), _this3.formatOptionLabel(opt, 'value'));
	        });
	      }
	      if (inputValue) {
	        return null;
	      }
	      var singleValue = selectValue[0];
	      return /*#__PURE__*/e__namespace.createElement(SingleValue, _extends({}, commonProps, {
	        data: singleValue,
	        isDisabled: isDisabled
	      }), this.formatOptionLabel(singleValue, 'value'));
	    }
	  }, {
	    key: "renderClearIndicator",
	    value: function renderClearIndicator() {
	      var _this$getComponents3 = this.getComponents(),
	        ClearIndicator = _this$getComponents3.ClearIndicator;
	      var commonProps = this.commonProps;
	      var _this$props10 = this.props,
	        isDisabled = _this$props10.isDisabled,
	        isLoading = _this$props10.isLoading;
	      var isFocused = this.state.isFocused;
	      if (!this.isClearable() || !ClearIndicator || isDisabled || !this.hasValue() || isLoading) {
	        return null;
	      }
	      var innerProps = {
	        onMouseDown: this.onClearIndicatorMouseDown,
	        onTouchEnd: this.onClearIndicatorTouchEnd,
	        'aria-hidden': 'true'
	      };
	      return /*#__PURE__*/e__namespace.createElement(ClearIndicator, _extends({}, commonProps, {
	        innerProps: innerProps,
	        isFocused: isFocused
	      }));
	    }
	  }, {
	    key: "renderLoadingIndicator",
	    value: function renderLoadingIndicator() {
	      var _this$getComponents4 = this.getComponents(),
	        LoadingIndicator = _this$getComponents4.LoadingIndicator;
	      var commonProps = this.commonProps;
	      var _this$props11 = this.props,
	        isDisabled = _this$props11.isDisabled,
	        isLoading = _this$props11.isLoading;
	      var isFocused = this.state.isFocused;
	      if (!LoadingIndicator || !isLoading) return null;
	      var innerProps = {
	        'aria-hidden': 'true'
	      };
	      return /*#__PURE__*/e__namespace.createElement(LoadingIndicator, _extends({}, commonProps, {
	        innerProps: innerProps,
	        isDisabled: isDisabled,
	        isFocused: isFocused
	      }));
	    }
	  }, {
	    key: "renderIndicatorSeparator",
	    value: function renderIndicatorSeparator() {
	      var _this$getComponents5 = this.getComponents(),
	        DropdownIndicator = _this$getComponents5.DropdownIndicator,
	        IndicatorSeparator = _this$getComponents5.IndicatorSeparator;

	      // separator doesn't make sense without the dropdown indicator
	      if (!DropdownIndicator || !IndicatorSeparator) return null;
	      var commonProps = this.commonProps;
	      var isDisabled = this.props.isDisabled;
	      var isFocused = this.state.isFocused;
	      return /*#__PURE__*/e__namespace.createElement(IndicatorSeparator, _extends({}, commonProps, {
	        isDisabled: isDisabled,
	        isFocused: isFocused
	      }));
	    }
	  }, {
	    key: "renderDropdownIndicator",
	    value: function renderDropdownIndicator() {
	      var _this$getComponents6 = this.getComponents(),
	        DropdownIndicator = _this$getComponents6.DropdownIndicator;
	      if (!DropdownIndicator) return null;
	      var commonProps = this.commonProps;
	      var isDisabled = this.props.isDisabled;
	      var isFocused = this.state.isFocused;
	      var innerProps = {
	        onMouseDown: this.onDropdownIndicatorMouseDown,
	        onTouchEnd: this.onDropdownIndicatorTouchEnd,
	        'aria-hidden': 'true'
	      };
	      return /*#__PURE__*/e__namespace.createElement(DropdownIndicator, _extends({}, commonProps, {
	        innerProps: innerProps,
	        isDisabled: isDisabled,
	        isFocused: isFocused
	      }));
	    }
	  }, {
	    key: "renderMenu",
	    value: function renderMenu() {
	      var _this4 = this;
	      var _this$getComponents7 = this.getComponents(),
	        Group = _this$getComponents7.Group,
	        GroupHeading = _this$getComponents7.GroupHeading,
	        Menu = _this$getComponents7.Menu,
	        MenuList = _this$getComponents7.MenuList,
	        MenuPortal = _this$getComponents7.MenuPortal,
	        LoadingMessage = _this$getComponents7.LoadingMessage,
	        NoOptionsMessage = _this$getComponents7.NoOptionsMessage,
	        Option = _this$getComponents7.Option;
	      var commonProps = this.commonProps;
	      var focusedOption = this.state.focusedOption;
	      var _this$props12 = this.props,
	        captureMenuScroll = _this$props12.captureMenuScroll,
	        inputValue = _this$props12.inputValue,
	        isLoading = _this$props12.isLoading,
	        loadingMessage = _this$props12.loadingMessage,
	        minMenuHeight = _this$props12.minMenuHeight,
	        maxMenuHeight = _this$props12.maxMenuHeight,
	        menuIsOpen = _this$props12.menuIsOpen,
	        menuPlacement = _this$props12.menuPlacement,
	        menuPosition = _this$props12.menuPosition,
	        menuPortalTarget = _this$props12.menuPortalTarget,
	        menuShouldBlockScroll = _this$props12.menuShouldBlockScroll,
	        menuShouldScrollIntoView = _this$props12.menuShouldScrollIntoView,
	        noOptionsMessage = _this$props12.noOptionsMessage,
	        onMenuScrollToTop = _this$props12.onMenuScrollToTop,
	        onMenuScrollToBottom = _this$props12.onMenuScrollToBottom;
	      if (!menuIsOpen) return null;

	      // TODO: Internal Option Type here
	      var render = function render(props, id) {
	        var type = props.type,
	          data = props.data,
	          isDisabled = props.isDisabled,
	          isSelected = props.isSelected,
	          label = props.label,
	          value = props.value;
	        var isFocused = focusedOption === data;
	        var onHover = isDisabled ? undefined : function () {
	          return _this4.onOptionHover(data);
	        };
	        var onSelect = isDisabled ? undefined : function () {
	          return _this4.selectOption(data);
	        };
	        var optionId = "".concat(_this4.getElementId('option'), "-").concat(id);
	        var innerProps = {
	          id: optionId,
	          onClick: onSelect,
	          onMouseMove: onHover,
	          onMouseOver: onHover,
	          tabIndex: -1
	        };
	        return /*#__PURE__*/e__namespace.createElement(Option, _extends({}, commonProps, {
	          innerProps: innerProps,
	          data: data,
	          isDisabled: isDisabled,
	          isSelected: isSelected,
	          key: optionId,
	          label: label,
	          type: type,
	          value: value,
	          isFocused: isFocused,
	          innerRef: isFocused ? _this4.getFocusedOptionRef : undefined
	        }), _this4.formatOptionLabel(props.data, 'menu'));
	      };
	      var menuUI;
	      if (this.hasOptions()) {
	        menuUI = this.getCategorizedOptions().map(function (item) {
	          if (item.type === 'group') {
	            var _data = item.data,
	              options = item.options,
	              groupIndex = item.index;
	            var groupId = "".concat(_this4.getElementId('group'), "-").concat(groupIndex);
	            var headingId = "".concat(groupId, "-heading");
	            return /*#__PURE__*/e__namespace.createElement(Group, _extends({}, commonProps, {
	              key: groupId,
	              data: _data,
	              options: options,
	              Heading: GroupHeading,
	              headingProps: {
	                id: headingId,
	                data: item.data
	              },
	              label: _this4.formatGroupLabel(item.data)
	            }), item.options.map(function (option) {
	              return render(option, "".concat(groupIndex, "-").concat(option.index));
	            }));
	          } else if (item.type === 'option') {
	            return render(item, "".concat(item.index));
	          }
	        });
	      } else if (isLoading) {
	        var message = loadingMessage({
	          inputValue: inputValue
	        });
	        if (message === null) return null;
	        menuUI = /*#__PURE__*/e__namespace.createElement(LoadingMessage, commonProps, message);
	      } else {
	        var _message = noOptionsMessage({
	          inputValue: inputValue
	        });
	        if (_message === null) return null;
	        menuUI = /*#__PURE__*/e__namespace.createElement(NoOptionsMessage, commonProps, _message);
	      }
	      var menuPlacementProps = {
	        minMenuHeight: minMenuHeight,
	        maxMenuHeight: maxMenuHeight,
	        menuPlacement: menuPlacement,
	        menuPosition: menuPosition,
	        menuShouldScrollIntoView: menuShouldScrollIntoView
	      };
	      var menuElement = /*#__PURE__*/e__namespace.createElement(MenuPlacer, _extends({}, commonProps, menuPlacementProps), function (_ref4) {
	        var ref = _ref4.ref,
	          _ref4$placerProps = _ref4.placerProps,
	          placement = _ref4$placerProps.placement,
	          maxHeight = _ref4$placerProps.maxHeight;
	        return /*#__PURE__*/e__namespace.createElement(Menu, _extends({}, commonProps, menuPlacementProps, {
	          innerRef: ref,
	          innerProps: {
	            onMouseDown: _this4.onMenuMouseDown,
	            onMouseMove: _this4.onMenuMouseMove,
	            id: _this4.getElementId('listbox')
	          },
	          isLoading: isLoading,
	          placement: placement
	        }), /*#__PURE__*/e__namespace.createElement(ScrollManager, {
	          captureEnabled: captureMenuScroll,
	          onTopArrive: onMenuScrollToTop,
	          onBottomArrive: onMenuScrollToBottom,
	          lockEnabled: menuShouldBlockScroll
	        }, function (scrollTargetRef) {
	          return /*#__PURE__*/e__namespace.createElement(MenuList, _extends({}, commonProps, {
	            innerRef: function innerRef(instance) {
	              _this4.getMenuListRef(instance);
	              scrollTargetRef(instance);
	            },
	            isLoading: isLoading,
	            maxHeight: maxHeight,
	            focusedOption: focusedOption
	          }), menuUI);
	        }));
	      });

	      // positioning behaviour is almost identical for portalled and fixed,
	      // so we use the same component. the actual portalling logic is forked
	      // within the component based on `menuPosition`
	      return menuPortalTarget || menuPosition === 'fixed' ? /*#__PURE__*/e__namespace.createElement(MenuPortal, _extends({}, commonProps, {
	        appendTo: menuPortalTarget,
	        controlElement: this.controlRef,
	        menuPlacement: menuPlacement,
	        menuPosition: menuPosition
	      }), menuElement) : menuElement;
	    }
	  }, {
	    key: "renderFormField",
	    value: function renderFormField() {
	      var _this5 = this;
	      var _this$props13 = this.props,
	        delimiter = _this$props13.delimiter,
	        isDisabled = _this$props13.isDisabled,
	        isMulti = _this$props13.isMulti,
	        name = _this$props13.name,
	        required = _this$props13.required;
	      var selectValue = this.state.selectValue;
	      if (required && !this.hasValue() && !isDisabled) {
	        return /*#__PURE__*/e__namespace.createElement(RequiredInput$1, {
	          name: name,
	          onFocus: this.onValueInputFocus
	        });
	      }
	      if (!name || isDisabled) return;
	      if (isMulti) {
	        if (delimiter) {
	          var value = selectValue.map(function (opt) {
	            return _this5.getOptionValue(opt);
	          }).join(delimiter);
	          return /*#__PURE__*/e__namespace.createElement("input", {
	            name: name,
	            type: "hidden",
	            value: value
	          });
	        } else {
	          var input = selectValue.length > 0 ? selectValue.map(function (opt, i) {
	            return /*#__PURE__*/e__namespace.createElement("input", {
	              key: "i-".concat(i),
	              name: name,
	              type: "hidden",
	              value: _this5.getOptionValue(opt)
	            });
	          }) : /*#__PURE__*/e__namespace.createElement("input", {
	            name: name,
	            type: "hidden",
	            value: ""
	          });
	          return /*#__PURE__*/e__namespace.createElement("div", null, input);
	        }
	      } else {
	        var _value = selectValue[0] ? this.getOptionValue(selectValue[0]) : '';
	        return /*#__PURE__*/e__namespace.createElement("input", {
	          name: name,
	          type: "hidden",
	          value: _value
	        });
	      }
	    }
	  }, {
	    key: "renderLiveRegion",
	    value: function renderLiveRegion() {
	      var commonProps = this.commonProps;
	      var _this$state6 = this.state,
	        ariaSelection = _this$state6.ariaSelection,
	        focusedOption = _this$state6.focusedOption,
	        focusedValue = _this$state6.focusedValue,
	        isFocused = _this$state6.isFocused,
	        selectValue = _this$state6.selectValue;
	      var focusableOptions = this.getFocusableOptions();
	      return /*#__PURE__*/e__namespace.createElement(LiveRegion$1, _extends({}, commonProps, {
	        id: this.getElementId('live-region'),
	        ariaSelection: ariaSelection,
	        focusedOption: focusedOption,
	        focusedValue: focusedValue,
	        isFocused: isFocused,
	        selectValue: selectValue,
	        focusableOptions: focusableOptions
	      }));
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$getComponents8 = this.getComponents(),
	        Control = _this$getComponents8.Control,
	        IndicatorsContainer = _this$getComponents8.IndicatorsContainer,
	        SelectContainer = _this$getComponents8.SelectContainer,
	        ValueContainer = _this$getComponents8.ValueContainer;
	      var _this$props14 = this.props,
	        className = _this$props14.className,
	        id = _this$props14.id,
	        isDisabled = _this$props14.isDisabled,
	        menuIsOpen = _this$props14.menuIsOpen;
	      var isFocused = this.state.isFocused;
	      var commonProps = this.commonProps = this.getCommonProps();
	      return /*#__PURE__*/e__namespace.createElement(SelectContainer, _extends({}, commonProps, {
	        className: className,
	        innerProps: {
	          id: id,
	          onKeyDown: this.onKeyDown
	        },
	        isDisabled: isDisabled,
	        isFocused: isFocused
	      }), this.renderLiveRegion(), /*#__PURE__*/e__namespace.createElement(Control, _extends({}, commonProps, {
	        innerRef: this.getControlRef,
	        innerProps: {
	          onMouseDown: this.onControlMouseDown,
	          onTouchEnd: this.onControlTouchEnd
	        },
	        isDisabled: isDisabled,
	        isFocused: isFocused,
	        menuIsOpen: menuIsOpen
	      }), /*#__PURE__*/e__namespace.createElement(ValueContainer, _extends({}, commonProps, {
	        isDisabled: isDisabled
	      }), this.renderPlaceholderOrValue(), this.renderInput()), /*#__PURE__*/e__namespace.createElement(IndicatorsContainer, _extends({}, commonProps, {
	        isDisabled: isDisabled
	      }), this.renderClearIndicator(), this.renderLoadingIndicator(), this.renderIndicatorSeparator(), this.renderDropdownIndicator())), this.renderMenu(), this.renderFormField());
	    }
	  }], [{
	    key: "getDerivedStateFromProps",
	    value: function getDerivedStateFromProps(props, state) {
	      var prevProps = state.prevProps,
	        clearFocusValueOnUpdate = state.clearFocusValueOnUpdate,
	        inputIsHiddenAfterUpdate = state.inputIsHiddenAfterUpdate,
	        ariaSelection = state.ariaSelection,
	        isFocused = state.isFocused,
	        prevWasFocused = state.prevWasFocused;
	      var options = props.options,
	        value = props.value,
	        menuIsOpen = props.menuIsOpen,
	        inputValue = props.inputValue,
	        isMulti = props.isMulti;
	      var selectValue = cleanValue(value);
	      var newMenuOptionsState = {};
	      if (prevProps && (value !== prevProps.value || options !== prevProps.options || menuIsOpen !== prevProps.menuIsOpen || inputValue !== prevProps.inputValue)) {
	        var focusableOptions = menuIsOpen ? buildFocusableOptions(props, selectValue) : [];
	        var focusedValue = clearFocusValueOnUpdate ? getNextFocusedValue(state, selectValue) : null;
	        var focusedOption = getNextFocusedOption(state, focusableOptions);
	        newMenuOptionsState = {
	          selectValue: selectValue,
	          focusedOption: focusedOption,
	          focusedValue: focusedValue,
	          clearFocusValueOnUpdate: false
	        };
	      }
	      // some updates should toggle the state of the input visibility
	      var newInputIsHiddenState = inputIsHiddenAfterUpdate != null && props !== prevProps ? {
	        inputIsHidden: inputIsHiddenAfterUpdate,
	        inputIsHiddenAfterUpdate: undefined
	      } : {};
	      var newAriaSelection = ariaSelection;
	      var hasKeptFocus = isFocused && prevWasFocused;
	      if (isFocused && !hasKeptFocus) {
	        // If `value` or `defaultValue` props are not empty then announce them
	        // when the Select is initially focused
	        newAriaSelection = {
	          value: valueTernary(isMulti, selectValue, selectValue[0] || null),
	          options: selectValue,
	          action: 'initial-input-focus'
	        };
	        hasKeptFocus = !prevWasFocused;
	      }

	      // If the 'initial-input-focus' action has been set already
	      // then reset the ariaSelection to null
	      if ((ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === 'initial-input-focus') {
	        newAriaSelection = null;
	      }
	      return _objectSpread2(_objectSpread2(_objectSpread2({}, newMenuOptionsState), newInputIsHiddenState), {}, {
	        prevProps: props,
	        ariaSelection: newAriaSelection,
	        prevWasFocused: hasKeptFocus
	      });
	    }
	  }]);
	  return Select;
	}(e$1.Component);
	Select.defaultProps = defaultProps;

	var StateManagedSelect = /*#__PURE__*/e$1.forwardRef(function (props, ref) {
	  var baseSelectProps = useStateManager(props);
	  return /*#__PURE__*/e__namespace.createElement(Select, _extends({
	    ref: ref
	  }, baseSelectProps));
	});
	var StateManagedSelect$1 = StateManagedSelect;

	function EntityFilters({
	  urlFiltersStore,
	  filtersStore
	}) {
	  const OptionWithDot = props => {
	    var _toJS;
	    const color = (_toJS = toJS(props.data.backgroundColor)) !== null && _toJS !== void 0 ? _toJS : '#ECECEE';
	    return wp.element.createElement(components.Option, _extends({}, props, {
	      className: "mpa-multiselect-with-dot"
	    }), wp.element.createElement("div", {
	      className: "mpa-multiselect-option"
	    }, wp.element.createElement("div", {
	      className: "mpa-multiselect-option-dot",
	      style: {
	        backgroundColor: color
	      }
	    }), wp.element.createElement("div", {
	      className: "mpa-multiselect-option-title"
	    }, props.children), wp.element.createElement("div", {
	      className: "mpa-multiselect-option-hover"
	    }, wp.element.createElement("svg", {
	      width: "8",
	      height: "12",
	      viewBox: "0 0 8 12",
	      fill: "none",
	      xmlns: "http://www.w3.org/2000/svg"
	    }, wp.element.createElement("path", {
	      d: "M5.707 0L0 5.707L5.707 11.414L7.121 10L2.828 5.707L7.121 1.414L5.707 0Z",
	      fill: "#C1C0C0"
	    })))));
	  };
	  const multiselectStyles = {
	    groupHeading: (styles, {
	      data
	    }) => ({
	      ...styles,
	      display: toJS(data.label) ? 'block' : 'none'
	    }),
	    option: (styles, {
	      data,
	      isDisabled,
	      isFocused,
	      isSelected
	    }) => ({
	      ...styles,
	      cursor: isDisabled ? 'not-allowed' : 'pointer',
	      backgroundColor: isFocused ? '#f0f0f0' : undefined,
	      ':active': {
	        backgroundColor: '#f0f0f0'
	      }
	    }),
	    control: (styles, {
	      isDisabled,
	      isFocused
	    }) => ({
	      ...styles,
	      background: '#fff',
	      opacity: isDisabled ? 0.5 : 1,
	      border: isFocused ? 0 : 0,
	      // This line disable the blue border
	      boxShadow: isFocused ? 0 : 0,
	      '&:hover': {
	        border: isFocused ? 0 : 0
	      }
	    }),
	    multiValueRemove: (styles, {
	      data
	    }) => ({
	      ...styles,
	      ':hover': {
	        backgroundColor: '#b4b4b4',
	        cursor: 'pointer'
	      }
	    })
	  };
	  const multiselectOptionWithColorDotStyles = {
	    ...multiselectStyles,
	    option: (styles, {
	      data,
	      isDisabled,
	      isFocused,
	      isSelected
	    }) => ({
	      ...styles,
	      cursor: isDisabled ? 'not-allowed' : 'pointer',
	      backgroundColor: undefined,
	      ':active': {
	        backgroundColor: undefined
	      }
	    }),
	    multiValue: (styles, {
	      data
	    }) => {
	      return {
	        ...styles,
	        backgroundColor: data.backgroundColor
	      };
	    },
	    multiValueLabel: (styles, {
	      data
	    }) => ({
	      ...styles,
	      color: data.textColor
	    }),
	    multiValueRemove: (styles, {
	      data
	    }) => ({
	      ...styles,
	      color: data.textColor,
	      ':hover': {
	        cursor: 'pointer',
	        backgroundColor: chroma(data.backgroundColor).darken().css()
	      }
	    })
	  };
	  const onChangeStatusFilterHandler = selectedStatusesObject => {
	    const selectedStatuses = selectedStatusesObject.map(obj => obj.value).join(',');
	    urlFiltersStore.setStatuses(selectedStatuses);
	    urlFiltersStore.updateHistory();
	  };
	  const onChangeServicesFilterHandler = selectedServicesObject => {
	    const selectedServices = selectedServicesObject.map(obj => obj.value).join(',');
	    urlFiltersStore.setServices(selectedServices);
	    urlFiltersStore.updateHistory();
	  };
	  const onChangeLocationsFilterHandler = selectedLocationsObject => {
	    const selectedLocations = selectedLocationsObject.map(obj => obj.value).join(',');
	    urlFiltersStore.setLocations(selectedLocations);
	    urlFiltersStore.updateHistory();
	  };
	  const onChangeEmployeesFilterHandler = selectedEmployeesObject => {
	    const selectedEmployees = selectedEmployeesObject.map(obj => obj.value).join(',');
	    urlFiltersStore.setEmployees(selectedEmployees);
	    urlFiltersStore.updateHistory();
	  };

	  /**
	   * @param {Object[]} object Object of react-select data
	   * @param {string} object[].label
	   * @param {string} object[].value Optional. value or options
	   * @param {Object[]} object[].options  Optional. value or options
	   * @param {string[]} object[].options.categories
	   * @param {string[]} object[].options.categories
	   * @param {string} object[].options.label
	   * @param {string} object[].options.value
	   * @param idsString string with data separated by commas, based on which we filter the object.
	   * @return {Object} Filtered incoming object
	   */
	  const filterObjectBySelectedIds = (object, idsString) => {
	    const idsArray = idsString.split(',');
	    let selectedValue = [];
	    object.map(v => {
	      // for input select without groupby
	      if (v.value !== undefined && idsArray.includes(v.value.toString())) {
	        selectedValue.push(v);
	      }

	      // for input select with groupby headers
	      if (v.options !== undefined) {
	        v.options.map(function (option) {
	          if (idsArray.includes(option.value.toString())) {
	            selectedValue.push(option);
	          }
	        });
	      }
	    });
	    return selectedValue;
	  };
	  const selectedServices = () => {
	    const servicesString = urlFiltersStore.getServices();
	    const services = toJS(filtersStore.services);
	    return filterObjectBySelectedIds(services, servicesString);
	  };
	  const selectedLocations = () => {
	    const locationsString = urlFiltersStore.getLocations();
	    const locations = toJS(filtersStore.locations);
	    return filterObjectBySelectedIds(locations, locationsString);
	  };
	  const selectedEmployees = () => {
	    const employeesString = urlFiltersStore.getEmployees();
	    const employees = toJS(filtersStore.employees);
	    return filterObjectBySelectedIds(employees, employeesString);
	  };
	  const selectedStatuses = () => {
	    const statusesString = urlFiltersStore.getStatuses();
	    const statuses = toJS(filtersStore.statuses);
	    return filterObjectBySelectedIds(statuses, statusesString);
	  };
	  return wp.element.createElement(ObserverComponent, null, () => wp.element.createElement("div", {
	    className: "mpa-filters"
	  }, wp.element.createElement("div", {
	    className: "mpa-select-input-filters mpa-filters__row"
	  }, wp.element.createElement("div", {
	    className: "mpa-multiselect mpa-select-input-filters__item"
	  }, wp.element.createElement(Form$1.Label, {
	    htmlFor: "mpa-services-filter",
	    className: "mpa-multiselect__label"
	  }, __('Services', 'motopress-appointment')), wp.element.createElement(StateManagedSelect$1, {
	    inputId: "mpa-services-filter",
	    className: "mpa-multiselect-input",
	    classNamePrefix: "mpa-multiselect-input",
	    value: selectedServices(),
	    options: filtersStore.services,
	    closeMenuOnSelect: false,
	    isMulti: true,
	    isLoading: filtersStore.servicesLoading,
	    placeholder: __('All', 'motopress-appointment'),
	    styles: multiselectOptionWithColorDotStyles,
	    onChange: onChangeServicesFilterHandler,
	    components: {
	      Option: OptionWithDot
	    }
	  })), wp.element.createElement("div", {
	    className: "mpa-multiselect mpa-select-input-filters__item"
	  }, wp.element.createElement(Form$1.Label, {
	    htmlFor: "mpa-locations-filter",
	    className: "mpa-multiselect__label"
	  }, __('Locations', 'motopress-appointment')), wp.element.createElement(StateManagedSelect$1, {
	    inputId: "mpa-locations-filter",
	    className: "mpa-multiselect-input",
	    classNamePrefix: "mpa-multiselect-input",
	    value: selectedLocations(),
	    options: filtersStore.locations,
	    closeMenuOnSelect: false,
	    isMulti: true,
	    isLoading: filtersStore.locationsLoading,
	    placeholder: __('All', 'motopress-appointment'),
	    styles: multiselectStyles,
	    onChange: onChangeLocationsFilterHandler
	  }))), wp.element.createElement("div", {
	    className: "mpa-select-input-filters mpa-filters__row"
	  }, wp.element.createElement("div", {
	    className: "mpa-multiselect mpa-select-input-filters__item"
	  }, wp.element.createElement(Form$1.Label, {
	    htmlFor: "mpa-employees-filter",
	    className: "mpa-multiselect__label"
	  }, __('Employees', 'motopress-appointment')), wp.element.createElement(StateManagedSelect$1, {
	    inputId: "mpa-employees-filter",
	    className: "mpa-multiselect-input",
	    classNamePrefix: "mpa-multiselect-input",
	    value: selectedEmployees(),
	    isDisabled: filtersStore.employeesDisabled,
	    options: filtersStore.employees,
	    closeMenuOnSelect: false,
	    isMulti: true,
	    isLoading: filtersStore.employeesLoading,
	    placeholder: __('All', 'motopress-appointment'),
	    styles: multiselectStyles,
	    onChange: onChangeEmployeesFilterHandler
	  })), wp.element.createElement("div", {
	    className: "mpa-multiselect mpa-select-input-filters__item"
	  }, wp.element.createElement(Form$1.Label, {
	    htmlFor: "mpa-statuses-filter",
	    className: "mpa-select__label"
	  }, __('Statuses', 'motopress-appointment')), wp.element.createElement(StateManagedSelect$1, {
	    inputId: "mpa-statuses-filter",
	    className: "mpa-multiselect-input",
	    classNamePrefix: "mpa-multiselect-input",
	    value: selectedStatuses(),
	    options: filtersStore.statuses,
	    isMulti: true,
	    placeholder: __('All', 'motopress-appointment'),
	    styles: multiselectStyles,
	    onChange: onChangeStatusFilterHandler
	  })))));
	}

	const DateRangeDisplay = ({
	  startDate,
	  endDate,
	  onClick
	}) => {
	  const sameDay = moment(startDate).isSame(endDate, 'day');
	  const currentYear = moment().year();
	  const startFormat = moment(startDate).year() === currentYear ? 'MMMM D' : 'MMMM D, YYYY';
	  const endFormat = moment(endDate).year() === currentYear ? 'MMMM D' : 'MMMM D, YYYY';
	  const startDateFormatted = moment(startDate).format(startFormat);
	  const endDateFormatted = moment(endDate).format(endFormat);
	  return startDate && endDate && wp.element.createElement("div", {
	    className: "mpa-date-range-display"
	  }, wp.element.createElement("span", {
	    onClick: onClick
	  }, startDateFormatted), !sameDay && wp.element.createElement("span", {
	    onClick: onClick
	  }, " \u2013 ", endDateFormatted));
	};

	const ToggleGroupControl = ({
	  options = [],
	  selected,
	  onSelect
	}) => {
	  const handleOnClick = value => {
	    onSelect(value);
	  };
	  return wp.element.createElement(components$1.Dropdown, {
	    className: "mpa-toggle-group-control",
	    position: "right",
	    contentClassName: "mpa-toggle-group-control__content",
	    renderToggle: ({
	      onToggle
	    }) => wp.element.createElement(components$1.Button, {
	      isPrimary: true,
	      onClick: onToggle
	    }, selected),
	    renderContent: () => wp.element.createElement(components$1.ButtonGroup, {
	      className: "mpa-toggle-group-control__group"
	    }, options.map(option => wp.element.createElement(components$1.Button, {
	      className: "mpa-toggle-group-control__button",
	      isPrimary: selected === option,
	      isSecondary: selected !== option,
	      onClick: () => handleOnClick(option),
	      key: option
	    }, option)))
	  });
	};

	/*!
	 * @kurkle/color v0.3.2
	 * https://github.com/kurkle/color#readme
	 * (c) 2023 Jukka Kurkela
	 * Released under the MIT License
	 */
	function round(v) {
	  return v + 0.5 | 0;
	}
	const lim = (v, l, h) => Math.max(Math.min(v, h), l);
	function p2b(v) {
	  return lim(round(v * 2.55), 0, 255);
	}
	function n2b(v) {
	  return lim(round(v * 255), 0, 255);
	}
	function b2n(v) {
	  return lim(round(v / 2.55) / 100, 0, 1);
	}
	function n2p(v) {
	  return lim(round(v * 100), 0, 100);
	}

	const map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};
	const hex = [...'0123456789ABCDEF'];
	const h1 = b => hex[b & 0xF];
	const h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];
	const eq = b => ((b & 0xF0) >> 4) === (b & 0xF);
	const isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);
	function hexParse(str) {
	  var len = str.length;
	  var ret;
	  if (str[0] === '#') {
	    if (len === 4 || len === 5) {
	      ret = {
	        r: 255 & map$1[str[1]] * 17,
	        g: 255 & map$1[str[2]] * 17,
	        b: 255 & map$1[str[3]] * 17,
	        a: len === 5 ? map$1[str[4]] * 17 : 255
	      };
	    } else if (len === 7 || len === 9) {
	      ret = {
	        r: map$1[str[1]] << 4 | map$1[str[2]],
	        g: map$1[str[3]] << 4 | map$1[str[4]],
	        b: map$1[str[5]] << 4 | map$1[str[6]],
	        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255
	      };
	    }
	  }
	  return ret;
	}
	const alpha = (a, f) => a < 255 ? f(a) : '';
	function hexString(v) {
	  var f = isShort(v) ? h1 : h2;
	  return v
	    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)
	    : undefined;
	}

	const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
	function hsl2rgbn(h, s, l) {
	  const a = s * Math.min(l, 1 - l);
	  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
	  return [f(0), f(8), f(4)];
	}
	function hsv2rgbn(h, s, v) {
	  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
	  return [f(5), f(3), f(1)];
	}
	function hwb2rgbn(h, w, b) {
	  const rgb = hsl2rgbn(h, 1, 0.5);
	  let i;
	  if (w + b > 1) {
	    i = 1 / (w + b);
	    w *= i;
	    b *= i;
	  }
	  for (i = 0; i < 3; i++) {
	    rgb[i] *= 1 - w - b;
	    rgb[i] += w;
	  }
	  return rgb;
	}
	function hueValue(r, g, b, d, max) {
	  if (r === max) {
	    return ((g - b) / d) + (g < b ? 6 : 0);
	  }
	  if (g === max) {
	    return (b - r) / d + 2;
	  }
	  return (r - g) / d + 4;
	}
	function rgb2hsl(v) {
	  const range = 255;
	  const r = v.r / range;
	  const g = v.g / range;
	  const b = v.b / range;
	  const max = Math.max(r, g, b);
	  const min = Math.min(r, g, b);
	  const l = (max + min) / 2;
	  let h, s, d;
	  if (max !== min) {
	    d = max - min;
	    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
	    h = hueValue(r, g, b, d, max);
	    h = h * 60 + 0.5;
	  }
	  return [h | 0, s || 0, l];
	}
	function calln(f, a, b, c) {
	  return (
	    Array.isArray(a)
	      ? f(a[0], a[1], a[2])
	      : f(a, b, c)
	  ).map(n2b);
	}
	function hsl2rgb(h, s, l) {
	  return calln(hsl2rgbn, h, s, l);
	}
	function hwb2rgb(h, w, b) {
	  return calln(hwb2rgbn, h, w, b);
	}
	function hsv2rgb(h, s, v) {
	  return calln(hsv2rgbn, h, s, v);
	}
	function hue(h) {
	  return (h % 360 + 360) % 360;
	}
	function hueParse(str) {
	  const m = HUE_RE.exec(str);
	  let a = 255;
	  let v;
	  if (!m) {
	    return;
	  }
	  if (m[5] !== v) {
	    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);
	  }
	  const h = hue(+m[2]);
	  const p1 = +m[3] / 100;
	  const p2 = +m[4] / 100;
	  if (m[1] === 'hwb') {
	    v = hwb2rgb(h, p1, p2);
	  } else if (m[1] === 'hsv') {
	    v = hsv2rgb(h, p1, p2);
	  } else {
	    v = hsl2rgb(h, p1, p2);
	  }
	  return {
	    r: v[0],
	    g: v[1],
	    b: v[2],
	    a: a
	  };
	}
	function rotate(v, deg) {
	  var h = rgb2hsl(v);
	  h[0] = hue(h[0] + deg);
	  h = hsl2rgb(h);
	  v.r = h[0];
	  v.g = h[1];
	  v.b = h[2];
	}
	function hslString(v) {
	  if (!v) {
	    return;
	  }
	  const a = rgb2hsl(v);
	  const h = a[0];
	  const s = n2p(a[1]);
	  const l = n2p(a[2]);
	  return v.a < 255
	    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`
	    : `hsl(${h}, ${s}%, ${l}%)`;
	}

	const map = {
	  x: 'dark',
	  Z: 'light',
	  Y: 're',
	  X: 'blu',
	  W: 'gr',
	  V: 'medium',
	  U: 'slate',
	  A: 'ee',
	  T: 'ol',
	  S: 'or',
	  B: 'ra',
	  C: 'lateg',
	  D: 'ights',
	  R: 'in',
	  Q: 'turquois',
	  E: 'hi',
	  P: 'ro',
	  O: 'al',
	  N: 'le',
	  M: 'de',
	  L: 'yello',
	  F: 'en',
	  K: 'ch',
	  G: 'arks',
	  H: 'ea',
	  I: 'ightg',
	  J: 'wh'
	};
	const names$1 = {
	  OiceXe: 'f0f8ff',
	  antiquewEte: 'faebd7',
	  aqua: 'ffff',
	  aquamarRe: '7fffd4',
	  azuY: 'f0ffff',
	  beige: 'f5f5dc',
	  bisque: 'ffe4c4',
	  black: '0',
	  blanKedOmond: 'ffebcd',
	  Xe: 'ff',
	  XeviTet: '8a2be2',
	  bPwn: 'a52a2a',
	  burlywood: 'deb887',
	  caMtXe: '5f9ea0',
	  KartYuse: '7fff00',
	  KocTate: 'd2691e',
	  cSO: 'ff7f50',
	  cSnflowerXe: '6495ed',
	  cSnsilk: 'fff8dc',
	  crimson: 'dc143c',
	  cyan: 'ffff',
	  xXe: '8b',
	  xcyan: '8b8b',
	  xgTMnPd: 'b8860b',
	  xWay: 'a9a9a9',
	  xgYF: '6400',
	  xgYy: 'a9a9a9',
	  xkhaki: 'bdb76b',
	  xmagFta: '8b008b',
	  xTivegYF: '556b2f',
	  xSange: 'ff8c00',
	  xScEd: '9932cc',
	  xYd: '8b0000',
	  xsOmon: 'e9967a',
	  xsHgYF: '8fbc8f',
	  xUXe: '483d8b',
	  xUWay: '2f4f4f',
	  xUgYy: '2f4f4f',
	  xQe: 'ced1',
	  xviTet: '9400d3',
	  dAppRk: 'ff1493',
	  dApskyXe: 'bfff',
	  dimWay: '696969',
	  dimgYy: '696969',
	  dodgerXe: '1e90ff',
	  fiYbrick: 'b22222',
	  flSOwEte: 'fffaf0',
	  foYstWAn: '228b22',
	  fuKsia: 'ff00ff',
	  gaRsbSo: 'dcdcdc',
	  ghostwEte: 'f8f8ff',
	  gTd: 'ffd700',
	  gTMnPd: 'daa520',
	  Way: '808080',
	  gYF: '8000',
	  gYFLw: 'adff2f',
	  gYy: '808080',
	  honeyMw: 'f0fff0',
	  hotpRk: 'ff69b4',
	  RdianYd: 'cd5c5c',
	  Rdigo: '4b0082',
	  ivSy: 'fffff0',
	  khaki: 'f0e68c',
	  lavFMr: 'e6e6fa',
	  lavFMrXsh: 'fff0f5',
	  lawngYF: '7cfc00',
	  NmoncEffon: 'fffacd',
	  ZXe: 'add8e6',
	  ZcSO: 'f08080',
	  Zcyan: 'e0ffff',
	  ZgTMnPdLw: 'fafad2',
	  ZWay: 'd3d3d3',
	  ZgYF: '90ee90',
	  ZgYy: 'd3d3d3',
	  ZpRk: 'ffb6c1',
	  ZsOmon: 'ffa07a',
	  ZsHgYF: '20b2aa',
	  ZskyXe: '87cefa',
	  ZUWay: '778899',
	  ZUgYy: '778899',
	  ZstAlXe: 'b0c4de',
	  ZLw: 'ffffe0',
	  lime: 'ff00',
	  limegYF: '32cd32',
	  lRF: 'faf0e6',
	  magFta: 'ff00ff',
	  maPon: '800000',
	  VaquamarRe: '66cdaa',
	  VXe: 'cd',
	  VScEd: 'ba55d3',
	  VpurpN: '9370db',
	  VsHgYF: '3cb371',
	  VUXe: '7b68ee',
	  VsprRggYF: 'fa9a',
	  VQe: '48d1cc',
	  VviTetYd: 'c71585',
	  midnightXe: '191970',
	  mRtcYam: 'f5fffa',
	  mistyPse: 'ffe4e1',
	  moccasR: 'ffe4b5',
	  navajowEte: 'ffdead',
	  navy: '80',
	  Tdlace: 'fdf5e6',
	  Tive: '808000',
	  TivedBb: '6b8e23',
	  Sange: 'ffa500',
	  SangeYd: 'ff4500',
	  ScEd: 'da70d6',
	  pOegTMnPd: 'eee8aa',
	  pOegYF: '98fb98',
	  pOeQe: 'afeeee',
	  pOeviTetYd: 'db7093',
	  papayawEp: 'ffefd5',
	  pHKpuff: 'ffdab9',
	  peru: 'cd853f',
	  pRk: 'ffc0cb',
	  plum: 'dda0dd',
	  powMrXe: 'b0e0e6',
	  purpN: '800080',
	  YbeccapurpN: '663399',
	  Yd: 'ff0000',
	  Psybrown: 'bc8f8f',
	  PyOXe: '4169e1',
	  saddNbPwn: '8b4513',
	  sOmon: 'fa8072',
	  sandybPwn: 'f4a460',
	  sHgYF: '2e8b57',
	  sHshell: 'fff5ee',
	  siFna: 'a0522d',
	  silver: 'c0c0c0',
	  skyXe: '87ceeb',
	  UXe: '6a5acd',
	  UWay: '708090',
	  UgYy: '708090',
	  snow: 'fffafa',
	  sprRggYF: 'ff7f',
	  stAlXe: '4682b4',
	  tan: 'd2b48c',
	  teO: '8080',
	  tEstN: 'd8bfd8',
	  tomato: 'ff6347',
	  Qe: '40e0d0',
	  viTet: 'ee82ee',
	  JHt: 'f5deb3',
	  wEte: 'ffffff',
	  wEtesmoke: 'f5f5f5',
	  Lw: 'ffff00',
	  LwgYF: '9acd32'
	};
	function unpack() {
	  const unpacked = {};
	  const keys = Object.keys(names$1);
	  const tkeys = Object.keys(map);
	  let i, j, k, ok, nk;
	  for (i = 0; i < keys.length; i++) {
	    ok = nk = keys[i];
	    for (j = 0; j < tkeys.length; j++) {
	      k = tkeys[j];
	      nk = nk.replace(k, map[k]);
	    }
	    k = parseInt(names$1[ok], 16);
	    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];
	  }
	  return unpacked;
	}

	let names;
	function nameParse(str) {
	  if (!names) {
	    names = unpack();
	    names.transparent = [0, 0, 0, 0];
	  }
	  const a = names[str.toLowerCase()];
	  return a && {
	    r: a[0],
	    g: a[1],
	    b: a[2],
	    a: a.length === 4 ? a[3] : 255
	  };
	}

	const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
	function rgbParse(str) {
	  const m = RGB_RE.exec(str);
	  let a = 255;
	  let r, g, b;
	  if (!m) {
	    return;
	  }
	  if (m[7] !== r) {
	    const v = +m[7];
	    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);
	  }
	  r = +m[1];
	  g = +m[3];
	  b = +m[5];
	  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));
	  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));
	  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));
	  return {
	    r: r,
	    g: g,
	    b: b,
	    a: a
	  };
	}
	function rgbString(v) {
	  return v && (
	    v.a < 255
	      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`
	      : `rgb(${v.r}, ${v.g}, ${v.b})`
	  );
	}

	const to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;
	const from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
	function interpolate$1(rgb1, rgb2, t) {
	  const r = from(b2n(rgb1.r));
	  const g = from(b2n(rgb1.g));
	  const b = from(b2n(rgb1.b));
	  return {
	    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),
	    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),
	    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),
	    a: rgb1.a + t * (rgb2.a - rgb1.a)
	  };
	}

	function modHSL(v, i, ratio) {
	  if (v) {
	    let tmp = rgb2hsl(v);
	    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
	    tmp = hsl2rgb(tmp);
	    v.r = tmp[0];
	    v.g = tmp[1];
	    v.b = tmp[2];
	  }
	}
	function clone$1(v, proto) {
	  return v ? Object.assign(proto || {}, v) : v;
	}
	function fromObject(input) {
	  var v = {r: 0, g: 0, b: 0, a: 255};
	  if (Array.isArray(input)) {
	    if (input.length >= 3) {
	      v = {r: input[0], g: input[1], b: input[2], a: 255};
	      if (input.length > 3) {
	        v.a = n2b(input[3]);
	      }
	    }
	  } else {
	    v = clone$1(input, {r: 0, g: 0, b: 0, a: 1});
	    v.a = n2b(v.a);
	  }
	  return v;
	}
	function functionParse(str) {
	  if (str.charAt(0) === 'r') {
	    return rgbParse(str);
	  }
	  return hueParse(str);
	}
	class Color {
	  constructor(input) {
	    if (input instanceof Color) {
	      return input;
	    }
	    const type = typeof input;
	    let v;
	    if (type === 'object') {
	      v = fromObject(input);
	    } else if (type === 'string') {
	      v = hexParse(input) || nameParse(input) || functionParse(input);
	    }
	    this._rgb = v;
	    this._valid = !!v;
	  }
	  get valid() {
	    return this._valid;
	  }
	  get rgb() {
	    var v = clone$1(this._rgb);
	    if (v) {
	      v.a = b2n(v.a);
	    }
	    return v;
	  }
	  set rgb(obj) {
	    this._rgb = fromObject(obj);
	  }
	  rgbString() {
	    return this._valid ? rgbString(this._rgb) : undefined;
	  }
	  hexString() {
	    return this._valid ? hexString(this._rgb) : undefined;
	  }
	  hslString() {
	    return this._valid ? hslString(this._rgb) : undefined;
	  }
	  mix(color, weight) {
	    if (color) {
	      const c1 = this.rgb;
	      const c2 = color.rgb;
	      let w2;
	      const p = weight === w2 ? 0.5 : weight;
	      const w = 2 * p - 1;
	      const a = c1.a - c2.a;
	      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
	      w2 = 1 - w1;
	      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;
	      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;
	      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;
	      c1.a = p * c1.a + (1 - p) * c2.a;
	      this.rgb = c1;
	    }
	    return this;
	  }
	  interpolate(color, t) {
	    if (color) {
	      this._rgb = interpolate$1(this._rgb, color._rgb, t);
	    }
	    return this;
	  }
	  clone() {
	    return new Color(this.rgb);
	  }
	  alpha(a) {
	    this._rgb.a = n2b(a);
	    return this;
	  }
	  clearer(ratio) {
	    const rgb = this._rgb;
	    rgb.a *= 1 - ratio;
	    return this;
	  }
	  greyscale() {
	    const rgb = this._rgb;
	    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
	    rgb.r = rgb.g = rgb.b = val;
	    return this;
	  }
	  opaquer(ratio) {
	    const rgb = this._rgb;
	    rgb.a *= 1 + ratio;
	    return this;
	  }
	  negate() {
	    const v = this._rgb;
	    v.r = 255 - v.r;
	    v.g = 255 - v.g;
	    v.b = 255 - v.b;
	    return this;
	  }
	  lighten(ratio) {
	    modHSL(this._rgb, 2, ratio);
	    return this;
	  }
	  darken(ratio) {
	    modHSL(this._rgb, 2, -ratio);
	    return this;
	  }
	  saturate(ratio) {
	    modHSL(this._rgb, 1, ratio);
	    return this;
	  }
	  desaturate(ratio) {
	    modHSL(this._rgb, 1, -ratio);
	    return this;
	  }
	  rotate(deg) {
	    rotate(this._rgb, deg);
	    return this;
	  }
	}

	/*!
	 * Chart.js v4.4.0
	 * https://www.chartjs.org
	 * (c) 2023 Chart.js Contributors
	 * Released under the MIT License
	 */

	/**
	 * @namespace Chart.helpers
	 */ /**
	 * An empty function that can be used, for example, for optional callback.
	 */ function noop() {
	/* noop */ }
	/**
	 * Returns a unique id, sequentially generated from a global variable.
	 */ const uid = (()=>{
	    let id = 0;
	    return ()=>id++;
	})();
	/**
	 * Returns true if `value` is neither null nor undefined, else returns false.
	 * @param value - The value to test.
	 * @since 2.7.0
	 */ function isNullOrUndef(value) {
	    return value === null || typeof value === 'undefined';
	}
	/**
	 * Returns true if `value` is an array (including typed arrays), else returns false.
	 * @param value - The value to test.
	 * @function
	 */ function isArray(value) {
	    if (Array.isArray && Array.isArray(value)) {
	        return true;
	    }
	    const type = Object.prototype.toString.call(value);
	    if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {
	        return true;
	    }
	    return false;
	}
	/**
	 * Returns true if `value` is an object (excluding null), else returns false.
	 * @param value - The value to test.
	 * @since 2.7.0
	 */ function isObject(value) {
	    return value !== null && Object.prototype.toString.call(value) === '[object Object]';
	}
	/**
	 * Returns true if `value` is a finite number, else returns false
	 * @param value  - The value to test.
	 */ function isNumberFinite(value) {
	    return (typeof value === 'number' || value instanceof Number) && isFinite(+value);
	}
	/**
	 * Returns `value` if finite, else returns `defaultValue`.
	 * @param value - The value to return if defined.
	 * @param defaultValue - The value to return if `value` is not finite.
	 */ function finiteOrDefault(value, defaultValue) {
	    return isNumberFinite(value) ? value : defaultValue;
	}
	/**
	 * Returns `value` if defined, else returns `defaultValue`.
	 * @param value - The value to return if defined.
	 * @param defaultValue - The value to return if `value` is undefined.
	 */ function valueOrDefault(value, defaultValue) {
	    return typeof value === 'undefined' ? defaultValue : value;
	}
	const toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;
	/**
	 * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
	 * value returned by `fn`. If `fn` is not a function, this method returns undefined.
	 * @param fn - The function to call.
	 * @param args - The arguments with which `fn` should be called.
	 * @param [thisArg] - The value of `this` provided for the call to `fn`.
	 */ function callback(fn, args, thisArg) {
	    if (fn && typeof fn.call === 'function') {
	        return fn.apply(thisArg, args);
	    }
	}
	function each(loopable, fn, thisArg, reverse) {
	    let i, len, keys;
	    if (isArray(loopable)) {
	        len = loopable.length;
	        if (reverse) {
	            for(i = len - 1; i >= 0; i--){
	                fn.call(thisArg, loopable[i], i);
	            }
	        } else {
	            for(i = 0; i < len; i++){
	                fn.call(thisArg, loopable[i], i);
	            }
	        }
	    } else if (isObject(loopable)) {
	        keys = Object.keys(loopable);
	        len = keys.length;
	        for(i = 0; i < len; i++){
	            fn.call(thisArg, loopable[keys[i]], keys[i]);
	        }
	    }
	}
	/**
	 * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
	 * @param a0 - The array to compare
	 * @param a1 - The array to compare
	 * @private
	 */ function _elementsEqual(a0, a1) {
	    let i, ilen, v0, v1;
	    if (!a0 || !a1 || a0.length !== a1.length) {
	        return false;
	    }
	    for(i = 0, ilen = a0.length; i < ilen; ++i){
	        v0 = a0[i];
	        v1 = a1[i];
	        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {
	            return false;
	        }
	    }
	    return true;
	}
	/**
	 * Returns a deep copy of `source` without keeping references on objects and arrays.
	 * @param source - The value to clone.
	 */ function clone(source) {
	    if (isArray(source)) {
	        return source.map(clone);
	    }
	    if (isObject(source)) {
	        const target = Object.create(null);
	        const keys = Object.keys(source);
	        const klen = keys.length;
	        let k = 0;
	        for(; k < klen; ++k){
	            target[keys[k]] = clone(source[keys[k]]);
	        }
	        return target;
	    }
	    return source;
	}
	function isValidKey(key) {
	    return [
	        '__proto__',
	        'prototype',
	        'constructor'
	    ].indexOf(key) === -1;
	}
	/**
	 * The default merger when Chart.helpers.merge is called without merger option.
	 * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
	 * @private
	 */ function _merger(key, target, source, options) {
	    if (!isValidKey(key)) {
	        return;
	    }
	    const tval = target[key];
	    const sval = source[key];
	    if (isObject(tval) && isObject(sval)) {
	        // eslint-disable-next-line @typescript-eslint/no-use-before-define
	        merge(tval, sval, options);
	    } else {
	        target[key] = clone(sval);
	    }
	}
	function merge(target, source, options) {
	    const sources = isArray(source) ? source : [
	        source
	    ];
	    const ilen = sources.length;
	    if (!isObject(target)) {
	        return target;
	    }
	    options = options || {};
	    const merger = options.merger || _merger;
	    let current;
	    for(let i = 0; i < ilen; ++i){
	        current = sources[i];
	        if (!isObject(current)) {
	            continue;
	        }
	        const keys = Object.keys(current);
	        for(let k = 0, klen = keys.length; k < klen; ++k){
	            merger(keys[k], target, current, options);
	        }
	    }
	    return target;
	}
	function mergeIf(target, source) {
	    // eslint-disable-next-line @typescript-eslint/no-use-before-define
	    return merge(target, source, {
	        merger: _mergerIf
	    });
	}
	/**
	 * Merges source[key] in target[key] only if target[key] is undefined.
	 * @private
	 */ function _mergerIf(key, target, source) {
	    if (!isValidKey(key)) {
	        return;
	    }
	    const tval = target[key];
	    const sval = source[key];
	    if (isObject(tval) && isObject(sval)) {
	        mergeIf(tval, sval);
	    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {
	        target[key] = clone(sval);
	    }
	}
	// resolveObjectKey resolver cache
	const keyResolvers = {
	    // Chart.helpers.core resolveObjectKey should resolve empty key to root object
	    '': (v)=>v,
	    // default resolvers
	    x: (o)=>o.x,
	    y: (o)=>o.y
	};
	/**
	 * @private
	 */ function _splitKey(key) {
	    const parts = key.split('.');
	    const keys = [];
	    let tmp = '';
	    for (const part of parts){
	        tmp += part;
	        if (tmp.endsWith('\\')) {
	            tmp = tmp.slice(0, -1) + '.';
	        } else {
	            keys.push(tmp);
	            tmp = '';
	        }
	    }
	    return keys;
	}
	function _getKeyResolver(key) {
	    const keys = _splitKey(key);
	    return (obj)=>{
	        for (const k of keys){
	            if (k === '') {
	                break;
	            }
	            obj = obj && obj[k];
	        }
	        return obj;
	    };
	}
	function resolveObjectKey(obj, key) {
	    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));
	    return resolver(obj);
	}
	/**
	 * @private
	 */ function _capitalize(str) {
	    return str.charAt(0).toUpperCase() + str.slice(1);
	}
	const defined = (value)=>typeof value !== 'undefined';
	const isFunction = (value)=>typeof value === 'function';
	// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384
	const setsEqual = (a, b)=>{
	    if (a.size !== b.size) {
	        return false;
	    }
	    for (const item of a){
	        if (!b.has(item)) {
	            return false;
	        }
	    }
	    return true;
	};
	/**
	 * @param e - The event
	 * @private
	 */ function _isClickEvent(e) {
	    return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';
	}

	/**
	 * @alias Chart.helpers.math
	 * @namespace
	 */ const PI = Math.PI;
	const TAU = 2 * PI;
	const PITAU = TAU + PI;
	const INFINITY = Number.POSITIVE_INFINITY;
	const RAD_PER_DEG = PI / 180;
	const HALF_PI = PI / 2;
	const QUARTER_PI = PI / 4;
	const TWO_THIRDS_PI = PI * 2 / 3;
	const log10 = Math.log10;
	const sign = Math.sign;
	function almostEquals(x, y, epsilon) {
	    return Math.abs(x - y) < epsilon;
	}
	/**
	 * Implementation of the nice number algorithm used in determining where axis labels will go
	 */ function niceNum(range) {
	    const roundedRange = Math.round(range);
	    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;
	    const niceRange = Math.pow(10, Math.floor(log10(range)));
	    const fraction = range / niceRange;
	    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
	    return niceFraction * niceRange;
	}
	/**
	 * Returns an array of factors sorted from 1 to sqrt(value)
	 * @private
	 */ function _factorize(value) {
	    const result = [];
	    const sqrt = Math.sqrt(value);
	    let i;
	    for(i = 1; i < sqrt; i++){
	        if (value % i === 0) {
	            result.push(i);
	            result.push(value / i);
	        }
	    }
	    if (sqrt === (sqrt | 0)) {
	        result.push(sqrt);
	    }
	    result.sort((a, b)=>a - b).pop();
	    return result;
	}
	function isNumber(n) {
	    return !isNaN(parseFloat(n)) && isFinite(n);
	}
	function almostWhole(x, epsilon) {
	    const rounded = Math.round(x);
	    return rounded - epsilon <= x && rounded + epsilon >= x;
	}
	/**
	 * @private
	 */ function _setMinAndMaxByKey(array, target, property) {
	    let i, ilen, value;
	    for(i = 0, ilen = array.length; i < ilen; i++){
	        value = array[i][property];
	        if (!isNaN(value)) {
	            target.min = Math.min(target.min, value);
	            target.max = Math.max(target.max, value);
	        }
	    }
	}
	function toRadians(degrees) {
	    return degrees * (PI / 180);
	}
	function toDegrees(radians) {
	    return radians * (180 / PI);
	}
	/**
	 * Returns the number of decimal places
	 * i.e. the number of digits after the decimal point, of the value of this Number.
	 * @param x - A number.
	 * @returns The number of decimal places.
	 * @private
	 */ function _decimalPlaces(x) {
	    if (!isNumberFinite(x)) {
	        return;
	    }
	    let e = 1;
	    let p = 0;
	    while(Math.round(x * e) / e !== x){
	        e *= 10;
	        p++;
	    }
	    return p;
	}
	// Gets the angle from vertical upright to the point about a centre.
	function getAngleFromPoint(centrePoint, anglePoint) {
	    const distanceFromXCenter = anglePoint.x - centrePoint.x;
	    const distanceFromYCenter = anglePoint.y - centrePoint.y;
	    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
	    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
	    if (angle < -0.5 * PI) {
	        angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
	    }
	    return {
	        angle,
	        distance: radialDistanceFromCenter
	    };
	}
	function distanceBetweenPoints(pt1, pt2) {
	    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
	}
	/**
	 * Shortest distance between angles, in either direction.
	 * @private
	 */ function _angleDiff(a, b) {
	    return (a - b + PITAU) % TAU - PI;
	}
	/**
	 * Normalize angle to be between 0 and 2*PI
	 * @private
	 */ function _normalizeAngle(a) {
	    return (a % TAU + TAU) % TAU;
	}
	/**
	 * @private
	 */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
	    const a = _normalizeAngle(angle);
	    const s = _normalizeAngle(start);
	    const e = _normalizeAngle(end);
	    const angleToStart = _normalizeAngle(s - a);
	    const angleToEnd = _normalizeAngle(e - a);
	    const startToAngle = _normalizeAngle(a - s);
	    const endToAngle = _normalizeAngle(a - e);
	    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;
	}
	/**
	 * Limit `value` between `min` and `max`
	 * @param value
	 * @param min
	 * @param max
	 * @private
	 */ function _limitValue(value, min, max) {
	    return Math.max(min, Math.min(max, value));
	}
	/**
	 * @param {number} value
	 * @private
	 */ function _int16Range(value) {
	    return _limitValue(value, -32768, 32767);
	}
	/**
	 * @param value
	 * @param start
	 * @param end
	 * @param [epsilon]
	 * @private
	 */ function _isBetween(value, start, end, epsilon = 1e-6) {
	    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
	}

	function _lookup(table, value, cmp) {
	    cmp = cmp || ((index)=>table[index] < value);
	    let hi = table.length - 1;
	    let lo = 0;
	    let mid;
	    while(hi - lo > 1){
	        mid = lo + hi >> 1;
	        if (cmp(mid)) {
	            lo = mid;
	        } else {
	            hi = mid;
	        }
	    }
	    return {
	        lo,
	        hi
	    };
	}
	/**
	 * Binary search
	 * @param table - the table search. must be sorted!
	 * @param key - property name for the value in each entry
	 * @param value - value to find
	 * @param last - lookup last index
	 * @private
	 */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{
	        const ti = table[index][key];
	        return ti < value || ti === value && table[index + 1][key] === value;
	    } : (index)=>table[index][key] < value);
	/**
	 * Reverse binary search
	 * @param table - the table search. must be sorted!
	 * @param key - property name for the value in each entry
	 * @param value - value to find
	 * @private
	 */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);
	/**
	 * Return subset of `values` between `min` and `max` inclusive.
	 * Values are assumed to be in sorted order.
	 * @param values - sorted array of values
	 * @param min - min value
	 * @param max - max value
	 */ function _filterBetween(values, min, max) {
	    let start = 0;
	    let end = values.length;
	    while(start < end && values[start] < min){
	        start++;
	    }
	    while(end > start && values[end - 1] > max){
	        end--;
	    }
	    return start > 0 || end < values.length ? values.slice(start, end) : values;
	}
	const arrayEvents = [
	    'push',
	    'pop',
	    'shift',
	    'splice',
	    'unshift'
	];
	function listenArrayEvents(array, listener) {
	    if (array._chartjs) {
	        array._chartjs.listeners.push(listener);
	        return;
	    }
	    Object.defineProperty(array, '_chartjs', {
	        configurable: true,
	        enumerable: false,
	        value: {
	            listeners: [
	                listener
	            ]
	        }
	    });
	    arrayEvents.forEach((key)=>{
	        const method = '_onData' + _capitalize(key);
	        const base = array[key];
	        Object.defineProperty(array, key, {
	            configurable: true,
	            enumerable: false,
	            value (...args) {
	                const res = base.apply(this, args);
	                array._chartjs.listeners.forEach((object)=>{
	                    if (typeof object[method] === 'function') {
	                        object[method](...args);
	                    }
	                });
	                return res;
	            }
	        });
	    });
	}
	function unlistenArrayEvents(array, listener) {
	    const stub = array._chartjs;
	    if (!stub) {
	        return;
	    }
	    const listeners = stub.listeners;
	    const index = listeners.indexOf(listener);
	    if (index !== -1) {
	        listeners.splice(index, 1);
	    }
	    if (listeners.length > 0) {
	        return;
	    }
	    arrayEvents.forEach((key)=>{
	        delete array[key];
	    });
	    delete array._chartjs;
	}
	/**
	 * @param items
	 */ function _arrayUnique(items) {
	    const set = new Set(items);
	    if (set.size === items.length) {
	        return items;
	    }
	    return Array.from(set);
	}
	/**
	* Request animation polyfill
	*/ const requestAnimFrame = function() {
	    if (typeof window === 'undefined') {
	        return function(callback) {
	            return callback();
	        };
	    }
	    return window.requestAnimationFrame;
	}();
	/**
	 * Throttles calling `fn` once per animation frame
	 * Latest arguments are used on the actual call
	 */ function throttled(fn, thisArg) {
	    let argsToUse = [];
	    let ticking = false;
	    return function(...args) {
	        // Save the args for use later
	        argsToUse = args;
	        if (!ticking) {
	            ticking = true;
	            requestAnimFrame.call(window, ()=>{
	                ticking = false;
	                fn.apply(thisArg, argsToUse);
	            });
	        }
	    };
	}
	/**
	 * Debounces calling `fn` for `delay` ms
	 */ function debounce(fn, delay) {
	    let timeout;
	    return function(...args) {
	        if (delay) {
	            clearTimeout(timeout);
	            timeout = setTimeout(fn, delay, args);
	        } else {
	            fn.apply(this, args);
	        }
	        return delay;
	    };
	}
	/**
	 * Converts 'start' to 'left', 'end' to 'right' and others to 'center'
	 * @private
	 */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';
	/**
	 * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`
	 * @private
	 */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;
	/**
	 * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`
	 * @private
	 */ const _textX = (align, left, right, rtl)=>{
	    const check = rtl ? 'left' : 'right';
	    return align === check ? right : align === 'center' ? (left + right) / 2 : left;
	};
	/**
	 * Return start and count of visible points.
	 * @private
	 */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
	    const pointCount = points.length;
	    let start = 0;
	    let count = pointCount;
	    if (meta._sorted) {
	        const { iScale , _parsed  } = meta;
	        const axis = iScale.axis;
	        const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();
	        if (minDefined) {
	            start = _limitValue(Math.min(// @ts-expect-error Need to type _parsed
	            _lookupByKey(_parsed, axis, min).lo, // @ts-expect-error Need to fix types on _lookupByKey
	            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);
	        }
	        if (maxDefined) {
	            count = _limitValue(Math.max(// @ts-expect-error Need to type _parsed
	            _lookupByKey(_parsed, iScale.axis, max, true).hi + 1, // @ts-expect-error Need to fix types on _lookupByKey
	            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1), start, pointCount) - start;
	        } else {
	            count = pointCount - start;
	        }
	    }
	    return {
	        start,
	        count
	    };
	}
	/**
	 * Checks if the scale ranges have changed.
	 * @param {object} meta - dataset meta.
	 * @returns {boolean}
	 * @private
	 */ function _scaleRangesChanged(meta) {
	    const { xScale , yScale , _scaleRanges  } = meta;
	    const newRanges = {
	        xmin: xScale.min,
	        xmax: xScale.max,
	        ymin: yScale.min,
	        ymax: yScale.max
	    };
	    if (!_scaleRanges) {
	        meta._scaleRanges = newRanges;
	        return true;
	    }
	    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;
	    Object.assign(_scaleRanges, newRanges);
	    return changed;
	}

	const atEdge = (t)=>t === 0 || t === 1;
	const elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));
	const elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;
	/**
	 * Easing functions adapted from Robert Penner's easing equations.
	 * @namespace Chart.helpers.easing.effects
	 * @see http://www.robertpenner.com/easing/
	 */ const effects = {
	    linear: (t)=>t,
	    easeInQuad: (t)=>t * t,
	    easeOutQuad: (t)=>-t * (t - 2),
	    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),
	    easeInCubic: (t)=>t * t * t,
	    easeOutCubic: (t)=>(t -= 1) * t * t + 1,
	    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),
	    easeInQuart: (t)=>t * t * t * t,
	    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),
	    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),
	    easeInQuint: (t)=>t * t * t * t * t,
	    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,
	    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),
	    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,
	    easeOutSine: (t)=>Math.sin(t * HALF_PI),
	    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),
	    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),
	    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,
	    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),
	    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),
	    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),
	    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),
	    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),
	    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),
	    easeInOutElastic (t) {
	        const s = 0.1125;
	        const p = 0.45;
	        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);
	    },
	    easeInBack (t) {
	        const s = 1.70158;
	        return t * t * ((s + 1) * t - s);
	    },
	    easeOutBack (t) {
	        const s = 1.70158;
	        return (t -= 1) * t * ((s + 1) * t + s) + 1;
	    },
	    easeInOutBack (t) {
	        let s = 1.70158;
	        if ((t /= 0.5) < 1) {
	            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));
	        }
	        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
	    },
	    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),
	    easeOutBounce (t) {
	        const m = 7.5625;
	        const d = 2.75;
	        if (t < 1 / d) {
	            return m * t * t;
	        }
	        if (t < 2 / d) {
	            return m * (t -= 1.5 / d) * t + 0.75;
	        }
	        if (t < 2.5 / d) {
	            return m * (t -= 2.25 / d) * t + 0.9375;
	        }
	        return m * (t -= 2.625 / d) * t + 0.984375;
	    },
	    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5
	};

	function isPatternOrGradient(value) {
	    if (value && typeof value === 'object') {
	        const type = value.toString();
	        return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';
	    }
	    return false;
	}
	function color(value) {
	    return isPatternOrGradient(value) ? value : new Color(value);
	}
	function getHoverColor(value) {
	    return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();
	}

	const numbers = [
	    'x',
	    'y',
	    'borderWidth',
	    'radius',
	    'tension'
	];
	const colors = [
	    'color',
	    'borderColor',
	    'backgroundColor'
	];
	function applyAnimationsDefaults(defaults) {
	    defaults.set('animation', {
	        delay: undefined,
	        duration: 1000,
	        easing: 'easeOutQuart',
	        fn: undefined,
	        from: undefined,
	        loop: undefined,
	        to: undefined,
	        type: undefined
	    });
	    defaults.describe('animation', {
	        _fallback: false,
	        _indexable: false,
	        _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'
	    });
	    defaults.set('animations', {
	        colors: {
	            type: 'color',
	            properties: colors
	        },
	        numbers: {
	            type: 'number',
	            properties: numbers
	        }
	    });
	    defaults.describe('animations', {
	        _fallback: 'animation'
	    });
	    defaults.set('transitions', {
	        active: {
	            animation: {
	                duration: 400
	            }
	        },
	        resize: {
	            animation: {
	                duration: 0
	            }
	        },
	        show: {
	            animations: {
	                colors: {
	                    from: 'transparent'
	                },
	                visible: {
	                    type: 'boolean',
	                    duration: 0
	                }
	            }
	        },
	        hide: {
	            animations: {
	                colors: {
	                    to: 'transparent'
	                },
	                visible: {
	                    type: 'boolean',
	                    easing: 'linear',
	                    fn: (v)=>v | 0
	                }
	            }
	        }
	    });
	}

	function applyLayoutsDefaults(defaults) {
	    defaults.set('layout', {
	        autoPadding: true,
	        padding: {
	            top: 0,
	            right: 0,
	            bottom: 0,
	            left: 0
	        }
	    });
	}

	const intlCache = new Map();
	function getNumberFormat(locale, options) {
	    options = options || {};
	    const cacheKey = locale + JSON.stringify(options);
	    let formatter = intlCache.get(cacheKey);
	    if (!formatter) {
	        formatter = new Intl.NumberFormat(locale, options);
	        intlCache.set(cacheKey, formatter);
	    }
	    return formatter;
	}
	function formatNumber(num, locale, options) {
	    return getNumberFormat(locale, options).format(num);
	}

	const formatters = {
	 values (value) {
	        return isArray(value) ?  value : '' + value;
	    },
	 numeric (tickValue, index, ticks) {
	        if (tickValue === 0) {
	            return '0';
	        }
	        const locale = this.chart.options.locale;
	        let notation;
	        let delta = tickValue;
	        if (ticks.length > 1) {
	            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
	            if (maxTick < 1e-4 || maxTick > 1e+15) {
	                notation = 'scientific';
	            }
	            delta = calculateDelta(tickValue, ticks);
	        }
	        const logDelta = log10(Math.abs(delta));
	        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
	        const options = {
	            notation,
	            minimumFractionDigits: numDecimal,
	            maximumFractionDigits: numDecimal
	        };
	        Object.assign(options, this.options.ticks.format);
	        return formatNumber(tickValue, locale, options);
	    },
	 logarithmic (tickValue, index, ticks) {
	        if (tickValue === 0) {
	            return '0';
	        }
	        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));
	        if ([
	            1,
	            2,
	            3,
	            5,
	            10,
	            15
	        ].includes(remain) || index > 0.8 * ticks.length) {
	            return formatters.numeric.call(this, tickValue, index, ticks);
	        }
	        return '';
	    }
	};
	function calculateDelta(tickValue, ticks) {
	    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
	    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {
	        delta = tickValue - Math.floor(tickValue);
	    }
	    return delta;
	}
	 var Ticks = {
	    formatters
	};

	function applyScaleDefaults(defaults) {
	    defaults.set('scale', {
	        display: true,
	        offset: false,
	        reverse: false,
	        beginAtZero: false,
	 bounds: 'ticks',
	        clip: true,
	 grace: 0,
	        grid: {
	            display: true,
	            lineWidth: 1,
	            drawOnChartArea: true,
	            drawTicks: true,
	            tickLength: 8,
	            tickWidth: (_ctx, options)=>options.lineWidth,
	            tickColor: (_ctx, options)=>options.color,
	            offset: false
	        },
	        border: {
	            display: true,
	            dash: [],
	            dashOffset: 0.0,
	            width: 1
	        },
	        title: {
	            display: false,
	            text: '',
	            padding: {
	                top: 4,
	                bottom: 4
	            }
	        },
	        ticks: {
	            minRotation: 0,
	            maxRotation: 50,
	            mirror: false,
	            textStrokeWidth: 0,
	            textStrokeColor: '',
	            padding: 3,
	            display: true,
	            autoSkip: true,
	            autoSkipPadding: 3,
	            labelOffset: 0,
	            callback: Ticks.formatters.values,
	            minor: {},
	            major: {},
	            align: 'center',
	            crossAlign: 'near',
	            showLabelBackdrop: false,
	            backdropColor: 'rgba(255, 255, 255, 0.75)',
	            backdropPadding: 2
	        }
	    });
	    defaults.route('scale.ticks', 'color', '', 'color');
	    defaults.route('scale.grid', 'color', '', 'borderColor');
	    defaults.route('scale.border', 'color', '', 'borderColor');
	    defaults.route('scale.title', 'color', '', 'color');
	    defaults.describe('scale', {
	        _fallback: false,
	        _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',
	        _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'
	    });
	    defaults.describe('scales', {
	        _fallback: 'scale'
	    });
	    defaults.describe('scale.ticks', {
	        _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',
	        _indexable: (name)=>name !== 'backdropPadding'
	    });
	}

	const overrides = Object.create(null);
	const descriptors = Object.create(null);
	 function getScope$1(node, key) {
	    if (!key) {
	        return node;
	    }
	    const keys = key.split('.');
	    for(let i = 0, n = keys.length; i < n; ++i){
	        const k = keys[i];
	        node = node[k] || (node[k] = Object.create(null));
	    }
	    return node;
	}
	function set(root, scope, values) {
	    if (typeof scope === 'string') {
	        return merge(getScope$1(root, scope), values);
	    }
	    return merge(getScope$1(root, ''), scope);
	}
	 class Defaults {
	    constructor(_descriptors, _appliers){
	        this.animation = undefined;
	        this.backgroundColor = 'rgba(0,0,0,0.1)';
	        this.borderColor = 'rgba(0,0,0,0.1)';
	        this.color = '#666';
	        this.datasets = {};
	        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();
	        this.elements = {};
	        this.events = [
	            'mousemove',
	            'mouseout',
	            'click',
	            'touchstart',
	            'touchmove'
	        ];
	        this.font = {
	            family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
	            size: 12,
	            style: 'normal',
	            lineHeight: 1.2,
	            weight: null
	        };
	        this.hover = {};
	        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);
	        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);
	        this.hoverColor = (ctx, options)=>getHoverColor(options.color);
	        this.indexAxis = 'x';
	        this.interaction = {
	            mode: 'nearest',
	            intersect: true,
	            includeInvisible: false
	        };
	        this.maintainAspectRatio = true;
	        this.onHover = null;
	        this.onClick = null;
	        this.parsing = true;
	        this.plugins = {};
	        this.responsive = true;
	        this.scale = undefined;
	        this.scales = {};
	        this.showLine = true;
	        this.drawActiveElementsOnTop = true;
	        this.describe(_descriptors);
	        this.apply(_appliers);
	    }
	 set(scope, values) {
	        return set(this, scope, values);
	    }
	 get(scope) {
	        return getScope$1(this, scope);
	    }
	 describe(scope, values) {
	        return set(descriptors, scope, values);
	    }
	    override(scope, values) {
	        return set(overrides, scope, values);
	    }
	 route(scope, name, targetScope, targetName) {
	        const scopeObject = getScope$1(this, scope);
	        const targetScopeObject = getScope$1(this, targetScope);
	        const privateName = '_' + name;
	        Object.defineProperties(scopeObject, {
	            [privateName]: {
	                value: scopeObject[name],
	                writable: true
	            },
	            [name]: {
	                enumerable: true,
	                get () {
	                    const local = this[privateName];
	                    const target = targetScopeObject[targetName];
	                    if (isObject(local)) {
	                        return Object.assign({}, target, local);
	                    }
	                    return valueOrDefault(local, target);
	                },
	                set (value) {
	                    this[privateName] = value;
	                }
	            }
	        });
	    }
	    apply(appliers) {
	        appliers.forEach((apply)=>apply(this));
	    }
	}
	var defaults = /* #__PURE__ */ new Defaults({
	    _scriptable: (name)=>!name.startsWith('on'),
	    _indexable: (name)=>name !== 'events',
	    hover: {
	        _fallback: 'interaction'
	    },
	    interaction: {
	        _scriptable: false,
	        _indexable: false
	    }
	}, [
	    applyAnimationsDefaults,
	    applyLayoutsDefaults,
	    applyScaleDefaults
	]);

	/**
	 * Converts the given font object into a CSS font string.
	 * @param font - A font object.
	 * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font
	 * @private
	 */ function toFontString(font) {
	    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
	        return null;
	    }
	    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;
	}
	/**
	 * @private
	 */ function _measureText(ctx, data, gc, longest, string) {
	    let textWidth = data[string];
	    if (!textWidth) {
	        textWidth = data[string] = ctx.measureText(string).width;
	        gc.push(string);
	    }
	    if (textWidth > longest) {
	        longest = textWidth;
	    }
	    return longest;
	}
	/**
	 * @private
	 */ // eslint-disable-next-line complexity
	function _longestText(ctx, font, arrayOfThings, cache) {
	    cache = cache || {};
	    let data = cache.data = cache.data || {};
	    let gc = cache.garbageCollect = cache.garbageCollect || [];
	    if (cache.font !== font) {
	        data = cache.data = {};
	        gc = cache.garbageCollect = [];
	        cache.font = font;
	    }
	    ctx.save();
	    ctx.font = font;
	    let longest = 0;
	    const ilen = arrayOfThings.length;
	    let i, j, jlen, thing, nestedThing;
	    for(i = 0; i < ilen; i++){
	        thing = arrayOfThings[i];
	        // Undefined strings and arrays should not be measured
	        if (thing !== undefined && thing !== null && !isArray(thing)) {
	            longest = _measureText(ctx, data, gc, longest, thing);
	        } else if (isArray(thing)) {
	            // if it is an array lets measure each element
	            // to do maybe simplify this function a bit so we can do this more recursively?
	            for(j = 0, jlen = thing.length; j < jlen; j++){
	                nestedThing = thing[j];
	                // Undefined strings and arrays should not be measured
	                if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {
	                    longest = _measureText(ctx, data, gc, longest, nestedThing);
	                }
	            }
	        }
	    }
	    ctx.restore();
	    const gcLen = gc.length / 2;
	    if (gcLen > arrayOfThings.length) {
	        for(i = 0; i < gcLen; i++){
	            delete data[gc[i]];
	        }
	        gc.splice(0, gcLen);
	    }
	    return longest;
	}
	/**
	 * Returns the aligned pixel value to avoid anti-aliasing blur
	 * @param chart - The chart instance.
	 * @param pixel - A pixel value.
	 * @param width - The width of the element.
	 * @returns The aligned pixel value.
	 * @private
	 */ function _alignPixel(chart, pixel, width) {
	    const devicePixelRatio = chart.currentDevicePixelRatio;
	    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
	    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
	}
	/**
	 * Clears the entire canvas.
	 */ function clearCanvas(canvas, ctx) {
	    ctx = ctx || canvas.getContext('2d');
	    ctx.save();
	    // canvas.width and canvas.height do not consider the canvas transform,
	    // while clearRect does
	    ctx.resetTransform();
	    ctx.clearRect(0, 0, canvas.width, canvas.height);
	    ctx.restore();
	}
	function drawPoint(ctx, options, x, y) {
	    // eslint-disable-next-line @typescript-eslint/no-use-before-define
	    drawPointLegend(ctx, options, x, y, null);
	}
	// eslint-disable-next-line complexity
	function drawPointLegend(ctx, options, x, y, w) {
	    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;
	    const style = options.pointStyle;
	    const rotation = options.rotation;
	    const radius = options.radius;
	    let rad = (rotation || 0) * RAD_PER_DEG;
	    if (style && typeof style === 'object') {
	        type = style.toString();
	        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
	            ctx.save();
	            ctx.translate(x, y);
	            ctx.rotate(rad);
	            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
	            ctx.restore();
	            return;
	        }
	    }
	    if (isNaN(radius) || radius <= 0) {
	        return;
	    }
	    ctx.beginPath();
	    switch(style){
	        // Default includes circle
	        default:
	            if (w) {
	                ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);
	            } else {
	                ctx.arc(x, y, radius, 0, TAU);
	            }
	            ctx.closePath();
	            break;
	        case 'triangle':
	            width = w ? w / 2 : radius;
	            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
	            rad += TWO_THIRDS_PI;
	            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
	            rad += TWO_THIRDS_PI;
	            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
	            ctx.closePath();
	            break;
	        case 'rectRounded':
	            // NOTE: the rounded rect implementation changed to use `arc` instead of
	            // `quadraticCurveTo` since it generates better results when rect is
	            // almost a circle. 0.516 (instead of 0.5) produces results with visually
	            // closer proportion to the previous impl and it is inscribed in the
	            // circle with `radius`. For more details, see the following PRs:
	            // https://github.com/chartjs/Chart.js/issues/5597
	            // https://github.com/chartjs/Chart.js/issues/5858
	            cornerRadius = radius * 0.516;
	            size = radius - cornerRadius;
	            xOffset = Math.cos(rad + QUARTER_PI) * size;
	            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);
	            yOffset = Math.sin(rad + QUARTER_PI) * size;
	            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);
	            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
	            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);
	            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);
	            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
	            ctx.closePath();
	            break;
	        case 'rect':
	            if (!rotation) {
	                size = Math.SQRT1_2 * radius;
	                width = w ? w / 2 : size;
	                ctx.rect(x - width, y - size, 2 * width, 2 * size);
	                break;
	            }
	            rad += QUARTER_PI;
	        /* falls through */ case 'rectRot':
	            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
	            xOffset = Math.cos(rad) * radius;
	            yOffset = Math.sin(rad) * radius;
	            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
	            ctx.moveTo(x - xOffsetW, y - yOffset);
	            ctx.lineTo(x + yOffsetW, y - xOffset);
	            ctx.lineTo(x + xOffsetW, y + yOffset);
	            ctx.lineTo(x - yOffsetW, y + xOffset);
	            ctx.closePath();
	            break;
	        case 'crossRot':
	            rad += QUARTER_PI;
	        /* falls through */ case 'cross':
	            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
	            xOffset = Math.cos(rad) * radius;
	            yOffset = Math.sin(rad) * radius;
	            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
	            ctx.moveTo(x - xOffsetW, y - yOffset);
	            ctx.lineTo(x + xOffsetW, y + yOffset);
	            ctx.moveTo(x + yOffsetW, y - xOffset);
	            ctx.lineTo(x - yOffsetW, y + xOffset);
	            break;
	        case 'star':
	            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
	            xOffset = Math.cos(rad) * radius;
	            yOffset = Math.sin(rad) * radius;
	            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
	            ctx.moveTo(x - xOffsetW, y - yOffset);
	            ctx.lineTo(x + xOffsetW, y + yOffset);
	            ctx.moveTo(x + yOffsetW, y - xOffset);
	            ctx.lineTo(x - yOffsetW, y + xOffset);
	            rad += QUARTER_PI;
	            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
	            xOffset = Math.cos(rad) * radius;
	            yOffset = Math.sin(rad) * radius;
	            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
	            ctx.moveTo(x - xOffsetW, y - yOffset);
	            ctx.lineTo(x + xOffsetW, y + yOffset);
	            ctx.moveTo(x + yOffsetW, y - xOffset);
	            ctx.lineTo(x - yOffsetW, y + xOffset);
	            break;
	        case 'line':
	            xOffset = w ? w / 2 : Math.cos(rad) * radius;
	            yOffset = Math.sin(rad) * radius;
	            ctx.moveTo(x - xOffset, y - yOffset);
	            ctx.lineTo(x + xOffset, y + yOffset);
	            break;
	        case 'dash':
	            ctx.moveTo(x, y);
	            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);
	            break;
	        case false:
	            ctx.closePath();
	            break;
	    }
	    ctx.fill();
	    if (options.borderWidth > 0) {
	        ctx.stroke();
	    }
	}
	/**
	 * Returns true if the point is inside the rectangle
	 * @param point - The point to test
	 * @param area - The rectangle
	 * @param margin - allowed margin
	 * @private
	 */ function _isPointInArea(point, area, margin) {
	    margin = margin || 0.5; // margin - default is to match rounded decimals
	    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
	}
	function clipArea(ctx, area) {
	    ctx.save();
	    ctx.beginPath();
	    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
	    ctx.clip();
	}
	function unclipArea(ctx) {
	    ctx.restore();
	}
	/**
	 * @private
	 */ function _steppedLineTo(ctx, previous, target, flip, mode) {
	    if (!previous) {
	        return ctx.lineTo(target.x, target.y);
	    }
	    if (mode === 'middle') {
	        const midpoint = (previous.x + target.x) / 2.0;
	        ctx.lineTo(midpoint, previous.y);
	        ctx.lineTo(midpoint, target.y);
	    } else if (mode === 'after' !== !!flip) {
	        ctx.lineTo(previous.x, target.y);
	    } else {
	        ctx.lineTo(target.x, previous.y);
	    }
	    ctx.lineTo(target.x, target.y);
	}
	/**
	 * @private
	 */ function _bezierCurveTo(ctx, previous, target, flip) {
	    if (!previous) {
	        return ctx.lineTo(target.x, target.y);
	    }
	    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);
	}
	function setRenderOpts(ctx, opts) {
	    if (opts.translation) {
	        ctx.translate(opts.translation[0], opts.translation[1]);
	    }
	    if (!isNullOrUndef(opts.rotation)) {
	        ctx.rotate(opts.rotation);
	    }
	    if (opts.color) {
	        ctx.fillStyle = opts.color;
	    }
	    if (opts.textAlign) {
	        ctx.textAlign = opts.textAlign;
	    }
	    if (opts.textBaseline) {
	        ctx.textBaseline = opts.textBaseline;
	    }
	}
	function decorateText(ctx, x, y, line, opts) {
	    if (opts.strikethrough || opts.underline) {
	        /**
	     * Now that IE11 support has been dropped, we can use more
	     * of the TextMetrics object. The actual bounding boxes
	     * are unflagged in Chrome, Firefox, Edge, and Safari so they
	     * can be safely used.
	     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility
	     */ const metrics = ctx.measureText(line);
	        const left = x - metrics.actualBoundingBoxLeft;
	        const right = x + metrics.actualBoundingBoxRight;
	        const top = y - metrics.actualBoundingBoxAscent;
	        const bottom = y + metrics.actualBoundingBoxDescent;
	        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
	        ctx.strokeStyle = ctx.fillStyle;
	        ctx.beginPath();
	        ctx.lineWidth = opts.decorationWidth || 2;
	        ctx.moveTo(left, yDecoration);
	        ctx.lineTo(right, yDecoration);
	        ctx.stroke();
	    }
	}
	function drawBackdrop(ctx, opts) {
	    const oldColor = ctx.fillStyle;
	    ctx.fillStyle = opts.color;
	    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);
	    ctx.fillStyle = oldColor;
	}
	/**
	 * Render text onto the canvas
	 */ function renderText(ctx, text, x, y, font, opts = {}) {
	    const lines = isArray(text) ? text : [
	        text
	    ];
	    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';
	    let i, line;
	    ctx.save();
	    ctx.font = font.string;
	    setRenderOpts(ctx, opts);
	    for(i = 0; i < lines.length; ++i){
	        line = lines[i];
	        if (opts.backdrop) {
	            drawBackdrop(ctx, opts.backdrop);
	        }
	        if (stroke) {
	            if (opts.strokeColor) {
	                ctx.strokeStyle = opts.strokeColor;
	            }
	            if (!isNullOrUndef(opts.strokeWidth)) {
	                ctx.lineWidth = opts.strokeWidth;
	            }
	            ctx.strokeText(line, x, y, opts.maxWidth);
	        }
	        ctx.fillText(line, x, y, opts.maxWidth);
	        decorateText(ctx, x, y, line, opts);
	        y += Number(font.lineHeight);
	    }
	    ctx.restore();
	}
	/**
	 * Add a path of a rectangle with rounded corners to the current sub-path
	 * @param ctx - Context
	 * @param rect - Bounding rect
	 */ function addRoundedRectPath(ctx, rect) {
	    const { x , y , w , h , radius  } = rect;
	    // top left arc
	    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);
	    // line from top left to bottom left
	    ctx.lineTo(x, y + h - radius.bottomLeft);
	    // bottom left arc
	    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
	    // line from bottom left to bottom right
	    ctx.lineTo(x + w - radius.bottomRight, y + h);
	    // bottom right arc
	    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
	    // line from bottom right to top right
	    ctx.lineTo(x + w, y + radius.topRight);
	    // top right arc
	    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);
	    // line from top right to top left
	    ctx.lineTo(x + radius.topLeft, y);
	}

	const LINE_HEIGHT = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/;
	const FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
	/**
	 * @alias Chart.helpers.options
	 * @namespace
	 */ /**
	 * Converts the given line height `value` in pixels for a specific font `size`.
	 * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
	 * @param size - The font size (in pixels) used to resolve relative `value`.
	 * @returns The effective line height in pixels (size * 1.2 if value is invalid).
	 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
	 * @since 2.7.0
	 */ function toLineHeight(value, size) {
	    const matches = ('' + value).match(LINE_HEIGHT);
	    if (!matches || matches[1] === 'normal') {
	        return size * 1.2;
	    }
	    value = +matches[2];
	    switch(matches[3]){
	        case 'px':
	            return value;
	        case '%':
	            value /= 100;
	            break;
	    }
	    return size * value;
	}
	const numberOrZero = (v)=>+v || 0;
	function _readValueToProps(value, props) {
	    const ret = {};
	    const objProps = isObject(props);
	    const keys = objProps ? Object.keys(props) : props;
	    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;
	    for (const prop of keys){
	        ret[prop] = numberOrZero(read(prop));
	    }
	    return ret;
	}
	/**
	 * Converts the given value into a TRBL object.
	 * @param value - If a number, set the value to all TRBL component,
	 *  else, if an object, use defined properties and sets undefined ones to 0.
	 *  x / y are shorthands for same value for left/right and top/bottom.
	 * @returns The padding values (top, right, bottom, left)
	 * @since 3.0.0
	 */ function toTRBL(value) {
	    return _readValueToProps(value, {
	        top: 'y',
	        right: 'x',
	        bottom: 'y',
	        left: 'x'
	    });
	}
	/**
	 * Converts the given value into a TRBL corners object (similar with css border-radius).
	 * @param value - If a number, set the value to all TRBL corner components,
	 *  else, if an object, use defined properties and sets undefined ones to 0.
	 * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)
	 * @since 3.0.0
	 */ function toTRBLCorners(value) {
	    return _readValueToProps(value, [
	        'topLeft',
	        'topRight',
	        'bottomLeft',
	        'bottomRight'
	    ]);
	}
	/**
	 * Converts the given value into a padding object with pre-computed width/height.
	 * @param value - If a number, set the value to all TRBL component,
	 *  else, if an object, use defined properties and sets undefined ones to 0.
	 *  x / y are shorthands for same value for left/right and top/bottom.
	 * @returns The padding values (top, right, bottom, left, width, height)
	 * @since 2.7.0
	 */ function toPadding(value) {
	    const obj = toTRBL(value);
	    obj.width = obj.left + obj.right;
	    obj.height = obj.top + obj.bottom;
	    return obj;
	}
	/**
	 * Parses font options and returns the font object.
	 * @param options - A object that contains font options to be parsed.
	 * @param fallback - A object that contains fallback font options.
	 * @return The font object.
	 * @private
	 */ function toFont(options, fallback) {
	    options = options || {};
	    fallback = fallback || defaults.font;
	    let size = valueOrDefault(options.size, fallback.size);
	    if (typeof size === 'string') {
	        size = parseInt(size, 10);
	    }
	    let style = valueOrDefault(options.style, fallback.style);
	    if (style && !('' + style).match(FONT_STYLE)) {
	        console.warn('Invalid font style specified: "' + style + '"');
	        style = undefined;
	    }
	    const font = {
	        family: valueOrDefault(options.family, fallback.family),
	        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
	        size,
	        style,
	        weight: valueOrDefault(options.weight, fallback.weight),
	        string: ''
	    };
	    font.string = toFontString(font);
	    return font;
	}
	/**
	 * Evaluates the given `inputs` sequentially and returns the first defined value.
	 * @param inputs - An array of values, falling back to the last value.
	 * @param context - If defined and the current value is a function, the value
	 * is called with `context` as first argument and the result becomes the new input.
	 * @param index - If defined and the current value is an array, the value
	 * at `index` become the new input.
	 * @param info - object to return information about resolution in
	 * @param info.cacheable - Will be set to `false` if option is not cacheable.
	 * @since 2.7.0
	 */ function resolve(inputs, context, index, info) {
	    let cacheable = true;
	    let i, ilen, value;
	    for(i = 0, ilen = inputs.length; i < ilen; ++i){
	        value = inputs[i];
	        if (value === undefined) {
	            continue;
	        }
	        if (context !== undefined && typeof value === 'function') {
	            value = value(context);
	            cacheable = false;
	        }
	        if (index !== undefined && isArray(value)) {
	            value = value[index % value.length];
	            cacheable = false;
	        }
	        if (value !== undefined) {
	            if (info && !cacheable) {
	                info.cacheable = false;
	            }
	            return value;
	        }
	    }
	}
	/**
	 * @param minmax
	 * @param grace
	 * @param beginAtZero
	 * @private
	 */ function _addGrace(minmax, grace, beginAtZero) {
	    const { min , max  } = minmax;
	    const change = toDimension(grace, (max - min) / 2);
	    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;
	    return {
	        min: keepZero(min, -Math.abs(change)),
	        max: keepZero(max, change)
	    };
	}
	function createContext(parentContext, context) {
	    return Object.assign(Object.create(parentContext), context);
	}

	/**
	 * Creates a Proxy for resolving raw values for options.
	 * @param scopes - The option scopes to look for values, in resolution order
	 * @param prefixes - The prefixes for values, in resolution order.
	 * @param rootScopes - The root option scopes
	 * @param fallback - Parent scopes fallback
	 * @param getTarget - callback for getting the target for changed values
	 * @returns Proxy
	 * @private
	 */ function _createResolver(scopes, prefixes = [
	    ''
	], rootScopes, fallback, getTarget = ()=>scopes[0]) {
	    const finalRootScopes = rootScopes || scopes;
	    if (typeof fallback === 'undefined') {
	        fallback = _resolve('_fallback', scopes);
	    }
	    const cache = {
	        [Symbol.toStringTag]: 'Object',
	        _cacheable: true,
	        _scopes: scopes,
	        _rootScopes: finalRootScopes,
	        _fallback: fallback,
	        _getTarget: getTarget,
	        override: (scope)=>_createResolver([
	                scope,
	                ...scopes
	            ], prefixes, finalRootScopes, fallback)
	    };
	    return new Proxy(cache, {
	        /**
	     * A trap for the delete operator.
	     */ deleteProperty (target, prop) {
	            delete target[prop]; // remove from cache
	            delete target._keys; // remove cached keys
	            delete scopes[0][prop]; // remove from top level scope
	            return true;
	        },
	        /**
	     * A trap for getting property values.
	     */ get (target, prop) {
	            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));
	        },
	        /**
	     * A trap for Object.getOwnPropertyDescriptor.
	     * Also used by Object.hasOwnProperty.
	     */ getOwnPropertyDescriptor (target, prop) {
	            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
	        },
	        /**
	     * A trap for Object.getPrototypeOf.
	     */ getPrototypeOf () {
	            return Reflect.getPrototypeOf(scopes[0]);
	        },
	        /**
	     * A trap for the in operator.
	     */ has (target, prop) {
	            return getKeysFromAllScopes(target).includes(prop);
	        },
	        /**
	     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
	     */ ownKeys (target) {
	            return getKeysFromAllScopes(target);
	        },
	        /**
	     * A trap for setting property values.
	     */ set (target, prop, value) {
	            const storage = target._storage || (target._storage = getTarget());
	            target[prop] = storage[prop] = value; // set to top level scope + cache
	            delete target._keys; // remove cached keys
	            return true;
	        }
	    });
	}
	/**
	 * Returns an Proxy for resolving option values with context.
	 * @param proxy - The Proxy returned by `_createResolver`
	 * @param context - Context object for scriptable/indexable options
	 * @param subProxy - The proxy provided for scriptable options
	 * @param descriptorDefaults - Defaults for descriptors
	 * @private
	 */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {
	    const cache = {
	        _cacheable: false,
	        _proxy: proxy,
	        _context: context,
	        _subProxy: subProxy,
	        _stack: new Set(),
	        _descriptors: _descriptors(proxy, descriptorDefaults),
	        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),
	        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
	    };
	    return new Proxy(cache, {
	        /**
	     * A trap for the delete operator.
	     */ deleteProperty (target, prop) {
	            delete target[prop]; // remove from cache
	            delete proxy[prop]; // remove from proxy
	            return true;
	        },
	        /**
	     * A trap for getting property values.
	     */ get (target, prop, receiver) {
	            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));
	        },
	        /**
	     * A trap for Object.getOwnPropertyDescriptor.
	     * Also used by Object.hasOwnProperty.
	     */ getOwnPropertyDescriptor (target, prop) {
	            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {
	                enumerable: true,
	                configurable: true
	            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);
	        },
	        /**
	     * A trap for Object.getPrototypeOf.
	     */ getPrototypeOf () {
	            return Reflect.getPrototypeOf(proxy);
	        },
	        /**
	     * A trap for the in operator.
	     */ has (target, prop) {
	            return Reflect.has(proxy, prop);
	        },
	        /**
	     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
	     */ ownKeys () {
	            return Reflect.ownKeys(proxy);
	        },
	        /**
	     * A trap for setting property values.
	     */ set (target, prop, value) {
	            proxy[prop] = value; // set to proxy
	            delete target[prop]; // remove from cache
	            return true;
	        }
	    });
	}
	/**
	 * @private
	 */ function _descriptors(proxy, defaults = {
	    scriptable: true,
	    indexable: true
	}) {
	    const { _scriptable =defaults.scriptable , _indexable =defaults.indexable , _allKeys =defaults.allKeys  } = proxy;
	    return {
	        allKeys: _allKeys,
	        scriptable: _scriptable,
	        indexable: _indexable,
	        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,
	        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable
	    };
	}
	const readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;
	const needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);
	function _cached(target, prop, resolve) {
	    if (Object.prototype.hasOwnProperty.call(target, prop)) {
	        return target[prop];
	    }
	    const value = resolve();
	    // cache the resolved value
	    target[prop] = value;
	    return value;
	}
	function _resolveWithContext(target, prop, receiver) {
	    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;
	    let value = _proxy[prop]; // resolve from proxy
	    // resolve with context
	    if (isFunction(value) && descriptors.isScriptable(prop)) {
	        value = _resolveScriptable(prop, value, target, receiver);
	    }
	    if (isArray(value) && value.length) {
	        value = _resolveArray(prop, value, target, descriptors.isIndexable);
	    }
	    if (needsSubResolver(prop, value)) {
	        // if the resolved value is an object, create a sub resolver for it
	        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);
	    }
	    return value;
	}
	function _resolveScriptable(prop, getValue, target, receiver) {
	    const { _proxy , _context , _subProxy , _stack  } = target;
	    if (_stack.has(prop)) {
	        throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);
	    }
	    _stack.add(prop);
	    let value = getValue(_context, _subProxy || receiver);
	    _stack.delete(prop);
	    if (needsSubResolver(prop, value)) {
	        // When scriptable option returns an object, create a resolver on that.
	        value = createSubResolver(_proxy._scopes, _proxy, prop, value);
	    }
	    return value;
	}
	function _resolveArray(prop, value, target, isIndexable) {
	    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;
	    if (typeof _context.index !== 'undefined' && isIndexable(prop)) {
	        return value[_context.index % value.length];
	    } else if (isObject(value[0])) {
	        // Array of objects, return array or resolvers
	        const arr = value;
	        const scopes = _proxy._scopes.filter((s)=>s !== arr);
	        value = [];
	        for (const item of arr){
	            const resolver = createSubResolver(scopes, _proxy, prop, item);
	            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));
	        }
	    }
	    return value;
	}
	function resolveFallback(fallback, prop, value) {
	    return isFunction(fallback) ? fallback(prop, value) : fallback;
	}
	const getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;
	function addScopes(set, parentScopes, key, parentFallback, value) {
	    for (const parent of parentScopes){
	        const scope = getScope(key, parent);
	        if (scope) {
	            set.add(scope);
	            const fallback = resolveFallback(scope._fallback, key, value);
	            if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {
	                // When we reach the descriptor that defines a new _fallback, return that.
	                // The fallback will resume to that new scope.
	                return fallback;
	            }
	        } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {
	            // Fallback to `false` results to `false`, when falling back to different key.
	            // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`
	            return null;
	        }
	    }
	    return false;
	}
	function createSubResolver(parentScopes, resolver, prop, value) {
	    const rootScopes = resolver._rootScopes;
	    const fallback = resolveFallback(resolver._fallback, prop, value);
	    const allScopes = [
	        ...parentScopes,
	        ...rootScopes
	    ];
	    const set = new Set();
	    set.add(value);
	    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);
	    if (key === null) {
	        return false;
	    }
	    if (typeof fallback !== 'undefined' && fallback !== prop) {
	        key = addScopesFromKey(set, allScopes, fallback, key, value);
	        if (key === null) {
	            return false;
	        }
	    }
	    return _createResolver(Array.from(set), [
	        ''
	    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));
	}
	function addScopesFromKey(set, allScopes, key, fallback, item) {
	    while(key){
	        key = addScopes(set, allScopes, key, fallback, item);
	    }
	    return key;
	}
	function subGetTarget(resolver, prop, value) {
	    const parent = resolver._getTarget();
	    if (!(prop in parent)) {
	        parent[prop] = {};
	    }
	    const target = parent[prop];
	    if (isArray(target) && isObject(value)) {
	        // For array of objects, the object is used to store updated values
	        return value;
	    }
	    return target || {};
	}
	function _resolveWithPrefixes(prop, prefixes, scopes, proxy) {
	    let value;
	    for (const prefix of prefixes){
	        value = _resolve(readKey(prefix, prop), scopes);
	        if (typeof value !== 'undefined') {
	            return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;
	        }
	    }
	}
	function _resolve(key, scopes) {
	    for (const scope of scopes){
	        if (!scope) {
	            continue;
	        }
	        const value = scope[key];
	        if (typeof value !== 'undefined') {
	            return value;
	        }
	    }
	}
	function getKeysFromAllScopes(target) {
	    let keys = target._keys;
	    if (!keys) {
	        keys = target._keys = resolveKeysFromAllScopes(target._scopes);
	    }
	    return keys;
	}
	function resolveKeysFromAllScopes(scopes) {
	    const set = new Set();
	    for (const scope of scopes){
	        for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_'))){
	            set.add(key);
	        }
	    }
	    return Array.from(set);
	}

	const EPSILON = Number.EPSILON || 1e-14;
	const getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];
	const getValueAxis = (indexAxis)=>indexAxis === 'x' ? 'y' : 'x';
	function splineCurve(firstPoint, middlePoint, afterPoint, t) {
	    // Props to Rob Spencer at scaled innovation for his post on splining between points
	    // http://scaledinnovation.com/analytics/splines/aboutSplines.html
	    // This function must also respect "skipped" points
	    const previous = firstPoint.skip ? middlePoint : firstPoint;
	    const current = middlePoint;
	    const next = afterPoint.skip ? middlePoint : afterPoint;
	    const d01 = distanceBetweenPoints(current, previous);
	    const d12 = distanceBetweenPoints(next, current);
	    let s01 = d01 / (d01 + d12);
	    let s12 = d12 / (d01 + d12);
	    // If all points are the same, s01 & s02 will be inf
	    s01 = isNaN(s01) ? 0 : s01;
	    s12 = isNaN(s12) ? 0 : s12;
	    const fa = t * s01; // scaling factor for triangle Ta
	    const fb = t * s12;
	    return {
	        previous: {
	            x: current.x - fa * (next.x - previous.x),
	            y: current.y - fa * (next.y - previous.y)
	        },
	        next: {
	            x: current.x + fb * (next.x - previous.x),
	            y: current.y + fb * (next.y - previous.y)
	        }
	    };
	}
	/**
	 * Adjust tangents to ensure monotonic properties
	 */ function monotoneAdjust(points, deltaK, mK) {
	    const pointsLen = points.length;
	    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
	    let pointAfter = getPoint(points, 0);
	    for(let i = 0; i < pointsLen - 1; ++i){
	        pointCurrent = pointAfter;
	        pointAfter = getPoint(points, i + 1);
	        if (!pointCurrent || !pointAfter) {
	            continue;
	        }
	        if (almostEquals(deltaK[i], 0, EPSILON)) {
	            mK[i] = mK[i + 1] = 0;
	            continue;
	        }
	        alphaK = mK[i] / deltaK[i];
	        betaK = mK[i + 1] / deltaK[i];
	        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
	        if (squaredMagnitude <= 9) {
	            continue;
	        }
	        tauK = 3 / Math.sqrt(squaredMagnitude);
	        mK[i] = alphaK * tauK * deltaK[i];
	        mK[i + 1] = betaK * tauK * deltaK[i];
	    }
	}
	function monotoneCompute(points, mK, indexAxis = 'x') {
	    const valueAxis = getValueAxis(indexAxis);
	    const pointsLen = points.length;
	    let delta, pointBefore, pointCurrent;
	    let pointAfter = getPoint(points, 0);
	    for(let i = 0; i < pointsLen; ++i){
	        pointBefore = pointCurrent;
	        pointCurrent = pointAfter;
	        pointAfter = getPoint(points, i + 1);
	        if (!pointCurrent) {
	            continue;
	        }
	        const iPixel = pointCurrent[indexAxis];
	        const vPixel = pointCurrent[valueAxis];
	        if (pointBefore) {
	            delta = (iPixel - pointBefore[indexAxis]) / 3;
	            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;
	            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];
	        }
	        if (pointAfter) {
	            delta = (pointAfter[indexAxis] - iPixel) / 3;
	            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;
	            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];
	        }
	    }
	}
	/**
	 * This function calculates Bézier control points in a similar way than |splineCurve|,
	 * but preserves monotonicity of the provided data and ensures no local extremums are added
	 * between the dataset discrete points due to the interpolation.
	 * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation
	 */ function splineCurveMonotone(points, indexAxis = 'x') {
	    const valueAxis = getValueAxis(indexAxis);
	    const pointsLen = points.length;
	    const deltaK = Array(pointsLen).fill(0);
	    const mK = Array(pointsLen);
	    // Calculate slopes (deltaK) and initialize tangents (mK)
	    let i, pointBefore, pointCurrent;
	    let pointAfter = getPoint(points, 0);
	    for(i = 0; i < pointsLen; ++i){
	        pointBefore = pointCurrent;
	        pointCurrent = pointAfter;
	        pointAfter = getPoint(points, i + 1);
	        if (!pointCurrent) {
	            continue;
	        }
	        if (pointAfter) {
	            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
	            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0
	            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
	        }
	        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;
	    }
	    monotoneAdjust(points, deltaK, mK);
	    monotoneCompute(points, mK, indexAxis);
	}
	function capControlPoint(pt, min, max) {
	    return Math.max(Math.min(pt, max), min);
	}
	function capBezierPoints(points, area) {
	    let i, ilen, point, inArea, inAreaPrev;
	    let inAreaNext = _isPointInArea(points[0], area);
	    for(i = 0, ilen = points.length; i < ilen; ++i){
	        inAreaPrev = inArea;
	        inArea = inAreaNext;
	        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);
	        if (!inArea) {
	            continue;
	        }
	        point = points[i];
	        if (inAreaPrev) {
	            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);
	            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);
	        }
	        if (inAreaNext) {
	            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);
	            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);
	        }
	    }
	}
	/**
	 * @private
	 */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {
	    let i, ilen, point, controlPoints;
	    // Only consider points that are drawn in case the spanGaps option is used
	    if (options.spanGaps) {
	        points = points.filter((pt)=>!pt.skip);
	    }
	    if (options.cubicInterpolationMode === 'monotone') {
	        splineCurveMonotone(points, indexAxis);
	    } else {
	        let prev = loop ? points[points.length - 1] : points[0];
	        for(i = 0, ilen = points.length; i < ilen; ++i){
	            point = points[i];
	            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);
	            point.cp1x = controlPoints.previous.x;
	            point.cp1y = controlPoints.previous.y;
	            point.cp2x = controlPoints.next.x;
	            point.cp2y = controlPoints.next.y;
	            prev = point;
	        }
	    }
	    if (options.capBezierPoints) {
	        capBezierPoints(points, area);
	    }
	}

	/**
	 * Note: typedefs are auto-exported, so use a made-up `dom` namespace where
	 * necessary to avoid duplicates with `export * from './helpers`; see
	 * https://github.com/microsoft/TypeScript/issues/46011
	 * @typedef { import('../core/core.controller.js').default } dom.Chart
	 * @typedef { import('../../types').ChartEvent } ChartEvent
	 */ /**
	 * @private
	 */ function _isDomSupported() {
	    return typeof window !== 'undefined' && typeof document !== 'undefined';
	}
	/**
	 * @private
	 */ function _getParentNode(domNode) {
	    let parent = domNode.parentNode;
	    if (parent && parent.toString() === '[object ShadowRoot]') {
	        parent = parent.host;
	    }
	    return parent;
	}
	/**
	 * convert max-width/max-height values that may be percentages into a number
	 * @private
	 */ function parseMaxStyle(styleValue, node, parentProperty) {
	    let valueInPixels;
	    if (typeof styleValue === 'string') {
	        valueInPixels = parseInt(styleValue, 10);
	        if (styleValue.indexOf('%') !== -1) {
	            // percentage * size in dimension
	            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
	        }
	    } else {
	        valueInPixels = styleValue;
	    }
	    return valueInPixels;
	}
	const getComputedStyle$1 = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);
	function getStyle(el, property) {
	    return getComputedStyle$1(el).getPropertyValue(property);
	}
	const positions = [
	    'top',
	    'right',
	    'bottom',
	    'left'
	];
	function getPositionedStyle(styles, style, suffix) {
	    const result = {};
	    suffix = suffix ? '-' + suffix : '';
	    for(let i = 0; i < 4; i++){
	        const pos = positions[i];
	        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;
	    }
	    result.width = result.left + result.right;
	    result.height = result.top + result.bottom;
	    return result;
	}
	const useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);
	/**
	 * @param e
	 * @param canvas
	 * @returns Canvas position
	 */ function getCanvasPosition(e, canvas) {
	    const touches = e.touches;
	    const source = touches && touches.length ? touches[0] : e;
	    const { offsetX , offsetY  } = source;
	    let box = false;
	    let x, y;
	    if (useOffsetPos(offsetX, offsetY, e.target)) {
	        x = offsetX;
	        y = offsetY;
	    } else {
	        const rect = canvas.getBoundingClientRect();
	        x = source.clientX - rect.left;
	        y = source.clientY - rect.top;
	        box = true;
	    }
	    return {
	        x,
	        y,
	        box
	    };
	}
	/**
	 * Gets an event's x, y coordinates, relative to the chart area
	 * @param event
	 * @param chart
	 * @returns x and y coordinates of the event
	 */ function getRelativePosition(event, chart) {
	    if ('native' in event) {
	        return event;
	    }
	    const { canvas , currentDevicePixelRatio  } = chart;
	    const style = getComputedStyle$1(canvas);
	    const borderBox = style.boxSizing === 'border-box';
	    const paddings = getPositionedStyle(style, 'padding');
	    const borders = getPositionedStyle(style, 'border', 'width');
	    const { x , y , box  } = getCanvasPosition(event, canvas);
	    const xOffset = paddings.left + (box && borders.left);
	    const yOffset = paddings.top + (box && borders.top);
	    let { width , height  } = chart;
	    if (borderBox) {
	        width -= paddings.width + borders.width;
	        height -= paddings.height + borders.height;
	    }
	    return {
	        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),
	        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)
	    };
	}
	function getContainerSize(canvas, width, height) {
	    let maxWidth, maxHeight;
	    if (width === undefined || height === undefined) {
	        const container = _getParentNode(canvas);
	        if (!container) {
	            width = canvas.clientWidth;
	            height = canvas.clientHeight;
	        } else {
	            const rect = container.getBoundingClientRect(); // this is the border box of the container
	            const containerStyle = getComputedStyle$1(container);
	            const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');
	            const containerPadding = getPositionedStyle(containerStyle, 'padding');
	            width = rect.width - containerPadding.width - containerBorder.width;
	            height = rect.height - containerPadding.height - containerBorder.height;
	            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');
	            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');
	        }
	    }
	    return {
	        width,
	        height,
	        maxWidth: maxWidth || INFINITY,
	        maxHeight: maxHeight || INFINITY
	    };
	}
	const round1 = (v)=>Math.round(v * 10) / 10;
	// eslint-disable-next-line complexity
	function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
	    const style = getComputedStyle$1(canvas);
	    const margins = getPositionedStyle(style, 'margin');
	    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;
	    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;
	    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
	    let { width , height  } = containerSize;
	    if (style.boxSizing === 'content-box') {
	        const borders = getPositionedStyle(style, 'border', 'width');
	        const paddings = getPositionedStyle(style, 'padding');
	        width -= paddings.width + borders.width;
	        height -= paddings.height + borders.height;
	    }
	    width = Math.max(0, width - margins.width);
	    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);
	    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
	    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
	    if (width && !height) {
	        // https://github.com/chartjs/Chart.js/issues/4659
	        // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)
	        height = round1(width / 2);
	    }
	    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;
	    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {
	        height = containerSize.height;
	        width = round1(Math.floor(height * aspectRatio));
	    }
	    return {
	        width,
	        height
	    };
	}
	/**
	 * @param chart
	 * @param forceRatio
	 * @param forceStyle
	 * @returns True if the canvas context size or transformation has changed.
	 */ function retinaScale(chart, forceRatio, forceStyle) {
	    const pixelRatio = forceRatio || 1;
	    const deviceHeight = Math.floor(chart.height * pixelRatio);
	    const deviceWidth = Math.floor(chart.width * pixelRatio);
	    chart.height = Math.floor(chart.height);
	    chart.width = Math.floor(chart.width);
	    const canvas = chart.canvas;
	    // If no style has been set on the canvas, the render size is used as display size,
	    // making the chart visually bigger, so let's enforce it to the "correct" values.
	    // See https://github.com/chartjs/Chart.js/issues/3575
	    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
	        canvas.style.height = `${chart.height}px`;
	        canvas.style.width = `${chart.width}px`;
	    }
	    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
	        chart.currentDevicePixelRatio = pixelRatio;
	        canvas.height = deviceHeight;
	        canvas.width = deviceWidth;
	        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
	        return true;
	    }
	    return false;
	}
	/**
	 * Detects support for options object argument in addEventListener.
	 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
	 * @private
	 */ const supportsEventListenerOptions = function() {
	    let passiveSupported = false;
	    try {
	        const options = {
	            get passive () {
	                passiveSupported = true;
	                return false;
	            }
	        };
	        window.addEventListener('test', null, options);
	        window.removeEventListener('test', null, options);
	    } catch (e) {
	    // continue regardless of error
	    }
	    return passiveSupported;
	}();
	/**
	 * The "used" size is the final value of a dimension property after all calculations have
	 * been performed. This method uses the computed style of `element` but returns undefined
	 * if the computed style is not expressed in pixels. That can happen in some cases where
	 * `element` has a size relative to its parent and this last one is not yet displayed,
	 * for example because of `display: none` on a parent node.
	 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
	 * @returns Size in pixels or undefined if unknown.
	 */ function readUsedSize(element, property) {
	    const value = getStyle(element, property);
	    const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
	    return matches ? +matches[1] : undefined;
	}

	/**
	 * @private
	 */ function _pointInLine(p1, p2, t, mode) {
	    return {
	        x: p1.x + t * (p2.x - p1.x),
	        y: p1.y + t * (p2.y - p1.y)
	    };
	}
	/**
	 * @private
	 */ function _steppedInterpolation(p1, p2, t, mode) {
	    return {
	        x: p1.x + t * (p2.x - p1.x),
	        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y
	    };
	}
	/**
	 * @private
	 */ function _bezierInterpolation(p1, p2, t, mode) {
	    const cp1 = {
	        x: p1.cp2x,
	        y: p1.cp2y
	    };
	    const cp2 = {
	        x: p2.cp1x,
	        y: p2.cp1y
	    };
	    const a = _pointInLine(p1, cp1, t);
	    const b = _pointInLine(cp1, cp2, t);
	    const c = _pointInLine(cp2, p2, t);
	    const d = _pointInLine(a, b, t);
	    const e = _pointInLine(b, c, t);
	    return _pointInLine(d, e, t);
	}

	const getRightToLeftAdapter = function(rectX, width) {
	    return {
	        x (x) {
	            return rectX + rectX + width - x;
	        },
	        setWidth (w) {
	            width = w;
	        },
	        textAlign (align) {
	            if (align === 'center') {
	                return align;
	            }
	            return align === 'right' ? 'left' : 'right';
	        },
	        xPlus (x, value) {
	            return x - value;
	        },
	        leftForLtr (x, itemWidth) {
	            return x - itemWidth;
	        }
	    };
	};
	const getLeftToRightAdapter = function() {
	    return {
	        x (x) {
	            return x;
	        },
	        setWidth (w) {},
	        textAlign (align) {
	            return align;
	        },
	        xPlus (x, value) {
	            return x + value;
	        },
	        leftForLtr (x, _itemWidth) {
	            return x;
	        }
	    };
	};
	function getRtlAdapter(rtl, rectX, width) {
	    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
	}
	function overrideTextDirection(ctx, direction) {
	    let style, original;
	    if (direction === 'ltr' || direction === 'rtl') {
	        style = ctx.canvas.style;
	        original = [
	            style.getPropertyValue('direction'),
	            style.getPropertyPriority('direction')
	        ];
	        style.setProperty('direction', direction, 'important');
	        ctx.prevTextDirection = original;
	    }
	}
	function restoreTextDirection(ctx, original) {
	    if (original !== undefined) {
	        delete ctx.prevTextDirection;
	        ctx.canvas.style.setProperty('direction', original[0], original[1]);
	    }
	}

	function propertyFn(property) {
	    if (property === 'angle') {
	        return {
	            between: _angleBetween,
	            compare: _angleDiff,
	            normalize: _normalizeAngle
	        };
	    }
	    return {
	        between: _isBetween,
	        compare: (a, b)=>a - b,
	        normalize: (x)=>x
	    };
	}
	function normalizeSegment({ start , end , count , loop , style  }) {
	    return {
	        start: start % count,
	        end: end % count,
	        loop: loop && (end - start + 1) % count === 0,
	        style
	    };
	}
	function getSegment(segment, points, bounds) {
	    const { property , start: startBound , end: endBound  } = bounds;
	    const { between , normalize  } = propertyFn(property);
	    const count = points.length;
	    let { start , end , loop  } = segment;
	    let i, ilen;
	    if (loop) {
	        start += count;
	        end += count;
	        for(i = 0, ilen = count; i < ilen; ++i){
	            if (!between(normalize(points[start % count][property]), startBound, endBound)) {
	                break;
	            }
	            start--;
	            end--;
	        }
	        start %= count;
	        end %= count;
	    }
	    if (end < start) {
	        end += count;
	    }
	    return {
	        start,
	        end,
	        loop,
	        style: segment.style
	    };
	}
	 function _boundSegment(segment, points, bounds) {
	    if (!bounds) {
	        return [
	            segment
	        ];
	    }
	    const { property , start: startBound , end: endBound  } = bounds;
	    const count = points.length;
	    const { compare , between , normalize  } = propertyFn(property);
	    const { start , end , loop , style  } = getSegment(segment, points, bounds);
	    const result = [];
	    let inside = false;
	    let subStart = null;
	    let value, point, prevValue;
	    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
	    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);
	    const shouldStart = ()=>inside || startIsBefore();
	    const shouldStop = ()=>!inside || endIsBefore();
	    for(let i = start, prev = start; i <= end; ++i){
	        point = points[i % count];
	        if (point.skip) {
	            continue;
	        }
	        value = normalize(point[property]);
	        if (value === prevValue) {
	            continue;
	        }
	        inside = between(value, startBound, endBound);
	        if (subStart === null && shouldStart()) {
	            subStart = compare(value, startBound) === 0 ? i : prev;
	        }
	        if (subStart !== null && shouldStop()) {
	            result.push(normalizeSegment({
	                start: subStart,
	                end: i,
	                loop,
	                count,
	                style
	            }));
	            subStart = null;
	        }
	        prev = i;
	        prevValue = value;
	    }
	    if (subStart !== null) {
	        result.push(normalizeSegment({
	            start: subStart,
	            end,
	            loop,
	            count,
	            style
	        }));
	    }
	    return result;
	}
	 function _boundSegments(line, bounds) {
	    const result = [];
	    const segments = line.segments;
	    for(let i = 0; i < segments.length; i++){
	        const sub = _boundSegment(segments[i], line.points, bounds);
	        if (sub.length) {
	            result.push(...sub);
	        }
	    }
	    return result;
	}
	 function findStartAndEnd(points, count, loop, spanGaps) {
	    let start = 0;
	    let end = count - 1;
	    if (loop && !spanGaps) {
	        while(start < count && !points[start].skip){
	            start++;
	        }
	    }
	    while(start < count && points[start].skip){
	        start++;
	    }
	    start %= count;
	    if (loop) {
	        end += start;
	    }
	    while(end > start && points[end % count].skip){
	        end--;
	    }
	    end %= count;
	    return {
	        start,
	        end
	    };
	}
	 function solidSegments(points, start, max, loop) {
	    const count = points.length;
	    const result = [];
	    let last = start;
	    let prev = points[start];
	    let end;
	    for(end = start + 1; end <= max; ++end){
	        const cur = points[end % count];
	        if (cur.skip || cur.stop) {
	            if (!prev.skip) {
	                loop = false;
	                result.push({
	                    start: start % count,
	                    end: (end - 1) % count,
	                    loop
	                });
	                start = last = cur.stop ? end : null;
	            }
	        } else {
	            last = end;
	            if (prev.skip) {
	                start = end;
	            }
	        }
	        prev = cur;
	    }
	    if (last !== null) {
	        result.push({
	            start: start % count,
	            end: last % count,
	            loop
	        });
	    }
	    return result;
	}
	 function _computeSegments(line, segmentOptions) {
	    const points = line.points;
	    const spanGaps = line.options.spanGaps;
	    const count = points.length;
	    if (!count) {
	        return [];
	    }
	    const loop = !!line._loop;
	    const { start , end  } = findStartAndEnd(points, count, loop, spanGaps);
	    if (spanGaps === true) {
	        return splitByStyles(line, [
	            {
	                start,
	                end,
	                loop
	            }
	        ], points, segmentOptions);
	    }
	    const max = end < start ? end + count : end;
	    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
	    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);
	}
	 function splitByStyles(line, segments, points, segmentOptions) {
	    if (!segmentOptions || !segmentOptions.setContext || !points) {
	        return segments;
	    }
	    return doSplitByStyles(line, segments, points, segmentOptions);
	}
	 function doSplitByStyles(line, segments, points, segmentOptions) {
	    const chartContext = line._chart.getContext();
	    const baseStyle = readStyle(line.options);
	    const { _datasetIndex: datasetIndex , options: { spanGaps  }  } = line;
	    const count = points.length;
	    const result = [];
	    let prevStyle = baseStyle;
	    let start = segments[0].start;
	    let i = start;
	    function addStyle(s, e, l, st) {
	        const dir = spanGaps ? -1 : 1;
	        if (s === e) {
	            return;
	        }
	        s += count;
	        while(points[s % count].skip){
	            s -= dir;
	        }
	        while(points[e % count].skip){
	            e += dir;
	        }
	        if (s % count !== e % count) {
	            result.push({
	                start: s % count,
	                end: e % count,
	                loop: l,
	                style: st
	            });
	            prevStyle = st;
	            start = e % count;
	        }
	    }
	    for (const segment of segments){
	        start = spanGaps ? start : segment.start;
	        let prev = points[start % count];
	        let style;
	        for(i = start + 1; i <= segment.end; i++){
	            const pt = points[i % count];
	            style = readStyle(segmentOptions.setContext(createContext(chartContext, {
	                type: 'segment',
	                p0: prev,
	                p1: pt,
	                p0DataIndex: (i - 1) % count,
	                p1DataIndex: i % count,
	                datasetIndex
	            })));
	            if (styleChanged(style, prevStyle)) {
	                addStyle(start, i - 1, segment.loop, prevStyle);
	            }
	            prev = pt;
	            prevStyle = style;
	        }
	        if (start < i - 1) {
	            addStyle(start, i - 1, segment.loop, prevStyle);
	        }
	    }
	    return result;
	}
	function readStyle(options) {
	    return {
	        backgroundColor: options.backgroundColor,
	        borderCapStyle: options.borderCapStyle,
	        borderDash: options.borderDash,
	        borderDashOffset: options.borderDashOffset,
	        borderJoinStyle: options.borderJoinStyle,
	        borderWidth: options.borderWidth,
	        borderColor: options.borderColor
	    };
	}
	function styleChanged(style, prevStyle) {
	    if (!prevStyle) {
	        return false;
	    }
	    const cache = [];
	    const replacer = function(key, value) {
	        if (!isPatternOrGradient(value)) {
	            return value;
	        }
	        if (!cache.includes(value)) {
	            cache.push(value);
	        }
	        return cache.indexOf(value);
	    };
	    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);
	}

	/*!
	 * Chart.js v4.4.0
	 * https://www.chartjs.org
	 * (c) 2023 Chart.js Contributors
	 * Released under the MIT License
	 */

	class Animator {
	    constructor(){
	        this._request = null;
	        this._charts = new Map();
	        this._running = false;
	        this._lastDate = undefined;
	    }
	 _notify(chart, anims, date, type) {
	        const callbacks = anims.listeners[type];
	        const numSteps = anims.duration;
	        callbacks.forEach((fn)=>fn({
	                chart,
	                initial: anims.initial,
	                numSteps,
	                currentStep: Math.min(date - anims.start, numSteps)
	            }));
	    }
	 _refresh() {
	        if (this._request) {
	            return;
	        }
	        this._running = true;
	        this._request = requestAnimFrame.call(window, ()=>{
	            this._update();
	            this._request = null;
	            if (this._running) {
	                this._refresh();
	            }
	        });
	    }
	 _update(date = Date.now()) {
	        let remaining = 0;
	        this._charts.forEach((anims, chart)=>{
	            if (!anims.running || !anims.items.length) {
	                return;
	            }
	            const items = anims.items;
	            let i = items.length - 1;
	            let draw = false;
	            let item;
	            for(; i >= 0; --i){
	                item = items[i];
	                if (item._active) {
	                    if (item._total > anims.duration) {
	                        anims.duration = item._total;
	                    }
	                    item.tick(date);
	                    draw = true;
	                } else {
	                    items[i] = items[items.length - 1];
	                    items.pop();
	                }
	            }
	            if (draw) {
	                chart.draw();
	                this._notify(chart, anims, date, 'progress');
	            }
	            if (!items.length) {
	                anims.running = false;
	                this._notify(chart, anims, date, 'complete');
	                anims.initial = false;
	            }
	            remaining += items.length;
	        });
	        this._lastDate = date;
	        if (remaining === 0) {
	            this._running = false;
	        }
	    }
	 _getAnims(chart) {
	        const charts = this._charts;
	        let anims = charts.get(chart);
	        if (!anims) {
	            anims = {
	                running: false,
	                initial: true,
	                items: [],
	                listeners: {
	                    complete: [],
	                    progress: []
	                }
	            };
	            charts.set(chart, anims);
	        }
	        return anims;
	    }
	 listen(chart, event, cb) {
	        this._getAnims(chart).listeners[event].push(cb);
	    }
	 add(chart, items) {
	        if (!items || !items.length) {
	            return;
	        }
	        this._getAnims(chart).items.push(...items);
	    }
	 has(chart) {
	        return this._getAnims(chart).items.length > 0;
	    }
	 start(chart) {
	        const anims = this._charts.get(chart);
	        if (!anims) {
	            return;
	        }
	        anims.running = true;
	        anims.start = Date.now();
	        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);
	        this._refresh();
	    }
	    running(chart) {
	        if (!this._running) {
	            return false;
	        }
	        const anims = this._charts.get(chart);
	        if (!anims || !anims.running || !anims.items.length) {
	            return false;
	        }
	        return true;
	    }
	 stop(chart) {
	        const anims = this._charts.get(chart);
	        if (!anims || !anims.items.length) {
	            return;
	        }
	        const items = anims.items;
	        let i = items.length - 1;
	        for(; i >= 0; --i){
	            items[i].cancel();
	        }
	        anims.items = [];
	        this._notify(chart, anims, Date.now(), 'complete');
	    }
	 remove(chart) {
	        return this._charts.delete(chart);
	    }
	}
	var animator = /* #__PURE__ */ new Animator();

	const transparent = 'transparent';
	const interpolators = {
	    boolean (from, to, factor) {
	        return factor > 0.5 ? to : from;
	    },
	 color (from, to, factor) {
	        const c0 = color(from || transparent);
	        const c1 = c0.valid && color(to || transparent);
	        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;
	    },
	    number (from, to, factor) {
	        return from + (to - from) * factor;
	    }
	};
	class Animation {
	    constructor(cfg, target, prop, to){
	        const currentValue = target[prop];
	        to = resolve([
	            cfg.to,
	            to,
	            currentValue,
	            cfg.from
	        ]);
	        const from = resolve([
	            cfg.from,
	            currentValue,
	            to
	        ]);
	        this._active = true;
	        this._fn = cfg.fn || interpolators[cfg.type || typeof from];
	        this._easing = effects[cfg.easing] || effects.linear;
	        this._start = Math.floor(Date.now() + (cfg.delay || 0));
	        this._duration = this._total = Math.floor(cfg.duration);
	        this._loop = !!cfg.loop;
	        this._target = target;
	        this._prop = prop;
	        this._from = from;
	        this._to = to;
	        this._promises = undefined;
	    }
	    active() {
	        return this._active;
	    }
	    update(cfg, to, date) {
	        if (this._active) {
	            this._notify(false);
	            const currentValue = this._target[this._prop];
	            const elapsed = date - this._start;
	            const remain = this._duration - elapsed;
	            this._start = date;
	            this._duration = Math.floor(Math.max(remain, cfg.duration));
	            this._total += elapsed;
	            this._loop = !!cfg.loop;
	            this._to = resolve([
	                cfg.to,
	                to,
	                currentValue,
	                cfg.from
	            ]);
	            this._from = resolve([
	                cfg.from,
	                currentValue,
	                to
	            ]);
	        }
	    }
	    cancel() {
	        if (this._active) {
	            this.tick(Date.now());
	            this._active = false;
	            this._notify(false);
	        }
	    }
	    tick(date) {
	        const elapsed = date - this._start;
	        const duration = this._duration;
	        const prop = this._prop;
	        const from = this._from;
	        const loop = this._loop;
	        const to = this._to;
	        let factor;
	        this._active = from !== to && (loop || elapsed < duration);
	        if (!this._active) {
	            this._target[prop] = to;
	            this._notify(true);
	            return;
	        }
	        if (elapsed < 0) {
	            this._target[prop] = from;
	            return;
	        }
	        factor = elapsed / duration % 2;
	        factor = loop && factor > 1 ? 2 - factor : factor;
	        factor = this._easing(Math.min(1, Math.max(0, factor)));
	        this._target[prop] = this._fn(from, to, factor);
	    }
	    wait() {
	        const promises = this._promises || (this._promises = []);
	        return new Promise((res, rej)=>{
	            promises.push({
	                res,
	                rej
	            });
	        });
	    }
	    _notify(resolved) {
	        const method = resolved ? 'res' : 'rej';
	        const promises = this._promises || [];
	        for(let i = 0; i < promises.length; i++){
	            promises[i][method]();
	        }
	    }
	}

	class Animations {
	    constructor(chart, config){
	        this._chart = chart;
	        this._properties = new Map();
	        this.configure(config);
	    }
	    configure(config) {
	        if (!isObject(config)) {
	            return;
	        }
	        const animationOptions = Object.keys(defaults.animation);
	        const animatedProps = this._properties;
	        Object.getOwnPropertyNames(config).forEach((key)=>{
	            const cfg = config[key];
	            if (!isObject(cfg)) {
	                return;
	            }
	            const resolved = {};
	            for (const option of animationOptions){
	                resolved[option] = cfg[option];
	            }
	            (isArray(cfg.properties) && cfg.properties || [
	                key
	            ]).forEach((prop)=>{
	                if (prop === key || !animatedProps.has(prop)) {
	                    animatedProps.set(prop, resolved);
	                }
	            });
	        });
	    }
	 _animateOptions(target, values) {
	        const newOptions = values.options;
	        const options = resolveTargetOptions(target, newOptions);
	        if (!options) {
	            return [];
	        }
	        const animations = this._createAnimations(options, newOptions);
	        if (newOptions.$shared) {
	            awaitAll(target.options.$animations, newOptions).then(()=>{
	                target.options = newOptions;
	            }, ()=>{
	            });
	        }
	        return animations;
	    }
	 _createAnimations(target, values) {
	        const animatedProps = this._properties;
	        const animations = [];
	        const running = target.$animations || (target.$animations = {});
	        const props = Object.keys(values);
	        const date = Date.now();
	        let i;
	        for(i = props.length - 1; i >= 0; --i){
	            const prop = props[i];
	            if (prop.charAt(0) === '$') {
	                continue;
	            }
	            if (prop === 'options') {
	                animations.push(...this._animateOptions(target, values));
	                continue;
	            }
	            const value = values[prop];
	            let animation = running[prop];
	            const cfg = animatedProps.get(prop);
	            if (animation) {
	                if (cfg && animation.active()) {
	                    animation.update(cfg, value, date);
	                    continue;
	                } else {
	                    animation.cancel();
	                }
	            }
	            if (!cfg || !cfg.duration) {
	                target[prop] = value;
	                continue;
	            }
	            running[prop] = animation = new Animation(cfg, target, prop, value);
	            animations.push(animation);
	        }
	        return animations;
	    }
	 update(target, values) {
	        if (this._properties.size === 0) {
	            Object.assign(target, values);
	            return;
	        }
	        const animations = this._createAnimations(target, values);
	        if (animations.length) {
	            animator.add(this._chart, animations);
	            return true;
	        }
	    }
	}
	function awaitAll(animations, properties) {
	    const running = [];
	    const keys = Object.keys(properties);
	    for(let i = 0; i < keys.length; i++){
	        const anim = animations[keys[i]];
	        if (anim && anim.active()) {
	            running.push(anim.wait());
	        }
	    }
	    return Promise.all(running);
	}
	function resolveTargetOptions(target, newOptions) {
	    if (!newOptions) {
	        return;
	    }
	    let options = target.options;
	    if (!options) {
	        target.options = newOptions;
	        return;
	    }
	    if (options.$shared) {
	        target.options = options = Object.assign({}, options, {
	            $shared: false,
	            $animations: {}
	        });
	    }
	    return options;
	}

	function scaleClip(scale, allowedOverflow) {
	    const opts = scale && scale.options || {};
	    const reverse = opts.reverse;
	    const min = opts.min === undefined ? allowedOverflow : 0;
	    const max = opts.max === undefined ? allowedOverflow : 0;
	    return {
	        start: reverse ? max : min,
	        end: reverse ? min : max
	    };
	}
	function defaultClip(xScale, yScale, allowedOverflow) {
	    if (allowedOverflow === false) {
	        return false;
	    }
	    const x = scaleClip(xScale, allowedOverflow);
	    const y = scaleClip(yScale, allowedOverflow);
	    return {
	        top: y.end,
	        right: x.end,
	        bottom: y.start,
	        left: x.start
	    };
	}
	function toClip(value) {
	    let t, r, b, l;
	    if (isObject(value)) {
	        t = value.top;
	        r = value.right;
	        b = value.bottom;
	        l = value.left;
	    } else {
	        t = r = b = l = value;
	    }
	    return {
	        top: t,
	        right: r,
	        bottom: b,
	        left: l,
	        disabled: value === false
	    };
	}
	function getSortedDatasetIndices(chart, filterVisible) {
	    const keys = [];
	    const metasets = chart._getSortedDatasetMetas(filterVisible);
	    let i, ilen;
	    for(i = 0, ilen = metasets.length; i < ilen; ++i){
	        keys.push(metasets[i].index);
	    }
	    return keys;
	}
	function applyStack(stack, value, dsIndex, options = {}) {
	    const keys = stack.keys;
	    const singleMode = options.mode === 'single';
	    let i, ilen, datasetIndex, otherValue;
	    if (value === null) {
	        return;
	    }
	    for(i = 0, ilen = keys.length; i < ilen; ++i){
	        datasetIndex = +keys[i];
	        if (datasetIndex === dsIndex) {
	            if (options.all) {
	                continue;
	            }
	            break;
	        }
	        otherValue = stack.values[datasetIndex];
	        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {
	            value += otherValue;
	        }
	    }
	    return value;
	}
	function convertObjectDataToArray(data) {
	    const keys = Object.keys(data);
	    const adata = new Array(keys.length);
	    let i, ilen, key;
	    for(i = 0, ilen = keys.length; i < ilen; ++i){
	        key = keys[i];
	        adata[i] = {
	            x: key,
	            y: data[key]
	        };
	    }
	    return adata;
	}
	function isStacked(scale, meta) {
	    const stacked = scale && scale.options.stacked;
	    return stacked || stacked === undefined && meta.stack !== undefined;
	}
	function getStackKey(indexScale, valueScale, meta) {
	    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
	}
	function getUserBounds(scale) {
	    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();
	    return {
	        min: minDefined ? min : Number.NEGATIVE_INFINITY,
	        max: maxDefined ? max : Number.POSITIVE_INFINITY
	    };
	}
	function getOrCreateStack(stacks, stackKey, indexValue) {
	    const subStack = stacks[stackKey] || (stacks[stackKey] = {});
	    return subStack[indexValue] || (subStack[indexValue] = {});
	}
	function getLastIndexInStack(stack, vScale, positive, type) {
	    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){
	        const value = stack[meta.index];
	        if (positive && value > 0 || !positive && value < 0) {
	            return meta.index;
	        }
	    }
	    return null;
	}
	function updateStacks(controller, parsed) {
	    const { chart , _cachedMeta: meta  } = controller;
	    const stacks = chart._stacks || (chart._stacks = {});
	    const { iScale , vScale , index: datasetIndex  } = meta;
	    const iAxis = iScale.axis;
	    const vAxis = vScale.axis;
	    const key = getStackKey(iScale, vScale, meta);
	    const ilen = parsed.length;
	    let stack;
	    for(let i = 0; i < ilen; ++i){
	        const item = parsed[i];
	        const { [iAxis]: index , [vAxis]: value  } = item;
	        const itemStacks = item._stacks || (item._stacks = {});
	        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);
	        stack[datasetIndex] = value;
	        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);
	        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);
	        const visualValues = stack._visualValues || (stack._visualValues = {});
	        visualValues[datasetIndex] = value;
	    }
	}
	function getFirstScaleId(chart, axis) {
	    const scales = chart.scales;
	    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();
	}
	function createDatasetContext(parent, index) {
	    return createContext(parent, {
	        active: false,
	        dataset: undefined,
	        datasetIndex: index,
	        index,
	        mode: 'default',
	        type: 'dataset'
	    });
	}
	function createDataContext(parent, index, element) {
	    return createContext(parent, {
	        active: false,
	        dataIndex: index,
	        parsed: undefined,
	        raw: undefined,
	        element,
	        index,
	        mode: 'default',
	        type: 'data'
	    });
	}
	function clearStacks(meta, items) {
	    const datasetIndex = meta.controller.index;
	    const axis = meta.vScale && meta.vScale.axis;
	    if (!axis) {
	        return;
	    }
	    items = items || meta._parsed;
	    for (const parsed of items){
	        const stacks = parsed._stacks;
	        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {
	            return;
	        }
	        delete stacks[axis][datasetIndex];
	        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {
	            delete stacks[axis]._visualValues[datasetIndex];
	        }
	    }
	}
	const isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';
	const cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);
	const createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {
	        keys: getSortedDatasetIndices(chart, true),
	        values: null
	    };
	class DatasetController {
	 static defaults = {};
	 static datasetElementType = null;
	 static dataElementType = null;
	 constructor(chart, datasetIndex){
	        this.chart = chart;
	        this._ctx = chart.ctx;
	        this.index = datasetIndex;
	        this._cachedDataOpts = {};
	        this._cachedMeta = this.getMeta();
	        this._type = this._cachedMeta.type;
	        this.options = undefined;
	         this._parsing = false;
	        this._data = undefined;
	        this._objectData = undefined;
	        this._sharedOptions = undefined;
	        this._drawStart = undefined;
	        this._drawCount = undefined;
	        this.enableOptionSharing = false;
	        this.supportsDecimation = false;
	        this.$context = undefined;
	        this._syncList = [];
	        this.datasetElementType = new.target.datasetElementType;
	        this.dataElementType = new.target.dataElementType;
	        this.initialize();
	    }
	    initialize() {
	        const meta = this._cachedMeta;
	        this.configure();
	        this.linkScales();
	        meta._stacked = isStacked(meta.vScale, meta);
	        this.addElements();
	        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {
	            console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
	        }
	    }
	    updateIndex(datasetIndex) {
	        if (this.index !== datasetIndex) {
	            clearStacks(this._cachedMeta);
	        }
	        this.index = datasetIndex;
	    }
	    linkScales() {
	        const chart = this.chart;
	        const meta = this._cachedMeta;
	        const dataset = this.getDataset();
	        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;
	        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));
	        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));
	        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));
	        const indexAxis = meta.indexAxis;
	        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
	        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
	        meta.xScale = this.getScaleForId(xid);
	        meta.yScale = this.getScaleForId(yid);
	        meta.rScale = this.getScaleForId(rid);
	        meta.iScale = this.getScaleForId(iid);
	        meta.vScale = this.getScaleForId(vid);
	    }
	    getDataset() {
	        return this.chart.data.datasets[this.index];
	    }
	    getMeta() {
	        return this.chart.getDatasetMeta(this.index);
	    }
	 getScaleForId(scaleID) {
	        return this.chart.scales[scaleID];
	    }
	 _getOtherScale(scale) {
	        const meta = this._cachedMeta;
	        return scale === meta.iScale ? meta.vScale : meta.iScale;
	    }
	    reset() {
	        this._update('reset');
	    }
	 _destroy() {
	        const meta = this._cachedMeta;
	        if (this._data) {
	            unlistenArrayEvents(this._data, this);
	        }
	        if (meta._stacked) {
	            clearStacks(meta);
	        }
	    }
	 _dataCheck() {
	        const dataset = this.getDataset();
	        const data = dataset.data || (dataset.data = []);
	        const _data = this._data;
	        if (isObject(data)) {
	            this._data = convertObjectDataToArray(data);
	        } else if (_data !== data) {
	            if (_data) {
	                unlistenArrayEvents(_data, this);
	                const meta = this._cachedMeta;
	                clearStacks(meta);
	                meta._parsed = [];
	            }
	            if (data && Object.isExtensible(data)) {
	                listenArrayEvents(data, this);
	            }
	            this._syncList = [];
	            this._data = data;
	        }
	    }
	    addElements() {
	        const meta = this._cachedMeta;
	        this._dataCheck();
	        if (this.datasetElementType) {
	            meta.dataset = new this.datasetElementType();
	        }
	    }
	    buildOrUpdateElements(resetNewElements) {
	        const meta = this._cachedMeta;
	        const dataset = this.getDataset();
	        let stackChanged = false;
	        this._dataCheck();
	        const oldStacked = meta._stacked;
	        meta._stacked = isStacked(meta.vScale, meta);
	        if (meta.stack !== dataset.stack) {
	            stackChanged = true;
	            clearStacks(meta);
	            meta.stack = dataset.stack;
	        }
	        this._resyncElements(resetNewElements);
	        if (stackChanged || oldStacked !== meta._stacked) {
	            updateStacks(this, meta._parsed);
	        }
	    }
	 configure() {
	        const config = this.chart.config;
	        const scopeKeys = config.datasetScopeKeys(this._type);
	        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);
	        this.options = config.createResolver(scopes, this.getContext());
	        this._parsing = this.options.parsing;
	        this._cachedDataOpts = {};
	    }
	 parse(start, count) {
	        const { _cachedMeta: meta , _data: data  } = this;
	        const { iScale , _stacked  } = meta;
	        const iAxis = iScale.axis;
	        let sorted = start === 0 && count === data.length ? true : meta._sorted;
	        let prev = start > 0 && meta._parsed[start - 1];
	        let i, cur, parsed;
	        if (this._parsing === false) {
	            meta._parsed = data;
	            meta._sorted = true;
	            parsed = data;
	        } else {
	            if (isArray(data[start])) {
	                parsed = this.parseArrayData(meta, data, start, count);
	            } else if (isObject(data[start])) {
	                parsed = this.parseObjectData(meta, data, start, count);
	            } else {
	                parsed = this.parsePrimitiveData(meta, data, start, count);
	            }
	            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];
	            for(i = 0; i < count; ++i){
	                meta._parsed[i + start] = cur = parsed[i];
	                if (sorted) {
	                    if (isNotInOrderComparedToPrev()) {
	                        sorted = false;
	                    }
	                    prev = cur;
	                }
	            }
	            meta._sorted = sorted;
	        }
	        if (_stacked) {
	            updateStacks(this, parsed);
	        }
	    }
	 parsePrimitiveData(meta, data, start, count) {
	        const { iScale , vScale  } = meta;
	        const iAxis = iScale.axis;
	        const vAxis = vScale.axis;
	        const labels = iScale.getLabels();
	        const singleScale = iScale === vScale;
	        const parsed = new Array(count);
	        let i, ilen, index;
	        for(i = 0, ilen = count; i < ilen; ++i){
	            index = i + start;
	            parsed[i] = {
	                [iAxis]: singleScale || iScale.parse(labels[index], index),
	                [vAxis]: vScale.parse(data[index], index)
	            };
	        }
	        return parsed;
	    }
	 parseArrayData(meta, data, start, count) {
	        const { xScale , yScale  } = meta;
	        const parsed = new Array(count);
	        let i, ilen, index, item;
	        for(i = 0, ilen = count; i < ilen; ++i){
	            index = i + start;
	            item = data[index];
	            parsed[i] = {
	                x: xScale.parse(item[0], index),
	                y: yScale.parse(item[1], index)
	            };
	        }
	        return parsed;
	    }
	 parseObjectData(meta, data, start, count) {
	        const { xScale , yScale  } = meta;
	        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;
	        const parsed = new Array(count);
	        let i, ilen, index, item;
	        for(i = 0, ilen = count; i < ilen; ++i){
	            index = i + start;
	            item = data[index];
	            parsed[i] = {
	                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),
	                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)
	            };
	        }
	        return parsed;
	    }
	 getParsed(index) {
	        return this._cachedMeta._parsed[index];
	    }
	 getDataElement(index) {
	        return this._cachedMeta.data[index];
	    }
	 applyStack(scale, parsed, mode) {
	        const chart = this.chart;
	        const meta = this._cachedMeta;
	        const value = parsed[scale.axis];
	        const stack = {
	            keys: getSortedDatasetIndices(chart, true),
	            values: parsed._stacks[scale.axis]._visualValues
	        };
	        return applyStack(stack, value, meta.index, {
	            mode
	        });
	    }
	 updateRangeFromParsed(range, scale, parsed, stack) {
	        const parsedValue = parsed[scale.axis];
	        let value = parsedValue === null ? NaN : parsedValue;
	        const values = stack && parsed._stacks[scale.axis];
	        if (stack && values) {
	            stack.values = values;
	            value = applyStack(stack, parsedValue, this._cachedMeta.index);
	        }
	        range.min = Math.min(range.min, value);
	        range.max = Math.max(range.max, value);
	    }
	 getMinMax(scale, canStack) {
	        const meta = this._cachedMeta;
	        const _parsed = meta._parsed;
	        const sorted = meta._sorted && scale === meta.iScale;
	        const ilen = _parsed.length;
	        const otherScale = this._getOtherScale(scale);
	        const stack = createStack(canStack, meta, this.chart);
	        const range = {
	            min: Number.POSITIVE_INFINITY,
	            max: Number.NEGATIVE_INFINITY
	        };
	        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);
	        let i, parsed;
	        function _skip() {
	            parsed = _parsed[i];
	            const otherValue = parsed[otherScale.axis];
	            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;
	        }
	        for(i = 0; i < ilen; ++i){
	            if (_skip()) {
	                continue;
	            }
	            this.updateRangeFromParsed(range, scale, parsed, stack);
	            if (sorted) {
	                break;
	            }
	        }
	        if (sorted) {
	            for(i = ilen - 1; i >= 0; --i){
	                if (_skip()) {
	                    continue;
	                }
	                this.updateRangeFromParsed(range, scale, parsed, stack);
	                break;
	            }
	        }
	        return range;
	    }
	    getAllParsedValues(scale) {
	        const parsed = this._cachedMeta._parsed;
	        const values = [];
	        let i, ilen, value;
	        for(i = 0, ilen = parsed.length; i < ilen; ++i){
	            value = parsed[i][scale.axis];
	            if (isNumberFinite(value)) {
	                values.push(value);
	            }
	        }
	        return values;
	    }
	 getMaxOverflow() {
	        return false;
	    }
	 getLabelAndValue(index) {
	        const meta = this._cachedMeta;
	        const iScale = meta.iScale;
	        const vScale = meta.vScale;
	        const parsed = this.getParsed(index);
	        return {
	            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',
	            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''
	        };
	    }
	 _update(mode) {
	        const meta = this._cachedMeta;
	        this.update(mode || 'default');
	        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
	    }
	 update(mode) {}
	    draw() {
	        const ctx = this._ctx;
	        const chart = this.chart;
	        const meta = this._cachedMeta;
	        const elements = meta.data || [];
	        const area = chart.chartArea;
	        const active = [];
	        const start = this._drawStart || 0;
	        const count = this._drawCount || elements.length - start;
	        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
	        let i;
	        if (meta.dataset) {
	            meta.dataset.draw(ctx, area, start, count);
	        }
	        for(i = start; i < start + count; ++i){
	            const element = elements[i];
	            if (element.hidden) {
	                continue;
	            }
	            if (element.active && drawActiveElementsOnTop) {
	                active.push(element);
	            } else {
	                element.draw(ctx, area);
	            }
	        }
	        for(i = 0; i < active.length; ++i){
	            active[i].draw(ctx, area);
	        }
	    }
	 getStyle(index, active) {
	        const mode = active ? 'active' : 'default';
	        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);
	    }
	 getContext(index, active, mode) {
	        const dataset = this.getDataset();
	        let context;
	        if (index >= 0 && index < this._cachedMeta.data.length) {
	            const element = this._cachedMeta.data[index];
	            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));
	            context.parsed = this.getParsed(index);
	            context.raw = dataset.data[index];
	            context.index = context.dataIndex = index;
	        } else {
	            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));
	            context.dataset = dataset;
	            context.index = context.datasetIndex = this.index;
	        }
	        context.active = !!active;
	        context.mode = mode;
	        return context;
	    }
	 resolveDatasetElementOptions(mode) {
	        return this._resolveElementOptions(this.datasetElementType.id, mode);
	    }
	 resolveDataElementOptions(index, mode) {
	        return this._resolveElementOptions(this.dataElementType.id, mode, index);
	    }
	 _resolveElementOptions(elementType, mode = 'default', index) {
	        const active = mode === 'active';
	        const cache = this._cachedDataOpts;
	        const cacheKey = elementType + '-' + mode;
	        const cached = cache[cacheKey];
	        const sharing = this.enableOptionSharing && defined(index);
	        if (cached) {
	            return cloneIfNotShared(cached, sharing);
	        }
	        const config = this.chart.config;
	        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);
	        const prefixes = active ? [
	            `${elementType}Hover`,
	            'hover',
	            elementType,
	            ''
	        ] : [
	            elementType,
	            ''
	        ];
	        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
	        const names = Object.keys(defaults.elements[elementType]);
	        const context = ()=>this.getContext(index, active, mode);
	        const values = config.resolveNamedOptions(scopes, names, context, prefixes);
	        if (values.$shared) {
	            values.$shared = sharing;
	            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
	        }
	        return values;
	    }
	 _resolveAnimations(index, transition, active) {
	        const chart = this.chart;
	        const cache = this._cachedDataOpts;
	        const cacheKey = `animation-${transition}`;
	        const cached = cache[cacheKey];
	        if (cached) {
	            return cached;
	        }
	        let options;
	        if (chart.options.animation !== false) {
	            const config = this.chart.config;
	            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);
	            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
	            options = config.createResolver(scopes, this.getContext(index, active, transition));
	        }
	        const animations = new Animations(chart, options && options.animations);
	        if (options && options._cacheable) {
	            cache[cacheKey] = Object.freeze(animations);
	        }
	        return animations;
	    }
	 getSharedOptions(options) {
	        if (!options.$shared) {
	            return;
	        }
	        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
	    }
	 includeOptions(mode, sharedOptions) {
	        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
	    }
	 _getSharedOptions(start, mode) {
	        const firstOpts = this.resolveDataElementOptions(start, mode);
	        const previouslySharedOptions = this._sharedOptions;
	        const sharedOptions = this.getSharedOptions(firstOpts);
	        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;
	        this.updateSharedOptions(sharedOptions, mode, firstOpts);
	        return {
	            sharedOptions,
	            includeOptions
	        };
	    }
	 updateElement(element, index, properties, mode) {
	        if (isDirectUpdateMode(mode)) {
	            Object.assign(element, properties);
	        } else {
	            this._resolveAnimations(index, mode).update(element, properties);
	        }
	    }
	 updateSharedOptions(sharedOptions, mode, newOptions) {
	        if (sharedOptions && !isDirectUpdateMode(mode)) {
	            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);
	        }
	    }
	 _setStyle(element, index, mode, active) {
	        element.active = active;
	        const options = this.getStyle(index, active);
	        this._resolveAnimations(index, mode, active).update(element, {
	            options: !active && this.getSharedOptions(options) || options
	        });
	    }
	    removeHoverStyle(element, datasetIndex, index) {
	        this._setStyle(element, index, 'active', false);
	    }
	    setHoverStyle(element, datasetIndex, index) {
	        this._setStyle(element, index, 'active', true);
	    }
	 _removeDatasetHoverStyle() {
	        const element = this._cachedMeta.dataset;
	        if (element) {
	            this._setStyle(element, undefined, 'active', false);
	        }
	    }
	 _setDatasetHoverStyle() {
	        const element = this._cachedMeta.dataset;
	        if (element) {
	            this._setStyle(element, undefined, 'active', true);
	        }
	    }
	 _resyncElements(resetNewElements) {
	        const data = this._data;
	        const elements = this._cachedMeta.data;
	        for (const [method, arg1, arg2] of this._syncList){
	            this[method](arg1, arg2);
	        }
	        this._syncList = [];
	        const numMeta = elements.length;
	        const numData = data.length;
	        const count = Math.min(numData, numMeta);
	        if (count) {
	            this.parse(0, count);
	        }
	        if (numData > numMeta) {
	            this._insertElements(numMeta, numData - numMeta, resetNewElements);
	        } else if (numData < numMeta) {
	            this._removeElements(numData, numMeta - numData);
	        }
	    }
	 _insertElements(start, count, resetNewElements = true) {
	        const meta = this._cachedMeta;
	        const data = meta.data;
	        const end = start + count;
	        let i;
	        const move = (arr)=>{
	            arr.length += count;
	            for(i = arr.length - 1; i >= end; i--){
	                arr[i] = arr[i - count];
	            }
	        };
	        move(data);
	        for(i = start; i < end; ++i){
	            data[i] = new this.dataElementType();
	        }
	        if (this._parsing) {
	            move(meta._parsed);
	        }
	        this.parse(start, count);
	        if (resetNewElements) {
	            this.updateElements(data, start, count, 'reset');
	        }
	    }
	    updateElements(element, start, count, mode) {}
	 _removeElements(start, count) {
	        const meta = this._cachedMeta;
	        if (this._parsing) {
	            const removed = meta._parsed.splice(start, count);
	            if (meta._stacked) {
	                clearStacks(meta, removed);
	            }
	        }
	        meta.data.splice(start, count);
	    }
	 _sync(args) {
	        if (this._parsing) {
	            this._syncList.push(args);
	        } else {
	            const [method, arg1, arg2] = args;
	            this[method](arg1, arg2);
	        }
	        this.chart._dataChanges.push([
	            this.index,
	            ...args
	        ]);
	    }
	    _onDataPush() {
	        const count = arguments.length;
	        this._sync([
	            '_insertElements',
	            this.getDataset().data.length - count,
	            count
	        ]);
	    }
	    _onDataPop() {
	        this._sync([
	            '_removeElements',
	            this._cachedMeta.data.length - 1,
	            1
	        ]);
	    }
	    _onDataShift() {
	        this._sync([
	            '_removeElements',
	            0,
	            1
	        ]);
	    }
	    _onDataSplice(start, count) {
	        if (count) {
	            this._sync([
	                '_removeElements',
	                start,
	                count
	            ]);
	        }
	        const newCount = arguments.length - 2;
	        if (newCount) {
	            this._sync([
	                '_insertElements',
	                start,
	                newCount
	            ]);
	        }
	    }
	    _onDataUnshift() {
	        this._sync([
	            '_insertElements',
	            0,
	            arguments.length
	        ]);
	    }
	}

	class LineController extends DatasetController {
	    static id = 'line';
	 static defaults = {
	        datasetElementType: 'line',
	        dataElementType: 'point',
	        showLine: true,
	        spanGaps: false
	    };
	 static overrides = {
	        scales: {
	            _index_: {
	                type: 'category'
	            },
	            _value_: {
	                type: 'linear'
	            }
	        }
	    };
	    initialize() {
	        this.enableOptionSharing = true;
	        this.supportsDecimation = true;
	        super.initialize();
	    }
	    update(mode) {
	        const meta = this._cachedMeta;
	        const { dataset: line , data: points = [] , _dataset  } = meta;
	        const animationsDisabled = this.chart._animationsDisabled;
	        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
	        this._drawStart = start;
	        this._drawCount = count;
	        if (_scaleRangesChanged(meta)) {
	            start = 0;
	            count = points.length;
	        }
	        line._chart = this.chart;
	        line._datasetIndex = this.index;
	        line._decimated = !!_dataset._decimated;
	        line.points = points;
	        const options = this.resolveDatasetElementOptions(mode);
	        if (!this.options.showLine) {
	            options.borderWidth = 0;
	        }
	        options.segment = this.options.segment;
	        this.updateElement(line, undefined, {
	            animated: !animationsDisabled,
	            options
	        }, mode);
	        this.updateElements(points, start, count, mode);
	    }
	    updateElements(points, start, count, mode) {
	        const reset = mode === 'reset';
	        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;
	        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);
	        const iAxis = iScale.axis;
	        const vAxis = vScale.axis;
	        const { spanGaps , segment  } = this.options;
	        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
	        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';
	        const end = start + count;
	        const pointsCount = points.length;
	        let prevParsed = start > 0 && this.getParsed(start - 1);
	        for(let i = 0; i < pointsCount; ++i){
	            const point = points[i];
	            const properties = directUpdate ? point : {};
	            if (i < start || i >= end) {
	                properties.skip = true;
	                continue;
	            }
	            const parsed = this.getParsed(i);
	            const nullData = isNullOrUndef(parsed[vAxis]);
	            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
	            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
	            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
	            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
	            if (segment) {
	                properties.parsed = parsed;
	                properties.raw = _dataset.data[i];
	            }
	            if (includeOptions) {
	                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);
	            }
	            if (!directUpdate) {
	                this.updateElement(point, i, properties, mode);
	            }
	            prevParsed = parsed;
	        }
	    }
	 getMaxOverflow() {
	        const meta = this._cachedMeta;
	        const dataset = meta.dataset;
	        const border = dataset.options && dataset.options.borderWidth || 0;
	        const data = meta.data || [];
	        if (!data.length) {
	            return border;
	        }
	        const firstPoint = data[0].size(this.resolveDataElementOptions(0));
	        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
	        return Math.max(border, firstPoint, lastPoint) / 2;
	    }
	    draw() {
	        const meta = this._cachedMeta;
	        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
	        super.draw();
	    }
	}

	/**
	 * @namespace Chart._adapters
	 * @since 2.8.0
	 * @private
	 */ function abstract() {
	    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');
	}
	/**
	 * Date adapter (current used by the time scale)
	 * @namespace Chart._adapters._date
	 * @memberof Chart._adapters
	 * @private
	 */ class DateAdapterBase {
	    /**
	   * Override default date adapter methods.
	   * Accepts type parameter to define options type.
	   * @example
	   * Chart._adapters._date.override<{myAdapterOption: string}>({
	   *   init() {
	   *     console.log(this.options.myAdapterOption);
	   *   }
	   * })
	   */ static override(members) {
	        Object.assign(DateAdapterBase.prototype, members);
	    }
	    options;
	    constructor(options){
	        this.options = options || {};
	    }
	    // eslint-disable-next-line @typescript-eslint/no-empty-function
	    init() {}
	    formats() {
	        return abstract();
	    }
	    parse() {
	        return abstract();
	    }
	    format() {
	        return abstract();
	    }
	    add() {
	        return abstract();
	    }
	    diff() {
	        return abstract();
	    }
	    startOf() {
	        return abstract();
	    }
	    endOf() {
	        return abstract();
	    }
	}
	var adapters = {
	    _date: DateAdapterBase
	};

	function binarySearch(metaset, axis, value, intersect) {
	    const { controller , data , _sorted  } = metaset;
	    const iScale = controller._cachedMeta.iScale;
	    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {
	        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;
	        if (!intersect) {
	            return lookupMethod(data, axis, value);
	        } else if (controller._sharedOptions) {
	            const el = data[0];
	            const range = typeof el.getRange === 'function' && el.getRange(axis);
	            if (range) {
	                const start = lookupMethod(data, axis, value - range);
	                const end = lookupMethod(data, axis, value + range);
	                return {
	                    lo: start.lo,
	                    hi: end.hi
	                };
	            }
	        }
	    }
	    return {
	        lo: 0,
	        hi: data.length - 1
	    };
	}
	 function evaluateInteractionItems(chart, axis, position, handler, intersect) {
	    const metasets = chart.getSortedVisibleDatasetMetas();
	    const value = position[axis];
	    for(let i = 0, ilen = metasets.length; i < ilen; ++i){
	        const { index , data  } = metasets[i];
	        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);
	        for(let j = lo; j <= hi; ++j){
	            const element = data[j];
	            if (!element.skip) {
	                handler(element, index, j);
	            }
	        }
	    }
	}
	 function getDistanceMetricForAxis(axis) {
	    const useX = axis.indexOf('x') !== -1;
	    const useY = axis.indexOf('y') !== -1;
	    return function(pt1, pt2) {
	        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
	        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
	        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
	    };
	}
	 function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {
	    const items = [];
	    if (!includeInvisible && !chart.isPointInArea(position)) {
	        return items;
	    }
	    const evaluationFunc = function(element, datasetIndex, index) {
	        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {
	            return;
	        }
	        if (element.inRange(position.x, position.y, useFinalPosition)) {
	            items.push({
	                element,
	                datasetIndex,
	                index
	            });
	        }
	    };
	    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);
	    return items;
	}
	 function getNearestRadialItems(chart, position, axis, useFinalPosition) {
	    let items = [];
	    function evaluationFunc(element, datasetIndex, index) {
	        const { startAngle , endAngle  } = element.getProps([
	            'startAngle',
	            'endAngle'
	        ], useFinalPosition);
	        const { angle  } = getAngleFromPoint(element, {
	            x: position.x,
	            y: position.y
	        });
	        if (_angleBetween(angle, startAngle, endAngle)) {
	            items.push({
	                element,
	                datasetIndex,
	                index
	            });
	        }
	    }
	    evaluateInteractionItems(chart, axis, position, evaluationFunc);
	    return items;
	}
	 function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
	    let items = [];
	    const distanceMetric = getDistanceMetricForAxis(axis);
	    let minDistance = Number.POSITIVE_INFINITY;
	    function evaluationFunc(element, datasetIndex, index) {
	        const inRange = element.inRange(position.x, position.y, useFinalPosition);
	        if (intersect && !inRange) {
	            return;
	        }
	        const center = element.getCenterPoint(useFinalPosition);
	        const pointInArea = !!includeInvisible || chart.isPointInArea(center);
	        if (!pointInArea && !inRange) {
	            return;
	        }
	        const distance = distanceMetric(position, center);
	        if (distance < minDistance) {
	            items = [
	                {
	                    element,
	                    datasetIndex,
	                    index
	                }
	            ];
	            minDistance = distance;
	        } else if (distance === minDistance) {
	            items.push({
	                element,
	                datasetIndex,
	                index
	            });
	        }
	    }
	    evaluateInteractionItems(chart, axis, position, evaluationFunc);
	    return items;
	}
	 function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
	    if (!includeInvisible && !chart.isPointInArea(position)) {
	        return [];
	    }
	    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);
	}
	 function getAxisItems(chart, position, axis, intersect, useFinalPosition) {
	    const items = [];
	    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';
	    let intersectsItem = false;
	    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{
	        if (element[rangeMethod](position[axis], useFinalPosition)) {
	            items.push({
	                element,
	                datasetIndex,
	                index
	            });
	            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);
	        }
	    });
	    if (intersect && !intersectsItem) {
	        return [];
	    }
	    return items;
	}
	 var Interaction = {
	    evaluateInteractionItems,
	    modes: {
	 index (chart, e, options, useFinalPosition) {
	            const position = getRelativePosition(e, chart);
	            const axis = options.axis || 'x';
	            const includeInvisible = options.includeInvisible || false;
	            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
	            const elements = [];
	            if (!items.length) {
	                return [];
	            }
	            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{
	                const index = items[0].index;
	                const element = meta.data[index];
	                if (element && !element.skip) {
	                    elements.push({
	                        element,
	                        datasetIndex: meta.index,
	                        index
	                    });
	                }
	            });
	            return elements;
	        },
	 dataset (chart, e, options, useFinalPosition) {
	            const position = getRelativePosition(e, chart);
	            const axis = options.axis || 'xy';
	            const includeInvisible = options.includeInvisible || false;
	            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
	            if (items.length > 0) {
	                const datasetIndex = items[0].datasetIndex;
	                const data = chart.getDatasetMeta(datasetIndex).data;
	                items = [];
	                for(let i = 0; i < data.length; ++i){
	                    items.push({
	                        element: data[i],
	                        datasetIndex,
	                        index: i
	                    });
	                }
	            }
	            return items;
	        },
	 point (chart, e, options, useFinalPosition) {
	            const position = getRelativePosition(e, chart);
	            const axis = options.axis || 'xy';
	            const includeInvisible = options.includeInvisible || false;
	            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);
	        },
	 nearest (chart, e, options, useFinalPosition) {
	            const position = getRelativePosition(e, chart);
	            const axis = options.axis || 'xy';
	            const includeInvisible = options.includeInvisible || false;
	            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);
	        },
	 x (chart, e, options, useFinalPosition) {
	            const position = getRelativePosition(e, chart);
	            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);
	        },
	 y (chart, e, options, useFinalPosition) {
	            const position = getRelativePosition(e, chart);
	            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);
	        }
	    }
	};

	const STATIC_POSITIONS = [
	    'left',
	    'top',
	    'right',
	    'bottom'
	];
	function filterByPosition(array, position) {
	    return array.filter((v)=>v.pos === position);
	}
	function filterDynamicPositionByAxis(array, axis) {
	    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);
	}
	function sortByWeight(array, reverse) {
	    return array.sort((a, b)=>{
	        const v0 = reverse ? b : a;
	        const v1 = reverse ? a : b;
	        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
	    });
	}
	function wrapBoxes(boxes) {
	    const layoutBoxes = [];
	    let i, ilen, box, pos, stack, stackWeight;
	    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){
	        box = boxes[i];
	        ({ position: pos , options: { stack , stackWeight =1  }  } = box);
	        layoutBoxes.push({
	            index: i,
	            box,
	            pos,
	            horizontal: box.isHorizontal(),
	            weight: box.weight,
	            stack: stack && pos + stack,
	            stackWeight
	        });
	    }
	    return layoutBoxes;
	}
	function buildStacks(layouts) {
	    const stacks = {};
	    for (const wrap of layouts){
	        const { stack , pos , stackWeight  } = wrap;
	        if (!stack || !STATIC_POSITIONS.includes(pos)) {
	            continue;
	        }
	        const _stack = stacks[stack] || (stacks[stack] = {
	            count: 0,
	            placed: 0,
	            weight: 0,
	            size: 0
	        });
	        _stack.count++;
	        _stack.weight += stackWeight;
	    }
	    return stacks;
	}
	 function setLayoutDims(layouts, params) {
	    const stacks = buildStacks(layouts);
	    const { vBoxMaxWidth , hBoxMaxHeight  } = params;
	    let i, ilen, layout;
	    for(i = 0, ilen = layouts.length; i < ilen; ++i){
	        layout = layouts[i];
	        const { fullSize  } = layout.box;
	        const stack = stacks[layout.stack];
	        const factor = stack && layout.stackWeight / stack.weight;
	        if (layout.horizontal) {
	            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
	            layout.height = hBoxMaxHeight;
	        } else {
	            layout.width = vBoxMaxWidth;
	            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
	        }
	    }
	    return stacks;
	}
	function buildLayoutBoxes(boxes) {
	    const layoutBoxes = wrapBoxes(boxes);
	    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);
	    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
	    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
	    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
	    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));
	    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');
	    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');
	    return {
	        fullSize,
	        leftAndTop: left.concat(top),
	        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
	        chartArea: filterByPosition(layoutBoxes, 'chartArea'),
	        vertical: left.concat(right).concat(centerVertical),
	        horizontal: top.concat(bottom).concat(centerHorizontal)
	    };
	}
	function getCombinedMax(maxPadding, chartArea, a, b) {
	    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
	}
	function updateMaxPadding(maxPadding, boxPadding) {
	    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
	    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
	    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
	    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
	}
	function updateDims(chartArea, params, layout, stacks) {
	    const { pos , box  } = layout;
	    const maxPadding = chartArea.maxPadding;
	    if (!isObject(pos)) {
	        if (layout.size) {
	            chartArea[pos] -= layout.size;
	        }
	        const stack = stacks[layout.stack] || {
	            size: 0,
	            count: 1
	        };
	        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
	        layout.size = stack.size / stack.count;
	        chartArea[pos] += layout.size;
	    }
	    if (box.getPadding) {
	        updateMaxPadding(maxPadding, box.getPadding());
	    }
	    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));
	    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));
	    const widthChanged = newWidth !== chartArea.w;
	    const heightChanged = newHeight !== chartArea.h;
	    chartArea.w = newWidth;
	    chartArea.h = newHeight;
	    return layout.horizontal ? {
	        same: widthChanged,
	        other: heightChanged
	    } : {
	        same: heightChanged,
	        other: widthChanged
	    };
	}
	function handleMaxPadding(chartArea) {
	    const maxPadding = chartArea.maxPadding;
	    function updatePos(pos) {
	        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
	        chartArea[pos] += change;
	        return change;
	    }
	    chartArea.y += updatePos('top');
	    chartArea.x += updatePos('left');
	    updatePos('right');
	    updatePos('bottom');
	}
	function getMargins(horizontal, chartArea) {
	    const maxPadding = chartArea.maxPadding;
	    function marginForPositions(positions) {
	        const margin = {
	            left: 0,
	            top: 0,
	            right: 0,
	            bottom: 0
	        };
	        positions.forEach((pos)=>{
	            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
	        });
	        return margin;
	    }
	    return horizontal ? marginForPositions([
	        'left',
	        'right'
	    ]) : marginForPositions([
	        'top',
	        'bottom'
	    ]);
	}
	function fitBoxes(boxes, chartArea, params, stacks) {
	    const refitBoxes = [];
	    let i, ilen, layout, box, refit, changed;
	    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){
	        layout = boxes[i];
	        box = layout.box;
	        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));
	        const { same , other  } = updateDims(chartArea, params, layout, stacks);
	        refit |= same && refitBoxes.length;
	        changed = changed || other;
	        if (!box.fullSize) {
	            refitBoxes.push(layout);
	        }
	    }
	    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
	}
	function setBoxDims(box, left, top, width, height) {
	    box.top = top;
	    box.left = left;
	    box.right = left + width;
	    box.bottom = top + height;
	    box.width = width;
	    box.height = height;
	}
	function placeBoxes(boxes, chartArea, params, stacks) {
	    const userPadding = params.padding;
	    let { x , y  } = chartArea;
	    for (const layout of boxes){
	        const box = layout.box;
	        const stack = stacks[layout.stack] || {
	            count: 1,
	            placed: 0,
	            weight: 1
	        };
	        const weight = layout.stackWeight / stack.weight || 1;
	        if (layout.horizontal) {
	            const width = chartArea.w * weight;
	            const height = stack.size || box.height;
	            if (defined(stack.start)) {
	                y = stack.start;
	            }
	            if (box.fullSize) {
	                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);
	            } else {
	                setBoxDims(box, chartArea.left + stack.placed, y, width, height);
	            }
	            stack.start = y;
	            stack.placed += width;
	            y = box.bottom;
	        } else {
	            const height = chartArea.h * weight;
	            const width = stack.size || box.width;
	            if (defined(stack.start)) {
	                x = stack.start;
	            }
	            if (box.fullSize) {
	                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
	            } else {
	                setBoxDims(box, x, chartArea.top + stack.placed, width, height);
	            }
	            stack.start = x;
	            stack.placed += height;
	            x = box.right;
	        }
	    }
	    chartArea.x = x;
	    chartArea.y = y;
	}
	var layouts = {
	 addBox (chart, item) {
	        if (!chart.boxes) {
	            chart.boxes = [];
	        }
	        item.fullSize = item.fullSize || false;
	        item.position = item.position || 'top';
	        item.weight = item.weight || 0;
	        item._layers = item._layers || function() {
	            return [
	                {
	                    z: 0,
	                    draw (chartArea) {
	                        item.draw(chartArea);
	                    }
	                }
	            ];
	        };
	        chart.boxes.push(item);
	    },
	 removeBox (chart, layoutItem) {
	        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
	        if (index !== -1) {
	            chart.boxes.splice(index, 1);
	        }
	    },
	 configure (chart, item, options) {
	        item.fullSize = options.fullSize;
	        item.position = options.position;
	        item.weight = options.weight;
	    },
	 update (chart, width, height, minPadding) {
	        if (!chart) {
	            return;
	        }
	        const padding = toPadding(chart.options.layout.padding);
	        const availableWidth = Math.max(width - padding.width, 0);
	        const availableHeight = Math.max(height - padding.height, 0);
	        const boxes = buildLayoutBoxes(chart.boxes);
	        const verticalBoxes = boxes.vertical;
	        const horizontalBoxes = boxes.horizontal;
	        each(chart.boxes, (box)=>{
	            if (typeof box.beforeLayout === 'function') {
	                box.beforeLayout();
	            }
	        });
	        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;
	        const params = Object.freeze({
	            outerWidth: width,
	            outerHeight: height,
	            padding,
	            availableWidth,
	            availableHeight,
	            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
	            hBoxMaxHeight: availableHeight / 2
	        });
	        const maxPadding = Object.assign({}, padding);
	        updateMaxPadding(maxPadding, toPadding(minPadding));
	        const chartArea = Object.assign({
	            maxPadding,
	            w: availableWidth,
	            h: availableHeight,
	            x: padding.left,
	            y: padding.top
	        }, padding);
	        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
	        fitBoxes(boxes.fullSize, chartArea, params, stacks);
	        fitBoxes(verticalBoxes, chartArea, params, stacks);
	        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {
	            fitBoxes(verticalBoxes, chartArea, params, stacks);
	        }
	        handleMaxPadding(chartArea);
	        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
	        chartArea.x += chartArea.w;
	        chartArea.y += chartArea.h;
	        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
	        chart.chartArea = {
	            left: chartArea.left,
	            top: chartArea.top,
	            right: chartArea.left + chartArea.w,
	            bottom: chartArea.top + chartArea.h,
	            height: chartArea.h,
	            width: chartArea.w
	        };
	        each(boxes.chartArea, (layout)=>{
	            const box = layout.box;
	            Object.assign(box, chart.chartArea);
	            box.update(chartArea.w, chartArea.h, {
	                left: 0,
	                top: 0,
	                right: 0,
	                bottom: 0
	            });
	        });
	    }
	};

	class BasePlatform {
	 acquireContext(canvas, aspectRatio) {}
	 releaseContext(context) {
	        return false;
	    }
	 addEventListener(chart, type, listener) {}
	 removeEventListener(chart, type, listener) {}
	 getDevicePixelRatio() {
	        return 1;
	    }
	 getMaximumSize(element, width, height, aspectRatio) {
	        width = Math.max(0, width || element.width);
	        height = height || element.height;
	        return {
	            width,
	            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
	        };
	    }
	 isAttached(canvas) {
	        return true;
	    }
	 updateConfig(config) {
	    }
	}

	class BasicPlatform extends BasePlatform {
	    acquireContext(item) {
	        return item && item.getContext && item.getContext('2d') || null;
	    }
	    updateConfig(config) {
	        config.options.animation = false;
	    }
	}

	const EXPANDO_KEY = '$chartjs';
	 const EVENT_TYPES = {
	    touchstart: 'mousedown',
	    touchmove: 'mousemove',
	    touchend: 'mouseup',
	    pointerenter: 'mouseenter',
	    pointerdown: 'mousedown',
	    pointermove: 'mousemove',
	    pointerup: 'mouseup',
	    pointerleave: 'mouseout',
	    pointerout: 'mouseout'
	};
	const isNullOrEmpty = (value)=>value === null || value === '';
	 function initCanvas(canvas, aspectRatio) {
	    const style = canvas.style;
	    const renderHeight = canvas.getAttribute('height');
	    const renderWidth = canvas.getAttribute('width');
	    canvas[EXPANDO_KEY] = {
	        initial: {
	            height: renderHeight,
	            width: renderWidth,
	            style: {
	                display: style.display,
	                height: style.height,
	                width: style.width
	            }
	        }
	    };
	    style.display = style.display || 'block';
	    style.boxSizing = style.boxSizing || 'border-box';
	    if (isNullOrEmpty(renderWidth)) {
	        const displayWidth = readUsedSize(canvas, 'width');
	        if (displayWidth !== undefined) {
	            canvas.width = displayWidth;
	        }
	    }
	    if (isNullOrEmpty(renderHeight)) {
	        if (canvas.style.height === '') {
	            canvas.height = canvas.width / (aspectRatio || 2);
	        } else {
	            const displayHeight = readUsedSize(canvas, 'height');
	            if (displayHeight !== undefined) {
	                canvas.height = displayHeight;
	            }
	        }
	    }
	    return canvas;
	}
	const eventListenerOptions = supportsEventListenerOptions ? {
	    passive: true
	} : false;
	function addListener(node, type, listener) {
	    node.addEventListener(type, listener, eventListenerOptions);
	}
	function removeListener(chart, type, listener) {
	    chart.canvas.removeEventListener(type, listener, eventListenerOptions);
	}
	function fromNativeEvent(event, chart) {
	    const type = EVENT_TYPES[event.type] || event.type;
	    const { x , y  } = getRelativePosition(event, chart);
	    return {
	        type,
	        chart,
	        native: event,
	        x: x !== undefined ? x : null,
	        y: y !== undefined ? y : null
	    };
	}
	function nodeListContains(nodeList, canvas) {
	    for (const node of nodeList){
	        if (node === canvas || node.contains(canvas)) {
	            return true;
	        }
	    }
	}
	function createAttachObserver(chart, type, listener) {
	    const canvas = chart.canvas;
	    const observer = new MutationObserver((entries)=>{
	        let trigger = false;
	        for (const entry of entries){
	            trigger = trigger || nodeListContains(entry.addedNodes, canvas);
	            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);
	        }
	        if (trigger) {
	            listener();
	        }
	    });
	    observer.observe(document, {
	        childList: true,
	        subtree: true
	    });
	    return observer;
	}
	function createDetachObserver(chart, type, listener) {
	    const canvas = chart.canvas;
	    const observer = new MutationObserver((entries)=>{
	        let trigger = false;
	        for (const entry of entries){
	            trigger = trigger || nodeListContains(entry.removedNodes, canvas);
	            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);
	        }
	        if (trigger) {
	            listener();
	        }
	    });
	    observer.observe(document, {
	        childList: true,
	        subtree: true
	    });
	    return observer;
	}
	const drpListeningCharts = new Map();
	let oldDevicePixelRatio = 0;
	function onWindowResize() {
	    const dpr = window.devicePixelRatio;
	    if (dpr === oldDevicePixelRatio) {
	        return;
	    }
	    oldDevicePixelRatio = dpr;
	    drpListeningCharts.forEach((resize, chart)=>{
	        if (chart.currentDevicePixelRatio !== dpr) {
	            resize();
	        }
	    });
	}
	function listenDevicePixelRatioChanges(chart, resize) {
	    if (!drpListeningCharts.size) {
	        window.addEventListener('resize', onWindowResize);
	    }
	    drpListeningCharts.set(chart, resize);
	}
	function unlistenDevicePixelRatioChanges(chart) {
	    drpListeningCharts.delete(chart);
	    if (!drpListeningCharts.size) {
	        window.removeEventListener('resize', onWindowResize);
	    }
	}
	function createResizeObserver(chart, type, listener) {
	    const canvas = chart.canvas;
	    const container = canvas && _getParentNode(canvas);
	    if (!container) {
	        return;
	    }
	    const resize = throttled((width, height)=>{
	        const w = container.clientWidth;
	        listener(width, height);
	        if (w < container.clientWidth) {
	            listener();
	        }
	    }, window);
	    const observer = new ResizeObserver((entries)=>{
	        const entry = entries[0];
	        const width = entry.contentRect.width;
	        const height = entry.contentRect.height;
	        if (width === 0 && height === 0) {
	            return;
	        }
	        resize(width, height);
	    });
	    observer.observe(container);
	    listenDevicePixelRatioChanges(chart, resize);
	    return observer;
	}
	function releaseObserver(chart, type, observer) {
	    if (observer) {
	        observer.disconnect();
	    }
	    if (type === 'resize') {
	        unlistenDevicePixelRatioChanges(chart);
	    }
	}
	function createProxyAndListen(chart, type, listener) {
	    const canvas = chart.canvas;
	    const proxy = throttled((event)=>{
	        if (chart.ctx !== null) {
	            listener(fromNativeEvent(event, chart));
	        }
	    }, chart);
	    addListener(canvas, type, proxy);
	    return proxy;
	}
	 class DomPlatform extends BasePlatform {
	 acquireContext(canvas, aspectRatio) {
	        const context = canvas && canvas.getContext && canvas.getContext('2d');
	        if (context && context.canvas === canvas) {
	            initCanvas(canvas, aspectRatio);
	            return context;
	        }
	        return null;
	    }
	 releaseContext(context) {
	        const canvas = context.canvas;
	        if (!canvas[EXPANDO_KEY]) {
	            return false;
	        }
	        const initial = canvas[EXPANDO_KEY].initial;
	        [
	            'height',
	            'width'
	        ].forEach((prop)=>{
	            const value = initial[prop];
	            if (isNullOrUndef(value)) {
	                canvas.removeAttribute(prop);
	            } else {
	                canvas.setAttribute(prop, value);
	            }
	        });
	        const style = initial.style || {};
	        Object.keys(style).forEach((key)=>{
	            canvas.style[key] = style[key];
	        });
	        canvas.width = canvas.width;
	        delete canvas[EXPANDO_KEY];
	        return true;
	    }
	 addEventListener(chart, type, listener) {
	        this.removeEventListener(chart, type);
	        const proxies = chart.$proxies || (chart.$proxies = {});
	        const handlers = {
	            attach: createAttachObserver,
	            detach: createDetachObserver,
	            resize: createResizeObserver
	        };
	        const handler = handlers[type] || createProxyAndListen;
	        proxies[type] = handler(chart, type, listener);
	    }
	 removeEventListener(chart, type) {
	        const proxies = chart.$proxies || (chart.$proxies = {});
	        const proxy = proxies[type];
	        if (!proxy) {
	            return;
	        }
	        const handlers = {
	            attach: releaseObserver,
	            detach: releaseObserver,
	            resize: releaseObserver
	        };
	        const handler = handlers[type] || removeListener;
	        handler(chart, type, proxy);
	        proxies[type] = undefined;
	    }
	    getDevicePixelRatio() {
	        return window.devicePixelRatio;
	    }
	 getMaximumSize(canvas, width, height, aspectRatio) {
	        return getMaximumSize(canvas, width, height, aspectRatio);
	    }
	 isAttached(canvas) {
	        const container = _getParentNode(canvas);
	        return !!(container && container.isConnected);
	    }
	}

	function _detectPlatform(canvas) {
	    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {
	        return BasicPlatform;
	    }
	    return DomPlatform;
	}

	let Element$1 = class Element {
	    static defaults = {};
	    static defaultRoutes = undefined;
	    x;
	    y;
	    active = false;
	    options;
	    $animations;
	    tooltipPosition(useFinalPosition) {
	        const { x , y  } = this.getProps([
	            'x',
	            'y'
	        ], useFinalPosition);
	        return {
	            x,
	            y
	        };
	    }
	    hasValue() {
	        return isNumber(this.x) && isNumber(this.y);
	    }
	    getProps(props, final) {
	        const anims = this.$animations;
	        if (!final || !anims) {
	            // let's not create an object, if not needed
	            return this;
	        }
	        const ret = {};
	        props.forEach((prop)=>{
	            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
	        });
	        return ret;
	    }
	};

	function autoSkip(scale, ticks) {
	    const tickOpts = scale.options.ticks;
	    const determinedMaxTicks = determineMaxTicks(scale);
	    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);
	    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
	    const numMajorIndices = majorIndices.length;
	    const first = majorIndices[0];
	    const last = majorIndices[numMajorIndices - 1];
	    const newTicks = [];
	    if (numMajorIndices > ticksLimit) {
	        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
	        return newTicks;
	    }
	    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);
	    if (numMajorIndices > 0) {
	        let i, ilen;
	        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
	        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
	        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){
	            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);
	        }
	        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
	        return newTicks;
	    }
	    skip(ticks, newTicks, spacing);
	    return newTicks;
	}
	function determineMaxTicks(scale) {
	    const offset = scale.options.offset;
	    const tickLength = scale._tickSize();
	    const maxScale = scale._length / tickLength + (offset ? 0 : 1);
	    const maxChart = scale._maxLength / tickLength;
	    return Math.floor(Math.min(maxScale, maxChart));
	}
	 function calculateSpacing(majorIndices, ticks, ticksLimit) {
	    const evenMajorSpacing = getEvenSpacing(majorIndices);
	    const spacing = ticks.length / ticksLimit;
	    if (!evenMajorSpacing) {
	        return Math.max(spacing, 1);
	    }
	    const factors = _factorize(evenMajorSpacing);
	    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){
	        const factor = factors[i];
	        if (factor > spacing) {
	            return factor;
	        }
	    }
	    return Math.max(spacing, 1);
	}
	 function getMajorIndices(ticks) {
	    const result = [];
	    let i, ilen;
	    for(i = 0, ilen = ticks.length; i < ilen; i++){
	        if (ticks[i].major) {
	            result.push(i);
	        }
	    }
	    return result;
	}
	 function skipMajors(ticks, newTicks, majorIndices, spacing) {
	    let count = 0;
	    let next = majorIndices[0];
	    let i;
	    spacing = Math.ceil(spacing);
	    for(i = 0; i < ticks.length; i++){
	        if (i === next) {
	            newTicks.push(ticks[i]);
	            count++;
	            next = majorIndices[count * spacing];
	        }
	    }
	}
	 function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
	    const start = valueOrDefault(majorStart, 0);
	    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);
	    let count = 0;
	    let length, i, next;
	    spacing = Math.ceil(spacing);
	    if (majorEnd) {
	        length = majorEnd - majorStart;
	        spacing = length / Math.floor(length / spacing);
	    }
	    next = start;
	    while(next < 0){
	        count++;
	        next = Math.round(start + count * spacing);
	    }
	    for(i = Math.max(start, 0); i < end; i++){
	        if (i === next) {
	            newTicks.push(ticks[i]);
	            count++;
	            next = Math.round(start + count * spacing);
	        }
	    }
	}
	 function getEvenSpacing(arr) {
	    const len = arr.length;
	    let i, diff;
	    if (len < 2) {
	        return false;
	    }
	    for(diff = arr[0], i = 1; i < len; ++i){
	        if (arr[i] - arr[i - 1] !== diff) {
	            return false;
	        }
	    }
	    return diff;
	}

	const reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;
	const offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;
	const getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);
	 function sample(arr, numItems) {
	    const result = [];
	    const increment = arr.length / numItems;
	    const len = arr.length;
	    let i = 0;
	    for(; i < len; i += increment){
	        result.push(arr[Math.floor(i)]);
	    }
	    return result;
	}
	 function getPixelForGridLine(scale, index, offsetGridLines) {
	    const length = scale.ticks.length;
	    const validIndex = Math.min(index, length - 1);
	    const start = scale._startPixel;
	    const end = scale._endPixel;
	    const epsilon = 1e-6;
	    let lineValue = scale.getPixelForTick(validIndex);
	    let offset;
	    if (offsetGridLines) {
	        if (length === 1) {
	            offset = Math.max(lineValue - start, end - lineValue);
	        } else if (index === 0) {
	            offset = (scale.getPixelForTick(1) - lineValue) / 2;
	        } else {
	            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
	        }
	        lineValue += validIndex < index ? offset : -offset;
	        if (lineValue < start - epsilon || lineValue > end + epsilon) {
	            return;
	        }
	    }
	    return lineValue;
	}
	 function garbageCollect(caches, length) {
	    each(caches, (cache)=>{
	        const gc = cache.gc;
	        const gcLen = gc.length / 2;
	        let i;
	        if (gcLen > length) {
	            for(i = 0; i < gcLen; ++i){
	                delete cache.data[gc[i]];
	            }
	            gc.splice(0, gcLen);
	        }
	    });
	}
	 function getTickMarkLength(options) {
	    return options.drawTicks ? options.tickLength : 0;
	}
	 function getTitleHeight(options, fallback) {
	    if (!options.display) {
	        return 0;
	    }
	    const font = toFont(options.font, fallback);
	    const padding = toPadding(options.padding);
	    const lines = isArray(options.text) ? options.text.length : 1;
	    return lines * font.lineHeight + padding.height;
	}
	function createScaleContext(parent, scale) {
	    return createContext(parent, {
	        scale,
	        type: 'scale'
	    });
	}
	function createTickContext(parent, index, tick) {
	    return createContext(parent, {
	        tick,
	        index,
	        type: 'tick'
	    });
	}
	function titleAlign(align, position, reverse) {
	     let ret = _toLeftRightCenter(align);
	    if (reverse && position !== 'right' || !reverse && position === 'right') {
	        ret = reverseAlign(ret);
	    }
	    return ret;
	}
	function titleArgs(scale, offset, position, align) {
	    const { top , left , bottom , right , chart  } = scale;
	    const { chartArea , scales  } = chart;
	    let rotation = 0;
	    let maxWidth, titleX, titleY;
	    const height = bottom - top;
	    const width = right - left;
	    if (scale.isHorizontal()) {
	        titleX = _alignStartEnd(align, left, right);
	        if (isObject(position)) {
	            const positionAxisID = Object.keys(position)[0];
	            const value = position[positionAxisID];
	            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;
	        } else if (position === 'center') {
	            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
	        } else {
	            titleY = offsetFromEdge(scale, position, offset);
	        }
	        maxWidth = right - left;
	    } else {
	        if (isObject(position)) {
	            const positionAxisID = Object.keys(position)[0];
	            const value = position[positionAxisID];
	            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;
	        } else if (position === 'center') {
	            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
	        } else {
	            titleX = offsetFromEdge(scale, position, offset);
	        }
	        titleY = _alignStartEnd(align, bottom, top);
	        rotation = position === 'left' ? -HALF_PI : HALF_PI;
	    }
	    return {
	        titleX,
	        titleY,
	        maxWidth,
	        rotation
	    };
	}
	class Scale extends Element$1 {
	    constructor(cfg){
	        super();
	         this.id = cfg.id;
	         this.type = cfg.type;
	         this.options = undefined;
	         this.ctx = cfg.ctx;
	         this.chart = cfg.chart;
	         this.top = undefined;
	         this.bottom = undefined;
	         this.left = undefined;
	         this.right = undefined;
	         this.width = undefined;
	         this.height = undefined;
	        this._margins = {
	            left: 0,
	            right: 0,
	            top: 0,
	            bottom: 0
	        };
	         this.maxWidth = undefined;
	         this.maxHeight = undefined;
	         this.paddingTop = undefined;
	         this.paddingBottom = undefined;
	         this.paddingLeft = undefined;
	         this.paddingRight = undefined;
	         this.axis = undefined;
	         this.labelRotation = undefined;
	        this.min = undefined;
	        this.max = undefined;
	        this._range = undefined;
	         this.ticks = [];
	         this._gridLineItems = null;
	         this._labelItems = null;
	         this._labelSizes = null;
	        this._length = 0;
	        this._maxLength = 0;
	        this._longestTextCache = {};
	         this._startPixel = undefined;
	         this._endPixel = undefined;
	        this._reversePixels = false;
	        this._userMax = undefined;
	        this._userMin = undefined;
	        this._suggestedMax = undefined;
	        this._suggestedMin = undefined;
	        this._ticksLength = 0;
	        this._borderValue = 0;
	        this._cache = {};
	        this._dataLimitsCached = false;
	        this.$context = undefined;
	    }
	 init(options) {
	        this.options = options.setContext(this.getContext());
	        this.axis = options.axis;
	        this._userMin = this.parse(options.min);
	        this._userMax = this.parse(options.max);
	        this._suggestedMin = this.parse(options.suggestedMin);
	        this._suggestedMax = this.parse(options.suggestedMax);
	    }
	 parse(raw, index) {
	        return raw;
	    }
	 getUserBounds() {
	        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;
	        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);
	        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);
	        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);
	        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);
	        return {
	            min: finiteOrDefault(_userMin, _suggestedMin),
	            max: finiteOrDefault(_userMax, _suggestedMax),
	            minDefined: isNumberFinite(_userMin),
	            maxDefined: isNumberFinite(_userMax)
	        };
	    }
	 getMinMax(canStack) {
	        let { min , max , minDefined , maxDefined  } = this.getUserBounds();
	        let range;
	        if (minDefined && maxDefined) {
	            return {
	                min,
	                max
	            };
	        }
	        const metas = this.getMatchingVisibleMetas();
	        for(let i = 0, ilen = metas.length; i < ilen; ++i){
	            range = metas[i].controller.getMinMax(this, canStack);
	            if (!minDefined) {
	                min = Math.min(min, range.min);
	            }
	            if (!maxDefined) {
	                max = Math.max(max, range.max);
	            }
	        }
	        min = maxDefined && min > max ? max : min;
	        max = minDefined && min > max ? min : max;
	        return {
	            min: finiteOrDefault(min, finiteOrDefault(max, min)),
	            max: finiteOrDefault(max, finiteOrDefault(min, max))
	        };
	    }
	 getPadding() {
	        return {
	            left: this.paddingLeft || 0,
	            top: this.paddingTop || 0,
	            right: this.paddingRight || 0,
	            bottom: this.paddingBottom || 0
	        };
	    }
	 getTicks() {
	        return this.ticks;
	    }
	 getLabels() {
	        const data = this.chart.data;
	        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
	    }
	 getLabelItems(chartArea = this.chart.chartArea) {
	        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
	        return items;
	    }
	    beforeLayout() {
	        this._cache = {};
	        this._dataLimitsCached = false;
	    }
	    beforeUpdate() {
	        callback(this.options.beforeUpdate, [
	            this
	        ]);
	    }
	 update(maxWidth, maxHeight, margins) {
	        const { beginAtZero , grace , ticks: tickOpts  } = this.options;
	        const sampleSize = tickOpts.sampleSize;
	        this.beforeUpdate();
	        this.maxWidth = maxWidth;
	        this.maxHeight = maxHeight;
	        this._margins = margins = Object.assign({
	            left: 0,
	            right: 0,
	            top: 0,
	            bottom: 0
	        }, margins);
	        this.ticks = null;
	        this._labelSizes = null;
	        this._gridLineItems = null;
	        this._labelItems = null;
	        this.beforeSetDimensions();
	        this.setDimensions();
	        this.afterSetDimensions();
	        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;
	        if (!this._dataLimitsCached) {
	            this.beforeDataLimits();
	            this.determineDataLimits();
	            this.afterDataLimits();
	            this._range = _addGrace(this, grace, beginAtZero);
	            this._dataLimitsCached = true;
	        }
	        this.beforeBuildTicks();
	        this.ticks = this.buildTicks() || [];
	        this.afterBuildTicks();
	        const samplingEnabled = sampleSize < this.ticks.length;
	        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);
	        this.configure();
	        this.beforeCalculateLabelRotation();
	        this.calculateLabelRotation();
	        this.afterCalculateLabelRotation();
	        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {
	            this.ticks = autoSkip(this, this.ticks);
	            this._labelSizes = null;
	            this.afterAutoSkip();
	        }
	        if (samplingEnabled) {
	            this._convertTicksToLabels(this.ticks);
	        }
	        this.beforeFit();
	        this.fit();
	        this.afterFit();
	        this.afterUpdate();
	    }
	 configure() {
	        let reversePixels = this.options.reverse;
	        let startPixel, endPixel;
	        if (this.isHorizontal()) {
	            startPixel = this.left;
	            endPixel = this.right;
	        } else {
	            startPixel = this.top;
	            endPixel = this.bottom;
	            reversePixels = !reversePixels;
	        }
	        this._startPixel = startPixel;
	        this._endPixel = endPixel;
	        this._reversePixels = reversePixels;
	        this._length = endPixel - startPixel;
	        this._alignToPixels = this.options.alignToPixels;
	    }
	    afterUpdate() {
	        callback(this.options.afterUpdate, [
	            this
	        ]);
	    }
	    beforeSetDimensions() {
	        callback(this.options.beforeSetDimensions, [
	            this
	        ]);
	    }
	    setDimensions() {
	        if (this.isHorizontal()) {
	            this.width = this.maxWidth;
	            this.left = 0;
	            this.right = this.width;
	        } else {
	            this.height = this.maxHeight;
	            this.top = 0;
	            this.bottom = this.height;
	        }
	        this.paddingLeft = 0;
	        this.paddingTop = 0;
	        this.paddingRight = 0;
	        this.paddingBottom = 0;
	    }
	    afterSetDimensions() {
	        callback(this.options.afterSetDimensions, [
	            this
	        ]);
	    }
	    _callHooks(name) {
	        this.chart.notifyPlugins(name, this.getContext());
	        callback(this.options[name], [
	            this
	        ]);
	    }
	    beforeDataLimits() {
	        this._callHooks('beforeDataLimits');
	    }
	    determineDataLimits() {}
	    afterDataLimits() {
	        this._callHooks('afterDataLimits');
	    }
	    beforeBuildTicks() {
	        this._callHooks('beforeBuildTicks');
	    }
	 buildTicks() {
	        return [];
	    }
	    afterBuildTicks() {
	        this._callHooks('afterBuildTicks');
	    }
	    beforeTickToLabelConversion() {
	        callback(this.options.beforeTickToLabelConversion, [
	            this
	        ]);
	    }
	 generateTickLabels(ticks) {
	        const tickOpts = this.options.ticks;
	        let i, ilen, tick;
	        for(i = 0, ilen = ticks.length; i < ilen; i++){
	            tick = ticks[i];
	            tick.label = callback(tickOpts.callback, [
	                tick.value,
	                i,
	                ticks
	            ], this);
	        }
	    }
	    afterTickToLabelConversion() {
	        callback(this.options.afterTickToLabelConversion, [
	            this
	        ]);
	    }
	    beforeCalculateLabelRotation() {
	        callback(this.options.beforeCalculateLabelRotation, [
	            this
	        ]);
	    }
	    calculateLabelRotation() {
	        const options = this.options;
	        const tickOpts = options.ticks;
	        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);
	        const minRotation = tickOpts.minRotation || 0;
	        const maxRotation = tickOpts.maxRotation;
	        let labelRotation = minRotation;
	        let tickWidth, maxHeight, maxLabelDiagonal;
	        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
	            this.labelRotation = minRotation;
	            return;
	        }
	        const labelSizes = this._getLabelSizes();
	        const maxLabelWidth = labelSizes.widest.width;
	        const maxLabelHeight = labelSizes.highest.height;
	        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);
	        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
	        if (maxLabelWidth + 6 > tickWidth) {
	            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
	            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);
	            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
	            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));
	            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
	        }
	        this.labelRotation = labelRotation;
	    }
	    afterCalculateLabelRotation() {
	        callback(this.options.afterCalculateLabelRotation, [
	            this
	        ]);
	    }
	    afterAutoSkip() {}
	    beforeFit() {
	        callback(this.options.beforeFit, [
	            this
	        ]);
	    }
	    fit() {
	        const minSize = {
	            width: 0,
	            height: 0
	        };
	        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;
	        const display = this._isVisible();
	        const isHorizontal = this.isHorizontal();
	        if (display) {
	            const titleHeight = getTitleHeight(titleOpts, chart.options.font);
	            if (isHorizontal) {
	                minSize.width = this.maxWidth;
	                minSize.height = getTickMarkLength(gridOpts) + titleHeight;
	            } else {
	                minSize.height = this.maxHeight;
	                minSize.width = getTickMarkLength(gridOpts) + titleHeight;
	            }
	            if (tickOpts.display && this.ticks.length) {
	                const { first , last , widest , highest  } = this._getLabelSizes();
	                const tickPadding = tickOpts.padding * 2;
	                const angleRadians = toRadians(this.labelRotation);
	                const cos = Math.cos(angleRadians);
	                const sin = Math.sin(angleRadians);
	                if (isHorizontal) {
	                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
	                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
	                } else {
	                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
	                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
	                }
	                this._calculatePadding(first, last, sin, cos);
	            }
	        }
	        this._handleMargins();
	        if (isHorizontal) {
	            this.width = this._length = chart.width - this._margins.left - this._margins.right;
	            this.height = minSize.height;
	        } else {
	            this.width = minSize.width;
	            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
	        }
	    }
	    _calculatePadding(first, last, sin, cos) {
	        const { ticks: { align , padding  } , position  } = this.options;
	        const isRotated = this.labelRotation !== 0;
	        const labelsBelowTicks = position !== 'top' && this.axis === 'x';
	        if (this.isHorizontal()) {
	            const offsetLeft = this.getPixelForTick(0) - this.left;
	            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
	            let paddingLeft = 0;
	            let paddingRight = 0;
	            if (isRotated) {
	                if (labelsBelowTicks) {
	                    paddingLeft = cos * first.width;
	                    paddingRight = sin * last.height;
	                } else {
	                    paddingLeft = sin * first.height;
	                    paddingRight = cos * last.width;
	                }
	            } else if (align === 'start') {
	                paddingRight = last.width;
	            } else if (align === 'end') {
	                paddingLeft = first.width;
	            } else if (align !== 'inner') {
	                paddingLeft = first.width / 2;
	                paddingRight = last.width / 2;
	            }
	            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
	            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
	        } else {
	            let paddingTop = last.height / 2;
	            let paddingBottom = first.height / 2;
	            if (align === 'start') {
	                paddingTop = 0;
	                paddingBottom = first.height;
	            } else if (align === 'end') {
	                paddingTop = last.height;
	                paddingBottom = 0;
	            }
	            this.paddingTop = paddingTop + padding;
	            this.paddingBottom = paddingBottom + padding;
	        }
	    }
	 _handleMargins() {
	        if (this._margins) {
	            this._margins.left = Math.max(this.paddingLeft, this._margins.left);
	            this._margins.top = Math.max(this.paddingTop, this._margins.top);
	            this._margins.right = Math.max(this.paddingRight, this._margins.right);
	            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
	        }
	    }
	    afterFit() {
	        callback(this.options.afterFit, [
	            this
	        ]);
	    }
	 isHorizontal() {
	        const { axis , position  } = this.options;
	        return position === 'top' || position === 'bottom' || axis === 'x';
	    }
	 isFullSize() {
	        return this.options.fullSize;
	    }
	 _convertTicksToLabels(ticks) {
	        this.beforeTickToLabelConversion();
	        this.generateTickLabels(ticks);
	        let i, ilen;
	        for(i = 0, ilen = ticks.length; i < ilen; i++){
	            if (isNullOrUndef(ticks[i].label)) {
	                ticks.splice(i, 1);
	                ilen--;
	                i--;
	            }
	        }
	        this.afterTickToLabelConversion();
	    }
	 _getLabelSizes() {
	        let labelSizes = this._labelSizes;
	        if (!labelSizes) {
	            const sampleSize = this.options.ticks.sampleSize;
	            let ticks = this.ticks;
	            if (sampleSize < ticks.length) {
	                ticks = sample(ticks, sampleSize);
	            }
	            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);
	        }
	        return labelSizes;
	    }
	 _computeLabelSizes(ticks, length, maxTicksLimit) {
	        const { ctx , _longestTextCache: caches  } = this;
	        const widths = [];
	        const heights = [];
	        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));
	        let widestLabelSize = 0;
	        let highestLabelSize = 0;
	        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
	        for(i = 0; i < length; i += increment){
	            label = ticks[i].label;
	            tickFont = this._resolveTickFontOptions(i);
	            ctx.font = fontString = tickFont.string;
	            cache = caches[fontString] = caches[fontString] || {
	                data: {},
	                gc: []
	            };
	            lineHeight = tickFont.lineHeight;
	            width = height = 0;
	            if (!isNullOrUndef(label) && !isArray(label)) {
	                width = _measureText(ctx, cache.data, cache.gc, width, label);
	                height = lineHeight;
	            } else if (isArray(label)) {
	                for(j = 0, jlen = label.length; j < jlen; ++j){
	                    nestedLabel =  label[j];
	                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
	                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);
	                        height += lineHeight;
	                    }
	                }
	            }
	            widths.push(width);
	            heights.push(height);
	            widestLabelSize = Math.max(width, widestLabelSize);
	            highestLabelSize = Math.max(height, highestLabelSize);
	        }
	        garbageCollect(caches, length);
	        const widest = widths.indexOf(widestLabelSize);
	        const highest = heights.indexOf(highestLabelSize);
	        const valueAt = (idx)=>({
	                width: widths[idx] || 0,
	                height: heights[idx] || 0
	            });
	        return {
	            first: valueAt(0),
	            last: valueAt(length - 1),
	            widest: valueAt(widest),
	            highest: valueAt(highest),
	            widths,
	            heights
	        };
	    }
	 getLabelForValue(value) {
	        return value;
	    }
	 getPixelForValue(value, index) {
	        return NaN;
	    }
	 getValueForPixel(pixel) {}
	 getPixelForTick(index) {
	        const ticks = this.ticks;
	        if (index < 0 || index > ticks.length - 1) {
	            return null;
	        }
	        return this.getPixelForValue(ticks[index].value);
	    }
	 getPixelForDecimal(decimal) {
	        if (this._reversePixels) {
	            decimal = 1 - decimal;
	        }
	        const pixel = this._startPixel + decimal * this._length;
	        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);
	    }
	 getDecimalForPixel(pixel) {
	        const decimal = (pixel - this._startPixel) / this._length;
	        return this._reversePixels ? 1 - decimal : decimal;
	    }
	 getBasePixel() {
	        return this.getPixelForValue(this.getBaseValue());
	    }
	 getBaseValue() {
	        const { min , max  } = this;
	        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
	    }
	 getContext(index) {
	        const ticks = this.ticks || [];
	        if (index >= 0 && index < ticks.length) {
	            const tick = ticks[index];
	            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));
	        }
	        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));
	    }
	 _tickSize() {
	        const optionTicks = this.options.ticks;
	        const rot = toRadians(this.labelRotation);
	        const cos = Math.abs(Math.cos(rot));
	        const sin = Math.abs(Math.sin(rot));
	        const labelSizes = this._getLabelSizes();
	        const padding = optionTicks.autoSkipPadding || 0;
	        const w = labelSizes ? labelSizes.widest.width + padding : 0;
	        const h = labelSizes ? labelSizes.highest.height + padding : 0;
	        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;
	    }
	 _isVisible() {
	        const display = this.options.display;
	        if (display !== 'auto') {
	            return !!display;
	        }
	        return this.getMatchingVisibleMetas().length > 0;
	    }
	 _computeGridLineItems(chartArea) {
	        const axis = this.axis;
	        const chart = this.chart;
	        const options = this.options;
	        const { grid , position , border  } = options;
	        const offset = grid.offset;
	        const isHorizontal = this.isHorizontal();
	        const ticks = this.ticks;
	        const ticksLength = ticks.length + (offset ? 1 : 0);
	        const tl = getTickMarkLength(grid);
	        const items = [];
	        const borderOpts = border.setContext(this.getContext());
	        const axisWidth = borderOpts.display ? borderOpts.width : 0;
	        const axisHalfWidth = axisWidth / 2;
	        const alignBorderValue = function(pixel) {
	            return _alignPixel(chart, pixel, axisWidth);
	        };
	        let borderValue, i, lineValue, alignedLineValue;
	        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;
	        if (position === 'top') {
	            borderValue = alignBorderValue(this.bottom);
	            ty1 = this.bottom - tl;
	            ty2 = borderValue - axisHalfWidth;
	            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
	            y2 = chartArea.bottom;
	        } else if (position === 'bottom') {
	            borderValue = alignBorderValue(this.top);
	            y1 = chartArea.top;
	            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
	            ty1 = borderValue + axisHalfWidth;
	            ty2 = this.top + tl;
	        } else if (position === 'left') {
	            borderValue = alignBorderValue(this.right);
	            tx1 = this.right - tl;
	            tx2 = borderValue - axisHalfWidth;
	            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
	            x2 = chartArea.right;
	        } else if (position === 'right') {
	            borderValue = alignBorderValue(this.left);
	            x1 = chartArea.left;
	            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
	            tx1 = borderValue + axisHalfWidth;
	            tx2 = this.left + tl;
	        } else if (axis === 'x') {
	            if (position === 'center') {
	                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
	            } else if (isObject(position)) {
	                const positionAxisID = Object.keys(position)[0];
	                const value = position[positionAxisID];
	                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
	            }
	            y1 = chartArea.top;
	            y2 = chartArea.bottom;
	            ty1 = borderValue + axisHalfWidth;
	            ty2 = ty1 + tl;
	        } else if (axis === 'y') {
	            if (position === 'center') {
	                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
	            } else if (isObject(position)) {
	                const positionAxisID = Object.keys(position)[0];
	                const value = position[positionAxisID];
	                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
	            }
	            tx1 = borderValue - axisHalfWidth;
	            tx2 = tx1 - tl;
	            x1 = chartArea.left;
	            x2 = chartArea.right;
	        }
	        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);
	        const step = Math.max(1, Math.ceil(ticksLength / limit));
	        for(i = 0; i < ticksLength; i += step){
	            const context = this.getContext(i);
	            const optsAtIndex = grid.setContext(context);
	            const optsAtIndexBorder = border.setContext(context);
	            const lineWidth = optsAtIndex.lineWidth;
	            const lineColor = optsAtIndex.color;
	            const borderDash = optsAtIndexBorder.dash || [];
	            const borderDashOffset = optsAtIndexBorder.dashOffset;
	            const tickWidth = optsAtIndex.tickWidth;
	            const tickColor = optsAtIndex.tickColor;
	            const tickBorderDash = optsAtIndex.tickBorderDash || [];
	            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
	            lineValue = getPixelForGridLine(this, i, offset);
	            if (lineValue === undefined) {
	                continue;
	            }
	            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);
	            if (isHorizontal) {
	                tx1 = tx2 = x1 = x2 = alignedLineValue;
	            } else {
	                ty1 = ty2 = y1 = y2 = alignedLineValue;
	            }
	            items.push({
	                tx1,
	                ty1,
	                tx2,
	                ty2,
	                x1,
	                y1,
	                x2,
	                y2,
	                width: lineWidth,
	                color: lineColor,
	                borderDash,
	                borderDashOffset,
	                tickWidth,
	                tickColor,
	                tickBorderDash,
	                tickBorderDashOffset
	            });
	        }
	        this._ticksLength = ticksLength;
	        this._borderValue = borderValue;
	        return items;
	    }
	 _computeLabelItems(chartArea) {
	        const axis = this.axis;
	        const options = this.options;
	        const { position , ticks: optionTicks  } = options;
	        const isHorizontal = this.isHorizontal();
	        const ticks = this.ticks;
	        const { align , crossAlign , padding , mirror  } = optionTicks;
	        const tl = getTickMarkLength(options.grid);
	        const tickAndPadding = tl + padding;
	        const hTickAndPadding = mirror ? -padding : tickAndPadding;
	        const rotation = -toRadians(this.labelRotation);
	        const items = [];
	        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;
	        let textBaseline = 'middle';
	        if (position === 'top') {
	            y = this.bottom - hTickAndPadding;
	            textAlign = this._getXAxisLabelAlignment();
	        } else if (position === 'bottom') {
	            y = this.top + hTickAndPadding;
	            textAlign = this._getXAxisLabelAlignment();
	        } else if (position === 'left') {
	            const ret = this._getYAxisLabelAlignment(tl);
	            textAlign = ret.textAlign;
	            x = ret.x;
	        } else if (position === 'right') {
	            const ret = this._getYAxisLabelAlignment(tl);
	            textAlign = ret.textAlign;
	            x = ret.x;
	        } else if (axis === 'x') {
	            if (position === 'center') {
	                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
	            } else if (isObject(position)) {
	                const positionAxisID = Object.keys(position)[0];
	                const value = position[positionAxisID];
	                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
	            }
	            textAlign = this._getXAxisLabelAlignment();
	        } else if (axis === 'y') {
	            if (position === 'center') {
	                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
	            } else if (isObject(position)) {
	                const positionAxisID = Object.keys(position)[0];
	                const value = position[positionAxisID];
	                x = this.chart.scales[positionAxisID].getPixelForValue(value);
	            }
	            textAlign = this._getYAxisLabelAlignment(tl).textAlign;
	        }
	        if (axis === 'y') {
	            if (align === 'start') {
	                textBaseline = 'top';
	            } else if (align === 'end') {
	                textBaseline = 'bottom';
	            }
	        }
	        const labelSizes = this._getLabelSizes();
	        for(i = 0, ilen = ticks.length; i < ilen; ++i){
	            tick = ticks[i];
	            label = tick.label;
	            const optsAtIndex = optionTicks.setContext(this.getContext(i));
	            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;
	            font = this._resolveTickFontOptions(i);
	            lineHeight = font.lineHeight;
	            lineCount = isArray(label) ? label.length : 1;
	            const halfCount = lineCount / 2;
	            const color = optsAtIndex.color;
	            const strokeColor = optsAtIndex.textStrokeColor;
	            const strokeWidth = optsAtIndex.textStrokeWidth;
	            let tickTextAlign = textAlign;
	            if (isHorizontal) {
	                x = pixel;
	                if (textAlign === 'inner') {
	                    if (i === ilen - 1) {
	                        tickTextAlign = !this.options.reverse ? 'right' : 'left';
	                    } else if (i === 0) {
	                        tickTextAlign = !this.options.reverse ? 'left' : 'right';
	                    } else {
	                        tickTextAlign = 'center';
	                    }
	                }
	                if (position === 'top') {
	                    if (crossAlign === 'near' || rotation !== 0) {
	                        textOffset = -lineCount * lineHeight + lineHeight / 2;
	                    } else if (crossAlign === 'center') {
	                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
	                    } else {
	                        textOffset = -labelSizes.highest.height + lineHeight / 2;
	                    }
	                } else {
	                    if (crossAlign === 'near' || rotation !== 0) {
	                        textOffset = lineHeight / 2;
	                    } else if (crossAlign === 'center') {
	                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
	                    } else {
	                        textOffset = labelSizes.highest.height - lineCount * lineHeight;
	                    }
	                }
	                if (mirror) {
	                    textOffset *= -1;
	                }
	                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {
	                    x += lineHeight / 2 * Math.sin(rotation);
	                }
	            } else {
	                y = pixel;
	                textOffset = (1 - lineCount) * lineHeight / 2;
	            }
	            let backdrop;
	            if (optsAtIndex.showLabelBackdrop) {
	                const labelPadding = toPadding(optsAtIndex.backdropPadding);
	                const height = labelSizes.heights[i];
	                const width = labelSizes.widths[i];
	                let top = textOffset - labelPadding.top;
	                let left = 0 - labelPadding.left;
	                switch(textBaseline){
	                    case 'middle':
	                        top -= height / 2;
	                        break;
	                    case 'bottom':
	                        top -= height;
	                        break;
	                }
	                switch(textAlign){
	                    case 'center':
	                        left -= width / 2;
	                        break;
	                    case 'right':
	                        left -= width;
	                        break;
	                }
	                backdrop = {
	                    left,
	                    top,
	                    width: width + labelPadding.width,
	                    height: height + labelPadding.height,
	                    color: optsAtIndex.backdropColor
	                };
	            }
	            items.push({
	                label,
	                font,
	                textOffset,
	                options: {
	                    rotation,
	                    color,
	                    strokeColor,
	                    strokeWidth,
	                    textAlign: tickTextAlign,
	                    textBaseline,
	                    translation: [
	                        x,
	                        y
	                    ],
	                    backdrop
	                }
	            });
	        }
	        return items;
	    }
	    _getXAxisLabelAlignment() {
	        const { position , ticks  } = this.options;
	        const rotation = -toRadians(this.labelRotation);
	        if (rotation) {
	            return position === 'top' ? 'left' : 'right';
	        }
	        let align = 'center';
	        if (ticks.align === 'start') {
	            align = 'left';
	        } else if (ticks.align === 'end') {
	            align = 'right';
	        } else if (ticks.align === 'inner') {
	            align = 'inner';
	        }
	        return align;
	    }
	    _getYAxisLabelAlignment(tl) {
	        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;
	        const labelSizes = this._getLabelSizes();
	        const tickAndPadding = tl + padding;
	        const widest = labelSizes.widest.width;
	        let textAlign;
	        let x;
	        if (position === 'left') {
	            if (mirror) {
	                x = this.right + padding;
	                if (crossAlign === 'near') {
	                    textAlign = 'left';
	                } else if (crossAlign === 'center') {
	                    textAlign = 'center';
	                    x += widest / 2;
	                } else {
	                    textAlign = 'right';
	                    x += widest;
	                }
	            } else {
	                x = this.right - tickAndPadding;
	                if (crossAlign === 'near') {
	                    textAlign = 'right';
	                } else if (crossAlign === 'center') {
	                    textAlign = 'center';
	                    x -= widest / 2;
	                } else {
	                    textAlign = 'left';
	                    x = this.left;
	                }
	            }
	        } else if (position === 'right') {
	            if (mirror) {
	                x = this.left + padding;
	                if (crossAlign === 'near') {
	                    textAlign = 'right';
	                } else if (crossAlign === 'center') {
	                    textAlign = 'center';
	                    x -= widest / 2;
	                } else {
	                    textAlign = 'left';
	                    x -= widest;
	                }
	            } else {
	                x = this.left + tickAndPadding;
	                if (crossAlign === 'near') {
	                    textAlign = 'left';
	                } else if (crossAlign === 'center') {
	                    textAlign = 'center';
	                    x += widest / 2;
	                } else {
	                    textAlign = 'right';
	                    x = this.right;
	                }
	            }
	        } else {
	            textAlign = 'right';
	        }
	        return {
	            textAlign,
	            x
	        };
	    }
	 _computeLabelArea() {
	        if (this.options.ticks.mirror) {
	            return;
	        }
	        const chart = this.chart;
	        const position = this.options.position;
	        if (position === 'left' || position === 'right') {
	            return {
	                top: 0,
	                left: this.left,
	                bottom: chart.height,
	                right: this.right
	            };
	        }
	        if (position === 'top' || position === 'bottom') {
	            return {
	                top: this.top,
	                left: 0,
	                bottom: this.bottom,
	                right: chart.width
	            };
	        }
	    }
	 drawBackground() {
	        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;
	        if (backgroundColor) {
	            ctx.save();
	            ctx.fillStyle = backgroundColor;
	            ctx.fillRect(left, top, width, height);
	            ctx.restore();
	        }
	    }
	    getLineWidthForValue(value) {
	        const grid = this.options.grid;
	        if (!this._isVisible() || !grid.display) {
	            return 0;
	        }
	        const ticks = this.ticks;
	        const index = ticks.findIndex((t)=>t.value === value);
	        if (index >= 0) {
	            const opts = grid.setContext(this.getContext(index));
	            return opts.lineWidth;
	        }
	        return 0;
	    }
	 drawGrid(chartArea) {
	        const grid = this.options.grid;
	        const ctx = this.ctx;
	        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
	        let i, ilen;
	        const drawLine = (p1, p2, style)=>{
	            if (!style.width || !style.color) {
	                return;
	            }
	            ctx.save();
	            ctx.lineWidth = style.width;
	            ctx.strokeStyle = style.color;
	            ctx.setLineDash(style.borderDash || []);
	            ctx.lineDashOffset = style.borderDashOffset;
	            ctx.beginPath();
	            ctx.moveTo(p1.x, p1.y);
	            ctx.lineTo(p2.x, p2.y);
	            ctx.stroke();
	            ctx.restore();
	        };
	        if (grid.display) {
	            for(i = 0, ilen = items.length; i < ilen; ++i){
	                const item = items[i];
	                if (grid.drawOnChartArea) {
	                    drawLine({
	                        x: item.x1,
	                        y: item.y1
	                    }, {
	                        x: item.x2,
	                        y: item.y2
	                    }, item);
	                }
	                if (grid.drawTicks) {
	                    drawLine({
	                        x: item.tx1,
	                        y: item.ty1
	                    }, {
	                        x: item.tx2,
	                        y: item.ty2
	                    }, {
	                        color: item.tickColor,
	                        width: item.tickWidth,
	                        borderDash: item.tickBorderDash,
	                        borderDashOffset: item.tickBorderDashOffset
	                    });
	                }
	            }
	        }
	    }
	 drawBorder() {
	        const { chart , ctx , options: { border , grid  }  } = this;
	        const borderOpts = border.setContext(this.getContext());
	        const axisWidth = border.display ? borderOpts.width : 0;
	        if (!axisWidth) {
	            return;
	        }
	        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;
	        const borderValue = this._borderValue;
	        let x1, x2, y1, y2;
	        if (this.isHorizontal()) {
	            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;
	            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;
	            y1 = y2 = borderValue;
	        } else {
	            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;
	            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
	            x1 = x2 = borderValue;
	        }
	        ctx.save();
	        ctx.lineWidth = borderOpts.width;
	        ctx.strokeStyle = borderOpts.color;
	        ctx.beginPath();
	        ctx.moveTo(x1, y1);
	        ctx.lineTo(x2, y2);
	        ctx.stroke();
	        ctx.restore();
	    }
	 drawLabels(chartArea) {
	        const optionTicks = this.options.ticks;
	        if (!optionTicks.display) {
	            return;
	        }
	        const ctx = this.ctx;
	        const area = this._computeLabelArea();
	        if (area) {
	            clipArea(ctx, area);
	        }
	        const items = this.getLabelItems(chartArea);
	        for (const item of items){
	            const renderTextOptions = item.options;
	            const tickFont = item.font;
	            const label = item.label;
	            const y = item.textOffset;
	            renderText(ctx, label, 0, y, tickFont, renderTextOptions);
	        }
	        if (area) {
	            unclipArea(ctx);
	        }
	    }
	 drawTitle() {
	        const { ctx , options: { position , title , reverse  }  } = this;
	        if (!title.display) {
	            return;
	        }
	        const font = toFont(title.font);
	        const padding = toPadding(title.padding);
	        const align = title.align;
	        let offset = font.lineHeight / 2;
	        if (position === 'bottom' || position === 'center' || isObject(position)) {
	            offset += padding.bottom;
	            if (isArray(title.text)) {
	                offset += font.lineHeight * (title.text.length - 1);
	            }
	        } else {
	            offset += padding.top;
	        }
	        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);
	        renderText(ctx, title.text, 0, 0, font, {
	            color: title.color,
	            maxWidth,
	            rotation,
	            textAlign: titleAlign(align, position, reverse),
	            textBaseline: 'middle',
	            translation: [
	                titleX,
	                titleY
	            ]
	        });
	    }
	    draw(chartArea) {
	        if (!this._isVisible()) {
	            return;
	        }
	        this.drawBackground();
	        this.drawGrid(chartArea);
	        this.drawBorder();
	        this.drawTitle();
	        this.drawLabels(chartArea);
	    }
	 _layers() {
	        const opts = this.options;
	        const tz = opts.ticks && opts.ticks.z || 0;
	        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);
	        const bz = valueOrDefault(opts.border && opts.border.z, 0);
	        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {
	            return [
	                {
	                    z: tz,
	                    draw: (chartArea)=>{
	                        this.draw(chartArea);
	                    }
	                }
	            ];
	        }
	        return [
	            {
	                z: gz,
	                draw: (chartArea)=>{
	                    this.drawBackground();
	                    this.drawGrid(chartArea);
	                    this.drawTitle();
	                }
	            },
	            {
	                z: bz,
	                draw: ()=>{
	                    this.drawBorder();
	                }
	            },
	            {
	                z: tz,
	                draw: (chartArea)=>{
	                    this.drawLabels(chartArea);
	                }
	            }
	        ];
	    }
	 getMatchingVisibleMetas(type) {
	        const metas = this.chart.getSortedVisibleDatasetMetas();
	        const axisID = this.axis + 'AxisID';
	        const result = [];
	        let i, ilen;
	        for(i = 0, ilen = metas.length; i < ilen; ++i){
	            const meta = metas[i];
	            if (meta[axisID] === this.id && (!type || meta.type === type)) {
	                result.push(meta);
	            }
	        }
	        return result;
	    }
	 _resolveTickFontOptions(index) {
	        const opts = this.options.ticks.setContext(this.getContext(index));
	        return toFont(opts.font);
	    }
	 _maxDigits() {
	        const fontSize = this._resolveTickFontOptions(0).lineHeight;
	        return (this.isHorizontal() ? this.width : this.height) / fontSize;
	    }
	}

	class TypedRegistry {
	    constructor(type, scope, override){
	        this.type = type;
	        this.scope = scope;
	        this.override = override;
	        this.items = Object.create(null);
	    }
	    isForType(type) {
	        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
	    }
	 register(item) {
	        const proto = Object.getPrototypeOf(item);
	        let parentScope;
	        if (isIChartComponent(proto)) {
	            parentScope = this.register(proto);
	        }
	        const items = this.items;
	        const id = item.id;
	        const scope = this.scope + '.' + id;
	        if (!id) {
	            throw new Error('class does not have id: ' + item);
	        }
	        if (id in items) {
	            return scope;
	        }
	        items[id] = item;
	        registerDefaults(item, scope, parentScope);
	        if (this.override) {
	            defaults.override(item.id, item.overrides);
	        }
	        return scope;
	    }
	 get(id) {
	        return this.items[id];
	    }
	 unregister(item) {
	        const items = this.items;
	        const id = item.id;
	        const scope = this.scope;
	        if (id in items) {
	            delete items[id];
	        }
	        if (scope && id in defaults[scope]) {
	            delete defaults[scope][id];
	            if (this.override) {
	                delete overrides[id];
	            }
	        }
	    }
	}
	function registerDefaults(item, scope, parentScope) {
	    const itemDefaults = merge(Object.create(null), [
	        parentScope ? defaults.get(parentScope) : {},
	        defaults.get(scope),
	        item.defaults
	    ]);
	    defaults.set(scope, itemDefaults);
	    if (item.defaultRoutes) {
	        routeDefaults(scope, item.defaultRoutes);
	    }
	    if (item.descriptors) {
	        defaults.describe(scope, item.descriptors);
	    }
	}
	function routeDefaults(scope, routes) {
	    Object.keys(routes).forEach((property)=>{
	        const propertyParts = property.split('.');
	        const sourceName = propertyParts.pop();
	        const sourceScope = [
	            scope
	        ].concat(propertyParts).join('.');
	        const parts = routes[property].split('.');
	        const targetName = parts.pop();
	        const targetScope = parts.join('.');
	        defaults.route(sourceScope, sourceName, targetScope, targetName);
	    });
	}
	function isIChartComponent(proto) {
	    return 'id' in proto && 'defaults' in proto;
	}

	class Registry {
	    constructor(){
	        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);
	        this.elements = new TypedRegistry(Element$1, 'elements');
	        this.plugins = new TypedRegistry(Object, 'plugins');
	        this.scales = new TypedRegistry(Scale, 'scales');
	        this._typedRegistries = [
	            this.controllers,
	            this.scales,
	            this.elements
	        ];
	    }
	 add(...args) {
	        this._each('register', args);
	    }
	    remove(...args) {
	        this._each('unregister', args);
	    }
	 addControllers(...args) {
	        this._each('register', args, this.controllers);
	    }
	 addElements(...args) {
	        this._each('register', args, this.elements);
	    }
	 addPlugins(...args) {
	        this._each('register', args, this.plugins);
	    }
	 addScales(...args) {
	        this._each('register', args, this.scales);
	    }
	 getController(id) {
	        return this._get(id, this.controllers, 'controller');
	    }
	 getElement(id) {
	        return this._get(id, this.elements, 'element');
	    }
	 getPlugin(id) {
	        return this._get(id, this.plugins, 'plugin');
	    }
	 getScale(id) {
	        return this._get(id, this.scales, 'scale');
	    }
	 removeControllers(...args) {
	        this._each('unregister', args, this.controllers);
	    }
	 removeElements(...args) {
	        this._each('unregister', args, this.elements);
	    }
	 removePlugins(...args) {
	        this._each('unregister', args, this.plugins);
	    }
	 removeScales(...args) {
	        this._each('unregister', args, this.scales);
	    }
	 _each(method, args, typedRegistry) {
	        [
	            ...args
	        ].forEach((arg)=>{
	            const reg = typedRegistry || this._getRegistryForType(arg);
	            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {
	                this._exec(method, reg, arg);
	            } else {
	                each(arg, (item)=>{
	                    const itemReg = typedRegistry || this._getRegistryForType(item);
	                    this._exec(method, itemReg, item);
	                });
	            }
	        });
	    }
	 _exec(method, registry, component) {
	        const camelMethod = _capitalize(method);
	        callback(component['before' + camelMethod], [], component);
	        registry[method](component);
	        callback(component['after' + camelMethod], [], component);
	    }
	 _getRegistryForType(type) {
	        for(let i = 0; i < this._typedRegistries.length; i++){
	            const reg = this._typedRegistries[i];
	            if (reg.isForType(type)) {
	                return reg;
	            }
	        }
	        return this.plugins;
	    }
	 _get(id, typedRegistry, type) {
	        const item = typedRegistry.get(id);
	        if (item === undefined) {
	            throw new Error('"' + id + '" is not a registered ' + type + '.');
	        }
	        return item;
	    }
	}
	var registry = /* #__PURE__ */ new Registry();

	class PluginService {
	    constructor(){
	        this._init = [];
	    }
	 notify(chart, hook, args, filter) {
	        if (hook === 'beforeInit') {
	            this._init = this._createDescriptors(chart, true);
	            this._notify(this._init, chart, 'install');
	        }
	        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);
	        const result = this._notify(descriptors, chart, hook, args);
	        if (hook === 'afterDestroy') {
	            this._notify(descriptors, chart, 'stop');
	            this._notify(this._init, chart, 'uninstall');
	        }
	        return result;
	    }
	 _notify(descriptors, chart, hook, args) {
	        args = args || {};
	        for (const descriptor of descriptors){
	            const plugin = descriptor.plugin;
	            const method = plugin[hook];
	            const params = [
	                chart,
	                args,
	                descriptor.options
	            ];
	            if (callback(method, params, plugin) === false && args.cancelable) {
	                return false;
	            }
	        }
	        return true;
	    }
	    invalidate() {
	        if (!isNullOrUndef(this._cache)) {
	            this._oldCache = this._cache;
	            this._cache = undefined;
	        }
	    }
	 _descriptors(chart) {
	        if (this._cache) {
	            return this._cache;
	        }
	        const descriptors = this._cache = this._createDescriptors(chart);
	        this._notifyStateChanges(chart);
	        return descriptors;
	    }
	    _createDescriptors(chart, all) {
	        const config = chart && chart.config;
	        const options = valueOrDefault(config.options && config.options.plugins, {});
	        const plugins = allPlugins(config);
	        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);
	    }
	 _notifyStateChanges(chart) {
	        const previousDescriptors = this._oldCache || [];
	        const descriptors = this._cache;
	        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));
	        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');
	        this._notify(diff(descriptors, previousDescriptors), chart, 'start');
	    }
	}
	 function allPlugins(config) {
	    const localIds = {};
	    const plugins = [];
	    const keys = Object.keys(registry.plugins.items);
	    for(let i = 0; i < keys.length; i++){
	        plugins.push(registry.getPlugin(keys[i]));
	    }
	    const local = config.plugins || [];
	    for(let i = 0; i < local.length; i++){
	        const plugin = local[i];
	        if (plugins.indexOf(plugin) === -1) {
	            plugins.push(plugin);
	            localIds[plugin.id] = true;
	        }
	    }
	    return {
	        plugins,
	        localIds
	    };
	}
	function getOpts(options, all) {
	    if (!all && options === false) {
	        return null;
	    }
	    if (options === true) {
	        return {};
	    }
	    return options;
	}
	function createDescriptors(chart, { plugins , localIds  }, options, all) {
	    const result = [];
	    const context = chart.getContext();
	    for (const plugin of plugins){
	        const id = plugin.id;
	        const opts = getOpts(options[id], all);
	        if (opts === null) {
	            continue;
	        }
	        result.push({
	            plugin,
	            options: pluginOpts(chart.config, {
	                plugin,
	                local: localIds[id]
	            }, opts, context)
	        });
	    }
	    return result;
	}
	function pluginOpts(config, { plugin , local  }, opts, context) {
	    const keys = config.pluginScopeKeys(plugin);
	    const scopes = config.getOptionScopes(opts, keys);
	    if (local && plugin.defaults) {
	        scopes.push(plugin.defaults);
	    }
	    return config.createResolver(scopes, context, [
	        ''
	    ], {
	        scriptable: false,
	        indexable: false,
	        allKeys: true
	    });
	}

	function getIndexAxis(type, options) {
	    const datasetDefaults = defaults.datasets[type] || {};
	    const datasetOptions = (options.datasets || {})[type] || {};
	    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';
	}
	function getAxisFromDefaultScaleID(id, indexAxis) {
	    let axis = id;
	    if (id === '_index_') {
	        axis = indexAxis;
	    } else if (id === '_value_') {
	        axis = indexAxis === 'x' ? 'y' : 'x';
	    }
	    return axis;
	}
	function getDefaultScaleIDFromAxis(axis, indexAxis) {
	    return axis === indexAxis ? '_index_' : '_value_';
	}
	function idMatchesAxis(id) {
	    if (id === 'x' || id === 'y' || id === 'r') {
	        return id;
	    }
	}
	function axisFromPosition(position) {
	    if (position === 'top' || position === 'bottom') {
	        return 'x';
	    }
	    if (position === 'left' || position === 'right') {
	        return 'y';
	    }
	}
	function determineAxis(id, ...scaleOptions) {
	    if (idMatchesAxis(id)) {
	        return id;
	    }
	    for (const opts of scaleOptions){
	        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());
	        if (axis) {
	            return axis;
	        }
	    }
	    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);
	}
	function getAxisFromDataset(id, axis, dataset) {
	    if (dataset[axis + 'AxisID'] === id) {
	        return {
	            axis
	        };
	    }
	}
	function retrieveAxisFromDatasets(id, config) {
	    if (config.data && config.data.datasets) {
	        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);
	        if (boundDs.length) {
	            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);
	        }
	    }
	    return {};
	}
	function mergeScaleConfig(config, options) {
	    const chartDefaults = overrides[config.type] || {
	        scales: {}
	    };
	    const configScales = options.scales || {};
	    const chartIndexAxis = getIndexAxis(config.type, options);
	    const scales = Object.create(null);
	    Object.keys(configScales).forEach((id)=>{
	        const scaleConf = configScales[id];
	        if (!isObject(scaleConf)) {
	            return console.error(`Invalid scale configuration for scale: ${id}`);
	        }
	        if (scaleConf._proxy) {
	            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);
	        }
	        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);
	        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
	        const defaultScaleOptions = chartDefaults.scales || {};
	        scales[id] = mergeIf(Object.create(null), [
	            {
	                axis
	            },
	            scaleConf,
	            defaultScaleOptions[axis],
	            defaultScaleOptions[defaultId]
	        ]);
	    });
	    config.data.datasets.forEach((dataset)=>{
	        const type = dataset.type || config.type;
	        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);
	        const datasetDefaults = overrides[type] || {};
	        const defaultScaleOptions = datasetDefaults.scales || {};
	        Object.keys(defaultScaleOptions).forEach((defaultID)=>{
	            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
	            const id = dataset[axis + 'AxisID'] || axis;
	            scales[id] = scales[id] || Object.create(null);
	            mergeIf(scales[id], [
	                {
	                    axis
	                },
	                configScales[id],
	                defaultScaleOptions[defaultID]
	            ]);
	        });
	    });
	    Object.keys(scales).forEach((key)=>{
	        const scale = scales[key];
	        mergeIf(scale, [
	            defaults.scales[scale.type],
	            defaults.scale
	        ]);
	    });
	    return scales;
	}
	function initOptions(config) {
	    const options = config.options || (config.options = {});
	    options.plugins = valueOrDefault(options.plugins, {});
	    options.scales = mergeScaleConfig(config, options);
	}
	function initData(data) {
	    data = data || {};
	    data.datasets = data.datasets || [];
	    data.labels = data.labels || [];
	    return data;
	}
	function initConfig(config) {
	    config = config || {};
	    config.data = initData(config.data);
	    initOptions(config);
	    return config;
	}
	const keyCache = new Map();
	const keysCached = new Set();
	function cachedKeys(cacheKey, generate) {
	    let keys = keyCache.get(cacheKey);
	    if (!keys) {
	        keys = generate();
	        keyCache.set(cacheKey, keys);
	        keysCached.add(keys);
	    }
	    return keys;
	}
	const addIfFound = (set, obj, key)=>{
	    const opts = resolveObjectKey(obj, key);
	    if (opts !== undefined) {
	        set.add(opts);
	    }
	};
	class Config {
	    constructor(config){
	        this._config = initConfig(config);
	        this._scopeCache = new Map();
	        this._resolverCache = new Map();
	    }
	    get platform() {
	        return this._config.platform;
	    }
	    get type() {
	        return this._config.type;
	    }
	    set type(type) {
	        this._config.type = type;
	    }
	    get data() {
	        return this._config.data;
	    }
	    set data(data) {
	        this._config.data = initData(data);
	    }
	    get options() {
	        return this._config.options;
	    }
	    set options(options) {
	        this._config.options = options;
	    }
	    get plugins() {
	        return this._config.plugins;
	    }
	    update() {
	        const config = this._config;
	        this.clearCache();
	        initOptions(config);
	    }
	    clearCache() {
	        this._scopeCache.clear();
	        this._resolverCache.clear();
	    }
	 datasetScopeKeys(datasetType) {
	        return cachedKeys(datasetType, ()=>[
	                [
	                    `datasets.${datasetType}`,
	                    ''
	                ]
	            ]);
	    }
	 datasetAnimationScopeKeys(datasetType, transition) {
	        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[
	                [
	                    `datasets.${datasetType}.transitions.${transition}`,
	                    `transitions.${transition}`
	                ],
	                [
	                    `datasets.${datasetType}`,
	                    ''
	                ]
	            ]);
	    }
	 datasetElementScopeKeys(datasetType, elementType) {
	        return cachedKeys(`${datasetType}-${elementType}`, ()=>[
	                [
	                    `datasets.${datasetType}.elements.${elementType}`,
	                    `datasets.${datasetType}`,
	                    `elements.${elementType}`,
	                    ''
	                ]
	            ]);
	    }
	 pluginScopeKeys(plugin) {
	        const id = plugin.id;
	        const type = this.type;
	        return cachedKeys(`${type}-plugin-${id}`, ()=>[
	                [
	                    `plugins.${id}`,
	                    ...plugin.additionalOptionScopes || []
	                ]
	            ]);
	    }
	 _cachedScopes(mainScope, resetCache) {
	        const _scopeCache = this._scopeCache;
	        let cache = _scopeCache.get(mainScope);
	        if (!cache || resetCache) {
	            cache = new Map();
	            _scopeCache.set(mainScope, cache);
	        }
	        return cache;
	    }
	 getOptionScopes(mainScope, keyLists, resetCache) {
	        const { options , type  } = this;
	        const cache = this._cachedScopes(mainScope, resetCache);
	        const cached = cache.get(keyLists);
	        if (cached) {
	            return cached;
	        }
	        const scopes = new Set();
	        keyLists.forEach((keys)=>{
	            if (mainScope) {
	                scopes.add(mainScope);
	                keys.forEach((key)=>addIfFound(scopes, mainScope, key));
	            }
	            keys.forEach((key)=>addIfFound(scopes, options, key));
	            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));
	            keys.forEach((key)=>addIfFound(scopes, defaults, key));
	            keys.forEach((key)=>addIfFound(scopes, descriptors, key));
	        });
	        const array = Array.from(scopes);
	        if (array.length === 0) {
	            array.push(Object.create(null));
	        }
	        if (keysCached.has(keyLists)) {
	            cache.set(keyLists, array);
	        }
	        return array;
	    }
	 chartOptionScopes() {
	        const { options , type  } = this;
	        return [
	            options,
	            overrides[type] || {},
	            defaults.datasets[type] || {},
	            {
	                type
	            },
	            defaults,
	            descriptors
	        ];
	    }
	 resolveNamedOptions(scopes, names, context, prefixes = [
	        ''
	    ]) {
	        const result = {
	            $shared: true
	        };
	        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);
	        let options = resolver;
	        if (needContext(resolver, names)) {
	            result.$shared = false;
	            context = isFunction(context) ? context() : context;
	            const subResolver = this.createResolver(scopes, context, subPrefixes);
	            options = _attachContext(resolver, context, subResolver);
	        }
	        for (const prop of names){
	            result[prop] = options[prop];
	        }
	        return result;
	    }
	 createResolver(scopes, context, prefixes = [
	        ''
	    ], descriptorDefaults) {
	        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);
	        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;
	    }
	}
	function getResolver(resolverCache, scopes, prefixes) {
	    let cache = resolverCache.get(scopes);
	    if (!cache) {
	        cache = new Map();
	        resolverCache.set(scopes, cache);
	    }
	    const cacheKey = prefixes.join();
	    let cached = cache.get(cacheKey);
	    if (!cached) {
	        const resolver = _createResolver(scopes, prefixes);
	        cached = {
	            resolver,
	            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))
	        };
	        cache.set(cacheKey, cached);
	    }
	    return cached;
	}
	const hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key)=>acc || isFunction(value[key]), false);
	function needContext(proxy, names) {
	    const { isScriptable , isIndexable  } = _descriptors(proxy);
	    for (const prop of names){
	        const scriptable = isScriptable(prop);
	        const indexable = isIndexable(prop);
	        const value = (indexable || scriptable) && proxy[prop];
	        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {
	            return true;
	        }
	    }
	    return false;
	}

	var version = "4.4.0";

	const KNOWN_POSITIONS = [
	    'top',
	    'bottom',
	    'left',
	    'right',
	    'chartArea'
	];
	function positionIsHorizontal(position, axis) {
	    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';
	}
	function compare2Level(l1, l2) {
	    return function(a, b) {
	        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];
	    };
	}
	function onAnimationsComplete(context) {
	    const chart = context.chart;
	    const animationOptions = chart.options.animation;
	    chart.notifyPlugins('afterRender');
	    callback(animationOptions && animationOptions.onComplete, [
	        context
	    ], chart);
	}
	function onAnimationProgress(context) {
	    const chart = context.chart;
	    const animationOptions = chart.options.animation;
	    callback(animationOptions && animationOptions.onProgress, [
	        context
	    ], chart);
	}
	 function getCanvas(item) {
	    if (_isDomSupported() && typeof item === 'string') {
	        item = document.getElementById(item);
	    } else if (item && item.length) {
	        item = item[0];
	    }
	    if (item && item.canvas) {
	        item = item.canvas;
	    }
	    return item;
	}
	const instances = {};
	const getChart = (key)=>{
	    const canvas = getCanvas(key);
	    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();
	};
	function moveNumericKeys(obj, start, move) {
	    const keys = Object.keys(obj);
	    for (const key of keys){
	        const intKey = +key;
	        if (intKey >= start) {
	            const value = obj[key];
	            delete obj[key];
	            if (move > 0 || intKey > start) {
	                obj[intKey + move] = value;
	            }
	        }
	    }
	}
	 function determineLastEvent(e, lastEvent, inChartArea, isClick) {
	    if (!inChartArea || e.type === 'mouseout') {
	        return null;
	    }
	    if (isClick) {
	        return lastEvent;
	    }
	    return e;
	}
	function getSizeForArea(scale, chartArea, field) {
	    return scale.options.clip ? scale[field] : chartArea[field];
	}
	function getDatasetArea(meta, chartArea) {
	    const { xScale , yScale  } = meta;
	    if (xScale && yScale) {
	        return {
	            left: getSizeForArea(xScale, chartArea, 'left'),
	            right: getSizeForArea(xScale, chartArea, 'right'),
	            top: getSizeForArea(yScale, chartArea, 'top'),
	            bottom: getSizeForArea(yScale, chartArea, 'bottom')
	        };
	    }
	    return chartArea;
	}
	let Chart$1 = class Chart {
	    static defaults = defaults;
	    static instances = instances;
	    static overrides = overrides;
	    static registry = registry;
	    static version = version;
	    static getChart = getChart;
	    static register(...items) {
	        registry.add(...items);
	        invalidatePlugins();
	    }
	    static unregister(...items) {
	        registry.remove(...items);
	        invalidatePlugins();
	    }
	    constructor(item, userConfig){
	        const config = this.config = new Config(userConfig);
	        const initialCanvas = getCanvas(item);
	        const existingChart = getChart(initialCanvas);
	        if (existingChart) {
	            throw new Error('Canvas is already in use. Chart with ID \'' + existingChart.id + '\'' + ' must be destroyed before the canvas with ID \'' + existingChart.canvas.id + '\' can be reused.');
	        }
	        const options = config.createResolver(config.chartOptionScopes(), this.getContext());
	        this.platform = new (config.platform || _detectPlatform(initialCanvas))();
	        this.platform.updateConfig(config);
	        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);
	        const canvas = context && context.canvas;
	        const height = canvas && canvas.height;
	        const width = canvas && canvas.width;
	        this.id = uid();
	        this.ctx = context;
	        this.canvas = canvas;
	        this.width = width;
	        this.height = height;
	        this._options = options;
	        this._aspectRatio = this.aspectRatio;
	        this._layers = [];
	        this._metasets = [];
	        this._stacks = undefined;
	        this.boxes = [];
	        this.currentDevicePixelRatio = undefined;
	        this.chartArea = undefined;
	        this._active = [];
	        this._lastEvent = undefined;
	        this._listeners = {};
	         this._responsiveListeners = undefined;
	        this._sortedMetasets = [];
	        this.scales = {};
	        this._plugins = new PluginService();
	        this.$proxies = {};
	        this._hiddenIndices = {};
	        this.attached = false;
	        this._animationsDisabled = undefined;
	        this.$context = undefined;
	        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);
	        this._dataChanges = [];
	        instances[this.id] = this;
	        if (!context || !canvas) {
	            console.error("Failed to create chart: can't acquire context from the given item");
	            return;
	        }
	        animator.listen(this, 'complete', onAnimationsComplete);
	        animator.listen(this, 'progress', onAnimationProgress);
	        this._initialize();
	        if (this.attached) {
	            this.update();
	        }
	    }
	    get aspectRatio() {
	        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;
	        if (!isNullOrUndef(aspectRatio)) {
	            return aspectRatio;
	        }
	        if (maintainAspectRatio && _aspectRatio) {
	            return _aspectRatio;
	        }
	        return height ? width / height : null;
	    }
	    get data() {
	        return this.config.data;
	    }
	    set data(data) {
	        this.config.data = data;
	    }
	    get options() {
	        return this._options;
	    }
	    set options(options) {
	        this.config.options = options;
	    }
	    get registry() {
	        return registry;
	    }
	 _initialize() {
	        this.notifyPlugins('beforeInit');
	        if (this.options.responsive) {
	            this.resize();
	        } else {
	            retinaScale(this, this.options.devicePixelRatio);
	        }
	        this.bindEvents();
	        this.notifyPlugins('afterInit');
	        return this;
	    }
	    clear() {
	        clearCanvas(this.canvas, this.ctx);
	        return this;
	    }
	    stop() {
	        animator.stop(this);
	        return this;
	    }
	 resize(width, height) {
	        if (!animator.running(this)) {
	            this._resize(width, height);
	        } else {
	            this._resizeBeforeDraw = {
	                width,
	                height
	            };
	        }
	    }
	    _resize(width, height) {
	        const options = this.options;
	        const canvas = this.canvas;
	        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;
	        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);
	        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();
	        const mode = this.width ? 'resize' : 'attach';
	        this.width = newSize.width;
	        this.height = newSize.height;
	        this._aspectRatio = this.aspectRatio;
	        if (!retinaScale(this, newRatio, true)) {
	            return;
	        }
	        this.notifyPlugins('resize', {
	            size: newSize
	        });
	        callback(options.onResize, [
	            this,
	            newSize
	        ], this);
	        if (this.attached) {
	            if (this._doResize(mode)) {
	                this.render();
	            }
	        }
	    }
	    ensureScalesHaveIDs() {
	        const options = this.options;
	        const scalesOptions = options.scales || {};
	        each(scalesOptions, (axisOptions, axisID)=>{
	            axisOptions.id = axisID;
	        });
	    }
	 buildOrUpdateScales() {
	        const options = this.options;
	        const scaleOpts = options.scales;
	        const scales = this.scales;
	        const updated = Object.keys(scales).reduce((obj, id)=>{
	            obj[id] = false;
	            return obj;
	        }, {});
	        let items = [];
	        if (scaleOpts) {
	            items = items.concat(Object.keys(scaleOpts).map((id)=>{
	                const scaleOptions = scaleOpts[id];
	                const axis = determineAxis(id, scaleOptions);
	                const isRadial = axis === 'r';
	                const isHorizontal = axis === 'x';
	                return {
	                    options: scaleOptions,
	                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',
	                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'
	                };
	            }));
	        }
	        each(items, (item)=>{
	            const scaleOptions = item.options;
	            const id = scaleOptions.id;
	            const axis = determineAxis(id, scaleOptions);
	            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);
	            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {
	                scaleOptions.position = item.dposition;
	            }
	            updated[id] = true;
	            let scale = null;
	            if (id in scales && scales[id].type === scaleType) {
	                scale = scales[id];
	            } else {
	                const scaleClass = registry.getScale(scaleType);
	                scale = new scaleClass({
	                    id,
	                    type: scaleType,
	                    ctx: this.ctx,
	                    chart: this
	                });
	                scales[scale.id] = scale;
	            }
	            scale.init(scaleOptions, options);
	        });
	        each(updated, (hasUpdated, id)=>{
	            if (!hasUpdated) {
	                delete scales[id];
	            }
	        });
	        each(scales, (scale)=>{
	            layouts.configure(this, scale, scale.options);
	            layouts.addBox(this, scale);
	        });
	    }
	 _updateMetasets() {
	        const metasets = this._metasets;
	        const numData = this.data.datasets.length;
	        const numMeta = metasets.length;
	        metasets.sort((a, b)=>a.index - b.index);
	        if (numMeta > numData) {
	            for(let i = numData; i < numMeta; ++i){
	                this._destroyDatasetMeta(i);
	            }
	            metasets.splice(numData, numMeta - numData);
	        }
	        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));
	    }
	 _removeUnreferencedMetasets() {
	        const { _metasets: metasets , data: { datasets  }  } = this;
	        if (metasets.length > datasets.length) {
	            delete this._stacks;
	        }
	        metasets.forEach((meta, index)=>{
	            if (datasets.filter((x)=>x === meta._dataset).length === 0) {
	                this._destroyDatasetMeta(index);
	            }
	        });
	    }
	    buildOrUpdateControllers() {
	        const newControllers = [];
	        const datasets = this.data.datasets;
	        let i, ilen;
	        this._removeUnreferencedMetasets();
	        for(i = 0, ilen = datasets.length; i < ilen; i++){
	            const dataset = datasets[i];
	            let meta = this.getDatasetMeta(i);
	            const type = dataset.type || this.config.type;
	            if (meta.type && meta.type !== type) {
	                this._destroyDatasetMeta(i);
	                meta = this.getDatasetMeta(i);
	            }
	            meta.type = type;
	            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);
	            meta.order = dataset.order || 0;
	            meta.index = i;
	            meta.label = '' + dataset.label;
	            meta.visible = this.isDatasetVisible(i);
	            if (meta.controller) {
	                meta.controller.updateIndex(i);
	                meta.controller.linkScales();
	            } else {
	                const ControllerClass = registry.getController(type);
	                const { datasetElementType , dataElementType  } = defaults.datasets[type];
	                Object.assign(ControllerClass, {
	                    dataElementType: registry.getElement(dataElementType),
	                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)
	                });
	                meta.controller = new ControllerClass(this, i);
	                newControllers.push(meta.controller);
	            }
	        }
	        this._updateMetasets();
	        return newControllers;
	    }
	 _resetElements() {
	        each(this.data.datasets, (dataset, datasetIndex)=>{
	            this.getDatasetMeta(datasetIndex).controller.reset();
	        }, this);
	    }
	 reset() {
	        this._resetElements();
	        this.notifyPlugins('reset');
	    }
	    update(mode) {
	        const config = this.config;
	        config.update();
	        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());
	        const animsDisabled = this._animationsDisabled = !options.animation;
	        this._updateScales();
	        this._checkEventBindings();
	        this._updateHiddenIndices();
	        this._plugins.invalidate();
	        if (this.notifyPlugins('beforeUpdate', {
	            mode,
	            cancelable: true
	        }) === false) {
	            return;
	        }
	        const newControllers = this.buildOrUpdateControllers();
	        this.notifyPlugins('beforeElementsUpdate');
	        let minPadding = 0;
	        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){
	            const { controller  } = this.getDatasetMeta(i);
	            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
	            controller.buildOrUpdateElements(reset);
	            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
	        }
	        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;
	        this._updateLayout(minPadding);
	        if (!animsDisabled) {
	            each(newControllers, (controller)=>{
	                controller.reset();
	            });
	        }
	        this._updateDatasets(mode);
	        this.notifyPlugins('afterUpdate', {
	            mode
	        });
	        this._layers.sort(compare2Level('z', '_idx'));
	        const { _active , _lastEvent  } = this;
	        if (_lastEvent) {
	            this._eventHandler(_lastEvent, true);
	        } else if (_active.length) {
	            this._updateHoverStyles(_active, _active, true);
	        }
	        this.render();
	    }
	 _updateScales() {
	        each(this.scales, (scale)=>{
	            layouts.removeBox(this, scale);
	        });
	        this.ensureScalesHaveIDs();
	        this.buildOrUpdateScales();
	    }
	 _checkEventBindings() {
	        const options = this.options;
	        const existingEvents = new Set(Object.keys(this._listeners));
	        const newEvents = new Set(options.events);
	        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {
	            this.unbindEvents();
	            this.bindEvents();
	        }
	    }
	 _updateHiddenIndices() {
	        const { _hiddenIndices  } = this;
	        const changes = this._getUniformDataChanges() || [];
	        for (const { method , start , count  } of changes){
	            const move = method === '_removeElements' ? -count : count;
	            moveNumericKeys(_hiddenIndices, start, move);
	        }
	    }
	 _getUniformDataChanges() {
	        const _dataChanges = this._dataChanges;
	        if (!_dataChanges || !_dataChanges.length) {
	            return;
	        }
	        this._dataChanges = [];
	        const datasetCount = this.data.datasets.length;
	        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));
	        const changeSet = makeSet(0);
	        for(let i = 1; i < datasetCount; i++){
	            if (!setsEqual(changeSet, makeSet(i))) {
	                return;
	            }
	        }
	        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({
	                method: a[1],
	                start: +a[2],
	                count: +a[3]
	            }));
	    }
	 _updateLayout(minPadding) {
	        if (this.notifyPlugins('beforeLayout', {
	            cancelable: true
	        }) === false) {
	            return;
	        }
	        layouts.update(this, this.width, this.height, minPadding);
	        const area = this.chartArea;
	        const noArea = area.width <= 0 || area.height <= 0;
	        this._layers = [];
	        each(this.boxes, (box)=>{
	            if (noArea && box.position === 'chartArea') {
	                return;
	            }
	            if (box.configure) {
	                box.configure();
	            }
	            this._layers.push(...box._layers());
	        }, this);
	        this._layers.forEach((item, index)=>{
	            item._idx = index;
	        });
	        this.notifyPlugins('afterLayout');
	    }
	 _updateDatasets(mode) {
	        if (this.notifyPlugins('beforeDatasetsUpdate', {
	            mode,
	            cancelable: true
	        }) === false) {
	            return;
	        }
	        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){
	            this.getDatasetMeta(i).controller.configure();
	        }
	        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){
	            this._updateDataset(i, isFunction(mode) ? mode({
	                datasetIndex: i
	            }) : mode);
	        }
	        this.notifyPlugins('afterDatasetsUpdate', {
	            mode
	        });
	    }
	 _updateDataset(index, mode) {
	        const meta = this.getDatasetMeta(index);
	        const args = {
	            meta,
	            index,
	            mode,
	            cancelable: true
	        };
	        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {
	            return;
	        }
	        meta.controller._update(mode);
	        args.cancelable = false;
	        this.notifyPlugins('afterDatasetUpdate', args);
	    }
	    render() {
	        if (this.notifyPlugins('beforeRender', {
	            cancelable: true
	        }) === false) {
	            return;
	        }
	        if (animator.has(this)) {
	            if (this.attached && !animator.running(this)) {
	                animator.start(this);
	            }
	        } else {
	            this.draw();
	            onAnimationsComplete({
	                chart: this
	            });
	        }
	    }
	    draw() {
	        let i;
	        if (this._resizeBeforeDraw) {
	            const { width , height  } = this._resizeBeforeDraw;
	            this._resize(width, height);
	            this._resizeBeforeDraw = null;
	        }
	        this.clear();
	        if (this.width <= 0 || this.height <= 0) {
	            return;
	        }
	        if (this.notifyPlugins('beforeDraw', {
	            cancelable: true
	        }) === false) {
	            return;
	        }
	        const layers = this._layers;
	        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){
	            layers[i].draw(this.chartArea);
	        }
	        this._drawDatasets();
	        for(; i < layers.length; ++i){
	            layers[i].draw(this.chartArea);
	        }
	        this.notifyPlugins('afterDraw');
	    }
	 _getSortedDatasetMetas(filterVisible) {
	        const metasets = this._sortedMetasets;
	        const result = [];
	        let i, ilen;
	        for(i = 0, ilen = metasets.length; i < ilen; ++i){
	            const meta = metasets[i];
	            if (!filterVisible || meta.visible) {
	                result.push(meta);
	            }
	        }
	        return result;
	    }
	 getSortedVisibleDatasetMetas() {
	        return this._getSortedDatasetMetas(true);
	    }
	 _drawDatasets() {
	        if (this.notifyPlugins('beforeDatasetsDraw', {
	            cancelable: true
	        }) === false) {
	            return;
	        }
	        const metasets = this.getSortedVisibleDatasetMetas();
	        for(let i = metasets.length - 1; i >= 0; --i){
	            this._drawDataset(metasets[i]);
	        }
	        this.notifyPlugins('afterDatasetsDraw');
	    }
	 _drawDataset(meta) {
	        const ctx = this.ctx;
	        const clip = meta._clip;
	        const useClip = !clip.disabled;
	        const area = getDatasetArea(meta, this.chartArea);
	        const args = {
	            meta,
	            index: meta.index,
	            cancelable: true
	        };
	        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {
	            return;
	        }
	        if (useClip) {
	            clipArea(ctx, {
	                left: clip.left === false ? 0 : area.left - clip.left,
	                right: clip.right === false ? this.width : area.right + clip.right,
	                top: clip.top === false ? 0 : area.top - clip.top,
	                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom
	            });
	        }
	        meta.controller.draw();
	        if (useClip) {
	            unclipArea(ctx);
	        }
	        args.cancelable = false;
	        this.notifyPlugins('afterDatasetDraw', args);
	    }
	 isPointInArea(point) {
	        return _isPointInArea(point, this.chartArea, this._minPadding);
	    }
	    getElementsAtEventForMode(e, mode, options, useFinalPosition) {
	        const method = Interaction.modes[mode];
	        if (typeof method === 'function') {
	            return method(this, e, options, useFinalPosition);
	        }
	        return [];
	    }
	    getDatasetMeta(datasetIndex) {
	        const dataset = this.data.datasets[datasetIndex];
	        const metasets = this._metasets;
	        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();
	        if (!meta) {
	            meta = {
	                type: null,
	                data: [],
	                dataset: null,
	                controller: null,
	                hidden: null,
	                xAxisID: null,
	                yAxisID: null,
	                order: dataset && dataset.order || 0,
	                index: datasetIndex,
	                _dataset: dataset,
	                _parsed: [],
	                _sorted: false
	            };
	            metasets.push(meta);
	        }
	        return meta;
	    }
	    getContext() {
	        return this.$context || (this.$context = createContext(null, {
	            chart: this,
	            type: 'chart'
	        }));
	    }
	    getVisibleDatasetCount() {
	        return this.getSortedVisibleDatasetMetas().length;
	    }
	    isDatasetVisible(datasetIndex) {
	        const dataset = this.data.datasets[datasetIndex];
	        if (!dataset) {
	            return false;
	        }
	        const meta = this.getDatasetMeta(datasetIndex);
	        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;
	    }
	    setDatasetVisibility(datasetIndex, visible) {
	        const meta = this.getDatasetMeta(datasetIndex);
	        meta.hidden = !visible;
	    }
	    toggleDataVisibility(index) {
	        this._hiddenIndices[index] = !this._hiddenIndices[index];
	    }
	    getDataVisibility(index) {
	        return !this._hiddenIndices[index];
	    }
	 _updateVisibility(datasetIndex, dataIndex, visible) {
	        const mode = visible ? 'show' : 'hide';
	        const meta = this.getDatasetMeta(datasetIndex);
	        const anims = meta.controller._resolveAnimations(undefined, mode);
	        if (defined(dataIndex)) {
	            meta.data[dataIndex].hidden = !visible;
	            this.update();
	        } else {
	            this.setDatasetVisibility(datasetIndex, visible);
	            anims.update(meta, {
	                visible
	            });
	            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);
	        }
	    }
	    hide(datasetIndex, dataIndex) {
	        this._updateVisibility(datasetIndex, dataIndex, false);
	    }
	    show(datasetIndex, dataIndex) {
	        this._updateVisibility(datasetIndex, dataIndex, true);
	    }
	 _destroyDatasetMeta(datasetIndex) {
	        const meta = this._metasets[datasetIndex];
	        if (meta && meta.controller) {
	            meta.controller._destroy();
	        }
	        delete this._metasets[datasetIndex];
	    }
	    _stop() {
	        let i, ilen;
	        this.stop();
	        animator.remove(this);
	        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){
	            this._destroyDatasetMeta(i);
	        }
	    }
	    destroy() {
	        this.notifyPlugins('beforeDestroy');
	        const { canvas , ctx  } = this;
	        this._stop();
	        this.config.clearCache();
	        if (canvas) {
	            this.unbindEvents();
	            clearCanvas(canvas, ctx);
	            this.platform.releaseContext(ctx);
	            this.canvas = null;
	            this.ctx = null;
	        }
	        delete instances[this.id];
	        this.notifyPlugins('afterDestroy');
	    }
	    toBase64Image(...args) {
	        return this.canvas.toDataURL(...args);
	    }
	 bindEvents() {
	        this.bindUserEvents();
	        if (this.options.responsive) {
	            this.bindResponsiveEvents();
	        } else {
	            this.attached = true;
	        }
	    }
	 bindUserEvents() {
	        const listeners = this._listeners;
	        const platform = this.platform;
	        const _add = (type, listener)=>{
	            platform.addEventListener(this, type, listener);
	            listeners[type] = listener;
	        };
	        const listener = (e, x, y)=>{
	            e.offsetX = x;
	            e.offsetY = y;
	            this._eventHandler(e);
	        };
	        each(this.options.events, (type)=>_add(type, listener));
	    }
	 bindResponsiveEvents() {
	        if (!this._responsiveListeners) {
	            this._responsiveListeners = {};
	        }
	        const listeners = this._responsiveListeners;
	        const platform = this.platform;
	        const _add = (type, listener)=>{
	            platform.addEventListener(this, type, listener);
	            listeners[type] = listener;
	        };
	        const _remove = (type, listener)=>{
	            if (listeners[type]) {
	                platform.removeEventListener(this, type, listener);
	                delete listeners[type];
	            }
	        };
	        const listener = (width, height)=>{
	            if (this.canvas) {
	                this.resize(width, height);
	            }
	        };
	        let detached;
	        const attached = ()=>{
	            _remove('attach', attached);
	            this.attached = true;
	            this.resize();
	            _add('resize', listener);
	            _add('detach', detached);
	        };
	        detached = ()=>{
	            this.attached = false;
	            _remove('resize', listener);
	            this._stop();
	            this._resize(0, 0);
	            _add('attach', attached);
	        };
	        if (platform.isAttached(this.canvas)) {
	            attached();
	        } else {
	            detached();
	        }
	    }
	 unbindEvents() {
	        each(this._listeners, (listener, type)=>{
	            this.platform.removeEventListener(this, type, listener);
	        });
	        this._listeners = {};
	        each(this._responsiveListeners, (listener, type)=>{
	            this.platform.removeEventListener(this, type, listener);
	        });
	        this._responsiveListeners = undefined;
	    }
	    updateHoverStyle(items, mode, enabled) {
	        const prefix = enabled ? 'set' : 'remove';
	        let meta, item, i, ilen;
	        if (mode === 'dataset') {
	            meta = this.getDatasetMeta(items[0].datasetIndex);
	            meta.controller['_' + prefix + 'DatasetHoverStyle']();
	        }
	        for(i = 0, ilen = items.length; i < ilen; ++i){
	            item = items[i];
	            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
	            if (controller) {
	                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);
	            }
	        }
	    }
	 getActiveElements() {
	        return this._active || [];
	    }
	 setActiveElements(activeElements) {
	        const lastActive = this._active || [];
	        const active = activeElements.map(({ datasetIndex , index  })=>{
	            const meta = this.getDatasetMeta(datasetIndex);
	            if (!meta) {
	                throw new Error('No dataset found at index ' + datasetIndex);
	            }
	            return {
	                datasetIndex,
	                element: meta.data[index],
	                index
	            };
	        });
	        const changed = !_elementsEqual(active, lastActive);
	        if (changed) {
	            this._active = active;
	            this._lastEvent = null;
	            this._updateHoverStyles(active, lastActive);
	        }
	    }
	 notifyPlugins(hook, args, filter) {
	        return this._plugins.notify(this, hook, args, filter);
	    }
	 isPluginEnabled(pluginId) {
	        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;
	    }
	 _updateHoverStyles(active, lastActive, replay) {
	        const hoverOptions = this.options.hover;
	        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));
	        const deactivated = diff(lastActive, active);
	        const activated = replay ? active : diff(active, lastActive);
	        if (deactivated.length) {
	            this.updateHoverStyle(deactivated, hoverOptions.mode, false);
	        }
	        if (activated.length && hoverOptions.mode) {
	            this.updateHoverStyle(activated, hoverOptions.mode, true);
	        }
	    }
	 _eventHandler(e, replay) {
	        const args = {
	            event: e,
	            replay,
	            cancelable: true,
	            inChartArea: this.isPointInArea(e)
	        };
	        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);
	        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {
	            return;
	        }
	        const changed = this._handleEvent(e, replay, args.inChartArea);
	        args.cancelable = false;
	        this.notifyPlugins('afterEvent', args, eventFilter);
	        if (changed || args.changed) {
	            this.render();
	        }
	        return this;
	    }
	 _handleEvent(e, replay, inChartArea) {
	        const { _active: lastActive = [] , options  } = this;
	        const useFinalPosition = replay;
	        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);
	        const isClick = _isClickEvent(e);
	        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);
	        if (inChartArea) {
	            this._lastEvent = null;
	            callback(options.onHover, [
	                e,
	                active,
	                this
	            ], this);
	            if (isClick) {
	                callback(options.onClick, [
	                    e,
	                    active,
	                    this
	                ], this);
	            }
	        }
	        const changed = !_elementsEqual(active, lastActive);
	        if (changed || replay) {
	            this._active = active;
	            this._updateHoverStyles(active, lastActive, replay);
	        }
	        this._lastEvent = lastEvent;
	        return changed;
	    }
	 _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {
	        if (e.type === 'mouseout') {
	            return [];
	        }
	        if (!inChartArea) {
	            return lastActive;
	        }
	        const hoverOptions = this.options.hover;
	        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);
	    }
	};
	function invalidatePlugins() {
	    return each(Chart$1.instances, (chart)=>chart._plugins.invalidate());
	}

	function setStyle(ctx, options, style = options) {
	    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);
	    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));
	    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);
	    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);
	    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);
	    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);
	}
	function lineTo(ctx, previous, target) {
	    ctx.lineTo(target.x, target.y);
	}
	 function getLineMethod(options) {
	    if (options.stepped) {
	        return _steppedLineTo;
	    }
	    if (options.tension || options.cubicInterpolationMode === 'monotone') {
	        return _bezierCurveTo;
	    }
	    return lineTo;
	}
	function pathVars(points, segment, params = {}) {
	    const count = points.length;
	    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;
	    const { start: segmentStart , end: segmentEnd  } = segment;
	    const start = Math.max(paramsStart, segmentStart);
	    const end = Math.min(paramsEnd, segmentEnd);
	    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
	    return {
	        count,
	        start,
	        loop: segment.loop,
	        ilen: end < start && !outside ? count + end - start : end - start
	    };
	}
	 function pathSegment(ctx, line, segment, params) {
	    const { points , options  } = line;
	    const { count , start , loop , ilen  } = pathVars(points, segment, params);
	    const lineMethod = getLineMethod(options);
	    let { move =true , reverse  } = params || {};
	    let i, point, prev;
	    for(i = 0; i <= ilen; ++i){
	        point = points[(start + (reverse ? ilen - i : i)) % count];
	        if (point.skip) {
	            continue;
	        } else if (move) {
	            ctx.moveTo(point.x, point.y);
	            move = false;
	        } else {
	            lineMethod(ctx, prev, point, reverse, options.stepped);
	        }
	        prev = point;
	    }
	    if (loop) {
	        point = points[(start + (reverse ? ilen : 0)) % count];
	        lineMethod(ctx, prev, point, reverse, options.stepped);
	    }
	    return !!loop;
	}
	 function fastPathSegment(ctx, line, segment, params) {
	    const points = line.points;
	    const { count , start , ilen  } = pathVars(points, segment, params);
	    const { move =true , reverse  } = params || {};
	    let avgX = 0;
	    let countX = 0;
	    let i, point, prevX, minY, maxY, lastY;
	    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;
	    const drawX = ()=>{
	        if (minY !== maxY) {
	            ctx.lineTo(avgX, maxY);
	            ctx.lineTo(avgX, minY);
	            ctx.lineTo(avgX, lastY);
	        }
	    };
	    if (move) {
	        point = points[pointIndex(0)];
	        ctx.moveTo(point.x, point.y);
	    }
	    for(i = 0; i <= ilen; ++i){
	        point = points[pointIndex(i)];
	        if (point.skip) {
	            continue;
	        }
	        const x = point.x;
	        const y = point.y;
	        const truncX = x | 0;
	        if (truncX === prevX) {
	            if (y < minY) {
	                minY = y;
	            } else if (y > maxY) {
	                maxY = y;
	            }
	            avgX = (countX * avgX + x) / ++countX;
	        } else {
	            drawX();
	            ctx.lineTo(x, y);
	            prevX = truncX;
	            countX = 0;
	            minY = maxY = y;
	        }
	        lastY = y;
	    }
	    drawX();
	}
	 function _getSegmentMethod(line) {
	    const opts = line.options;
	    const borderDash = opts.borderDash && opts.borderDash.length;
	    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;
	    return useFastPath ? fastPathSegment : pathSegment;
	}
	 function _getInterpolationMethod(options) {
	    if (options.stepped) {
	        return _steppedInterpolation;
	    }
	    if (options.tension || options.cubicInterpolationMode === 'monotone') {
	        return _bezierInterpolation;
	    }
	    return _pointInLine;
	}
	function strokePathWithCache(ctx, line, start, count) {
	    let path = line._path;
	    if (!path) {
	        path = line._path = new Path2D();
	        if (line.path(path, start, count)) {
	            path.closePath();
	        }
	    }
	    setStyle(ctx, line.options);
	    ctx.stroke(path);
	}
	function strokePathDirect(ctx, line, start, count) {
	    const { segments , options  } = line;
	    const segmentMethod = _getSegmentMethod(line);
	    for (const segment of segments){
	        setStyle(ctx, options, segment.style);
	        ctx.beginPath();
	        if (segmentMethod(ctx, line, segment, {
	            start,
	            end: start + count - 1
	        })) {
	            ctx.closePath();
	        }
	        ctx.stroke();
	    }
	}
	const usePath2D = typeof Path2D === 'function';
	function draw(ctx, line, start, count) {
	    if (usePath2D && !line.options.segment) {
	        strokePathWithCache(ctx, line, start, count);
	    } else {
	        strokePathDirect(ctx, line, start, count);
	    }
	}
	class LineElement extends Element$1 {
	    static id = 'line';
	 static defaults = {
	        borderCapStyle: 'butt',
	        borderDash: [],
	        borderDashOffset: 0,
	        borderJoinStyle: 'miter',
	        borderWidth: 3,
	        capBezierPoints: true,
	        cubicInterpolationMode: 'default',
	        fill: false,
	        spanGaps: false,
	        stepped: false,
	        tension: 0
	    };
	 static defaultRoutes = {
	        backgroundColor: 'backgroundColor',
	        borderColor: 'borderColor'
	    };
	    static descriptors = {
	        _scriptable: true,
	        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'
	    };
	    constructor(cfg){
	        super();
	        this.animated = true;
	        this.options = undefined;
	        this._chart = undefined;
	        this._loop = undefined;
	        this._fullLoop = undefined;
	        this._path = undefined;
	        this._points = undefined;
	        this._segments = undefined;
	        this._decimated = false;
	        this._pointsUpdated = false;
	        this._datasetIndex = undefined;
	        if (cfg) {
	            Object.assign(this, cfg);
	        }
	    }
	    updateControlPoints(chartArea, indexAxis) {
	        const options = this.options;
	        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {
	            const loop = options.spanGaps ? this._loop : this._fullLoop;
	            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);
	            this._pointsUpdated = true;
	        }
	    }
	    set points(points) {
	        this._points = points;
	        delete this._segments;
	        delete this._path;
	        this._pointsUpdated = false;
	    }
	    get points() {
	        return this._points;
	    }
	    get segments() {
	        return this._segments || (this._segments = _computeSegments(this, this.options.segment));
	    }
	 first() {
	        const segments = this.segments;
	        const points = this.points;
	        return segments.length && points[segments[0].start];
	    }
	 last() {
	        const segments = this.segments;
	        const points = this.points;
	        const count = segments.length;
	        return count && points[segments[count - 1].end];
	    }
	 interpolate(point, property) {
	        const options = this.options;
	        const value = point[property];
	        const points = this.points;
	        const segments = _boundSegments(this, {
	            property,
	            start: value,
	            end: value
	        });
	        if (!segments.length) {
	            return;
	        }
	        const result = [];
	        const _interpolate = _getInterpolationMethod(options);
	        let i, ilen;
	        for(i = 0, ilen = segments.length; i < ilen; ++i){
	            const { start , end  } = segments[i];
	            const p1 = points[start];
	            const p2 = points[end];
	            if (p1 === p2) {
	                result.push(p1);
	                continue;
	            }
	            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
	            const interpolated = _interpolate(p1, p2, t, options.stepped);
	            interpolated[property] = point[property];
	            result.push(interpolated);
	        }
	        return result.length === 1 ? result[0] : result;
	    }
	 pathSegment(ctx, segment, params) {
	        const segmentMethod = _getSegmentMethod(this);
	        return segmentMethod(ctx, this, segment, params);
	    }
	 path(ctx, start, count) {
	        const segments = this.segments;
	        const segmentMethod = _getSegmentMethod(this);
	        let loop = this._loop;
	        start = start || 0;
	        count = count || this.points.length - start;
	        for (const segment of segments){
	            loop &= segmentMethod(ctx, this, segment, {
	                start,
	                end: start + count - 1
	            });
	        }
	        return !!loop;
	    }
	 draw(ctx, chartArea, start, count) {
	        const options = this.options || {};
	        const points = this.points || [];
	        if (points.length && options.borderWidth) {
	            ctx.save();
	            draw(ctx, this, start, count);
	            ctx.restore();
	        }
	        if (this.animated) {
	            this._pointsUpdated = false;
	            this._path = undefined;
	        }
	    }
	}

	function inRange$1(el, pos, axis, useFinalPosition) {
	    const options = el.options;
	    const { [axis]: value  } = el.getProps([
	        axis
	    ], useFinalPosition);
	    return Math.abs(pos - value) < options.radius + options.hitRadius;
	}
	class PointElement extends Element$1 {
	    static id = 'point';
	    parsed;
	    skip;
	    stop;
	    /**
	   * @type {any}
	   */ static defaults = {
	        borderWidth: 1,
	        hitRadius: 1,
	        hoverBorderWidth: 1,
	        hoverRadius: 4,
	        pointStyle: 'circle',
	        radius: 3,
	        rotation: 0
	    };
	    /**
	   * @type {any}
	   */ static defaultRoutes = {
	        backgroundColor: 'backgroundColor',
	        borderColor: 'borderColor'
	    };
	    constructor(cfg){
	        super();
	        this.options = undefined;
	        this.parsed = undefined;
	        this.skip = undefined;
	        this.stop = undefined;
	        if (cfg) {
	            Object.assign(this, cfg);
	        }
	    }
	    inRange(mouseX, mouseY, useFinalPosition) {
	        const options = this.options;
	        const { x , y  } = this.getProps([
	            'x',
	            'y'
	        ], useFinalPosition);
	        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);
	    }
	    inXRange(mouseX, useFinalPosition) {
	        return inRange$1(this, mouseX, 'x', useFinalPosition);
	    }
	    inYRange(mouseY, useFinalPosition) {
	        return inRange$1(this, mouseY, 'y', useFinalPosition);
	    }
	    getCenterPoint(useFinalPosition) {
	        const { x , y  } = this.getProps([
	            'x',
	            'y'
	        ], useFinalPosition);
	        return {
	            x,
	            y
	        };
	    }
	    size(options) {
	        options = options || this.options || {};
	        let radius = options.radius || 0;
	        radius = Math.max(radius, radius && options.hoverRadius || 0);
	        const borderWidth = radius && options.borderWidth || 0;
	        return (radius + borderWidth) * 2;
	    }
	    draw(ctx, area) {
	        const options = this.options;
	        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {
	            return;
	        }
	        ctx.strokeStyle = options.borderColor;
	        ctx.lineWidth = options.borderWidth;
	        ctx.fillStyle = options.backgroundColor;
	        drawPoint(ctx, options, this.x, this.y);
	    }
	    getRange() {
	        const options = this.options || {};
	        // @ts-expect-error Fallbacks should never be hit in practice
	        return options.radius + options.hitRadius;
	    }
	}

	const getBoxSize = (labelOpts, fontSize)=>{
	    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;
	    if (labelOpts.usePointStyle) {
	        boxHeight = Math.min(boxHeight, fontSize);
	        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);
	    }
	    return {
	        boxWidth,
	        boxHeight,
	        itemHeight: Math.max(fontSize, boxHeight)
	    };
	};
	const itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;
	class Legend extends Element$1 {
	 constructor(config){
	        super();
	        this._added = false;
	        this.legendHitBoxes = [];
	 this._hoveredItem = null;
	        this.doughnutMode = false;
	        this.chart = config.chart;
	        this.options = config.options;
	        this.ctx = config.ctx;
	        this.legendItems = undefined;
	        this.columnSizes = undefined;
	        this.lineWidths = undefined;
	        this.maxHeight = undefined;
	        this.maxWidth = undefined;
	        this.top = undefined;
	        this.bottom = undefined;
	        this.left = undefined;
	        this.right = undefined;
	        this.height = undefined;
	        this.width = undefined;
	        this._margins = undefined;
	        this.position = undefined;
	        this.weight = undefined;
	        this.fullSize = undefined;
	    }
	    update(maxWidth, maxHeight, margins) {
	        this.maxWidth = maxWidth;
	        this.maxHeight = maxHeight;
	        this._margins = margins;
	        this.setDimensions();
	        this.buildLabels();
	        this.fit();
	    }
	    setDimensions() {
	        if (this.isHorizontal()) {
	            this.width = this.maxWidth;
	            this.left = this._margins.left;
	            this.right = this.width;
	        } else {
	            this.height = this.maxHeight;
	            this.top = this._margins.top;
	            this.bottom = this.height;
	        }
	    }
	    buildLabels() {
	        const labelOpts = this.options.labels || {};
	        let legendItems = callback(labelOpts.generateLabels, [
	            this.chart
	        ], this) || [];
	        if (labelOpts.filter) {
	            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));
	        }
	        if (labelOpts.sort) {
	            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));
	        }
	        if (this.options.reverse) {
	            legendItems.reverse();
	        }
	        this.legendItems = legendItems;
	    }
	    fit() {
	        const { options , ctx  } = this;
	        if (!options.display) {
	            this.width = this.height = 0;
	            return;
	        }
	        const labelOpts = options.labels;
	        const labelFont = toFont(labelOpts.font);
	        const fontSize = labelFont.size;
	        const titleHeight = this._computeTitleHeight();
	        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);
	        let width, height;
	        ctx.font = labelFont.string;
	        if (this.isHorizontal()) {
	            width = this.maxWidth;
	            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
	        } else {
	            height = this.maxHeight;
	            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;
	        }
	        this.width = Math.min(width, options.maxWidth || this.maxWidth);
	        this.height = Math.min(height, options.maxHeight || this.maxHeight);
	    }
	 _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
	        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;
	        const hitboxes = this.legendHitBoxes = [];
	        const lineWidths = this.lineWidths = [
	            0
	        ];
	        const lineHeight = itemHeight + padding;
	        let totalHeight = titleHeight;
	        ctx.textAlign = 'left';
	        ctx.textBaseline = 'middle';
	        let row = -1;
	        let top = -lineHeight;
	        this.legendItems.forEach((legendItem, i)=>{
	            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
	            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
	                totalHeight += lineHeight;
	                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
	                top += lineHeight;
	                row++;
	            }
	            hitboxes[i] = {
	                left: 0,
	                top,
	                row,
	                width: itemWidth,
	                height: itemHeight
	            };
	            lineWidths[lineWidths.length - 1] += itemWidth + padding;
	        });
	        return totalHeight;
	    }
	    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {
	        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;
	        const hitboxes = this.legendHitBoxes = [];
	        const columnSizes = this.columnSizes = [];
	        const heightLimit = maxHeight - titleHeight;
	        let totalWidth = padding;
	        let currentColWidth = 0;
	        let currentColHeight = 0;
	        let left = 0;
	        let col = 0;
	        this.legendItems.forEach((legendItem, i)=>{
	            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);
	            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
	                totalWidth += currentColWidth + padding;
	                columnSizes.push({
	                    width: currentColWidth,
	                    height: currentColHeight
	                });
	                left += currentColWidth + padding;
	                col++;
	                currentColWidth = currentColHeight = 0;
	            }
	            hitboxes[i] = {
	                left,
	                top: currentColHeight,
	                col,
	                width: itemWidth,
	                height: itemHeight
	            };
	            currentColWidth = Math.max(currentColWidth, itemWidth);
	            currentColHeight += itemHeight + padding;
	        });
	        totalWidth += currentColWidth;
	        columnSizes.push({
	            width: currentColWidth,
	            height: currentColHeight
	        });
	        return totalWidth;
	    }
	    adjustHitBoxes() {
	        if (!this.options.display) {
	            return;
	        }
	        const titleHeight = this._computeTitleHeight();
	        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;
	        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);
	        if (this.isHorizontal()) {
	            let row = 0;
	            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
	            for (const hitbox of hitboxes){
	                if (row !== hitbox.row) {
	                    row = hitbox.row;
	                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
	                }
	                hitbox.top += this.top + titleHeight + padding;
	                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
	                left += hitbox.width + padding;
	            }
	        } else {
	            let col = 0;
	            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
	            for (const hitbox of hitboxes){
	                if (hitbox.col !== col) {
	                    col = hitbox.col;
	                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
	                }
	                hitbox.top = top;
	                hitbox.left += this.left + padding;
	                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
	                top += hitbox.height + padding;
	            }
	        }
	    }
	    isHorizontal() {
	        return this.options.position === 'top' || this.options.position === 'bottom';
	    }
	    draw() {
	        if (this.options.display) {
	            const ctx = this.ctx;
	            clipArea(ctx, this);
	            this._draw();
	            unclipArea(ctx);
	        }
	    }
	 _draw() {
	        const { options: opts , columnSizes , lineWidths , ctx  } = this;
	        const { align , labels: labelOpts  } = opts;
	        const defaultColor = defaults.color;
	        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
	        const labelFont = toFont(labelOpts.font);
	        const { padding  } = labelOpts;
	        const fontSize = labelFont.size;
	        const halfFontSize = fontSize / 2;
	        let cursor;
	        this.drawTitle();
	        ctx.textAlign = rtlHelper.textAlign('left');
	        ctx.textBaseline = 'middle';
	        ctx.lineWidth = 0.5;
	        ctx.font = labelFont.string;
	        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);
	        const drawLegendBox = function(x, y, legendItem) {
	            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {
	                return;
	            }
	            ctx.save();
	            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);
	            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);
	            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');
	            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);
	            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');
	            ctx.lineWidth = lineWidth;
	            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);
	            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));
	            if (labelOpts.usePointStyle) {
	                const drawOptions = {
	                    radius: boxHeight * Math.SQRT2 / 2,
	                    pointStyle: legendItem.pointStyle,
	                    rotation: legendItem.rotation,
	                    borderWidth: lineWidth
	                };
	                const centerX = rtlHelper.xPlus(x, boxWidth / 2);
	                const centerY = y + halfFontSize;
	                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);
	            } else {
	                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);
	                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);
	                const borderRadius = toTRBLCorners(legendItem.borderRadius);
	                ctx.beginPath();
	                if (Object.values(borderRadius).some((v)=>v !== 0)) {
	                    addRoundedRectPath(ctx, {
	                        x: xBoxLeft,
	                        y: yBoxTop,
	                        w: boxWidth,
	                        h: boxHeight,
	                        radius: borderRadius
	                    });
	                } else {
	                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
	                }
	                ctx.fill();
	                if (lineWidth !== 0) {
	                    ctx.stroke();
	                }
	            }
	            ctx.restore();
	        };
	        const fillText = function(x, y, legendItem) {
	            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {
	                strikethrough: legendItem.hidden,
	                textAlign: rtlHelper.textAlign(legendItem.textAlign)
	            });
	        };
	        const isHorizontal = this.isHorizontal();
	        const titleHeight = this._computeTitleHeight();
	        if (isHorizontal) {
	            cursor = {
	                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),
	                y: this.top + padding + titleHeight,
	                line: 0
	            };
	        } else {
	            cursor = {
	                x: this.left + padding,
	                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
	                line: 0
	            };
	        }
	        overrideTextDirection(this.ctx, opts.textDirection);
	        const lineHeight = itemHeight + padding;
	        this.legendItems.forEach((legendItem, i)=>{
	            ctx.strokeStyle = legendItem.fontColor;
	            ctx.fillStyle = legendItem.fontColor;
	            const textWidth = ctx.measureText(legendItem.text).width;
	            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
	            const width = boxWidth + halfFontSize + textWidth;
	            let x = cursor.x;
	            let y = cursor.y;
	            rtlHelper.setWidth(this.width);
	            if (isHorizontal) {
	                if (i > 0 && x + width + padding > this.right) {
	                    y = cursor.y += lineHeight;
	                    cursor.line++;
	                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);
	                }
	            } else if (i > 0 && y + lineHeight > this.bottom) {
	                x = cursor.x = x + columnSizes[cursor.line].width + padding;
	                cursor.line++;
	                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);
	            }
	            const realX = rtlHelper.x(x);
	            drawLegendBox(realX, y, legendItem);
	            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);
	            fillText(rtlHelper.x(x), y, legendItem);
	            if (isHorizontal) {
	                cursor.x += width + padding;
	            } else if (typeof legendItem.text !== 'string') {
	                const fontLineHeight = labelFont.lineHeight;
	                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;
	            } else {
	                cursor.y += lineHeight;
	            }
	        });
	        restoreTextDirection(this.ctx, opts.textDirection);
	    }
	 drawTitle() {
	        const opts = this.options;
	        const titleOpts = opts.title;
	        const titleFont = toFont(titleOpts.font);
	        const titlePadding = toPadding(titleOpts.padding);
	        if (!titleOpts.display) {
	            return;
	        }
	        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
	        const ctx = this.ctx;
	        const position = titleOpts.position;
	        const halfFontSize = titleFont.size / 2;
	        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
	        let y;
	        let left = this.left;
	        let maxWidth = this.width;
	        if (this.isHorizontal()) {
	            maxWidth = Math.max(...this.lineWidths);
	            y = this.top + topPaddingPlusHalfFontSize;
	            left = _alignStartEnd(opts.align, left, this.right - maxWidth);
	        } else {
	            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);
	            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
	        }
	        const x = _alignStartEnd(position, left, left + maxWidth);
	        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));
	        ctx.textBaseline = 'middle';
	        ctx.strokeStyle = titleOpts.color;
	        ctx.fillStyle = titleOpts.color;
	        ctx.font = titleFont.string;
	        renderText(ctx, titleOpts.text, x, y, titleFont);
	    }
	 _computeTitleHeight() {
	        const titleOpts = this.options.title;
	        const titleFont = toFont(titleOpts.font);
	        const titlePadding = toPadding(titleOpts.padding);
	        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
	    }
	 _getLegendItemAt(x, y) {
	        let i, hitBox, lh;
	        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {
	            lh = this.legendHitBoxes;
	            for(i = 0; i < lh.length; ++i){
	                hitBox = lh[i];
	                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {
	                    return this.legendItems[i];
	                }
	            }
	        }
	        return null;
	    }
	 handleEvent(e) {
	        const opts = this.options;
	        if (!isListened(e.type, opts)) {
	            return;
	        }
	        const hoveredItem = this._getLegendItemAt(e.x, e.y);
	        if (e.type === 'mousemove' || e.type === 'mouseout') {
	            const previous = this._hoveredItem;
	            const sameItem = itemsEqual(previous, hoveredItem);
	            if (previous && !sameItem) {
	                callback(opts.onLeave, [
	                    e,
	                    previous,
	                    this
	                ], this);
	            }
	            this._hoveredItem = hoveredItem;
	            if (hoveredItem && !sameItem) {
	                callback(opts.onHover, [
	                    e,
	                    hoveredItem,
	                    this
	                ], this);
	            }
	        } else if (hoveredItem) {
	            callback(opts.onClick, [
	                e,
	                hoveredItem,
	                this
	            ], this);
	        }
	    }
	}
	function calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {
	    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);
	    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);
	    return {
	        itemWidth,
	        itemHeight
	    };
	}
	function calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {
	    let legendItemText = legendItem.text;
	    if (legendItemText && typeof legendItemText !== 'string') {
	        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);
	    }
	    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;
	}
	function calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {
	    let itemHeight = _itemHeight;
	    if (typeof legendItem.text !== 'string') {
	        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);
	    }
	    return itemHeight;
	}
	function calculateLegendItemHeight(legendItem, fontLineHeight) {
	    const labelHeight = legendItem.text ? legendItem.text.length : 0;
	    return fontLineHeight * labelHeight;
	}
	function isListened(type, opts) {
	    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {
	        return true;
	    }
	    if (opts.onClick && (type === 'click' || type === 'mouseup')) {
	        return true;
	    }
	    return false;
	}
	var plugin_legend = {
	    id: 'legend',
	 _element: Legend,
	    start (chart, _args, options) {
	        const legend = chart.legend = new Legend({
	            ctx: chart.ctx,
	            options,
	            chart
	        });
	        layouts.configure(chart, legend, options);
	        layouts.addBox(chart, legend);
	    },
	    stop (chart) {
	        layouts.removeBox(chart, chart.legend);
	        delete chart.legend;
	    },
	    beforeUpdate (chart, _args, options) {
	        const legend = chart.legend;
	        layouts.configure(chart, legend, options);
	        legend.options = options;
	    },
	    afterUpdate (chart) {
	        const legend = chart.legend;
	        legend.buildLabels();
	        legend.adjustHitBoxes();
	    },
	    afterEvent (chart, args) {
	        if (!args.replay) {
	            chart.legend.handleEvent(args.event);
	        }
	    },
	    defaults: {
	        display: true,
	        position: 'top',
	        align: 'center',
	        fullSize: true,
	        reverse: false,
	        weight: 1000,
	        onClick (e, legendItem, legend) {
	            const index = legendItem.datasetIndex;
	            const ci = legend.chart;
	            if (ci.isDatasetVisible(index)) {
	                ci.hide(index);
	                legendItem.hidden = true;
	            } else {
	                ci.show(index);
	                legendItem.hidden = false;
	            }
	        },
	        onHover: null,
	        onLeave: null,
	        labels: {
	            color: (ctx)=>ctx.chart.options.color,
	            boxWidth: 40,
	            padding: 10,
	            generateLabels (chart) {
	                const datasets = chart.data.datasets;
	                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;
	                return chart._getSortedDatasetMetas().map((meta)=>{
	                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);
	                    const borderWidth = toPadding(style.borderWidth);
	                    return {
	                        text: datasets[meta.index].label,
	                        fillStyle: style.backgroundColor,
	                        fontColor: color,
	                        hidden: !meta.visible,
	                        lineCap: style.borderCapStyle,
	                        lineDash: style.borderDash,
	                        lineDashOffset: style.borderDashOffset,
	                        lineJoin: style.borderJoinStyle,
	                        lineWidth: (borderWidth.width + borderWidth.height) / 4,
	                        strokeStyle: style.borderColor,
	                        pointStyle: pointStyle || style.pointStyle,
	                        rotation: style.rotation,
	                        textAlign: textAlign || style.textAlign,
	                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),
	                        datasetIndex: meta.index
	                    };
	                }, this);
	            }
	        },
	        title: {
	            color: (ctx)=>ctx.chart.options.color,
	            display: false,
	            position: 'center',
	            text: ''
	        }
	    },
	    descriptors: {
	        _scriptable: (name)=>!name.startsWith('on'),
	        labels: {
	            _scriptable: (name)=>![
	                    'generateLabels',
	                    'filter',
	                    'sort'
	                ].includes(name)
	        }
	    }
	};

	class Title extends Element$1 {
	 constructor(config){
	        super();
	        this.chart = config.chart;
	        this.options = config.options;
	        this.ctx = config.ctx;
	        this._padding = undefined;
	        this.top = undefined;
	        this.bottom = undefined;
	        this.left = undefined;
	        this.right = undefined;
	        this.width = undefined;
	        this.height = undefined;
	        this.position = undefined;
	        this.weight = undefined;
	        this.fullSize = undefined;
	    }
	    update(maxWidth, maxHeight) {
	        const opts = this.options;
	        this.left = 0;
	        this.top = 0;
	        if (!opts.display) {
	            this.width = this.height = this.right = this.bottom = 0;
	            return;
	        }
	        this.width = this.right = maxWidth;
	        this.height = this.bottom = maxHeight;
	        const lineCount = isArray(opts.text) ? opts.text.length : 1;
	        this._padding = toPadding(opts.padding);
	        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;
	        if (this.isHorizontal()) {
	            this.height = textSize;
	        } else {
	            this.width = textSize;
	        }
	    }
	    isHorizontal() {
	        const pos = this.options.position;
	        return pos === 'top' || pos === 'bottom';
	    }
	    _drawArgs(offset) {
	        const { top , left , bottom , right , options  } = this;
	        const align = options.align;
	        let rotation = 0;
	        let maxWidth, titleX, titleY;
	        if (this.isHorizontal()) {
	            titleX = _alignStartEnd(align, left, right);
	            titleY = top + offset;
	            maxWidth = right - left;
	        } else {
	            if (options.position === 'left') {
	                titleX = left + offset;
	                titleY = _alignStartEnd(align, bottom, top);
	                rotation = PI * -0.5;
	            } else {
	                titleX = right - offset;
	                titleY = _alignStartEnd(align, top, bottom);
	                rotation = PI * 0.5;
	            }
	            maxWidth = bottom - top;
	        }
	        return {
	            titleX,
	            titleY,
	            maxWidth,
	            rotation
	        };
	    }
	    draw() {
	        const ctx = this.ctx;
	        const opts = this.options;
	        if (!opts.display) {
	            return;
	        }
	        const fontOpts = toFont(opts.font);
	        const lineHeight = fontOpts.lineHeight;
	        const offset = lineHeight / 2 + this._padding.top;
	        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);
	        renderText(ctx, opts.text, 0, 0, fontOpts, {
	            color: opts.color,
	            maxWidth,
	            rotation,
	            textAlign: _toLeftRightCenter(opts.align),
	            textBaseline: 'middle',
	            translation: [
	                titleX,
	                titleY
	            ]
	        });
	    }
	}
	function createTitle(chart, titleOpts) {
	    const title = new Title({
	        ctx: chart.ctx,
	        options: titleOpts,
	        chart
	    });
	    layouts.configure(chart, title, titleOpts);
	    layouts.addBox(chart, title);
	    chart.titleBlock = title;
	}
	var plugin_title = {
	    id: 'title',
	 _element: Title,
	    start (chart, _args, options) {
	        createTitle(chart, options);
	    },
	    stop (chart) {
	        const titleBlock = chart.titleBlock;
	        layouts.removeBox(chart, titleBlock);
	        delete chart.titleBlock;
	    },
	    beforeUpdate (chart, _args, options) {
	        const title = chart.titleBlock;
	        layouts.configure(chart, title, options);
	        title.options = options;
	    },
	    defaults: {
	        align: 'center',
	        display: false,
	        font: {
	            weight: 'bold'
	        },
	        fullSize: true,
	        padding: 10,
	        position: 'top',
	        text: '',
	        weight: 2000
	    },
	    defaultRoutes: {
	        color: 'color'
	    },
	    descriptors: {
	        _scriptable: true,
	        _indexable: false
	    }
	};

	const positioners = {
	 average (items) {
	        if (!items.length) {
	            return false;
	        }
	        let i, len;
	        let x = 0;
	        let y = 0;
	        let count = 0;
	        for(i = 0, len = items.length; i < len; ++i){
	            const el = items[i].element;
	            if (el && el.hasValue()) {
	                const pos = el.tooltipPosition();
	                x += pos.x;
	                y += pos.y;
	                ++count;
	            }
	        }
	        return {
	            x: x / count,
	            y: y / count
	        };
	    },
	 nearest (items, eventPosition) {
	        if (!items.length) {
	            return false;
	        }
	        let x = eventPosition.x;
	        let y = eventPosition.y;
	        let minDistance = Number.POSITIVE_INFINITY;
	        let i, len, nearestElement;
	        for(i = 0, len = items.length; i < len; ++i){
	            const el = items[i].element;
	            if (el && el.hasValue()) {
	                const center = el.getCenterPoint();
	                const d = distanceBetweenPoints(eventPosition, center);
	                if (d < minDistance) {
	                    minDistance = d;
	                    nearestElement = el;
	                }
	            }
	        }
	        if (nearestElement) {
	            const tp = nearestElement.tooltipPosition();
	            x = tp.x;
	            y = tp.y;
	        }
	        return {
	            x,
	            y
	        };
	    }
	};
	function pushOrConcat(base, toPush) {
	    if (toPush) {
	        if (isArray(toPush)) {
	            Array.prototype.push.apply(base, toPush);
	        } else {
	            base.push(toPush);
	        }
	    }
	    return base;
	}
	 function splitNewlines(str) {
	    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
	        return str.split('\n');
	    }
	    return str;
	}
	 function createTooltipItem(chart, item) {
	    const { element , datasetIndex , index  } = item;
	    const controller = chart.getDatasetMeta(datasetIndex).controller;
	    const { label , value  } = controller.getLabelAndValue(index);
	    return {
	        chart,
	        label,
	        parsed: controller.getParsed(index),
	        raw: chart.data.datasets[datasetIndex].data[index],
	        formattedValue: value,
	        dataset: controller.getDataset(),
	        dataIndex: index,
	        datasetIndex,
	        element
	    };
	}
	 function getTooltipSize(tooltip, options) {
	    const ctx = tooltip.chart.ctx;
	    const { body , footer , title  } = tooltip;
	    const { boxWidth , boxHeight  } = options;
	    const bodyFont = toFont(options.bodyFont);
	    const titleFont = toFont(options.titleFont);
	    const footerFont = toFont(options.footerFont);
	    const titleLineCount = title.length;
	    const footerLineCount = footer.length;
	    const bodyLineItemCount = body.length;
	    const padding = toPadding(options.padding);
	    let height = padding.height;
	    let width = 0;
	    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
	    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
	    if (titleLineCount) {
	        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;
	    }
	    if (combinedBodyLength) {
	        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
	        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;
	    }
	    if (footerLineCount) {
	        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;
	    }
	    let widthPadding = 0;
	    const maxLineWidth = function(line) {
	        width = Math.max(width, ctx.measureText(line).width + widthPadding);
	    };
	    ctx.save();
	    ctx.font = titleFont.string;
	    each(tooltip.title, maxLineWidth);
	    ctx.font = bodyFont.string;
	    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
	    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;
	    each(body, (bodyItem)=>{
	        each(bodyItem.before, maxLineWidth);
	        each(bodyItem.lines, maxLineWidth);
	        each(bodyItem.after, maxLineWidth);
	    });
	    widthPadding = 0;
	    ctx.font = footerFont.string;
	    each(tooltip.footer, maxLineWidth);
	    ctx.restore();
	    width += padding.width;
	    return {
	        width,
	        height
	    };
	}
	function determineYAlign(chart, size) {
	    const { y , height  } = size;
	    if (y < height / 2) {
	        return 'top';
	    } else if (y > chart.height - height / 2) {
	        return 'bottom';
	    }
	    return 'center';
	}
	function doesNotFitWithAlign(xAlign, chart, options, size) {
	    const { x , width  } = size;
	    const caret = options.caretSize + options.caretPadding;
	    if (xAlign === 'left' && x + width + caret > chart.width) {
	        return true;
	    }
	    if (xAlign === 'right' && x - width - caret < 0) {
	        return true;
	    }
	}
	function determineXAlign(chart, options, size, yAlign) {
	    const { x , width  } = size;
	    const { width: chartWidth , chartArea: { left , right  }  } = chart;
	    let xAlign = 'center';
	    if (yAlign === 'center') {
	        xAlign = x <= (left + right) / 2 ? 'left' : 'right';
	    } else if (x <= width / 2) {
	        xAlign = 'left';
	    } else if (x >= chartWidth - width / 2) {
	        xAlign = 'right';
	    }
	    if (doesNotFitWithAlign(xAlign, chart, options, size)) {
	        xAlign = 'center';
	    }
	    return xAlign;
	}
	 function determineAlignment(chart, options, size) {
	    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);
	    return {
	        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),
	        yAlign
	    };
	}
	function alignX(size, xAlign) {
	    let { x , width  } = size;
	    if (xAlign === 'right') {
	        x -= width;
	    } else if (xAlign === 'center') {
	        x -= width / 2;
	    }
	    return x;
	}
	function alignY(size, yAlign, paddingAndSize) {
	    let { y , height  } = size;
	    if (yAlign === 'top') {
	        y += paddingAndSize;
	    } else if (yAlign === 'bottom') {
	        y -= height + paddingAndSize;
	    } else {
	        y -= height / 2;
	    }
	    return y;
	}
	 function getBackgroundPoint(options, size, alignment, chart) {
	    const { caretSize , caretPadding , cornerRadius  } = options;
	    const { xAlign , yAlign  } = alignment;
	    const paddingAndSize = caretSize + caretPadding;
	    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);
	    let x = alignX(size, xAlign);
	    const y = alignY(size, yAlign, paddingAndSize);
	    if (yAlign === 'center') {
	        if (xAlign === 'left') {
	            x += paddingAndSize;
	        } else if (xAlign === 'right') {
	            x -= paddingAndSize;
	        }
	    } else if (xAlign === 'left') {
	        x -= Math.max(topLeft, bottomLeft) + caretSize;
	    } else if (xAlign === 'right') {
	        x += Math.max(topRight, bottomRight) + caretSize;
	    }
	    return {
	        x: _limitValue(x, 0, chart.width - size.width),
	        y: _limitValue(y, 0, chart.height - size.height)
	    };
	}
	function getAlignedX(tooltip, align, options) {
	    const padding = toPadding(options.padding);
	    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
	}
	 function getBeforeAfterBodyLines(callback) {
	    return pushOrConcat([], splitNewlines(callback));
	}
	function createTooltipContext(parent, tooltip, tooltipItems) {
	    return createContext(parent, {
	        tooltip,
	        tooltipItems,
	        type: 'tooltip'
	    });
	}
	function overrideCallbacks(callbacks, context) {
	    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
	    return override ? callbacks.override(override) : callbacks;
	}
	const defaultCallbacks = {
	    beforeTitle: noop,
	    title (tooltipItems) {
	        if (tooltipItems.length > 0) {
	            const item = tooltipItems[0];
	            const labels = item.chart.data.labels;
	            const labelCount = labels ? labels.length : 0;
	            if (this && this.options && this.options.mode === 'dataset') {
	                return item.dataset.label || '';
	            } else if (item.label) {
	                return item.label;
	            } else if (labelCount > 0 && item.dataIndex < labelCount) {
	                return labels[item.dataIndex];
	            }
	        }
	        return '';
	    },
	    afterTitle: noop,
	    beforeBody: noop,
	    beforeLabel: noop,
	    label (tooltipItem) {
	        if (this && this.options && this.options.mode === 'dataset') {
	            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;
	        }
	        let label = tooltipItem.dataset.label || '';
	        if (label) {
	            label += ': ';
	        }
	        const value = tooltipItem.formattedValue;
	        if (!isNullOrUndef(value)) {
	            label += value;
	        }
	        return label;
	    },
	    labelColor (tooltipItem) {
	        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
	        const options = meta.controller.getStyle(tooltipItem.dataIndex);
	        return {
	            borderColor: options.borderColor,
	            backgroundColor: options.backgroundColor,
	            borderWidth: options.borderWidth,
	            borderDash: options.borderDash,
	            borderDashOffset: options.borderDashOffset,
	            borderRadius: 0
	        };
	    },
	    labelTextColor () {
	        return this.options.bodyColor;
	    },
	    labelPointStyle (tooltipItem) {
	        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
	        const options = meta.controller.getStyle(tooltipItem.dataIndex);
	        return {
	            pointStyle: options.pointStyle,
	            rotation: options.rotation
	        };
	    },
	    afterLabel: noop,
	    afterBody: noop,
	    beforeFooter: noop,
	    footer: noop,
	    afterFooter: noop
	};
	 function invokeCallbackWithFallback(callbacks, name, ctx, arg) {
	    const result = callbacks[name].call(ctx, arg);
	    if (typeof result === 'undefined') {
	        return defaultCallbacks[name].call(ctx, arg);
	    }
	    return result;
	}
	class Tooltip extends Element$1 {
	 static positioners = positioners;
	    constructor(config){
	        super();
	        this.opacity = 0;
	        this._active = [];
	        this._eventPosition = undefined;
	        this._size = undefined;
	        this._cachedAnimations = undefined;
	        this._tooltipItems = [];
	        this.$animations = undefined;
	        this.$context = undefined;
	        this.chart = config.chart;
	        this.options = config.options;
	        this.dataPoints = undefined;
	        this.title = undefined;
	        this.beforeBody = undefined;
	        this.body = undefined;
	        this.afterBody = undefined;
	        this.footer = undefined;
	        this.xAlign = undefined;
	        this.yAlign = undefined;
	        this.x = undefined;
	        this.y = undefined;
	        this.height = undefined;
	        this.width = undefined;
	        this.caretX = undefined;
	        this.caretY = undefined;
	        this.labelColors = undefined;
	        this.labelPointStyles = undefined;
	        this.labelTextColors = undefined;
	    }
	    initialize(options) {
	        this.options = options;
	        this._cachedAnimations = undefined;
	        this.$context = undefined;
	    }
	 _resolveAnimations() {
	        const cached = this._cachedAnimations;
	        if (cached) {
	            return cached;
	        }
	        const chart = this.chart;
	        const options = this.options.setContext(this.getContext());
	        const opts = options.enabled && chart.options.animation && options.animations;
	        const animations = new Animations(this.chart, opts);
	        if (opts._cacheable) {
	            this._cachedAnimations = Object.freeze(animations);
	        }
	        return animations;
	    }
	 getContext() {
	        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
	    }
	    getTitle(context, options) {
	        const { callbacks  } = options;
	        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);
	        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);
	        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);
	        let lines = [];
	        lines = pushOrConcat(lines, splitNewlines(beforeTitle));
	        lines = pushOrConcat(lines, splitNewlines(title));
	        lines = pushOrConcat(lines, splitNewlines(afterTitle));
	        return lines;
	    }
	    getBeforeBody(tooltipItems, options) {
	        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));
	    }
	    getBody(tooltipItems, options) {
	        const { callbacks  } = options;
	        const bodyItems = [];
	        each(tooltipItems, (context)=>{
	            const bodyItem = {
	                before: [],
	                lines: [],
	                after: []
	            };
	            const scoped = overrideCallbacks(callbacks, context);
	            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));
	            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));
	            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));
	            bodyItems.push(bodyItem);
	        });
	        return bodyItems;
	    }
	    getAfterBody(tooltipItems, options) {
	        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));
	    }
	    getFooter(tooltipItems, options) {
	        const { callbacks  } = options;
	        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);
	        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);
	        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);
	        let lines = [];
	        lines = pushOrConcat(lines, splitNewlines(beforeFooter));
	        lines = pushOrConcat(lines, splitNewlines(footer));
	        lines = pushOrConcat(lines, splitNewlines(afterFooter));
	        return lines;
	    }
	 _createItems(options) {
	        const active = this._active;
	        const data = this.chart.data;
	        const labelColors = [];
	        const labelPointStyles = [];
	        const labelTextColors = [];
	        let tooltipItems = [];
	        let i, len;
	        for(i = 0, len = active.length; i < len; ++i){
	            tooltipItems.push(createTooltipItem(this.chart, active[i]));
	        }
	        if (options.filter) {
	            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));
	        }
	        if (options.itemSort) {
	            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));
	        }
	        each(tooltipItems, (context)=>{
	            const scoped = overrideCallbacks(options.callbacks, context);
	            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));
	            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));
	            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));
	        });
	        this.labelColors = labelColors;
	        this.labelPointStyles = labelPointStyles;
	        this.labelTextColors = labelTextColors;
	        this.dataPoints = tooltipItems;
	        return tooltipItems;
	    }
	    update(changed, replay) {
	        const options = this.options.setContext(this.getContext());
	        const active = this._active;
	        let properties;
	        let tooltipItems = [];
	        if (!active.length) {
	            if (this.opacity !== 0) {
	                properties = {
	                    opacity: 0
	                };
	            }
	        } else {
	            const position = positioners[options.position].call(this, active, this._eventPosition);
	            tooltipItems = this._createItems(options);
	            this.title = this.getTitle(tooltipItems, options);
	            this.beforeBody = this.getBeforeBody(tooltipItems, options);
	            this.body = this.getBody(tooltipItems, options);
	            this.afterBody = this.getAfterBody(tooltipItems, options);
	            this.footer = this.getFooter(tooltipItems, options);
	            const size = this._size = getTooltipSize(this, options);
	            const positionAndSize = Object.assign({}, position, size);
	            const alignment = determineAlignment(this.chart, options, positionAndSize);
	            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);
	            this.xAlign = alignment.xAlign;
	            this.yAlign = alignment.yAlign;
	            properties = {
	                opacity: 1,
	                x: backgroundPoint.x,
	                y: backgroundPoint.y,
	                width: size.width,
	                height: size.height,
	                caretX: position.x,
	                caretY: position.y
	            };
	        }
	        this._tooltipItems = tooltipItems;
	        this.$context = undefined;
	        if (properties) {
	            this._resolveAnimations().update(this, properties);
	        }
	        if (changed && options.external) {
	            options.external.call(this, {
	                chart: this.chart,
	                tooltip: this,
	                replay
	            });
	        }
	    }
	    drawCaret(tooltipPoint, ctx, size, options) {
	        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);
	        ctx.lineTo(caretPosition.x1, caretPosition.y1);
	        ctx.lineTo(caretPosition.x2, caretPosition.y2);
	        ctx.lineTo(caretPosition.x3, caretPosition.y3);
	    }
	    getCaretPosition(tooltipPoint, size, options) {
	        const { xAlign , yAlign  } = this;
	        const { caretSize , cornerRadius  } = options;
	        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);
	        const { x: ptX , y: ptY  } = tooltipPoint;
	        const { width , height  } = size;
	        let x1, x2, x3, y1, y2, y3;
	        if (yAlign === 'center') {
	            y2 = ptY + height / 2;
	            if (xAlign === 'left') {
	                x1 = ptX;
	                x2 = x1 - caretSize;
	                y1 = y2 + caretSize;
	                y3 = y2 - caretSize;
	            } else {
	                x1 = ptX + width;
	                x2 = x1 + caretSize;
	                y1 = y2 - caretSize;
	                y3 = y2 + caretSize;
	            }
	            x3 = x1;
	        } else {
	            if (xAlign === 'left') {
	                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;
	            } else if (xAlign === 'right') {
	                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
	            } else {
	                x2 = this.caretX;
	            }
	            if (yAlign === 'top') {
	                y1 = ptY;
	                y2 = y1 - caretSize;
	                x1 = x2 - caretSize;
	                x3 = x2 + caretSize;
	            } else {
	                y1 = ptY + height;
	                y2 = y1 + caretSize;
	                x1 = x2 + caretSize;
	                x3 = x2 - caretSize;
	            }
	            y3 = y1;
	        }
	        return {
	            x1,
	            x2,
	            x3,
	            y1,
	            y2,
	            y3
	        };
	    }
	    drawTitle(pt, ctx, options) {
	        const title = this.title;
	        const length = title.length;
	        let titleFont, titleSpacing, i;
	        if (length) {
	            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
	            pt.x = getAlignedX(this, options.titleAlign, options);
	            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
	            ctx.textBaseline = 'middle';
	            titleFont = toFont(options.titleFont);
	            titleSpacing = options.titleSpacing;
	            ctx.fillStyle = options.titleColor;
	            ctx.font = titleFont.string;
	            for(i = 0; i < length; ++i){
	                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
	                pt.y += titleFont.lineHeight + titleSpacing;
	                if (i + 1 === length) {
	                    pt.y += options.titleMarginBottom - titleSpacing;
	                }
	            }
	        }
	    }
	 _drawColorBox(ctx, pt, i, rtlHelper, options) {
	        const labelColor = this.labelColors[i];
	        const labelPointStyle = this.labelPointStyles[i];
	        const { boxHeight , boxWidth  } = options;
	        const bodyFont = toFont(options.bodyFont);
	        const colorX = getAlignedX(this, 'left', options);
	        const rtlColorX = rtlHelper.x(colorX);
	        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
	        const colorY = pt.y + yOffSet;
	        if (options.usePointStyle) {
	            const drawOptions = {
	                radius: Math.min(boxWidth, boxHeight) / 2,
	                pointStyle: labelPointStyle.pointStyle,
	                rotation: labelPointStyle.rotation,
	                borderWidth: 1
	            };
	            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
	            const centerY = colorY + boxHeight / 2;
	            ctx.strokeStyle = options.multiKeyBackground;
	            ctx.fillStyle = options.multiKeyBackground;
	            drawPoint(ctx, drawOptions, centerX, centerY);
	            ctx.strokeStyle = labelColor.borderColor;
	            ctx.fillStyle = labelColor.backgroundColor;
	            drawPoint(ctx, drawOptions, centerX, centerY);
	        } else {
	            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;
	            ctx.strokeStyle = labelColor.borderColor;
	            ctx.setLineDash(labelColor.borderDash || []);
	            ctx.lineDashOffset = labelColor.borderDashOffset || 0;
	            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);
	            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);
	            const borderRadius = toTRBLCorners(labelColor.borderRadius);
	            if (Object.values(borderRadius).some((v)=>v !== 0)) {
	                ctx.beginPath();
	                ctx.fillStyle = options.multiKeyBackground;
	                addRoundedRectPath(ctx, {
	                    x: outerX,
	                    y: colorY,
	                    w: boxWidth,
	                    h: boxHeight,
	                    radius: borderRadius
	                });
	                ctx.fill();
	                ctx.stroke();
	                ctx.fillStyle = labelColor.backgroundColor;
	                ctx.beginPath();
	                addRoundedRectPath(ctx, {
	                    x: innerX,
	                    y: colorY + 1,
	                    w: boxWidth - 2,
	                    h: boxHeight - 2,
	                    radius: borderRadius
	                });
	                ctx.fill();
	            } else {
	                ctx.fillStyle = options.multiKeyBackground;
	                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
	                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
	                ctx.fillStyle = labelColor.backgroundColor;
	                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
	            }
	        }
	        ctx.fillStyle = this.labelTextColors[i];
	    }
	    drawBody(pt, ctx, options) {
	        const { body  } = this;
	        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;
	        const bodyFont = toFont(options.bodyFont);
	        let bodyLineHeight = bodyFont.lineHeight;
	        let xLinePadding = 0;
	        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
	        const fillLineOfText = function(line) {
	            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
	            pt.y += bodyLineHeight + bodySpacing;
	        };
	        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
	        let bodyItem, textColor, lines, i, j, ilen, jlen;
	        ctx.textAlign = bodyAlign;
	        ctx.textBaseline = 'middle';
	        ctx.font = bodyFont.string;
	        pt.x = getAlignedX(this, bodyAlignForCalculation, options);
	        ctx.fillStyle = options.bodyColor;
	        each(this.beforeBody, fillLineOfText);
	        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;
	        for(i = 0, ilen = body.length; i < ilen; ++i){
	            bodyItem = body[i];
	            textColor = this.labelTextColors[i];
	            ctx.fillStyle = textColor;
	            each(bodyItem.before, fillLineOfText);
	            lines = bodyItem.lines;
	            if (displayColors && lines.length) {
	                this._drawColorBox(ctx, pt, i, rtlHelper, options);
	                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
	            }
	            for(j = 0, jlen = lines.length; j < jlen; ++j){
	                fillLineOfText(lines[j]);
	                bodyLineHeight = bodyFont.lineHeight;
	            }
	            each(bodyItem.after, fillLineOfText);
	        }
	        xLinePadding = 0;
	        bodyLineHeight = bodyFont.lineHeight;
	        each(this.afterBody, fillLineOfText);
	        pt.y -= bodySpacing;
	    }
	    drawFooter(pt, ctx, options) {
	        const footer = this.footer;
	        const length = footer.length;
	        let footerFont, i;
	        if (length) {
	            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
	            pt.x = getAlignedX(this, options.footerAlign, options);
	            pt.y += options.footerMarginTop;
	            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
	            ctx.textBaseline = 'middle';
	            footerFont = toFont(options.footerFont);
	            ctx.fillStyle = options.footerColor;
	            ctx.font = footerFont.string;
	            for(i = 0; i < length; ++i){
	                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
	                pt.y += footerFont.lineHeight + options.footerSpacing;
	            }
	        }
	    }
	    drawBackground(pt, ctx, tooltipSize, options) {
	        const { xAlign , yAlign  } = this;
	        const { x , y  } = pt;
	        const { width , height  } = tooltipSize;
	        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);
	        ctx.fillStyle = options.backgroundColor;
	        ctx.strokeStyle = options.borderColor;
	        ctx.lineWidth = options.borderWidth;
	        ctx.beginPath();
	        ctx.moveTo(x + topLeft, y);
	        if (yAlign === 'top') {
	            this.drawCaret(pt, ctx, tooltipSize, options);
	        }
	        ctx.lineTo(x + width - topRight, y);
	        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);
	        if (yAlign === 'center' && xAlign === 'right') {
	            this.drawCaret(pt, ctx, tooltipSize, options);
	        }
	        ctx.lineTo(x + width, y + height - bottomRight);
	        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);
	        if (yAlign === 'bottom') {
	            this.drawCaret(pt, ctx, tooltipSize, options);
	        }
	        ctx.lineTo(x + bottomLeft, y + height);
	        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);
	        if (yAlign === 'center' && xAlign === 'left') {
	            this.drawCaret(pt, ctx, tooltipSize, options);
	        }
	        ctx.lineTo(x, y + topLeft);
	        ctx.quadraticCurveTo(x, y, x + topLeft, y);
	        ctx.closePath();
	        ctx.fill();
	        if (options.borderWidth > 0) {
	            ctx.stroke();
	        }
	    }
	 _updateAnimationTarget(options) {
	        const chart = this.chart;
	        const anims = this.$animations;
	        const animX = anims && anims.x;
	        const animY = anims && anims.y;
	        if (animX || animY) {
	            const position = positioners[options.position].call(this, this._active, this._eventPosition);
	            if (!position) {
	                return;
	            }
	            const size = this._size = getTooltipSize(this, options);
	            const positionAndSize = Object.assign({}, position, this._size);
	            const alignment = determineAlignment(chart, options, positionAndSize);
	            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);
	            if (animX._to !== point.x || animY._to !== point.y) {
	                this.xAlign = alignment.xAlign;
	                this.yAlign = alignment.yAlign;
	                this.width = size.width;
	                this.height = size.height;
	                this.caretX = position.x;
	                this.caretY = position.y;
	                this._resolveAnimations().update(this, point);
	            }
	        }
	    }
	 _willRender() {
	        return !!this.opacity;
	    }
	    draw(ctx) {
	        const options = this.options.setContext(this.getContext());
	        let opacity = this.opacity;
	        if (!opacity) {
	            return;
	        }
	        this._updateAnimationTarget(options);
	        const tooltipSize = {
	            width: this.width,
	            height: this.height
	        };
	        const pt = {
	            x: this.x,
	            y: this.y
	        };
	        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
	        const padding = toPadding(options.padding);
	        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
	        if (options.enabled && hasTooltipContent) {
	            ctx.save();
	            ctx.globalAlpha = opacity;
	            this.drawBackground(pt, ctx, tooltipSize, options);
	            overrideTextDirection(ctx, options.textDirection);
	            pt.y += padding.top;
	            this.drawTitle(pt, ctx, options);
	            this.drawBody(pt, ctx, options);
	            this.drawFooter(pt, ctx, options);
	            restoreTextDirection(ctx, options.textDirection);
	            ctx.restore();
	        }
	    }
	 getActiveElements() {
	        return this._active || [];
	    }
	 setActiveElements(activeElements, eventPosition) {
	        const lastActive = this._active;
	        const active = activeElements.map(({ datasetIndex , index  })=>{
	            const meta = this.chart.getDatasetMeta(datasetIndex);
	            if (!meta) {
	                throw new Error('Cannot find a dataset at index ' + datasetIndex);
	            }
	            return {
	                datasetIndex,
	                element: meta.data[index],
	                index
	            };
	        });
	        const changed = !_elementsEqual(lastActive, active);
	        const positionChanged = this._positionChanged(active, eventPosition);
	        if (changed || positionChanged) {
	            this._active = active;
	            this._eventPosition = eventPosition;
	            this._ignoreReplayEvents = true;
	            this.update(true);
	        }
	    }
	 handleEvent(e, replay, inChartArea = true) {
	        if (replay && this._ignoreReplayEvents) {
	            return false;
	        }
	        this._ignoreReplayEvents = false;
	        const options = this.options;
	        const lastActive = this._active || [];
	        const active = this._getActiveElements(e, lastActive, replay, inChartArea);
	        const positionChanged = this._positionChanged(active, e);
	        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;
	        if (changed) {
	            this._active = active;
	            if (options.enabled || options.external) {
	                this._eventPosition = {
	                    x: e.x,
	                    y: e.y
	                };
	                this.update(true, replay);
	            }
	        }
	        return changed;
	    }
	 _getActiveElements(e, lastActive, replay, inChartArea) {
	        const options = this.options;
	        if (e.type === 'mouseout') {
	            return [];
	        }
	        if (!inChartArea) {
	            return lastActive;
	        }
	        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);
	        if (options.reverse) {
	            active.reverse();
	        }
	        return active;
	    }
	 _positionChanged(active, e) {
	        const { caretX , caretY , options  } = this;
	        const position = positioners[options.position].call(this, active, e);
	        return position !== false && (caretX !== position.x || caretY !== position.y);
	    }
	}
	var plugin_tooltip = {
	    id: 'tooltip',
	    _element: Tooltip,
	    positioners,
	    afterInit (chart, _args, options) {
	        if (options) {
	            chart.tooltip = new Tooltip({
	                chart,
	                options
	            });
	        }
	    },
	    beforeUpdate (chart, _args, options) {
	        if (chart.tooltip) {
	            chart.tooltip.initialize(options);
	        }
	    },
	    reset (chart, _args, options) {
	        if (chart.tooltip) {
	            chart.tooltip.initialize(options);
	        }
	    },
	    afterDraw (chart) {
	        const tooltip = chart.tooltip;
	        if (tooltip && tooltip._willRender()) {
	            const args = {
	                tooltip
	            };
	            if (chart.notifyPlugins('beforeTooltipDraw', {
	                ...args,
	                cancelable: true
	            }) === false) {
	                return;
	            }
	            tooltip.draw(chart.ctx);
	            chart.notifyPlugins('afterTooltipDraw', args);
	        }
	    },
	    afterEvent (chart, args) {
	        if (chart.tooltip) {
	            const useFinalPosition = args.replay;
	            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {
	                args.changed = true;
	            }
	        }
	    },
	    defaults: {
	        enabled: true,
	        external: null,
	        position: 'average',
	        backgroundColor: 'rgba(0,0,0,0.8)',
	        titleColor: '#fff',
	        titleFont: {
	            weight: 'bold'
	        },
	        titleSpacing: 2,
	        titleMarginBottom: 6,
	        titleAlign: 'left',
	        bodyColor: '#fff',
	        bodySpacing: 2,
	        bodyFont: {},
	        bodyAlign: 'left',
	        footerColor: '#fff',
	        footerSpacing: 2,
	        footerMarginTop: 6,
	        footerFont: {
	            weight: 'bold'
	        },
	        footerAlign: 'left',
	        padding: 6,
	        caretPadding: 2,
	        caretSize: 5,
	        cornerRadius: 6,
	        boxHeight: (ctx, opts)=>opts.bodyFont.size,
	        boxWidth: (ctx, opts)=>opts.bodyFont.size,
	        multiKeyBackground: '#fff',
	        displayColors: true,
	        boxPadding: 0,
	        borderColor: 'rgba(0,0,0,0)',
	        borderWidth: 0,
	        animation: {
	            duration: 400,
	            easing: 'easeOutQuart'
	        },
	        animations: {
	            numbers: {
	                type: 'number',
	                properties: [
	                    'x',
	                    'y',
	                    'width',
	                    'height',
	                    'caretX',
	                    'caretY'
	                ]
	            },
	            opacity: {
	                easing: 'linear',
	                duration: 200
	            }
	        },
	        callbacks: defaultCallbacks
	    },
	    defaultRoutes: {
	        bodyFont: 'font',
	        footerFont: 'font',
	        titleFont: 'font'
	    },
	    descriptors: {
	        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',
	        _indexable: false,
	        callbacks: {
	            _scriptable: false,
	            _indexable: false
	        },
	        animation: {
	            _fallback: false
	        },
	        animations: {
	            _fallback: 'animation'
	        }
	    },
	    additionalOptionScopes: [
	        'interaction'
	    ]
	};

	const addIfString = (labels, raw, index, addedLabels)=>{
	    if (typeof raw === 'string') {
	        index = labels.push(raw) - 1;
	        addedLabels.unshift({
	            index,
	            label: raw
	        });
	    } else if (isNaN(raw)) {
	        index = null;
	    }
	    return index;
	};
	function findOrAddLabel(labels, raw, index, addedLabels) {
	    const first = labels.indexOf(raw);
	    if (first === -1) {
	        return addIfString(labels, raw, index, addedLabels);
	    }
	    const last = labels.lastIndexOf(raw);
	    return first !== last ? index : first;
	}
	const validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);
	function _getLabelForValue(value) {
	    const labels = this.getLabels();
	    if (value >= 0 && value < labels.length) {
	        return labels[value];
	    }
	    return value;
	}
	class CategoryScale extends Scale {
	    static id = 'category';
	 static defaults = {
	        ticks: {
	            callback: _getLabelForValue
	        }
	    };
	    constructor(cfg){
	        super(cfg);
	         this._startValue = undefined;
	        this._valueRange = 0;
	        this._addedLabels = [];
	    }
	    init(scaleOptions) {
	        const added = this._addedLabels;
	        if (added.length) {
	            const labels = this.getLabels();
	            for (const { index , label  } of added){
	                if (labels[index] === label) {
	                    labels.splice(index, 1);
	                }
	            }
	            this._addedLabels = [];
	        }
	        super.init(scaleOptions);
	    }
	    parse(raw, index) {
	        if (isNullOrUndef(raw)) {
	            return null;
	        }
	        const labels = this.getLabels();
	        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);
	        return validIndex(index, labels.length - 1);
	    }
	    determineDataLimits() {
	        const { minDefined , maxDefined  } = this.getUserBounds();
	        let { min , max  } = this.getMinMax(true);
	        if (this.options.bounds === 'ticks') {
	            if (!minDefined) {
	                min = 0;
	            }
	            if (!maxDefined) {
	                max = this.getLabels().length - 1;
	            }
	        }
	        this.min = min;
	        this.max = max;
	    }
	    buildTicks() {
	        const min = this.min;
	        const max = this.max;
	        const offset = this.options.offset;
	        const ticks = [];
	        let labels = this.getLabels();
	        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);
	        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
	        this._startValue = this.min - (offset ? 0.5 : 0);
	        for(let value = min; value <= max; value++){
	            ticks.push({
	                value
	            });
	        }
	        return ticks;
	    }
	    getLabelForValue(value) {
	        return _getLabelForValue.call(this, value);
	    }
	 configure() {
	        super.configure();
	        if (!this.isHorizontal()) {
	            this._reversePixels = !this._reversePixels;
	        }
	    }
	    getPixelForValue(value) {
	        if (typeof value !== 'number') {
	            value = this.parse(value);
	        }
	        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
	    }
	    getPixelForTick(index) {
	        const ticks = this.ticks;
	        if (index < 0 || index > ticks.length - 1) {
	            return null;
	        }
	        return this.getPixelForValue(ticks[index].value);
	    }
	    getValueForPixel(pixel) {
	        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
	    }
	    getBasePixel() {
	        return this.bottom;
	    }
	}

	function generateTicks$1(generationOptions, dataRange) {
	    const ticks = [];
	    const MIN_SPACING = 1e-14;
	    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;
	    const unit = step || 1;
	    const maxSpaces = maxTicks - 1;
	    const { min: rmin , max: rmax  } = dataRange;
	    const minDefined = !isNullOrUndef(min);
	    const maxDefined = !isNullOrUndef(max);
	    const countDefined = !isNullOrUndef(count);
	    const minSpacing = (rmax - rmin) / (maxDigits + 1);
	    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;
	    let factor, niceMin, niceMax, numSpaces;
	    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {
	        return [
	            {
	                value: rmin
	            },
	            {
	                value: rmax
	            }
	        ];
	    }
	    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
	    if (numSpaces > maxSpaces) {
	        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;
	    }
	    if (!isNullOrUndef(precision)) {
	        factor = Math.pow(10, precision);
	        spacing = Math.ceil(spacing * factor) / factor;
	    }
	    if (bounds === 'ticks') {
	        niceMin = Math.floor(rmin / spacing) * spacing;
	        niceMax = Math.ceil(rmax / spacing) * spacing;
	    } else {
	        niceMin = rmin;
	        niceMax = rmax;
	    }
	    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {
	        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
	        spacing = (max - min) / numSpaces;
	        niceMin = min;
	        niceMax = max;
	    } else if (countDefined) {
	        niceMin = minDefined ? min : niceMin;
	        niceMax = maxDefined ? max : niceMax;
	        numSpaces = count - 1;
	        spacing = (niceMax - niceMin) / numSpaces;
	    } else {
	        numSpaces = (niceMax - niceMin) / spacing;
	        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
	            numSpaces = Math.round(numSpaces);
	        } else {
	            numSpaces = Math.ceil(numSpaces);
	        }
	    }
	    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));
	    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);
	    niceMin = Math.round(niceMin * factor) / factor;
	    niceMax = Math.round(niceMax * factor) / factor;
	    let j = 0;
	    if (minDefined) {
	        if (includeBounds && niceMin !== min) {
	            ticks.push({
	                value: min
	            });
	            if (niceMin < min) {
	                j++;
	            }
	            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {
	                j++;
	            }
	        } else if (niceMin < min) {
	            j++;
	        }
	    }
	    for(; j < numSpaces; ++j){
	        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;
	        if (maxDefined && tickValue > max) {
	            break;
	        }
	        ticks.push({
	            value: tickValue
	        });
	    }
	    if (maxDefined && includeBounds && niceMax !== max) {
	        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {
	            ticks[ticks.length - 1].value = max;
	        } else {
	            ticks.push({
	                value: max
	            });
	        }
	    } else if (!maxDefined || niceMax === max) {
	        ticks.push({
	            value: niceMax
	        });
	    }
	    return ticks;
	}
	function relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {
	    const rad = toRadians(minRotation);
	    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;
	    const length = 0.75 * minSpacing * ('' + value).length;
	    return Math.min(minSpacing / ratio, length);
	}
	class LinearScaleBase extends Scale {
	    constructor(cfg){
	        super(cfg);
	         this.start = undefined;
	         this.end = undefined;
	         this._startValue = undefined;
	         this._endValue = undefined;
	        this._valueRange = 0;
	    }
	    parse(raw, index) {
	        if (isNullOrUndef(raw)) {
	            return null;
	        }
	        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {
	            return null;
	        }
	        return +raw;
	    }
	    handleTickRangeOptions() {
	        const { beginAtZero  } = this.options;
	        const { minDefined , maxDefined  } = this.getUserBounds();
	        let { min , max  } = this;
	        const setMin = (v)=>min = minDefined ? min : v;
	        const setMax = (v)=>max = maxDefined ? max : v;
	        if (beginAtZero) {
	            const minSign = sign(min);
	            const maxSign = sign(max);
	            if (minSign < 0 && maxSign < 0) {
	                setMax(0);
	            } else if (minSign > 0 && maxSign > 0) {
	                setMin(0);
	            }
	        }
	        if (min === max) {
	            let offset = max === 0 ? 1 : Math.abs(max * 0.05);
	            setMax(max + offset);
	            if (!beginAtZero) {
	                setMin(min - offset);
	            }
	        }
	        this.min = min;
	        this.max = max;
	    }
	    getTickLimit() {
	        const tickOpts = this.options.ticks;
	        let { maxTicksLimit , stepSize  } = tickOpts;
	        let maxTicks;
	        if (stepSize) {
	            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
	            if (maxTicks > 1000) {
	                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);
	                maxTicks = 1000;
	            }
	        } else {
	            maxTicks = this.computeTickLimit();
	            maxTicksLimit = maxTicksLimit || 11;
	        }
	        if (maxTicksLimit) {
	            maxTicks = Math.min(maxTicksLimit, maxTicks);
	        }
	        return maxTicks;
	    }
	 computeTickLimit() {
	        return Number.POSITIVE_INFINITY;
	    }
	    buildTicks() {
	        const opts = this.options;
	        const tickOpts = opts.ticks;
	        let maxTicks = this.getTickLimit();
	        maxTicks = Math.max(2, maxTicks);
	        const numericGeneratorOptions = {
	            maxTicks,
	            bounds: opts.bounds,
	            min: opts.min,
	            max: opts.max,
	            precision: tickOpts.precision,
	            step: tickOpts.stepSize,
	            count: tickOpts.count,
	            maxDigits: this._maxDigits(),
	            horizontal: this.isHorizontal(),
	            minRotation: tickOpts.minRotation || 0,
	            includeBounds: tickOpts.includeBounds !== false
	        };
	        const dataRange = this._range || this;
	        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);
	        if (opts.bounds === 'ticks') {
	            _setMinAndMaxByKey(ticks, this, 'value');
	        }
	        if (opts.reverse) {
	            ticks.reverse();
	            this.start = this.max;
	            this.end = this.min;
	        } else {
	            this.start = this.min;
	            this.end = this.max;
	        }
	        return ticks;
	    }
	 configure() {
	        const ticks = this.ticks;
	        let start = this.min;
	        let end = this.max;
	        super.configure();
	        if (this.options.offset && ticks.length) {
	            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
	            start -= offset;
	            end += offset;
	        }
	        this._startValue = start;
	        this._endValue = end;
	        this._valueRange = end - start;
	    }
	    getLabelForValue(value) {
	        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);
	    }
	}

	class LinearScale extends LinearScaleBase {
	    static id = 'linear';
	 static defaults = {
	        ticks: {
	            callback: Ticks.formatters.numeric
	        }
	    };
	    determineDataLimits() {
	        const { min , max  } = this.getMinMax(true);
	        this.min = isNumberFinite(min) ? min : 0;
	        this.max = isNumberFinite(max) ? max : 1;
	        this.handleTickRangeOptions();
	    }
	 computeTickLimit() {
	        const horizontal = this.isHorizontal();
	        const length = horizontal ? this.width : this.height;
	        const minRotation = toRadians(this.options.ticks.minRotation);
	        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;
	        const tickFont = this._resolveTickFontOptions(0);
	        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
	    }
	    getPixelForValue(value) {
	        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
	    }
	    getValueForPixel(pixel) {
	        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
	    }
	}

	const log10Floor = (v)=>Math.floor(log10(v));
	const changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);
	function isMajor(tickVal) {
	    const remain = tickVal / Math.pow(10, log10Floor(tickVal));
	    return remain === 1;
	}
	function steps(min, max, rangeExp) {
	    const rangeStep = Math.pow(10, rangeExp);
	    const start = Math.floor(min / rangeStep);
	    const end = Math.ceil(max / rangeStep);
	    return end - start;
	}
	function startExp(min, max) {
	    const range = max - min;
	    let rangeExp = log10Floor(range);
	    while(steps(min, max, rangeExp) > 10){
	        rangeExp++;
	    }
	    while(steps(min, max, rangeExp) < 10){
	        rangeExp--;
	    }
	    return Math.min(rangeExp, log10Floor(min));
	}
	 function generateTicks(generationOptions, { min , max  }) {
	    min = finiteOrDefault(generationOptions.min, min);
	    const ticks = [];
	    const minExp = log10Floor(min);
	    let exp = startExp(min, max);
	    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
	    const stepSize = Math.pow(10, exp);
	    const base = minExp > exp ? Math.pow(10, minExp) : 0;
	    const start = Math.round((min - base) * precision) / precision;
	    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;
	    let significand = Math.floor((start - offset) / Math.pow(10, exp));
	    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);
	    while(value < max){
	        ticks.push({
	            value,
	            major: isMajor(value),
	            significand
	        });
	        if (significand >= 10) {
	            significand = significand < 15 ? 15 : 20;
	        } else {
	            significand++;
	        }
	        if (significand >= 20) {
	            exp++;
	            significand = 2;
	            precision = exp >= 0 ? 1 : precision;
	        }
	        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;
	    }
	    const lastTick = finiteOrDefault(generationOptions.max, value);
	    ticks.push({
	        value: lastTick,
	        major: isMajor(lastTick),
	        significand
	    });
	    return ticks;
	}
	class LogarithmicScale extends Scale {
	    static id = 'logarithmic';
	 static defaults = {
	        ticks: {
	            callback: Ticks.formatters.logarithmic,
	            major: {
	                enabled: true
	            }
	        }
	    };
	    constructor(cfg){
	        super(cfg);
	         this.start = undefined;
	         this.end = undefined;
	         this._startValue = undefined;
	        this._valueRange = 0;
	    }
	    parse(raw, index) {
	        const value = LinearScaleBase.prototype.parse.apply(this, [
	            raw,
	            index
	        ]);
	        if (value === 0) {
	            this._zero = true;
	            return undefined;
	        }
	        return isNumberFinite(value) && value > 0 ? value : null;
	    }
	    determineDataLimits() {
	        const { min , max  } = this.getMinMax(true);
	        this.min = isNumberFinite(min) ? Math.max(0, min) : null;
	        this.max = isNumberFinite(max) ? Math.max(0, max) : null;
	        if (this.options.beginAtZero) {
	            this._zero = true;
	        }
	        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {
	            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);
	        }
	        this.handleTickRangeOptions();
	    }
	    handleTickRangeOptions() {
	        const { minDefined , maxDefined  } = this.getUserBounds();
	        let min = this.min;
	        let max = this.max;
	        const setMin = (v)=>min = minDefined ? min : v;
	        const setMax = (v)=>max = maxDefined ? max : v;
	        if (min === max) {
	            if (min <= 0) {
	                setMin(1);
	                setMax(10);
	            } else {
	                setMin(changeExponent(min, -1));
	                setMax(changeExponent(max, +1));
	            }
	        }
	        if (min <= 0) {
	            setMin(changeExponent(max, -1));
	        }
	        if (max <= 0) {
	            setMax(changeExponent(min, +1));
	        }
	        this.min = min;
	        this.max = max;
	    }
	    buildTicks() {
	        const opts = this.options;
	        const generationOptions = {
	            min: this._userMin,
	            max: this._userMax
	        };
	        const ticks = generateTicks(generationOptions, this);
	        if (opts.bounds === 'ticks') {
	            _setMinAndMaxByKey(ticks, this, 'value');
	        }
	        if (opts.reverse) {
	            ticks.reverse();
	            this.start = this.max;
	            this.end = this.min;
	        } else {
	            this.start = this.min;
	            this.end = this.max;
	        }
	        return ticks;
	    }
	 getLabelForValue(value) {
	        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);
	    }
	 configure() {
	        const start = this.min;
	        super.configure();
	        this._startValue = log10(start);
	        this._valueRange = log10(this.max) - log10(start);
	    }
	    getPixelForValue(value) {
	        if (value === undefined || value === 0) {
	            value = this.min;
	        }
	        if (value === null || isNaN(value)) {
	            return NaN;
	        }
	        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);
	    }
	    getValueForPixel(pixel) {
	        const decimal = this.getDecimalForPixel(pixel);
	        return Math.pow(10, this._startValue + decimal * this._valueRange);
	    }
	}

	function getTickBackdropHeight(opts) {
	    const tickOpts = opts.ticks;
	    if (tickOpts.display && opts.display) {
	        const padding = toPadding(tickOpts.backdropPadding);
	        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;
	    }
	    return 0;
	}
	function measureLabelSize(ctx, font, label) {
	    label = isArray(label) ? label : [
	        label
	    ];
	    return {
	        w: _longestText(ctx, font.string, label),
	        h: label.length * font.lineHeight
	    };
	}
	function determineLimits(angle, pos, size, min, max) {
	    if (angle === min || angle === max) {
	        return {
	            start: pos - size / 2,
	            end: pos + size / 2
	        };
	    } else if (angle < min || angle > max) {
	        return {
	            start: pos - size,
	            end: pos
	        };
	    }
	    return {
	        start: pos,
	        end: pos + size
	    };
	}
	 function fitWithPointLabels(scale) {
	    const orig = {
	        l: scale.left + scale._padding.left,
	        r: scale.right - scale._padding.right,
	        t: scale.top + scale._padding.top,
	        b: scale.bottom - scale._padding.bottom
	    };
	    const limits = Object.assign({}, orig);
	    const labelSizes = [];
	    const padding = [];
	    const valueCount = scale._pointLabels.length;
	    const pointLabelOpts = scale.options.pointLabels;
	    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;
	    for(let i = 0; i < valueCount; i++){
	        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));
	        padding[i] = opts.padding;
	        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);
	        const plFont = toFont(opts.font);
	        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);
	        labelSizes[i] = textSize;
	        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);
	        const angle = Math.round(toDegrees(angleRadians));
	        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
	        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
	        updateLimits(limits, orig, angleRadians, hLimits, vLimits);
	    }
	    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);
	    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);
	}
	function updateLimits(limits, orig, angle, hLimits, vLimits) {
	    const sin = Math.abs(Math.sin(angle));
	    const cos = Math.abs(Math.cos(angle));
	    let x = 0;
	    let y = 0;
	    if (hLimits.start < orig.l) {
	        x = (orig.l - hLimits.start) / sin;
	        limits.l = Math.min(limits.l, orig.l - x);
	    } else if (hLimits.end > orig.r) {
	        x = (hLimits.end - orig.r) / sin;
	        limits.r = Math.max(limits.r, orig.r + x);
	    }
	    if (vLimits.start < orig.t) {
	        y = (orig.t - vLimits.start) / cos;
	        limits.t = Math.min(limits.t, orig.t - y);
	    } else if (vLimits.end > orig.b) {
	        y = (vLimits.end - orig.b) / cos;
	        limits.b = Math.max(limits.b, orig.b + y);
	    }
	}
	function createPointLabelItem(scale, index, itemOpts) {
	    const outerDistance = scale.drawingArea;
	    const { extra , additionalAngle , padding , size  } = itemOpts;
	    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);
	    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));
	    const y = yForAngle(pointLabelPosition.y, size.h, angle);
	    const textAlign = getTextAlignForAngle(angle);
	    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);
	    return {
	        visible: true,
	        x: pointLabelPosition.x,
	        y,
	        textAlign,
	        left,
	        top: y,
	        right: left + size.w,
	        bottom: y + size.h
	    };
	}
	function isNotOverlapped(item, area) {
	    if (!area) {
	        return true;
	    }
	    const { left , top , right , bottom  } = item;
	    const apexesInArea = _isPointInArea({
	        x: left,
	        y: top
	    }, area) || _isPointInArea({
	        x: left,
	        y: bottom
	    }, area) || _isPointInArea({
	        x: right,
	        y: top
	    }, area) || _isPointInArea({
	        x: right,
	        y: bottom
	    }, area);
	    return !apexesInArea;
	}
	function buildPointLabelItems(scale, labelSizes, padding) {
	    const items = [];
	    const valueCount = scale._pointLabels.length;
	    const opts = scale.options;
	    const { centerPointLabels , display  } = opts.pointLabels;
	    const itemOpts = {
	        extra: getTickBackdropHeight(opts) / 2,
	        additionalAngle: centerPointLabels ? PI / valueCount : 0
	    };
	    let area;
	    for(let i = 0; i < valueCount; i++){
	        itemOpts.padding = padding[i];
	        itemOpts.size = labelSizes[i];
	        const item = createPointLabelItem(scale, i, itemOpts);
	        items.push(item);
	        if (display === 'auto') {
	            item.visible = isNotOverlapped(item, area);
	            if (item.visible) {
	                area = item;
	            }
	        }
	    }
	    return items;
	}
	function getTextAlignForAngle(angle) {
	    if (angle === 0 || angle === 180) {
	        return 'center';
	    } else if (angle < 180) {
	        return 'left';
	    }
	    return 'right';
	}
	function leftForTextAlign(x, w, align) {
	    if (align === 'right') {
	        x -= w;
	    } else if (align === 'center') {
	        x -= w / 2;
	    }
	    return x;
	}
	function yForAngle(y, h, angle) {
	    if (angle === 90 || angle === 270) {
	        y -= h / 2;
	    } else if (angle > 270 || angle < 90) {
	        y -= h;
	    }
	    return y;
	}
	function drawPointLabelBox(ctx, opts, item) {
	    const { left , top , right , bottom  } = item;
	    const { backdropColor  } = opts;
	    if (!isNullOrUndef(backdropColor)) {
	        const borderRadius = toTRBLCorners(opts.borderRadius);
	        const padding = toPadding(opts.backdropPadding);
	        ctx.fillStyle = backdropColor;
	        const backdropLeft = left - padding.left;
	        const backdropTop = top - padding.top;
	        const backdropWidth = right - left + padding.width;
	        const backdropHeight = bottom - top + padding.height;
	        if (Object.values(borderRadius).some((v)=>v !== 0)) {
	            ctx.beginPath();
	            addRoundedRectPath(ctx, {
	                x: backdropLeft,
	                y: backdropTop,
	                w: backdropWidth,
	                h: backdropHeight,
	                radius: borderRadius
	            });
	            ctx.fill();
	        } else {
	            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);
	        }
	    }
	}
	function drawPointLabels(scale, labelCount) {
	    const { ctx , options: { pointLabels  }  } = scale;
	    for(let i = labelCount - 1; i >= 0; i--){
	        const item = scale._pointLabelItems[i];
	        if (!item.visible) {
	            continue;
	        }
	        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));
	        drawPointLabelBox(ctx, optsAtIndex, item);
	        const plFont = toFont(optsAtIndex.font);
	        const { x , y , textAlign  } = item;
	        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {
	            color: optsAtIndex.color,
	            textAlign: textAlign,
	            textBaseline: 'middle'
	        });
	    }
	}
	function pathRadiusLine(scale, radius, circular, labelCount) {
	    const { ctx  } = scale;
	    if (circular) {
	        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);
	    } else {
	        let pointPosition = scale.getPointPosition(0, radius);
	        ctx.moveTo(pointPosition.x, pointPosition.y);
	        for(let i = 1; i < labelCount; i++){
	            pointPosition = scale.getPointPosition(i, radius);
	            ctx.lineTo(pointPosition.x, pointPosition.y);
	        }
	    }
	}
	function drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {
	    const ctx = scale.ctx;
	    const circular = gridLineOpts.circular;
	    const { color , lineWidth  } = gridLineOpts;
	    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {
	        return;
	    }
	    ctx.save();
	    ctx.strokeStyle = color;
	    ctx.lineWidth = lineWidth;
	    ctx.setLineDash(borderOpts.dash);
	    ctx.lineDashOffset = borderOpts.dashOffset;
	    ctx.beginPath();
	    pathRadiusLine(scale, radius, circular, labelCount);
	    ctx.closePath();
	    ctx.stroke();
	    ctx.restore();
	}
	function createPointLabelContext(parent, index, label) {
	    return createContext(parent, {
	        label,
	        index,
	        type: 'pointLabel'
	    });
	}
	class RadialLinearScale extends LinearScaleBase {
	    static id = 'radialLinear';
	 static defaults = {
	        display: true,
	        animate: true,
	        position: 'chartArea',
	        angleLines: {
	            display: true,
	            lineWidth: 1,
	            borderDash: [],
	            borderDashOffset: 0.0
	        },
	        grid: {
	            circular: false
	        },
	        startAngle: 0,
	        ticks: {
	            showLabelBackdrop: true,
	            callback: Ticks.formatters.numeric
	        },
	        pointLabels: {
	            backdropColor: undefined,
	            backdropPadding: 2,
	            display: true,
	            font: {
	                size: 10
	            },
	            callback (label) {
	                return label;
	            },
	            padding: 5,
	            centerPointLabels: false
	        }
	    };
	    static defaultRoutes = {
	        'angleLines.color': 'borderColor',
	        'pointLabels.color': 'color',
	        'ticks.color': 'color'
	    };
	    static descriptors = {
	        angleLines: {
	            _fallback: 'grid'
	        }
	    };
	    constructor(cfg){
	        super(cfg);
	         this.xCenter = undefined;
	         this.yCenter = undefined;
	         this.drawingArea = undefined;
	         this._pointLabels = [];
	        this._pointLabelItems = [];
	    }
	    setDimensions() {
	        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);
	        const w = this.width = this.maxWidth - padding.width;
	        const h = this.height = this.maxHeight - padding.height;
	        this.xCenter = Math.floor(this.left + w / 2 + padding.left);
	        this.yCenter = Math.floor(this.top + h / 2 + padding.top);
	        this.drawingArea = Math.floor(Math.min(w, h) / 2);
	    }
	    determineDataLimits() {
	        const { min , max  } = this.getMinMax(false);
	        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;
	        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;
	        this.handleTickRangeOptions();
	    }
	 computeTickLimit() {
	        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
	    }
	    generateTickLabels(ticks) {
	        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);
	        this._pointLabels = this.getLabels().map((value, index)=>{
	            const label = callback(this.options.pointLabels.callback, [
	                value,
	                index
	            ], this);
	            return label || label === 0 ? label : '';
	        }).filter((v, i)=>this.chart.getDataVisibility(i));
	    }
	    fit() {
	        const opts = this.options;
	        if (opts.display && opts.pointLabels.display) {
	            fitWithPointLabels(this);
	        } else {
	            this.setCenterPoint(0, 0, 0, 0);
	        }
	    }
	    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
	        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);
	        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);
	        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));
	    }
	    getIndexAngle(index) {
	        const angleMultiplier = TAU / (this._pointLabels.length || 1);
	        const startAngle = this.options.startAngle || 0;
	        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));
	    }
	    getDistanceFromCenterForValue(value) {
	        if (isNullOrUndef(value)) {
	            return NaN;
	        }
	        const scalingFactor = this.drawingArea / (this.max - this.min);
	        if (this.options.reverse) {
	            return (this.max - value) * scalingFactor;
	        }
	        return (value - this.min) * scalingFactor;
	    }
	    getValueForDistanceFromCenter(distance) {
	        if (isNullOrUndef(distance)) {
	            return NaN;
	        }
	        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));
	        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;
	    }
	    getPointLabelContext(index) {
	        const pointLabels = this._pointLabels || [];
	        if (index >= 0 && index < pointLabels.length) {
	            const pointLabel = pointLabels[index];
	            return createPointLabelContext(this.getContext(), index, pointLabel);
	        }
	    }
	    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {
	        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;
	        return {
	            x: Math.cos(angle) * distanceFromCenter + this.xCenter,
	            y: Math.sin(angle) * distanceFromCenter + this.yCenter,
	            angle
	        };
	    }
	    getPointPositionForValue(index, value) {
	        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
	    }
	    getBasePosition(index) {
	        return this.getPointPositionForValue(index || 0, this.getBaseValue());
	    }
	    getPointLabelPosition(index) {
	        const { left , top , right , bottom  } = this._pointLabelItems[index];
	        return {
	            left,
	            top,
	            right,
	            bottom
	        };
	    }
	 drawBackground() {
	        const { backgroundColor , grid: { circular  }  } = this.options;
	        if (backgroundColor) {
	            const ctx = this.ctx;
	            ctx.save();
	            ctx.beginPath();
	            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);
	            ctx.closePath();
	            ctx.fillStyle = backgroundColor;
	            ctx.fill();
	            ctx.restore();
	        }
	    }
	 drawGrid() {
	        const ctx = this.ctx;
	        const opts = this.options;
	        const { angleLines , grid , border  } = opts;
	        const labelCount = this._pointLabels.length;
	        let i, offset, position;
	        if (opts.pointLabels.display) {
	            drawPointLabels(this, labelCount);
	        }
	        if (grid.display) {
	            this.ticks.forEach((tick, index)=>{
	                if (index !== 0) {
	                    offset = this.getDistanceFromCenterForValue(tick.value);
	                    const context = this.getContext(index);
	                    const optsAtIndex = grid.setContext(context);
	                    const optsAtIndexBorder = border.setContext(context);
	                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);
	                }
	            });
	        }
	        if (angleLines.display) {
	            ctx.save();
	            for(i = labelCount - 1; i >= 0; i--){
	                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));
	                const { color , lineWidth  } = optsAtIndex;
	                if (!lineWidth || !color) {
	                    continue;
	                }
	                ctx.lineWidth = lineWidth;
	                ctx.strokeStyle = color;
	                ctx.setLineDash(optsAtIndex.borderDash);
	                ctx.lineDashOffset = optsAtIndex.borderDashOffset;
	                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);
	                position = this.getPointPosition(i, offset);
	                ctx.beginPath();
	                ctx.moveTo(this.xCenter, this.yCenter);
	                ctx.lineTo(position.x, position.y);
	                ctx.stroke();
	            }
	            ctx.restore();
	        }
	    }
	 drawBorder() {}
	 drawLabels() {
	        const ctx = this.ctx;
	        const opts = this.options;
	        const tickOpts = opts.ticks;
	        if (!tickOpts.display) {
	            return;
	        }
	        const startAngle = this.getIndexAngle(0);
	        let offset, width;
	        ctx.save();
	        ctx.translate(this.xCenter, this.yCenter);
	        ctx.rotate(startAngle);
	        ctx.textAlign = 'center';
	        ctx.textBaseline = 'middle';
	        this.ticks.forEach((tick, index)=>{
	            if (index === 0 && !opts.reverse) {
	                return;
	            }
	            const optsAtIndex = tickOpts.setContext(this.getContext(index));
	            const tickFont = toFont(optsAtIndex.font);
	            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);
	            if (optsAtIndex.showLabelBackdrop) {
	                ctx.font = tickFont.string;
	                width = ctx.measureText(tick.label).width;
	                ctx.fillStyle = optsAtIndex.backdropColor;
	                const padding = toPadding(optsAtIndex.backdropPadding);
	                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);
	            }
	            renderText(ctx, tick.label, 0, -offset, tickFont, {
	                color: optsAtIndex.color,
	                strokeColor: optsAtIndex.textStrokeColor,
	                strokeWidth: optsAtIndex.textStrokeWidth
	            });
	        });
	        ctx.restore();
	    }
	 drawTitle() {}
	}

	const INTERVALS = {
	    millisecond: {
	        common: true,
	        size: 1,
	        steps: 1000
	    },
	    second: {
	        common: true,
	        size: 1000,
	        steps: 60
	    },
	    minute: {
	        common: true,
	        size: 60000,
	        steps: 60
	    },
	    hour: {
	        common: true,
	        size: 3600000,
	        steps: 24
	    },
	    day: {
	        common: true,
	        size: 86400000,
	        steps: 30
	    },
	    week: {
	        common: false,
	        size: 604800000,
	        steps: 4
	    },
	    month: {
	        common: true,
	        size: 2.628e9,
	        steps: 12
	    },
	    quarter: {
	        common: false,
	        size: 7.884e9,
	        steps: 4
	    },
	    year: {
	        common: true,
	        size: 3.154e10
	    }
	};
	 const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);
	 function sorter(a, b) {
	    return a - b;
	}
	 function parse(scale, input) {
	    if (isNullOrUndef(input)) {
	        return null;
	    }
	    const adapter = scale._adapter;
	    const { parser , round , isoWeekday  } = scale._parseOpts;
	    let value = input;
	    if (typeof parser === 'function') {
	        value = parser(value);
	    }
	    if (!isNumberFinite(value)) {
	        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);
	    }
	    if (value === null) {
	        return null;
	    }
	    if (round) {
	        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);
	    }
	    return +value;
	}
	 function determineUnitForAutoTicks(minUnit, min, max, capacity) {
	    const ilen = UNITS.length;
	    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){
	        const interval = INTERVALS[UNITS[i]];
	        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
	        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
	            return UNITS[i];
	        }
	    }
	    return UNITS[ilen - 1];
	}
	 function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
	    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){
	        const unit = UNITS[i];
	        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
	            return unit;
	        }
	    }
	    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
	}
	 function determineMajorUnit(unit) {
	    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){
	        if (INTERVALS[UNITS[i]].common) {
	            return UNITS[i];
	        }
	    }
	}
	 function addTick(ticks, time, timestamps) {
	    if (!timestamps) {
	        ticks[time] = true;
	    } else if (timestamps.length) {
	        const { lo , hi  } = _lookup(timestamps, time);
	        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
	        ticks[timestamp] = true;
	    }
	}
	 function setMajorTicks(scale, ticks, map, majorUnit) {
	    const adapter = scale._adapter;
	    const first = +adapter.startOf(ticks[0].value, majorUnit);
	    const last = ticks[ticks.length - 1].value;
	    let major, index;
	    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){
	        index = map[major];
	        if (index >= 0) {
	            ticks[index].major = true;
	        }
	    }
	    return ticks;
	}
	 function ticksFromTimestamps(scale, values, majorUnit) {
	    const ticks = [];
	     const map = {};
	    const ilen = values.length;
	    let i, value;
	    for(i = 0; i < ilen; ++i){
	        value = values[i];
	        map[value] = i;
	        ticks.push({
	            value,
	            major: false
	        });
	    }
	    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
	}
	class TimeScale extends Scale {
	    static id = 'time';
	 static defaults = {
	 bounds: 'data',
	        adapters: {},
	        time: {
	            parser: false,
	            unit: false,
	            round: false,
	            isoWeekday: false,
	            minUnit: 'millisecond',
	            displayFormats: {}
	        },
	        ticks: {
	 source: 'auto',
	            callback: false,
	            major: {
	                enabled: false
	            }
	        }
	    };
	 constructor(props){
	        super(props);
	         this._cache = {
	            data: [],
	            labels: [],
	            all: []
	        };
	         this._unit = 'day';
	         this._majorUnit = undefined;
	        this._offsets = {};
	        this._normalized = false;
	        this._parseOpts = undefined;
	    }
	    init(scaleOpts, opts = {}) {
	        const time = scaleOpts.time || (scaleOpts.time = {});
	         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
	        adapter.init(opts);
	        mergeIf(time.displayFormats, adapter.formats());
	        this._parseOpts = {
	            parser: time.parser,
	            round: time.round,
	            isoWeekday: time.isoWeekday
	        };
	        super.init(scaleOpts);
	        this._normalized = opts.normalized;
	    }
	 parse(raw, index) {
	        if (raw === undefined) {
	            return null;
	        }
	        return parse(this, raw);
	    }
	    beforeLayout() {
	        super.beforeLayout();
	        this._cache = {
	            data: [],
	            labels: [],
	            all: []
	        };
	    }
	    determineDataLimits() {
	        const options = this.options;
	        const adapter = this._adapter;
	        const unit = options.time.unit || 'day';
	        let { min , max , minDefined , maxDefined  } = this.getUserBounds();
	 function _applyBounds(bounds) {
	            if (!minDefined && !isNaN(bounds.min)) {
	                min = Math.min(min, bounds.min);
	            }
	            if (!maxDefined && !isNaN(bounds.max)) {
	                max = Math.max(max, bounds.max);
	            }
	        }
	        if (!minDefined || !maxDefined) {
	            _applyBounds(this._getLabelBounds());
	            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {
	                _applyBounds(this.getMinMax(false));
	            }
	        }
	        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
	        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
	        this.min = Math.min(min, max - 1);
	        this.max = Math.max(min + 1, max);
	    }
	 _getLabelBounds() {
	        const arr = this.getLabelTimestamps();
	        let min = Number.POSITIVE_INFINITY;
	        let max = Number.NEGATIVE_INFINITY;
	        if (arr.length) {
	            min = arr[0];
	            max = arr[arr.length - 1];
	        }
	        return {
	            min,
	            max
	        };
	    }
	 buildTicks() {
	        const options = this.options;
	        const timeOpts = options.time;
	        const tickOpts = options.ticks;
	        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();
	        if (options.bounds === 'ticks' && timestamps.length) {
	            this.min = this._userMin || timestamps[0];
	            this.max = this._userMax || timestamps[timestamps.length - 1];
	        }
	        const min = this.min;
	        const max = this.max;
	        const ticks = _filterBetween(timestamps, min, max);
	        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
	        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);
	        this.initOffsets(timestamps);
	        if (options.reverse) {
	            ticks.reverse();
	        }
	        return ticksFromTimestamps(this, ticks, this._majorUnit);
	    }
	    afterAutoSkip() {
	        if (this.options.offsetAfterAutoskip) {
	            this.initOffsets(this.ticks.map((tick)=>+tick.value));
	        }
	    }
	 initOffsets(timestamps = []) {
	        let start = 0;
	        let end = 0;
	        let first, last;
	        if (this.options.offset && timestamps.length) {
	            first = this.getDecimalForValue(timestamps[0]);
	            if (timestamps.length === 1) {
	                start = 1 - first;
	            } else {
	                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
	            }
	            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
	            if (timestamps.length === 1) {
	                end = last;
	            } else {
	                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
	            }
	        }
	        const limit = timestamps.length < 3 ? 0.5 : 0.25;
	        start = _limitValue(start, 0, limit);
	        end = _limitValue(end, 0, limit);
	        this._offsets = {
	            start,
	            end,
	            factor: 1 / (start + 1 + end)
	        };
	    }
	 _generate() {
	        const adapter = this._adapter;
	        const min = this.min;
	        const max = this.max;
	        const options = this.options;
	        const timeOpts = options.time;
	        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));
	        const stepSize = valueOrDefault(options.ticks.stepSize, 1);
	        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;
	        const hasWeekday = isNumber(weekday) || weekday === true;
	        const ticks = {};
	        let first = min;
	        let time, count;
	        if (hasWeekday) {
	            first = +adapter.startOf(first, 'isoWeek', weekday);
	        }
	        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);
	        if (adapter.diff(max, min, minor) > 100000 * stepSize) {
	            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);
	        }
	        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();
	        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){
	            addTick(ticks, time, timestamps);
	        }
	        if (time === max || options.bounds === 'ticks' || count === 1) {
	            addTick(ticks, time, timestamps);
	        }
	        return Object.keys(ticks).sort(sorter).map((x)=>+x);
	    }
	 getLabelForValue(value) {
	        const adapter = this._adapter;
	        const timeOpts = this.options.time;
	        if (timeOpts.tooltipFormat) {
	            return adapter.format(value, timeOpts.tooltipFormat);
	        }
	        return adapter.format(value, timeOpts.displayFormats.datetime);
	    }
	 format(value, format) {
	        const options = this.options;
	        const formats = options.time.displayFormats;
	        const unit = this._unit;
	        const fmt = format || formats[unit];
	        return this._adapter.format(value, fmt);
	    }
	 _tickFormatFunction(time, index, ticks, format) {
	        const options = this.options;
	        const formatter = options.ticks.callback;
	        if (formatter) {
	            return callback(formatter, [
	                time,
	                index,
	                ticks
	            ], this);
	        }
	        const formats = options.time.displayFormats;
	        const unit = this._unit;
	        const majorUnit = this._majorUnit;
	        const minorFormat = unit && formats[unit];
	        const majorFormat = majorUnit && formats[majorUnit];
	        const tick = ticks[index];
	        const major = majorUnit && majorFormat && tick && tick.major;
	        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));
	    }
	 generateTickLabels(ticks) {
	        let i, ilen, tick;
	        for(i = 0, ilen = ticks.length; i < ilen; ++i){
	            tick = ticks[i];
	            tick.label = this._tickFormatFunction(tick.value, i, ticks);
	        }
	    }
	 getDecimalForValue(value) {
	        return value === null ? NaN : (value - this.min) / (this.max - this.min);
	    }
	 getPixelForValue(value) {
	        const offsets = this._offsets;
	        const pos = this.getDecimalForValue(value);
	        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
	    }
	 getValueForPixel(pixel) {
	        const offsets = this._offsets;
	        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
	        return this.min + pos * (this.max - this.min);
	    }
	 _getLabelSize(label) {
	        const ticksOpts = this.options.ticks;
	        const tickLabelWidth = this.ctx.measureText(label).width;
	        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
	        const cosRotation = Math.cos(angle);
	        const sinRotation = Math.sin(angle);
	        const tickFontSize = this._resolveTickFontOptions(0).size;
	        return {
	            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
	            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
	        };
	    }
	 _getLabelCapacity(exampleTime) {
	        const timeOpts = this.options.time;
	        const displayFormats = timeOpts.displayFormats;
	        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
	        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [
	            exampleTime
	        ], this._majorUnit), format);
	        const size = this._getLabelSize(exampleLabel);
	        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;
	        return capacity > 0 ? capacity : 1;
	    }
	 getDataTimestamps() {
	        let timestamps = this._cache.data || [];
	        let i, ilen;
	        if (timestamps.length) {
	            return timestamps;
	        }
	        const metas = this.getMatchingVisibleMetas();
	        if (this._normalized && metas.length) {
	            return this._cache.data = metas[0].controller.getAllParsedValues(this);
	        }
	        for(i = 0, ilen = metas.length; i < ilen; ++i){
	            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));
	        }
	        return this._cache.data = this.normalize(timestamps);
	    }
	 getLabelTimestamps() {
	        const timestamps = this._cache.labels || [];
	        let i, ilen;
	        if (timestamps.length) {
	            return timestamps;
	        }
	        const labels = this.getLabels();
	        for(i = 0, ilen = labels.length; i < ilen; ++i){
	            timestamps.push(parse(this, labels[i]));
	        }
	        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);
	    }
	 normalize(values) {
	        return _arrayUnique(values.sort(sorter));
	    }
	}

	function interpolate(table, val, reverse) {
	    let lo = 0;
	    let hi = table.length - 1;
	    let prevSource, nextSource, prevTarget, nextTarget;
	    if (reverse) {
	        if (val >= table[lo].pos && val <= table[hi].pos) {
	            ({ lo , hi  } = _lookupByKey(table, 'pos', val));
	        }
	        ({ pos: prevSource , time: prevTarget  } = table[lo]);
	        ({ pos: nextSource , time: nextTarget  } = table[hi]);
	    } else {
	        if (val >= table[lo].time && val <= table[hi].time) {
	            ({ lo , hi  } = _lookupByKey(table, 'time', val));
	        }
	        ({ time: prevSource , pos: prevTarget  } = table[lo]);
	        ({ time: nextSource , pos: nextTarget  } = table[hi]);
	    }
	    const span = nextSource - prevSource;
	    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
	}
	class TimeSeriesScale extends TimeScale {
	    static id = 'timeseries';
	 static defaults = TimeScale.defaults;
	 constructor(props){
	        super(props);
	         this._table = [];
	         this._minPos = undefined;
	         this._tableRange = undefined;
	    }
	 initOffsets() {
	        const timestamps = this._getTimestampsForTable();
	        const table = this._table = this.buildLookupTable(timestamps);
	        this._minPos = interpolate(table, this.min);
	        this._tableRange = interpolate(table, this.max) - this._minPos;
	        super.initOffsets(timestamps);
	    }
	 buildLookupTable(timestamps) {
	        const { min , max  } = this;
	        const items = [];
	        const table = [];
	        let i, ilen, prev, curr, next;
	        for(i = 0, ilen = timestamps.length; i < ilen; ++i){
	            curr = timestamps[i];
	            if (curr >= min && curr <= max) {
	                items.push(curr);
	            }
	        }
	        if (items.length < 2) {
	            return [
	                {
	                    time: min,
	                    pos: 0
	                },
	                {
	                    time: max,
	                    pos: 1
	                }
	            ];
	        }
	        for(i = 0, ilen = items.length; i < ilen; ++i){
	            next = items[i + 1];
	            prev = items[i - 1];
	            curr = items[i];
	            if (Math.round((next + prev) / 2) !== curr) {
	                table.push({
	                    time: curr,
	                    pos: i / (ilen - 1)
	                });
	            }
	        }
	        return table;
	    }
	 _generate() {
	        const min = this.min;
	        const max = this.max;
	        let timestamps = super.getDataTimestamps();
	        if (!timestamps.includes(min) || !timestamps.length) {
	            timestamps.splice(0, 0, min);
	        }
	        if (!timestamps.includes(max) || timestamps.length === 1) {
	            timestamps.push(max);
	        }
	        return timestamps.sort((a, b)=>a - b);
	    }
	 _getTimestampsForTable() {
	        let timestamps = this._cache.all || [];
	        if (timestamps.length) {
	            return timestamps;
	        }
	        const data = this.getDataTimestamps();
	        const label = this.getLabelTimestamps();
	        if (data.length && label.length) {
	            timestamps = this.normalize(data.concat(label));
	        } else {
	            timestamps = data.length ? data : label;
	        }
	        timestamps = this._cache.all = timestamps;
	        return timestamps;
	    }
	 getDecimalForValue(value) {
	        return (interpolate(this._table, value) - this._minPos) / this._tableRange;
	    }
	 getValueForPixel(pixel) {
	        const offsets = this._offsets;
	        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
	        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);
	    }
	}

	const defaultDatasetIdKey = "label";
	function reforwardRef(ref, value) {
	    if (typeof ref === "function") {
	        ref(value);
	    } else if (ref) {
	        ref.current = value;
	    }
	}
	function setOptions(chart, nextOptions) {
	    const options = chart.options;
	    if (options && nextOptions) {
	        Object.assign(options, nextOptions);
	    }
	}
	function setLabels(currentData, nextLabels) {
	    currentData.labels = nextLabels;
	}
	function setDatasets(currentData, nextDatasets) {
	    let datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;
	    const addedDatasets = [];
	    currentData.datasets = nextDatasets.map((nextDataset)=>{
	        // given the new set, find it's current match
	        const currentDataset = currentData.datasets.find((dataset)=>dataset[datasetIdKey] === nextDataset[datasetIdKey]);
	        // There is no original to update, so simply add new one
	        if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {
	            return {
	                ...nextDataset
	            };
	        }
	        addedDatasets.push(currentDataset);
	        Object.assign(currentDataset, nextDataset);
	        return currentDataset;
	    });
	}
	function cloneData(data) {
	    let datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;
	    const nextData = {
	        labels: [],
	        datasets: []
	    };
	    setLabels(nextData, data.labels);
	    setDatasets(nextData, data.datasets, datasetIdKey);
	    return nextData;
	}

	function ChartComponent(props, ref) {
	    const { height =150 , width =300 , redraw =false , datasetIdKey , type , data , options , plugins =[] , fallbackContent , updateMode , ...canvasProps } = props;
	    const canvasRef = e$1.useRef(null);
	    const chartRef = e$1.useRef();
	    const renderChart = ()=>{
	        if (!canvasRef.current) return;
	        chartRef.current = new Chart$1(canvasRef.current, {
	            type,
	            data: cloneData(data, datasetIdKey),
	            options: options && {
	                ...options
	            },
	            plugins
	        });
	        reforwardRef(ref, chartRef.current);
	    };
	    const destroyChart = ()=>{
	        reforwardRef(ref, null);
	        if (chartRef.current) {
	            chartRef.current.destroy();
	            chartRef.current = null;
	        }
	    };
	    e$1.useEffect(()=>{
	        if (!redraw && chartRef.current && options) {
	            setOptions(chartRef.current, options);
	        }
	    }, [
	        redraw,
	        options
	    ]);
	    e$1.useEffect(()=>{
	        if (!redraw && chartRef.current) {
	            setLabels(chartRef.current.config.data, data.labels);
	        }
	    }, [
	        redraw,
	        data.labels
	    ]);
	    e$1.useEffect(()=>{
	        if (!redraw && chartRef.current && data.datasets) {
	            setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);
	        }
	    }, [
	        redraw,
	        data.datasets
	    ]);
	    e$1.useEffect(()=>{
	        if (!chartRef.current) return;
	        if (redraw) {
	            destroyChart();
	            setTimeout(renderChart);
	        } else {
	            chartRef.current.update(updateMode);
	        }
	    }, [
	        redraw,
	        options,
	        data.labels,
	        data.datasets,
	        updateMode
	    ]);
	    e$1.useEffect(()=>{
	        if (!chartRef.current) return;
	        destroyChart();
	        setTimeout(renderChart);
	    }, [
	        type
	    ]);
	    e$1.useEffect(()=>{
	        renderChart();
	        return ()=>destroyChart();
	    }, []);
	    return /*#__PURE__*/ e$1.createElement("canvas", Object.assign({
	        ref: canvasRef,
	        role: "img",
	        height: height,
	        width: width
	    }, canvasProps), fallbackContent);
	}
	const Chart = /*#__PURE__*/ e$1.forwardRef(ChartComponent);

	function createTypedChart(type, registerables) {
	    Chart$1.register(registerables);
	    return /*#__PURE__*/ e$1.forwardRef((props, ref)=>/*#__PURE__*/ e$1.createElement(Chart, Object.assign({}, props, {
	            ref: ref,
	            type: type
	        })));
	}
	const Line = /* #__PURE__ */ createTypedChart("line", LineController);

	const Preloader = e$1.memo(({
	  loading,
	  isOverlay = true,
	  children
	}) => {
	  const baseClass = "mpa-preloader";
	  const visibilityClass = loading ? "mpa-preloader--loading" : "";
	  const typeClass = isOverlay ? "mpa-preloader--overlay" : "";
	  const preloaderClass = `${baseClass} ${visibilityClass} ${typeClass}`;
	  if (!loading) {
	    return wp.element.createElement(e$1.Fragment, null, children);
	  }
	  return wp.element.createElement("div", {
	    className: preloaderClass
	  }, wp.element.createElement("div", {
	    className: "mpa-preloader__spinner"
	  }), children);
	});

	const NO_DATA_TEXT = __('No data for the selected date range', 'motopress-appointment');
	const ChartWrapper = ({
	  isDataEmpty,
	  children,
	  loading
	}) => {
	  return wp.element.createElement("div", {
	    className: "mpa-chart-container"
	  }, wp.element.createElement(Preloader, {
	    loading: loading,
	    isOverlay: false
	  }), children, isDataEmpty && !loading ? wp.element.createElement("div", {
	    className: "mpa-no-data"
	  }, NO_DATA_TEXT) : null);
	};

	/*!
	  * chartjs-adapter-moment v1.0.1
	  * https://www.chartjs.org
	  * (c) 2022 chartjs-adapter-moment Contributors
	  * Released under the MIT license
	  */

	const FORMATS = {
	  datetime: 'MMM D, YYYY, h:mm:ss a',
	  millisecond: 'h:mm:ss.SSS a',
	  second: 'h:mm:ss a',
	  minute: 'h:mm a',
	  hour: 'hA',
	  day: 'MMM D',
	  week: 'll',
	  month: 'MMM YYYY',
	  quarter: '[Q]Q - YYYY',
	  year: 'YYYY'
	};

	adapters._date.override(typeof moment === 'function' ? {
	  _id: 'moment', // DEBUG ONLY

	  formats: function() {
	    return FORMATS;
	  },

	  parse: function(value, format) {
	    if (typeof value === 'string' && typeof format === 'string') {
	      value = moment(value, format);
	    } else if (!(value instanceof moment)) {
	      value = moment(value);
	    }
	    return value.isValid() ? value.valueOf() : null;
	  },

	  format: function(time, format) {
	    return moment(time).format(format);
	  },

	  add: function(time, amount, unit) {
	    return moment(time).add(amount, unit).valueOf();
	  },

	  diff: function(max, min, unit) {
	    return moment(max).diff(moment(min), unit);
	  },

	  startOf: function(time, unit, weekday) {
	    time = moment(time);
	    if (unit === 'isoWeek') {
	      weekday = Math.trunc(Math.min(Math.max(0, weekday), 6));
	      return time.isoWeekday(weekday).startOf('day').valueOf();
	    }
	    return time.startOf(unit).valueOf();
	  },

	  endOf: function(time, unit) {
	    return moment(time).endOf(unit).valueOf();
	  }
	} : {});

	Chart$1.register(CategoryScale, LinearScale, PointElement, LineElement, plugin_title, plugin_tooltip, plugin_legend, TimeScale);
	const GenericChart = ({
	  data,
	  loading,
	  period,
	  scale = 'By hour',
	  title,
	  label = '',
	  unit = '',
	  aggregator,
	  getFormats
	}) => {
	  const {
	    labels,
	    datasets,
	    totalMetric
	  } = aggregator(data, period, scale, label);
	  const {
	    tooltipFormat,
	    displayFormat
	  } = getFormats(scale);
	  const chartData = {
	    labels: labels,
	    datasets: datasets
	  };
	  const options = {
	    maintainAspectRatio: false,
	    responsive: true,
	    plugins: {
	      legend: {
	        position: 'bottom'
	      },
	      title: {
	        display: true,
	        text: `${title}: ${totalMetric}` + (unit ? ` ${unit}` : ``)
	      },
	      tooltip: {
	        callbacks: {
	          label: function (context) {
	            let label = context.dataset.label || '';
	            if (label) {
	              label += ': ';
	            }
	            if (context.parsed.y !== null) {
	              label += context.parsed.y + (unit ? ` ${unit}` : ``);
	            }
	            return label;
	          }
	        }
	      }
	    },
	    scales: {
	      x: {
	        type: 'time',
	        time: {
	          tooltipFormat: tooltipFormat,
	          displayFormats: {
	            millisecond: displayFormat,
	            second: displayFormat,
	            minute: displayFormat,
	            hour: displayFormat,
	            day: displayFormat,
	            week: displayFormat,
	            month: displayFormat,
	            quarter: displayFormat,
	            year: displayFormat
	          }
	        },
	        ticks: {
	          autoSkip: true,
	          maxTicksLimit: 12,
	          source: 'data'
	        },
	        title: {
	          display: true,
	          text: 'Date'
	        }
	      },
	      y: {
	        beginAtZero: true,
	        ticks: {
	          autoSkip: true,
	          maxTicksLimit: 6,
	          source: 'data'
	        },
	        title: {
	          display: true,
	          text: unit ? `${label}, ${unit}` : label
	        }
	      }
	    }
	  };
	  const isDataEmpty = !chartData.datasets || chartData.datasets.every(dataset => !dataset.data || dataset.data.length === 0);
	  const [windowSize, setWindowSize] = e$1.useState({
	    width: window.innerWidth,
	    height: window.innerHeight
	  });
	  e$1.useEffect(() => {
	    const handleResize = () => {
	      setWindowSize({
	        width: window.innerWidth,
	        height: window.innerHeight
	      });
	    };
	    window.addEventListener('resize', handleResize);
	    return () => {
	      window.removeEventListener('resize', handleResize);
	    };
	  }, []);
	  return wp.element.createElement(ChartWrapper, {
	    isDataEmpty: isDataEmpty,
	    loading: loading
	  }, wp.element.createElement(Line, {
	    key: windowSize.width + windowSize.height,
	    options: options,
	    data: chartData
	  }));
	};

	const getDisplayFormats = scale => {
	  const timeFormat = php_to_moment_format(mpaData.settings.time_format);
	  const dateFormat = php_to_moment_format(mpaData.settings.date_format);
	  let customTooltipFormat;
	  let customDisplayFormat;
	  switch (scale) {
	    case 'By hour':
	      customTooltipFormat = timeFormat;
	      customDisplayFormat = timeFormat;
	      break;
	    case 'By day':
	      customTooltipFormat = dateFormat;
	      customDisplayFormat = dateFormat;
	      break;
	    case 'By week':
	      customTooltipFormat = '[Week of] W/GGGG';
	      customDisplayFormat = '[Week of] W/GGGG';
	      break;
	    case 'By month':
	      customTooltipFormat = 'YYYY-MM';
	      customDisplayFormat = 'MMMM YYYY';
	      break;
	    case 'By quarter':
	      customTooltipFormat = 'YYYY-[Q]Q';
	      customDisplayFormat = 'YYYY-[Q]Q';
	      break;
	    case 'By year':
	      customTooltipFormat = 'YYYY';
	      customDisplayFormat = 'YYYY';
	      break;
	    default:
	      customTooltipFormat = `${dateFormat} ${timeFormat}`;
	      customDisplayFormat = `${dateFormat} ${timeFormat}`;
	      break;
	  }
	  return {
	    tooltipFormat: customTooltipFormat,
	    displayFormat: customDisplayFormat
	  };
	};

	const getMomentFormat = scale => {
	  switch (scale) {
	    case 'By hour':
	      return 'YYYY-MM-DD HH:00';
	    case 'By day':
	      return 'YYYY-MM-DD';
	    case 'By week':
	      return 'GGGG-[W]WW';
	    case 'By month':
	      return 'YYYY-MM';
	    case 'By quarter':
	      return 'YYYY-MM';
	    case 'By year':
	      return 'YYYY';
	    default:
	      return 'YYYY-MM-DD HH:00';
	  }
	};
	const scaleToUnit = {
	  'By hour': 'hours',
	  'By day': 'days',
	  'By week': 'weeks',
	  'By month': 'months',
	  'By quarter': 'quarters',
	  'By year': 'years'
	};
	const generateTimeKeys = (date_start, date_end, scale) => {
	  const keys = [];
	  let current = moment(date_start);
	  const momentFormat = getMomentFormat(scale);
	  const timeUnit = scaleToUnit[scale] || 'hours';
	  while (current.isBefore(date_end) || current.isSame(date_end)) {
	    keys.push(current.format(momentFormat));
	    current.add(1, timeUnit);
	  }
	  return keys;
	};
	const initializeAggregation = keys => {
	  const aggregation = {};
	  keys.forEach(key => {
	    aggregation[key] = 0;
	  });
	  return aggregation;
	};
	const generateKeys = (data, period, scale) => {
	  let uniqueHours = new Set();
	  data.forEach(reservation => {
	    let hourKey = moment(reservation.start).format('YYYY-MM-DD HH:mm');
	    uniqueHours.add(hourKey);
	  });
	  uniqueHours = Array.from(uniqueHours);
	  return scale === 'By hour' ? uniqueHours : generateTimeKeys(period.date_start, period.date_end, scale);
	};
	const createDataset = (label, values, color = '#007cba') => {
	  const chartDataColor = chroma(color);
	  const chartDataBorderColor = chartDataColor.darken(1);
	  return {
	    label: label,
	    data: values,
	    backgroundColor: chartDataColor,
	    borderColor: chartDataBorderColor,
	    borderWidth: 1,
	    fill: false
	  };
	};
	const createDatasets = (aggregation, keys) => {
	  return Object.keys(aggregation).map(groupKey => createDataset(groupKey, keys.map(k => aggregation[groupKey][k])));
	};
	const aggregateData = (data, keys, scale, callback, groupKeyCallback) => {
	  let totalMetric = 0;
	  let aggregation = {};
	  data.forEach(entry => {
	    const key = moment(entry.start).format(getMomentFormat(scale));
	    const groupKey = groupKeyCallback(entry);
	    const delta = callback(entry);
	    if (groupKey === null) {
	      return;
	    }
	    if (!aggregation[groupKey]) {
	      aggregation[groupKey] = initializeAggregation(keys);
	    }
	    aggregation[groupKey][key] += delta;
	    totalMetric += delta;
	  });
	  return {
	    aggregation,
	    totalMetric
	  };
	};
	const processData = (data, period, scale, callback, groupKeyGetter = null) => {
	  const keys = generateKeys(data, period, scale);
	  const {
	    aggregation,
	    totalMetric
	  } = aggregateData(data, keys, scale, callback, groupKeyGetter);
	  return {
	    labels: keys,
	    datasets: createDatasets(aggregation, keys),
	    totalMetric
	  };
	};

	const emptyData = (data, period, scale, label = '') => {
	  return processData(data, period, scale, () => 0, entry => label);
	};
	const aggregateRevenueData = (data, period, scale, label = '') => {
	  return processData(data, period, scale, entry => entry.rich_info.reservation.price, entry => label);
	};
	const aggregateRevenueByEmployee = (data, period, scale, label = '') => {
	  return processData(data, period, scale, entry => entry.rich_info.reservation.price, entry => {
	    var _entry$rich_info$empl;
	    return (_entry$rich_info$empl = entry.rich_info.employee.name) !== null && _entry$rich_info$empl !== void 0 ? _entry$rich_info$empl : '';
	  });
	};
	const aggregateRevenueByLocation = (data, period, scale, label = '') => {
	  return processData(data, period, scale, entry => entry.rich_info.reservation.price, entry => {
	    var _entry$rich_info$loca;
	    return (_entry$rich_info$loca = entry.rich_info.location.title) !== null && _entry$rich_info$loca !== void 0 ? _entry$rich_info$loca : '';
	  });
	};
	const aggregateRevenueByService = (data, period, scale, label = '') => {
	  return processData(data, period, scale, entry => entry.rich_info.reservation.price, entry => {
	    var _entry$rich_info$serv;
	    return (_entry$rich_info$serv = entry.rich_info.service.title) !== null && _entry$rich_info$serv !== void 0 ? _entry$rich_info$serv : '';
	  });
	};
	const aggregateNumberOfReservations = (data, period, scale, label = '') => {
	  return processData(data, period, scale, () => 1, entry => label);
	};
	const aggregateNumberOfReservationsByService = (data, period, scale, label = '') => {
	  return processData(data, period, scale, () => 1, entry => {
	    var _entry$rich_info$serv2;
	    return (_entry$rich_info$serv2 = entry.rich_info.service.title) !== null && _entry$rich_info$serv2 !== void 0 ? _entry$rich_info$serv2 : '';
	  });
	};
	const aggregateNumberOfReservationsByLocation = (data, period, scale, label = '') => {
	  return processData(data, period, scale, () => 1, entry => {
	    var _entry$rich_info$loca2;
	    return (_entry$rich_info$loca2 = entry.rich_info.location.title) !== null && _entry$rich_info$loca2 !== void 0 ? _entry$rich_info$loca2 : '';
	  });
	};
	const aggregateNumberOfReservationsByEmployee = (data, period, scale, label = '') => {
	  return processData(data, period, scale, () => 1, entry => {
	    var _entry$rich_info$empl2;
	    return (_entry$rich_info$empl2 = entry.rich_info.employee.name) !== null && _entry$rich_info$empl2 !== void 0 ? _entry$rich_info$empl2 : '';
	  });
	};
	const aggregateCouponUsage = (data, period, scale, label = '') => {
	  return processData(data, period, scale, entry => entry.rich_info.coupon.id ? 1 : 0, entry => label);
	};
	const aggregateCouponUsageByCouponCode = (data, period, scale, label = '') => {
	  const {
	    couponStore
	  } = useStores();
	  return processData(data, period, scale, entry => {
	    return entry.rich_info.coupon.id ? 1 : 0;
	  }, entry => {
	    const couponCode = couponStore.getCouponById(entry.rich_info.coupon.id);
	    return couponCode?.code ? couponCode?.code : null;
	  });
	};
	const calcTotalDiscount = entry => {
	  const {
	    couponStore,
	    filtersStore
	  } = useStores();
	  let discount = 0;
	  if (entry.rich_info.coupon.id === 0) {
	    return 0;
	  }
	  const coupon = couponStore.getCouponById(entry.rich_info.coupon.id);
	  if (!coupon?.code || !coupon?.amount || !coupon?.type) {
	    return 0;
	  }
	  const reservationPrice = entry.rich_info.reservation.price;
	  switch (coupon.type) {
	    case 'fixed':
	      discount = coupon.amount;
	      break;
	    case 'percentage':
	      if (reservationPrice === 0) {
	        const service = filtersStore.services.find(service => service.value === entry.rich_info.service.id);
	        if (service) {
	          discount = service.price;
	        }
	        break;
	      }
	      const reservationPriceWithoutCouponSale = reservationPrice / (1 - coupon.amount / 100);
	      discount = reservationPriceWithoutCouponSale - reservationPrice;
	      break;
	  }
	  if (discount > reservationPrice) {
	    return reservationPrice;
	  }
	  return discount;
	};
	const aggregateCouponUsageByTotalDiscounts = (data, period, scale, label = '') => {
	  return processData(data, period, scale, entry => calcTotalDiscount(entry), entry => label);
	};
	const aggregateCouponUsageByDiscounts = (data, period, scale, label = '') => {
	  const {
	    couponStore
	  } = useStores();
	  return processData(data, period, scale, entry => calcTotalDiscount(entry), entry => {
	    const couponCode = couponStore.getCouponById(entry.rich_info.coupon.id);
	    return couponCode?.code ? couponCode?.code : null;
	  });
	};
	const aggregatePaymentsTotalNumber = (data, period, scale, label = '') => {
	  const payments = combineDataByPaymentId(data);
	  return processData(payments, period, scale, payment => {
	    return 1;
	  }, payment => {
	    var _mpaData$gateways$pay;
	    return (_mpaData$gateways$pay = mpaData$1?.gateways?.[payment.gateway_id]) !== null && _mpaData$gateways$pay !== void 0 ? _mpaData$gateways$pay : payment.gateway_id;
	  });
	};
	function combineDataByPaymentId(data) {
	  let payments = [];
	  data.map(function (dataItem) {
	    dataItem.rich_info.payments.map(function (payment) {
	      payment.start = dataItem.start;
	      payment.end = dataItem.end;
	      payments[payment.id] = payment;
	    });
	  });
	  return payments;
	}
	const aggregatePaymentsByPaymentGateway = (data, period, scale, label = '') => {
	  const payments = combineDataByPaymentId(data);
	  return processData(payments, period, scale, payment => {
	    return payment.amount;
	  }, payment => {
	    var _mpaData$gateways$pay2;
	    if (payment.amount === 0) {
	      return null;
	    }
	    return (_mpaData$gateways$pay2 = mpaData$1?.gateways?.[payment.gateway_id]) !== null && _mpaData$gateways$pay2 !== void 0 ? _mpaData$gateways$pay2 : payment.gateway_id;
	  });
	};

	const RevenueTotalChart = props => {
	  const {
	    eventStore,
	    urlFiltersStore
	  } = useStores();
	  return wp.element.createElement(ObserverComponent, null, () => wp.element.createElement(GenericChart, _extends({
	    data: eventStore.events,
	    loading: eventStore.loading,
	    period: {
	      date_start: urlFiltersStore.getDateStart(),
	      date_end: urlFiltersStore.getDateEnd()
	    },
	    scale: urlFiltersStore.getAggregateBy(),
	    title: __('Total Revenue', 'motopress-appointment'),
	    label: __('Revenue', 'motopress-appointment'),
	    unit: mpaData$1.settings.currency,
	    aggregator: eventStore.loading ? emptyData : aggregateRevenueData,
	    getFormats: getDisplayFormats
	  }, props)));
	};

	const RevenueByServicesChart = props => {
	  const {
	    eventStore,
	    urlFiltersStore
	  } = useStores();
	  return wp.element.createElement(ObserverComponent, null, () => wp.element.createElement(GenericChart, _extends({
	    data: eventStore.events,
	    loading: eventStore.loading,
	    period: {
	      date_start: urlFiltersStore.getDateStart(),
	      date_end: urlFiltersStore.getDateEnd()
	    },
	    scale: urlFiltersStore.getAggregateBy(),
	    title: __('Total Revenue', 'motopress-appointment'),
	    label: __('Revenue', 'motopress-appointment'),
	    unit: mpaData$1.settings.currency,
	    aggregator: eventStore.loading ? emptyData : aggregateRevenueByService,
	    getFormats: getDisplayFormats
	  }, props)));
	};

	const RevenueByEmployeesChart = props => {
	  const {
	    eventStore,
	    urlFiltersStore
	  } = useStores();
	  return wp.element.createElement(ObserverComponent, null, () => wp.element.createElement(GenericChart, _extends({
	    data: eventStore.events,
	    loading: eventStore.loading,
	    period: {
	      date_start: urlFiltersStore.getDateStart(),
	      date_end: urlFiltersStore.getDateEnd()
	    },
	    scale: urlFiltersStore.getAggregateBy(),
	    title: __('Total Revenue', 'motopress-appointment'),
	    label: __('Revenue', 'motopress-appointment'),
	    unit: mpaData$1.settings.currency,
	    aggregator: eventStore.loading ? emptyData : aggregateRevenueByEmployee,
	    getFormats: getDisplayFormats
	  }, props)));
	};

	const RevenueByLocationsChart = props => {
	  const {
	    eventStore,
	    urlFiltersStore
	  } = useStores();
	  return wp.element.createElement(ObserverComponent, null, () => wp.element.createElement(GenericChart, _extends({
	    data: eventStore.events,
	    loading: eventStore.loading,
	    period: {
	      date_start: urlFiltersStore.getDateStart(),
	      date_end: urlFiltersStore.getDateEnd()
	    },
	    scale: urlFiltersStore.getAggregateBy(),
	    title: __('Total Revenue', 'motopress-appointment'),
	    label: __('Revenue', 'motopress-appointment'),
	    unit: mpaData$1.settings.currency,
	    aggregator: eventStore.loading ? emptyData : aggregateRevenueByLocation,
	    getFormats: getDisplayFormats
	  }, props)));
	};

	const ReservationsTotalChart = props => {
	  const {
	    eventStore,
	    urlFiltersStore
	  } = useStores();
	  return wp.element.createElement(ObserverComponent, null, () => wp.element.createElement(GenericChart, _extends({
	    data: eventStore.events,
	    loading: eventStore.loading,
	    period: {
	      date_start: urlFiltersStore.getDateStart(),
	      date_end: urlFiltersStore.getDateEnd()
	    },
	    scale: urlFiltersStore.getAggregateBy(),
	    title: __('Total Number of Reservations', 'motopress-appointment'),
	    label: __('Number of Reservations', 'motopress-appointment'),
	    aggregator: eventStore.loading ? emptyData : aggregateNumberOfReservations,
	    getFormats: getDisplayFormats
	  }, props)));
	};

	const ReservationsByServicesChart = props => {
	  const {
	    eventStore,
	    urlFiltersStore
	  } = useStores();
	  return wp.element.createElement(ObserverComponent, null, () => wp.element.createElement(GenericChart, _extends({
	    data: eventStore.events,
	    loading: eventStore.loading,
	    period: {
	      date_start: urlFiltersStore.getDateStart(),
	      date_end: urlFiltersStore.getDateEnd()
	    },
	    scale: urlFiltersStore.getAggregateBy(),
	    title: __('Total Number of Reservations', 'motopress-appointment'),
	    label: __('Number of Reservations', 'motopress-appointment'),
	    aggregator: eventStore.loading ? emptyData : aggregateNumberOfReservationsByService,
	    getFormats: getDisplayFormats
	  }, props)));
	};

	const ReservationsByEmployeesChart = props => {
	  const {
	    eventStore,
	    urlFiltersStore
	  } = useStores();
	  return wp.element.createElement(ObserverComponent, null, () => wp.element.createElement(GenericChart, _extends({
	    data: eventStore.events,
	    loading: eventStore.loading,
	    period: {
	      date_start: urlFiltersStore.getDateStart(),
	      date_end: urlFiltersStore.getDateEnd()
	    },
	    scale: urlFiltersStore.getAggregateBy(),
	    title: __('Total Number of Reservations', 'motopress-appointment'),
	    label: __('Number of Reservations', 'motopress-appointment'),
	    aggregator: eventStore.loading ? emptyData : aggregateNumberOfReservationsByEmployee,
	    getFormats: getDisplayFormats
	  }, props)));
	};

	const ReservationsByLocationsChart = props => {
	  const {
	    eventStore,
	    urlFiltersStore
	  } = useStores();
	  return wp.element.createElement(ObserverComponent, null, () => wp.element.createElement(GenericChart, _extends({
	    data: eventStore.events,
	    loading: eventStore.loading,
	    period: {
	      date_start: urlFiltersStore.getDateStart(),
	      date_end: urlFiltersStore.getDateEnd()
	    },
	    scale: urlFiltersStore.getAggregateBy(),
	    title: __('Total Number of Reservations', 'motopress-appointment'),
	    label: __('Number of Reservations', 'motopress-appointment'),
	    aggregator: eventStore.loading ? emptyData : aggregateNumberOfReservationsByLocation,
	    getFormats: getDisplayFormats
	  }, props)));
	};

	const CouponsTotalChart = props => {
	  const {
	    eventStore,
	    urlFiltersStore,
	    couponStore
	  } = useStores();
	  return wp.element.createElement(ObserverComponent, null, () => wp.element.createElement(GenericChart, _extends({
	    data: eventStore.events,
	    loading: eventStore.loading,
	    period: {
	      date_start: urlFiltersStore.getDateStart(),
	      date_end: urlFiltersStore.getDateEnd()
	    },
	    scale: urlFiltersStore.getAggregateBy(),
	    title: __('Total Number of Coupons Used', 'motopress-appointment'),
	    label: __('Coupons Usage', 'motopress-appointment'),
	    aggregator: eventStore.loading ? emptyData : aggregateCouponUsage,
	    getFormats: getDisplayFormats
	  }, props)));
	};

	const CouponsTotalDiscountChart = props => {
	  const {
	    eventStore,
	    urlFiltersStore
	  } = useStores();
	  return wp.element.createElement(ObserverComponent, null, () => wp.element.createElement(GenericChart, _extends({
	    data: eventStore.events,
	    loading: eventStore.loading,
	    period: {
	      date_start: urlFiltersStore.getDateStart(),
	      date_end: urlFiltersStore.getDateEnd()
	    },
	    scale: urlFiltersStore.getAggregateBy(),
	    title: __('Total Discount Amount', 'motopress-appointment'),
	    label: __('Amount of Discounts', 'motopress-appointment'),
	    unit: mpaData$1.settings.currency,
	    aggregator: eventStore.loading ? emptyData : aggregateCouponUsageByTotalDiscounts,
	    getFormats: getDisplayFormats
	  }, props)));
	};

	const CouponsByCouponCodeChart = props => {
	  const {
	    eventStore,
	    urlFiltersStore,
	    couponStore
	  } = useStores();
	  return wp.element.createElement(ObserverComponent, null, () => wp.element.createElement(GenericChart, _extends({
	    data: eventStore.events,
	    loading: eventStore.loading || !couponStore.loaded,
	    period: {
	      date_start: urlFiltersStore.getDateStart(),
	      date_end: urlFiltersStore.getDateEnd()
	    },
	    scale: urlFiltersStore.getAggregateBy(),
	    title: __('Total Number of Coupons Used', 'motopress-appointment'),
	    label: __('Coupons Usage', 'motopress-appointment'),
	    aggregator: eventStore.loading || !couponStore.loaded ? emptyData : aggregateCouponUsageByCouponCode,
	    getFormats: getDisplayFormats
	  }, props)));
	};

	const CouponsByDiscountsChart = props => {
	  const {
	    eventStore,
	    urlFiltersStore,
	    couponStore
	  } = useStores();
	  return wp.element.createElement(ObserverComponent, null, () => wp.element.createElement(GenericChart, _extends({
	    data: eventStore.events,
	    loading: eventStore.loading || !couponStore.loaded,
	    period: {
	      date_start: urlFiltersStore.getDateStart(),
	      date_end: urlFiltersStore.getDateEnd()
	    },
	    scale: urlFiltersStore.getAggregateBy(),
	    title: __('Total Discount Amount', 'motopress-appointment'),
	    label: __('Amount of Discounts', 'motopress-appointment'),
	    unit: mpaData$1.settings.currency,
	    aggregator: eventStore.loading || !couponStore.loaded ? emptyData : aggregateCouponUsageByDiscounts,
	    getFormats: getDisplayFormats
	  }, props)));
	};

	const PaymentsByPaymentGatewayChart = props => {
	  const {
	    eventStore,
	    urlFiltersStore
	  } = useStores();
	  return wp.element.createElement(ObserverComponent, null, () => wp.element.createElement(GenericChart, _extends({
	    data: eventStore.events,
	    loading: eventStore.loading,
	    period: {
	      date_start: urlFiltersStore.getDateStart(),
	      date_end: urlFiltersStore.getDateEnd()
	    },
	    scale: urlFiltersStore.getAggregateBy(),
	    title: __('Total Revenue', 'motopress-appointment'),
	    label: __('Payment Gateway', 'motopress-appointment'),
	    unit: mpaData$1.settings.currency,
	    aggregator: eventStore.loading ? emptyData : aggregatePaymentsByPaymentGateway,
	    getFormats: getDisplayFormats
	  }, props)));
	};

	const PaymentsTotalNumberChart = props => {
	  const {
	    eventStore,
	    urlFiltersStore
	  } = useStores();
	  return wp.element.createElement(ObserverComponent, null, () => wp.element.createElement(GenericChart, _extends({
	    data: eventStore.events,
	    loading: eventStore.loading,
	    period: {
	      date_start: urlFiltersStore.getDateStart(),
	      date_end: urlFiltersStore.getDateEnd()
	    },
	    scale: urlFiltersStore.getAggregateBy(),
	    title: __('Total Number of Payments', 'motopress-appointment'),
	    label: __('Number of Payments', 'motopress-appointment'),
	    aggregator: eventStore.loading ? emptyData : aggregatePaymentsTotalNumber,
	    getFormats: getDisplayFormats
	  }, props)));
	};

	const getRevenueCharts = () => {
	  return [{
	    name: __('Total Overview', 'motopress-appointment'),
	    component: RevenueTotalChart
	  }, {
	    name: __('By Services', 'motopress-appointment'),
	    component: RevenueByServicesChart
	  }, {
	    name: __('By Employees', 'motopress-appointment'),
	    component: RevenueByEmployeesChart
	  }, {
	    name: __('By Locations', 'motopress-appointment'),
	    component: RevenueByLocationsChart
	  }];
	};
	const getNumberOfReservationsCharts = () => {
	  return [{
	    name: __('Total Overview', 'motopress-appointment'),
	    component: ReservationsTotalChart
	  }, {
	    name: __('By Services', 'motopress-appointment'),
	    component: ReservationsByServicesChart
	  }, {
	    name: __('By Employees', 'motopress-appointment'),
	    component: ReservationsByEmployeesChart
	  }, {
	    name: __('By Locations', 'motopress-appointment'),
	    component: ReservationsByLocationsChart
	  }];
	};
	const getCouponsCharts = () => {
	  return [{
	    name: __('Total Number of Coupons Used', 'motopress-appointment'),
	    component: CouponsTotalChart
	  }, {
	    name: __('Total Discount Amount', 'motopress-appointment'),
	    component: CouponsTotalDiscountChart
	  }, {
	    name: __('Number of Coupons Used by Coupon Code', 'motopress-appointment'),
	    component: CouponsByCouponCodeChart
	  }, {
	    name: __('Amount of Discount by Coupon Code', 'motopress-appointment'),
	    component: CouponsByDiscountsChart
	  }];
	};
	const getPaymentsCharts = () => {
	  return [{
	    name: __('Total Number of Payments', 'motopress-appointment'),
	    component: PaymentsTotalNumberChart
	  }, {
	    name: __('Amount by Payment Gateway', 'motopress-appointment'),
	    component: PaymentsByPaymentGatewayChart
	  }];
	};

	const ChartContainer = ({
	  title,
	  children
	}) => wp.element.createElement("div", {
	  className: "mpa-analytics__chart"
	}, wp.element.createElement("h2", {
	  className: "mpa-analytics__chart-title"
	}, title), wp.element.createElement("div", {
	  className: "mpa-analytics__chart-container"
	}, children));

	const {
	  SelectControl
	} = wp.components;
	const GroupedChart = ({
	  groupLabel,
	  charts,
	  selectedChart,
	  setSelectedChart
	}) => {
	  const SelectedChartComponent = charts.find(chart => chart.name === selectedChart)?.component;
	  return wp.element.createElement(ChartContainer, {
	    title: groupLabel
	  }, wp.element.createElement(SelectControl, {
	    value: selectedChart,
	    options: charts.map(chart => ({
	      label: chart.name,
	      value: chart.name
	    })),
	    onChange: value => setSelectedChart(value)
	  }), SelectedChartComponent && wp.element.createElement(SelectedChartComponent, null));
	};
	var GroupedChart$1 = e$1.memo(GroupedChart);

	const AnalyticsPage = () => {
	  const {
	    urlFiltersStore,
	    filtersStore
	  } = useStores();
	  const [showDatePicker, setShowDatePicker] = e$1.useState(false);
	  const revenueCharts = getRevenueCharts();
	  const numberOfReservationsCharts = getNumberOfReservationsCharts();
	  const couponsCharts = getCouponsCharts();
	  const paymentsCharts = getPaymentsCharts();
	  const [selectedRevenueChart, setSelectedRevenueChart] = e$1.useState(revenueCharts[0]?.name);
	  const [selectedReservationChart, setSelectedReservationChart] = e$1.useState(numberOfReservationsCharts[0]?.name);
	  const [selectedCouponChart, setSelectedCouponChart] = e$1.useState(couponsCharts[0]?.name);
	  const [selectedPaymentChart, setSelectedPaymentChart] = e$1.useState(paymentsCharts[0]?.name);
	  return wp.element.createElement(ObserverComponent, null, () => wp.element.createElement("div", {
	    className: "mpa-analytics"
	  }, wp.element.createElement("div", {
	    className: "mpa-analytics__header"
	  }, wp.element.createElement("h1", {
	    className: "wp-heading-inline"
	  }, __('Analytics', 'motopress-appointment'))), wp.element.createElement("div", {
	    className: "mpa-analytics__entity-filter"
	  }, wp.element.createElement(EntityFilters, {
	    urlFiltersStore: urlFiltersStore,
	    filtersStore: filtersStore
	  })), wp.element.createElement("div", {
	    className: "mpa-analytics__date-filter"
	  }, wp.element.createElement("div", {
	    className: "date-filter-wrapper"
	  }, wp.element.createElement("div", {
	    className: "date-filter-wrapper__column-left"
	  }, wp.element.createElement("div", {
	    className: "mpa-analytics__date-filter-select"
	  }, wp.element.createElement(DateRangeSelect, {
	    urlFiltersStore: urlFiltersStore,
	    setShowDatePicker: setShowDatePicker,
	    showDatePicker: showDatePicker
	  }))), wp.element.createElement("div", {
	    className: "date-filter-wrapper__column-right"
	  }, wp.element.createElement(ToggleGroupControl, {
	    options: getPossibleAggregateOptions(urlFiltersStore.getDateStart(), urlFiltersStore.getDateEnd()),
	    selected: urlFiltersStore.getAggregateBy(),
	    onSelect: aggregateBy => {
	      urlFiltersStore.setAggregateBy(aggregateBy);
	      urlFiltersStore.updateHistory();
	    }
	  }))), wp.element.createElement("div", {
	    className: "mpa-analytics__date-filter-display"
	  }, wp.element.createElement(DateRangeDisplay, {
	    startDate: urlFiltersStore.getDateStart(),
	    endDate: urlFiltersStore.getDateEnd(),
	    onClick: () => setShowDatePicker(true)
	  }))), wp.element.createElement("div", {
	    className: "mpa-analytics__charts"
	  }, wp.element.createElement(GroupedChart$1, {
	    groupLabel: __('Revenue', 'motopress-appointment'),
	    charts: revenueCharts,
	    selectedChart: selectedRevenueChart,
	    setSelectedChart: setSelectedRevenueChart
	  }), wp.element.createElement(GroupedChart$1, {
	    groupLabel: __('Reservations', 'motopress-appointment'),
	    charts: numberOfReservationsCharts,
	    selectedChart: selectedReservationChart,
	    setSelectedChart: setSelectedReservationChart
	  }), wp.element.createElement(GroupedChart$1, {
	    groupLabel: __('Coupons', 'motopress-appointment'),
	    charts: couponsCharts,
	    selectedChart: selectedCouponChart,
	    setSelectedChart: setSelectedCouponChart
	  }), wp.element.createElement(GroupedChart$1, {
	    groupLabel: __('Payments', 'motopress-appointment'),
	    charts: paymentsCharts,
	    selectedChart: selectedPaymentChart,
	    setSelectedChart: setSelectedPaymentChart
	  }))));
	};

	const {
	  createRoot,
	  render
	} = wp.element;
	const domElement = document.getElementById('app');

	// Condition for backward compatibility with WordPress version below 6.2
	if (createRoot) {
	  createRoot(domElement).render(wp.element.createElement(AnalyticsPage, null));
	} else {
	  render(wp.element.createElement(AnalyticsPage, null), domElement);
	}

})(React, ReactDOM, mpaData, WPAPI, wp.components);
